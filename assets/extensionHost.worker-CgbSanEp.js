var uR = Object.defineProperty;
var ZS = (i) => {
  throw TypeError(i);
};
var dR = (i, e, t) => e in i ? uR(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var Ot = (i, e, t) => dR(i, typeof e != "symbol" ? e + "" : e, t), jv = (i, e, t) => e.has(i) || ZS("Cannot " + t);
var N = (i, e, t) => (jv(i, e, "read from private field"), t ? t.call(i) : e.get(i)), ye = (i, e, t) => e.has(i) ? ZS("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(i) : e.set(i, t), le = (i, e, t, n) => (jv(i, e, "write to private field"), n ? n.call(i, t) : e.set(i, t), t), Pd = (i, e, t) => (jv(i, e, "access private method"), t);
class Qi {
  constructor(e) {
    this.executor = e, this._didRun = !1;
  }
  get hasValue() {
    return this._didRun;
  }
  get value() {
    if (!this._didRun)
      try {
        this._value = this.executor();
      } catch (e) {
        this._error = e;
      } finally {
        this._didRun = !0;
      }
    if (this._error)
      throw this._error;
    return this._value;
  }
  get rawValue() {
    return this._value;
  }
}
let hR = class {
  constructor() {
    this.listeners = [], this.unexpectedErrorHandler = function(e) {
      setTimeout(() => {
        throw e.stack ? us.isErrorNoTelemetry(e) ? new us(e.message + `

` + e.stack) : new Error(e.message + `

` + e.stack) : e;
      }, 0);
    };
  }
  addListener(e) {
    return this.listeners.push(e), () => {
      this._removeListener(e);
    };
  }
  emit(e) {
    this.listeners.forEach((t) => {
      t(e);
    });
  }
  _removeListener(e) {
    this.listeners.splice(this.listeners.indexOf(e), 1);
  }
  setUnexpectedErrorHandler(e) {
    this.unexpectedErrorHandler = e;
  }
  getUnexpectedErrorHandler() {
    return this.unexpectedErrorHandler;
  }
  onUnexpectedError(e) {
    this.unexpectedErrorHandler(e), this.emit(e);
  }
  onUnexpectedExternalError(e) {
    this.unexpectedErrorHandler(e);
  }
};
const bp = new hR();
function Iw(i) {
  bp.setUnexpectedErrorHandler(i);
}
function Hg(i) {
  bp.onUnexpectedError(i);
}
function Fi(i) {
  cs(i) || bp.onUnexpectedError(i);
}
function Cw(i) {
  cs(i) || bp.onUnexpectedExternalError(i);
}
function Lu(i) {
  if (i instanceof Error) {
    const { name: e, message: t, cause: n } = i, r = i.stacktrace || i.stack;
    return {
      $isError: !0,
      name: e,
      message: t,
      stack: r,
      noTelemetry: us.isErrorNoTelemetry(i),
      cause: n ? Lu(n) : void 0,
      code: i.code
    };
  }
  return i;
}
function bT(i) {
  let e;
  return i.noTelemetry ? e = new us() : (e = new Error(), e.name = i.name), e.message = i.message, e.stack = i.stack, i.code && (e.code = i.code), i.cause && (e.cause = bT(i.cause)), e;
}
const Bg = "Canceled";
function cs(i) {
  return i instanceof Yn ? !0 : i instanceof Error && i.name === Bg && i.message === Bg;
}
class Yn extends Error {
  constructor() {
    super(Bg), this.name = this.message;
  }
}
const Uc = class Uc extends Error {
  static is(e) {
    return e instanceof Uc || e instanceof Error && e.name === Uc._name;
  }
  constructor(e) {
    super(e), this.name = Uc._name;
  }
};
Uc._name = "PendingMigrationError";
let Wg = Uc;
function e2() {
  const i = new Error(Bg);
  return i.name = i.message, i;
}
function Ge(i) {
  return i ? new Error(`Illegal argument: ${i}`) : new Error("Illegal argument");
}
function TE(i) {
  return i ? new Error(`Illegal state: ${i}`) : new Error("Illegal state");
}
class Pa extends TypeError {
  constructor(e) {
    super(e ? `${e} is read-only and cannot be changed` : "Cannot change read-only property");
  }
}
class fR extends Error {
  constructor(e) {
    super("NotImplemented"), e && (this.message = e);
  }
}
class Tw extends Error {
  constructor(e) {
    super("NotSupported"), e && (this.message = e);
  }
}
class us extends Error {
  constructor(e) {
    super(e), this.name = "CodeExpectedError";
  }
  static fromError(e) {
    if (e instanceof us)
      return e;
    const t = new us();
    return t.message = e.message, t.stack = e.stack, t;
  }
  static isErrorNoTelemetry(e) {
    return e.name === "CodeExpectedError";
  }
}
class cn extends Error {
  constructor(e) {
    super(e || "An unexpected bug occurred."), Object.setPrototypeOf(this, cn.prototype);
  }
}
function Fn(i, e, t = (n, r) => n === r) {
  if (i === e)
    return !0;
  if (!i || !e || i.length !== e.length)
    return !1;
  for (let n = 0, r = i.length; n < r; n++)
    if (!t(i[n], e[n]))
      return !1;
  return !0;
}
function pR(i, e) {
  const t = [];
  let n;
  for (const r of i.slice(0).sort(e))
    !n || e(n[0], r) !== 0 ? (n = [r], t.push(n)) : n.push(r);
  return t;
}
function yT(i, e, t) {
  const n = [];
  function r(a, l, c) {
    if (l === 0 && c.length === 0)
      return;
    const u = n[n.length - 1];
    u && u.start + u.deleteCount === a ? (u.deleteCount += l, u.toInsert.push(...c)) : n.push({ start: a, deleteCount: l, toInsert: c });
  }
  let s = 0, o = 0;
  for (; ; ) {
    if (s === i.length) {
      r(s, 0, e.slice(o));
      break;
    }
    if (o === e.length) {
      r(s, i.length - s, []);
      break;
    }
    const a = i[s], l = e[o], c = t(a, l);
    c === 0 ? (s += 1, o += 1) : c < 0 ? (r(s, 1, []), s += 1) : c > 0 && (r(s, 0, [l]), o += 1);
  }
  return n;
}
function gR(i, e, t) {
  const n = yT(i, e, t), r = [], s = [];
  for (const o of n)
    r.push(...i.slice(o.start, o.start + o.deleteCount)), s.push(...o.toInsert);
  return { removed: r, added: s };
}
function Xt(i) {
  return i.filter((e) => !!e);
}
function mR(i) {
  let e = 0;
  for (let t = 0; t < i.length; t++)
    i[t] && (i[e] = i[t], e += 1);
  i.length = e;
}
function PE(i) {
  return !Array.isArray(i) || i.length === 0;
}
function yp(i) {
  return Array.isArray(i) && i.length > 0;
}
function xc(i, e = (t) => t) {
  const t = /* @__PURE__ */ new Set();
  return i.filter((n) => {
    const r = e(n);
    return t.has(r) ? !1 : (t.add(r), !0);
  });
}
function t2(i, e) {
  let t;
  t = Math.random;
  for (let n = i.length - 1; n > 0; n -= 1) {
    const r = Math.floor(t() * (n + 1)), s = i[n];
    i[n] = i[r], i[r] = s;
  }
}
function Pw(i, e) {
  return Array.isArray(i) ? i.map(e) : e(i);
}
function Xn(i) {
  return Array.isArray(i) ? i : [i];
}
var Aw;
(function(i) {
  function e(s) {
    return s < 0;
  }
  i.isLessThan = e;
  function t(s) {
    return s <= 0;
  }
  i.isLessThanOrEqual = t;
  function n(s) {
    return s > 0;
  }
  i.isGreaterThan = n;
  function r(s) {
    return s === 0;
  }
  i.isNeitherLessOrGreaterThan = r, i.greaterThan = 1, i.lessThan = -1, i.neitherLessOrGreaterThan = 0;
})(Aw || (Aw = {}));
const $c = class $c {
  constructor(e) {
    this.iterate = e;
  }
  forEach(e) {
    this.iterate((t) => (e(t), !0));
  }
  toArray() {
    const e = [];
    return this.iterate((t) => (e.push(t), !0)), e;
  }
  filter(e) {
    return new $c((t) => this.iterate((n) => e(n) ? t(n) : !0));
  }
  map(e) {
    return new $c((t) => this.iterate((n) => t(e(n))));
  }
  some(e) {
    let t = !1;
    return this.iterate((n) => (t = e(n), !t)), t;
  }
  findFirst(e) {
    let t;
    return this.iterate((n) => e(n) ? (t = n, !1) : !0), t;
  }
  findLast(e) {
    let t;
    return this.iterate((n) => (e(n) && (t = n), !0)), t;
  }
  findLastMaxBy(e) {
    let t, n = !0;
    return this.iterate((r) => ((n || Aw.isGreaterThan(e(r, t))) && (n = !1, t = r), !0)), t;
  }
};
$c.empty = new $c((e) => {
});
let i2 = $c;
function _R(i, e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const n of i) {
    const r = e(n);
    let s = t[r];
    s || (s = t[r] = []), s.push(n);
  }
  return t;
}
function vR(i, e) {
  const t = [], n = [];
  for (const r of i)
    e.has(r) || t.push(r);
  for (const r of e)
    i.has(r) || n.push(r);
  return { removed: t, added: n };
}
var n2, r2, s2;
function wR(i, e, t) {
  let n = i.get(e);
  return n === void 0 && (n = t, i.set(e, n)), n;
}
class bR {
  constructor(e, t) {
    this.uri = e, this.value = t;
  }
}
function yR(i) {
  return Array.isArray(i);
}
const Sa = class Sa {
  constructor(e, t) {
    if (this[n2] = "ResourceMap", e instanceof Sa)
      this.map = new Map(e.map), this.toKey = t ?? Sa.defaultToKey;
    else if (yR(e)) {
      this.map = /* @__PURE__ */ new Map(), this.toKey = t ?? Sa.defaultToKey;
      for (const [n, r] of e)
        this.set(n, r);
    } else
      this.map = /* @__PURE__ */ new Map(), this.toKey = e ?? Sa.defaultToKey;
  }
  set(e, t) {
    return this.map.set(this.toKey(e), new bR(e, t)), this;
  }
  get(e) {
    var t;
    return (t = this.map.get(this.toKey(e))) == null ? void 0 : t.value;
  }
  has(e) {
    return this.map.has(this.toKey(e));
  }
  get size() {
    return this.map.size;
  }
  clear() {
    this.map.clear();
  }
  delete(e) {
    return this.map.delete(this.toKey(e));
  }
  forEach(e, t) {
    typeof t < "u" && (e = e.bind(t));
    for (const [n, r] of this.map)
      e(r.value, r.uri, this);
  }
  *values() {
    for (const e of this.map.values())
      yield e.value;
  }
  *keys() {
    for (const e of this.map.values())
      yield e.uri;
  }
  *entries() {
    for (const e of this.map.values())
      yield [e.uri, e.value];
  }
  *[(n2 = Symbol.toStringTag, Symbol.iterator)]() {
    for (const [, e] of this.map)
      yield [e.uri, e.value];
  }
};
Sa.defaultToKey = (e) => e.toString();
let mi = Sa;
class xT {
  constructor(e, t) {
    this[r2] = "ResourceSet", !e || typeof e == "function" ? this._map = new mi(e) : (this._map = new mi(t), e.forEach(this.add, this));
  }
  get size() {
    return this._map.size;
  }
  add(e) {
    return this._map.set(e, e), this;
  }
  clear() {
    this._map.clear();
  }
  delete(e) {
    return this._map.delete(e);
  }
  forEach(e, t) {
    this._map.forEach((n, r) => e.call(t, r, r, this));
  }
  has(e) {
    return this._map.has(e);
  }
  entries() {
    return this._map.entries();
  }
  keys() {
    return this._map.keys();
  }
  values() {
    return this._map.keys();
  }
  [(r2 = Symbol.toStringTag, Symbol.iterator)]() {
    return this.keys();
  }
}
var ji;
(function(i) {
  i[i.None = 0] = "None", i[i.AsOld = 1] = "AsOld", i[i.AsNew = 2] = "AsNew";
})(ji || (ji = {}));
class xR {
  constructor() {
    this[s2] = "LinkedMap", this._map = /* @__PURE__ */ new Map(), this._head = void 0, this._tail = void 0, this._size = 0, this._state = 0;
  }
  clear() {
    this._map.clear(), this._head = void 0, this._tail = void 0, this._size = 0, this._state++;
  }
  isEmpty() {
    return !this._head && !this._tail;
  }
  get size() {
    return this._size;
  }
  get first() {
    var e;
    return (e = this._head) == null ? void 0 : e.value;
  }
  get last() {
    var e;
    return (e = this._tail) == null ? void 0 : e.value;
  }
  has(e) {
    return this._map.has(e);
  }
  get(e, t = ji.None) {
    const n = this._map.get(e);
    if (n)
      return t !== ji.None && this.touch(n, t), n.value;
  }
  set(e, t, n = ji.None) {
    let r = this._map.get(e);
    if (r)
      r.value = t, n !== ji.None && this.touch(r, n);
    else {
      switch (r = { key: e, value: t, next: void 0, previous: void 0 }, n) {
        case ji.None:
          this.addItemLast(r);
          break;
        case ji.AsOld:
          this.addItemFirst(r);
          break;
        case ji.AsNew:
          this.addItemLast(r);
          break;
        default:
          this.addItemLast(r);
          break;
      }
      this._map.set(e, r), this._size++;
    }
    return this;
  }
  delete(e) {
    return !!this.remove(e);
  }
  remove(e) {
    const t = this._map.get(e);
    if (t)
      return this._map.delete(e), this.removeItem(t), this._size--, t.value;
  }
  shift() {
    if (!this._head && !this._tail)
      return;
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    const e = this._head;
    return this._map.delete(e.key), this.removeItem(e), this._size--, e.value;
  }
  forEach(e, t) {
    const n = this._state;
    let r = this._head;
    for (; r; ) {
      if (t ? e.bind(t)(r.value, r.key, this) : e(r.value, r.key, this), this._state !== n)
        throw new Error("LinkedMap got modified during iteration.");
      r = r.next;
    }
  }
  keys() {
    const e = this, t = this._state;
    let n = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (e._state !== t)
          throw new Error("LinkedMap got modified during iteration.");
        if (n) {
          const s = { value: n.key, done: !1 };
          return n = n.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  values() {
    const e = this, t = this._state;
    let n = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (e._state !== t)
          throw new Error("LinkedMap got modified during iteration.");
        if (n) {
          const s = { value: n.value, done: !1 };
          return n = n.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  entries() {
    const e = this, t = this._state;
    let n = this._head;
    const r = {
      [Symbol.iterator]() {
        return r;
      },
      next() {
        if (e._state !== t)
          throw new Error("LinkedMap got modified during iteration.");
        if (n) {
          const s = { value: [n.key, n.value], done: !1 };
          return n = n.next, s;
        } else
          return { value: void 0, done: !0 };
      }
    };
    return r;
  }
  [(s2 = Symbol.toStringTag, Symbol.iterator)]() {
    return this.entries();
  }
  trimOld(e) {
    if (e >= this.size)
      return;
    if (e === 0) {
      this.clear();
      return;
    }
    let t = this._head, n = this.size;
    for (; t && n > e; )
      this._map.delete(t.key), t = t.next, n--;
    this._head = t, this._size = n, t && (t.previous = void 0), this._state++;
  }
  trimNew(e) {
    if (e >= this.size)
      return;
    if (e === 0) {
      this.clear();
      return;
    }
    let t = this._tail, n = this.size;
    for (; t && n > e; )
      this._map.delete(t.key), t = t.previous, n--;
    this._tail = t, this._size = n, t && (t.next = void 0), this._state++;
  }
  addItemFirst(e) {
    if (!this._head && !this._tail)
      this._tail = e;
    else if (this._head)
      e.next = this._head, this._head.previous = e;
    else
      throw new Error("Invalid list");
    this._head = e, this._state++;
  }
  addItemLast(e) {
    if (!this._head && !this._tail)
      this._head = e;
    else if (this._tail)
      e.previous = this._tail, this._tail.next = e;
    else
      throw new Error("Invalid list");
    this._tail = e, this._state++;
  }
  removeItem(e) {
    if (e === this._head && e === this._tail)
      this._head = void 0, this._tail = void 0;
    else if (e === this._head) {
      if (!e.next)
        throw new Error("Invalid list");
      e.next.previous = void 0, this._head = e.next;
    } else if (e === this._tail) {
      if (!e.previous)
        throw new Error("Invalid list");
      e.previous.next = void 0, this._tail = e.previous;
    } else {
      const t = e.next, n = e.previous;
      if (!t || !n)
        throw new Error("Invalid list");
      t.previous = n, n.next = t;
    }
    e.next = void 0, e.previous = void 0, this._state++;
  }
  touch(e, t) {
    if (!this._head || !this._tail)
      throw new Error("Invalid list");
    if (!(t !== ji.AsOld && t !== ji.AsNew)) {
      if (t === ji.AsOld) {
        if (e === this._head)
          return;
        const n = e.next, r = e.previous;
        e === this._tail ? (r.next = void 0, this._tail = r) : (n.previous = r, r.next = n), e.previous = void 0, e.next = this._head, this._head.previous = e, this._head = e, this._state++;
      } else if (t === ji.AsNew) {
        if (e === this._tail)
          return;
        const n = e.next, r = e.previous;
        e === this._head ? (n.previous = void 0, this._head = n) : (n.previous = r, r.next = n), e.next = void 0, e.previous = this._tail, this._tail.next = e, this._tail = e, this._state++;
      }
    }
  }
  toJSON() {
    const e = [];
    return this.forEach((t, n) => {
      e.push([n, t]);
    }), e;
  }
  fromJSON(e) {
    this.clear();
    for (const [t, n] of e)
      this.set(t, n);
  }
}
let ER = class extends xR {
  constructor(e, t = 1) {
    super(), this._limit = e, this._ratio = Math.min(Math.max(0, t), 1);
  }
  get limit() {
    return this._limit;
  }
  set limit(e) {
    this._limit = e, this.checkTrim();
  }
  get ratio() {
    return this._ratio;
  }
  set ratio(e) {
    this._ratio = Math.min(Math.max(0, e), 1), this.checkTrim();
  }
  get(e, t = ji.AsNew) {
    return super.get(e, t);
  }
  peek(e) {
    return super.get(e, ji.None);
  }
  set(e, t) {
    return super.set(e, t, ji.AsNew), this;
  }
  checkTrim() {
    this.size > this._limit && this.trim(Math.round(this._limit * this._ratio));
  }
};
class AE extends ER {
  constructor(e, t = 1) {
    super(e, t);
  }
  trim(e) {
    this.trimOld(e);
  }
  set(e, t) {
    return super.set(e, t), this.checkTrim(), this;
  }
}
class SR {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  add(e, t) {
    let n = this.map.get(e);
    n || (n = /* @__PURE__ */ new Set(), this.map.set(e, n)), n.add(t);
  }
  delete(e, t) {
    const n = this.map.get(e);
    n && (n.delete(t), n.size === 0 && this.map.delete(e));
  }
  forEach(e, t) {
    const n = this.map.get(e);
    n && n.forEach(t);
  }
  get(e) {
    const t = this.map.get(e);
    return t || /* @__PURE__ */ new Set();
  }
}
function RE(i, e) {
  const t = this;
  let n = !1, r;
  return function() {
    return n || (n = !0, r = i.apply(t, arguments)), r;
  };
}
function Gi(i, e) {
  if (!i)
    throw new Error(e ? `Assertion failed (${e})` : "Assertion Failed");
}
function Rw(i, e = "Unreachable") {
  throw new Error(e);
}
function Lw(i, e = "unexpected state") {
  if (!i)
    throw typeof e == "string" ? new cn(`Assertion Failed: ${e}`) : e;
}
function ET(i) {
  if (!i()) {
    debugger;
    i(), Fi(new cn("Assertion Failed"));
  }
}
function st(i) {
  return typeof i == "string";
}
function DR(i) {
  return Array.isArray(i) && i.every((e) => st(e));
}
function ai(i) {
  return typeof i == "object" && i !== null && !Array.isArray(i) && !(i instanceof RegExp) && !(i instanceof Date);
}
function kR(i) {
  const e = Object.getPrototypeOf(Uint8Array);
  return typeof i == "object" && i instanceof e;
}
function ol(i) {
  return typeof i == "number" && !isNaN(i);
}
function IR(i) {
  return !!i && typeof i[Symbol.iterator] == "function";
}
function Gd(i) {
  return typeof i > "u";
}
function Mn(i) {
  return !oi(i);
}
function oi(i) {
  return Gd(i) || i === null;
}
function ST(i, e) {
  if (!i)
    throw new Error(e ? `Unexpected type, expected '${e}'` : "Unexpected type");
}
function Nu(i) {
  return Lw(i != null, "Argument is `undefined` or `null`."), i;
}
const CR = Object.prototype.hasOwnProperty;
function DT(i) {
  if (!ai(i))
    return !1;
  for (const e in i)
    if (CR.call(i, e))
      return !1;
  return !0;
}
function kT(i) {
  return typeof i == "function";
}
function TR(i, e) {
  const t = Math.min(i.length, e.length);
  for (let n = 0; n < t; n++)
    IT(i[n], e[n]);
}
function IT(i, e) {
  if (st(e)) {
    if (typeof i !== e)
      throw new Error(`argument does not match constraint: typeof ${e}`);
  } else if (kT(e)) {
    try {
      if (i instanceof e)
        return;
    } catch {
    }
    if (!oi(i) && i.constructor === e || e.length === 1 && e.call(void 0, i) === !0)
      return;
    throw new Error(
      "argument does not match one of these constraints: arg instanceof constraint, arg.constructor === constraint, nor constraint(arg) === true"
    );
  }
}
var Bi;
(function(i) {
  function e(G) {
    return !!G && typeof G == "object" && typeof G[Symbol.iterator] == "function";
  }
  i.is = e;
  const t = Object.freeze([]);
  function n() {
    return t;
  }
  i.empty = n;
  function* r(G) {
    yield G;
  }
  i.single = r;
  function s(G) {
    return e(G) ? G : r(G);
  }
  i.wrap = s;
  function o(G) {
    return G || t;
  }
  i.from = o;
  function* a(G) {
    for (let ae = G.length - 1; ae >= 0; ae--)
      yield G[ae];
  }
  i.reverse = a;
  function l(G) {
    return !G || G[Symbol.iterator]().next().done === !0;
  }
  i.isEmpty = l;
  function c(G) {
    return G[Symbol.iterator]().next().value;
  }
  i.first = c;
  function u(G, ae) {
    let K = 0;
    for (const Ee of G)
      if (ae(Ee, K++))
        return !0;
    return !1;
  }
  i.some = u;
  function d(G, ae) {
    let K = 0;
    for (const Ee of G)
      if (!ae(Ee, K++))
        return !1;
    return !0;
  }
  i.every = d;
  function f(G, ae) {
    for (const K of G)
      if (ae(K))
        return K;
  }
  i.find = f;
  function* p(G, ae) {
    for (const K of G)
      ae(K) && (yield K);
  }
  i.filter = p;
  function* v(G, ae) {
    let K = 0;
    for (const Ee of G)
      yield ae(Ee, K++);
  }
  i.map = v;
  function* _(G, ae) {
    let K = 0;
    for (const Ee of G)
      yield* ae(Ee, K++);
  }
  i.flatMap = _;
  function* m(...G) {
    for (const ae of G)
      IR(ae) ? yield* ae : yield ae;
  }
  i.concat = m;
  function E(G, ae, K) {
    let Ee = K;
    for (const He of G)
      Ee = ae(Ee, He);
    return Ee;
  }
  i.reduce = E;
  function S(G) {
    let ae = 0;
    for (const K of G)
      ae++;
    return ae;
  }
  i.length = S;
  function* k(G, ae, K = G.length) {
    for (ae < -G.length && (ae = 0), ae < 0 && (ae += G.length), K < 0 ? K += G.length : K > G.length && (K = G.length); ae < K; ae++)
      yield G[ae];
  }
  i.slice = k;
  function q(G, ae = Number.POSITIVE_INFINITY) {
    const K = [];
    if (ae === 0)
      return [K, G];
    const Ee = G[Symbol.iterator]();
    for (let He = 0; He < ae; He++) {
      const Re = Ee.next();
      if (Re.done)
        return [K, i.empty()];
      K.push(Re.value);
    }
    return [K, { [Symbol.iterator]() {
      return Ee;
    } }];
  }
  i.consume = q;
  async function B(G) {
    const ae = [];
    for await (const K of G)
      ae.push(K);
    return ae;
  }
  i.asyncToArray = B;
  async function te(G) {
    let ae = [];
    for await (const K of G)
      ae = ae.concat(K);
    return ae;
  }
  i.asyncToArrayFlat = te;
})(Bi || (Bi = {}));
function CT(i) {
  return typeof i == "object" && i !== null && typeof i.dispose == "function" && i.dispose.length === 0;
}
function Kn(i) {
  if (Bi.is(i)) {
    const e = [];
    for (const t of i)
      if (t)
        try {
          t.dispose();
        } catch (n) {
          e.push(n);
        }
    if (e.length === 1)
      throw e[0];
    if (e.length > 1)
      throw new AggregateError(e, "Encountered errors while disposing of store");
    return Array.isArray(i) ? [] : i;
  } else if (i)
    return i.dispose(), i;
}
function LE(...i) {
  return Ie(() => Kn(i));
}
function Ie(i) {
  return {
    dispose: RE(() => {
      i();
    })
  };
}
const E1 = class E1 {
  constructor() {
    this._toDispose = /* @__PURE__ */ new Set(), this._isDisposed = !1;
  }
  dispose() {
    this._isDisposed || (this._isDisposed = !0, this.clear());
  }
  get isDisposed() {
    return this._isDisposed;
  }
  clear() {
    if (this._toDispose.size !== 0)
      try {
        Kn(this._toDispose);
      } finally {
        this._toDispose.clear();
      }
  }
  add(e) {
    if (!e)
      return e;
    if (e === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._isDisposed ? E1.DISABLE_DISPOSED_WARNING || console.warn(new Error(
      "Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!"
    ).stack) : this._toDispose.add(e), e;
  }
  delete(e) {
    if (e) {
      if (e === this)
        throw new Error("Cannot dispose a disposable on itself!");
      this._toDispose.delete(e), e.dispose();
    }
  }
  deleteAndLeak(e) {
    e && this._toDispose.has(e) && this._toDispose.delete(e);
  }
};
E1.DISABLE_DISPOSED_WARNING = !1;
let Te = E1;
var fu;
let xe = (fu = class {
  constructor() {
    this._store = new Te(), this._store;
  }
  dispose() {
    this._store.dispose();
  }
  _register(e) {
    if (e === this)
      throw new Error("Cannot register a disposable on itself!");
    return this._store.add(e);
  }
}, fu.None = Object.freeze({ dispose() {
} }), fu);
class $s {
  constructor() {
    this._isDisposed = !1;
  }
  get value() {
    return this._isDisposed ? void 0 : this._value;
  }
  set value(e) {
    var t;
    this._isDisposed || e === this._value || ((t = this._value) == null || t.dispose(), this._value = e);
  }
  clear() {
    this.value = void 0;
  }
  dispose() {
    var e;
    this._isDisposed = !0, (e = this._value) == null || e.dispose(), this._value = void 0;
  }
  clearAndLeak() {
    const e = this._value;
    return this._value = void 0, e;
  }
}
class Vg {
  constructor() {
    this._store = /* @__PURE__ */ new Map(), this._isDisposed = !1;
  }
  dispose() {
    this._isDisposed = !0, this.clearAndDisposeAll();
  }
  clearAndDisposeAll() {
    if (this._store.size)
      try {
        Kn(this._store.values());
      } finally {
        this._store.clear();
      }
  }
  has(e) {
    return this._store.has(e);
  }
  get size() {
    return this._store.size;
  }
  get(e) {
    return this._store.get(e);
  }
  set(e, t, n = !1) {
    var r;
    this._isDisposed && console.warn(new Error(
      "Trying to add a disposable to a DisposableMap that has already been disposed of. The added object will be leaked!"
    ).stack), n || (r = this._store.get(e)) == null || r.dispose(), this._store.set(e, t);
  }
  deleteAndDispose(e) {
    var t;
    (t = this._store.get(e)) == null || t.dispose(), this._store.delete(e);
  }
  deleteAndLeak(e) {
    const t = this._store.get(e);
    return this._store.delete(e), t;
  }
  keys() {
    return this._store.keys();
  }
  values() {
    return this._store.values();
  }
  [Symbol.iterator]() {
    return this._store[Symbol.iterator]();
  }
}
function TT(i, e) {
  return new PR(i, e);
}
class PR {
  constructor(e, t) {
    this.reducer = e, this.options = t, this.state = {
      flowing: !1,
      ended: !1,
      destroyed: !1
    }, this.buffer = {
      data: [],
      error: []
    }, this.listeners = {
      data: [],
      error: [],
      end: []
    }, this.pendingWritePromises = [];
  }
  pause() {
    this.state.destroyed || (this.state.flowing = !1);
  }
  resume() {
    this.state.destroyed || this.state.flowing || (this.state.flowing = !0, this.flowData(), this.flowErrors(), this.flowEnd());
  }
  write(e) {
    var t;
    if (!this.state.destroyed) {
      if (this.state.flowing)
        this.emitData(e);
      else if (this.buffer.data.push(e), typeof ((t = this.options) == null ? void 0 : t.highWaterMark) == "number" && this.buffer.data.length > this.options.highWaterMark)
        return new Promise((n) => this.pendingWritePromises.push(n));
    }
  }
  error(e) {
    this.state.destroyed || (this.state.flowing ? this.emitError(e) : this.buffer.error.push(e));
  }
  end(e) {
    this.state.destroyed || (typeof e < "u" && this.write(e), this.state.flowing ? (this.emitEnd(), this.destroy()) : this.state.ended = !0);
  }
  emitData(e) {
    this.listeners.data.slice(0).forEach((t) => t(e));
  }
  emitError(e) {
    this.listeners.error.length === 0 ? Fi(e) : this.listeners.error.slice(0).forEach((t) => t(e));
  }
  emitEnd() {
    this.listeners.end.slice(0).forEach((e) => e());
  }
  on(e, t) {
    if (!this.state.destroyed)
      switch (e) {
        case "data":
          this.listeners.data.push(t), this.resume();
          break;
        case "end":
          this.listeners.end.push(t), this.state.flowing && this.flowEnd() && this.destroy();
          break;
        case "error":
          this.listeners.error.push(t), this.state.flowing && this.flowErrors();
          break;
      }
  }
  removeListener(e, t) {
    if (this.state.destroyed)
      return;
    let n;
    switch (e) {
      case "data":
        n = this.listeners.data;
        break;
      case "end":
        n = this.listeners.end;
        break;
      case "error":
        n = this.listeners.error;
        break;
    }
    if (n) {
      const r = n.indexOf(t);
      r >= 0 && n.splice(r, 1);
    }
  }
  flowData() {
    if (this.buffer.data.length === 0)
      return;
    if (typeof this.reducer == "function") {
      const t = this.reducer(this.buffer.data);
      this.emitData(t);
    } else
      for (const t of this.buffer.data)
        this.emitData(t);
    this.buffer.data.length = 0;
    const e = [...this.pendingWritePromises];
    this.pendingWritePromises.length = 0, e.forEach((t) => t());
  }
  flowErrors() {
    if (this.listeners.error.length > 0) {
      for (const e of this.buffer.error)
        this.emitError(e);
      this.buffer.error.length = 0;
    }
  }
  flowEnd() {
    return this.state.ended ? (this.emitEnd(), this.listeners.end.length > 0) : !1;
  }
  destroy() {
    this.state.destroyed || (this.state.destroyed = !0, this.state.ended = !0, this.buffer.data.length = 0, this.buffer.error.length = 0, this.listeners.data.length = 0, this.listeners.error.length = 0, this.listeners.end.length = 0, this.pendingWritePromises.length = 0);
  }
}
function AR(i, e) {
  const t = [];
  let n;
  for (; (n = i.read()) !== null; )
    t.push(n);
  return e(t);
}
function RR(i, e) {
  return new Promise((t, n) => {
    const r = [];
    PT(i, {
      onData: (s) => {
        e && r.push(s);
      },
      onError: (s) => {
        e ? n(s) : t(void 0);
      },
      onEnd: () => {
        t(e ? e(r) : void 0);
      }
    });
  });
}
function PT(i, e, t) {
  i.on("error", (n) => {
    t != null && t.isCancellationRequested || e.onError(n);
  }), i.on("end", () => {
    t != null && t.isCancellationRequested || e.onEnd();
  }), i.on("data", (n) => {
    t != null && t.isCancellationRequested || e.onData(n);
  });
}
function LR(i, e) {
  const t = TT(e);
  return t.end(i), t;
}
const Ad = typeof Buffer < "u", NR = new Qi(() => new Uint8Array(256));
let Gv, Qv;
class he {
  static alloc(e) {
    return Ad ? new he(Buffer.allocUnsafe(e)) : new he(new Uint8Array(e));
  }
  static wrap(e) {
    return Ad && !Buffer.isBuffer(e) && (e = Buffer.from(e.buffer, e.byteOffset, e.byteLength)), new he(e);
  }
  static fromString(e, t) {
    return !((t == null ? void 0 : t.dontUseNodeBuffer) || !1) && Ad ? new he(Buffer.from(e)) : (Gv || (Gv = new TextEncoder()), new he(Gv.encode(e)));
  }
  static fromByteArray(e) {
    const t = he.alloc(e.length);
    for (let n = 0, r = e.length; n < r; n++)
      t.buffer[n] = e[n];
    return t;
  }
  static concat(e, t) {
    if (typeof t > "u") {
      t = 0;
      for (let s = 0, o = e.length; s < o; s++)
        t += e[s].byteLength;
    }
    const n = he.alloc(t);
    let r = 0;
    for (let s = 0, o = e.length; s < o; s++) {
      const a = e[s];
      n.set(a, r), r += a.byteLength;
    }
    return n;
  }
  static isNativeBuffer(e) {
    return Ad && Buffer.isBuffer(e);
  }
  constructor(e) {
    this.buffer = e, this.byteLength = this.buffer.byteLength;
  }
  clone() {
    const e = he.alloc(this.byteLength);
    return e.set(this), e;
  }
  toString() {
    return Ad ? this.buffer.toString() : (Qv || (Qv = new TextDecoder()), Qv.decode(this.buffer));
  }
  slice(e, t) {
    return new he(this.buffer.subarray(e, t));
  }
  set(e, t) {
    if (e instanceof he)
      this.buffer.set(e.buffer, t);
    else if (e instanceof Uint8Array)
      this.buffer.set(e, t);
    else if (e instanceof ArrayBuffer)
      this.buffer.set(new Uint8Array(e), t);
    else if (ArrayBuffer.isView(e))
      this.buffer.set(new Uint8Array(e.buffer, e.byteOffset, e.byteLength), t);
    else
      throw new Error("Unknown argument 'array'");
  }
  readUInt32BE(e) {
    return cg(this.buffer, e);
  }
  writeUInt32BE(e, t) {
    ug(this.buffer, e, t);
  }
  readUInt32LE(e) {
    return UR(this.buffer, e);
  }
  writeUInt32LE(e, t) {
    $R(this.buffer, e, t);
  }
  readUInt8(e) {
    return HR(this.buffer, e);
  }
  writeUInt8(e, t) {
    BR(this.buffer, e, t);
  }
  indexOf(e, t = 0) {
    return MR(this.buffer, e instanceof he ? e.buffer : e, t);
  }
  equals(e) {
    return this === e ? !0 : this.byteLength !== e.byteLength ? !1 : this.buffer.every((t, n) => t === e.buffer[n]);
  }
}
function MR(i, e, t = 0) {
  const n = e.byteLength, r = i.byteLength;
  if (n === 0)
    return 0;
  if (n === 1)
    return i.indexOf(e[0]);
  if (n > r - t)
    return -1;
  const s = NR.value;
  s.fill(e.length);
  for (let c = 0; c < e.length; c++)
    s[e[c]] = e.length - c - 1;
  let o = t + e.length - 1, a = o, l = -1;
  for (; o < r; )
    if (i[o] === e[a]) {
      if (a === 0) {
        l = o;
        break;
      }
      o--, a--;
    } else
      o += Math.max(e.length - a, s[i[o]]), a = e.length - 1;
  return l;
}
function OR(i, e) {
  return i[e + 0] << 0 >>> 0 | i[e + 1] << 8 >>> 0;
}
function FR(i, e, t) {
  i[t + 0] = e & 255, e = e >>> 8, i[t + 1] = e & 255;
}
function cg(i, e) {
  return i[e] * 2 ** 24 + i[e + 1] * 2 ** 16 + i[e + 2] * 2 ** 8 + i[e + 3];
}
function ug(i, e, t) {
  i[t + 3] = e, e = e >>> 8, i[t + 2] = e, e = e >>> 8, i[t + 1] = e, e = e >>> 8, i[t] = e;
}
function UR(i, e) {
  return i[e + 0] << 0 >>> 0 | i[e + 1] << 8 >>> 0 | i[e + 2] << 16 >>> 0 | i[e + 3] << 24 >>> 0;
}
function $R(i, e, t) {
  i[t + 0] = e & 255, e = e >>> 8, i[t + 1] = e & 255, e = e >>> 8, i[t + 2] = e & 255, e = e >>> 8, i[t + 3] = e & 255;
}
function HR(i, e) {
  return i[e];
}
function BR(i, e, t) {
  i[t] = e;
}
function WR(i) {
  return AR(i, (e) => he.concat(e));
}
function VR(i) {
  return LR(i, (e) => he.concat(e));
}
function Mu(i) {
  let e = 0, t = 0, n = 0;
  const r = new Uint8Array(Math.floor(i.length / 4 * 3)), s = (a) => {
    switch (t) {
      case 3:
        r[n++] = e | a, t = 0;
        break;
      case 2:
        r[n++] = e | a >>> 2, e = a << 6, t = 3;
        break;
      case 1:
        r[n++] = e | a >>> 4, e = a << 4, t = 2;
        break;
      default:
        e = a << 2, t = 1;
    }
  };
  for (let a = 0; a < i.length; a++) {
    const l = i.charCodeAt(a);
    if (l >= 65 && l <= 90)
      s(l - 65);
    else if (l >= 97 && l <= 122)
      s(l - 97 + 26);
    else if (l >= 48 && l <= 57)
      s(l - 48 + 52);
    else if (l === 43 || l === 45)
      s(62);
    else if (l === 47 || l === 95)
      s(63);
    else {
      if (l === 61)
        break;
      throw new SyntaxError(`Unexpected base64 character ${i[a]}`);
    }
  }
  const o = n;
  for (; t > 0; )
    s(0);
  return he.wrap(r).slice(0, o);
}
const zR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", qR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
function Y1({ buffer: i }, e = !0, t = !1) {
  const n = t ? qR : zR;
  let r = "";
  const s = i.byteLength % 3;
  let o = 0;
  for (; o < i.byteLength - s; o += 3) {
    const a = i[o + 0], l = i[o + 1], c = i[o + 2];
    r += n[a >>> 2], r += n[(a << 4 | l >>> 4) & 63], r += n[(l << 2 | c >>> 6) & 63], r += n[c & 63];
  }
  if (s === 1) {
    const a = i[o + 0];
    r += n[a >>> 2], r += n[a << 4 & 63], e && (r += "==");
  } else if (s === 2) {
    const a = i[o + 0], l = i[o + 1];
    r += n[a >>> 2], r += n[(a << 4 | l >>> 4) & 63], r += n[l << 2 & 63], e && (r += "=");
  }
  return r;
}
const o2 = "0123456789abcdef";
function AT({ buffer: i }) {
  let e = "";
  for (let t = 0; t < i.length; t++) {
    const n = i[t];
    e += o2[n >>> 4], e += o2[n & 15];
  }
  return e;
}
function jR(i) {
  if (i.length % 2 !== 0)
    throw new SyntaxError("Hex string must have an even length");
  const e = new Uint8Array(i.length >> 1);
  for (let t = 0; t < i.length; )
    e[t >> 1] = a2(i, t++) << 4 | a2(i, t++);
  return he.wrap(e);
}
function a2(i, e) {
  const t = i.charCodeAt(e);
  if (t >= 48 && t <= 57)
    return t - 48;
  if (t >= 97 && t <= 102)
    return t - 87;
  if (t >= 65 && t <= 70)
    return t - 55;
  throw new SyntaxError(`Invalid hex character at position ${e}`);
}
var js;
let Qt = (js = class {
  constructor(e) {
    this.element = e, this.next = js.Undefined, this.prev = js.Undefined;
  }
}, js.Undefined = new js(void 0), js);
class ea {
  constructor() {
    this._first = Qt.Undefined, this._last = Qt.Undefined, this._size = 0;
  }
  get size() {
    return this._size;
  }
  isEmpty() {
    return this._first === Qt.Undefined;
  }
  clear() {
    let e = this._first;
    for (; e !== Qt.Undefined; ) {
      const t = e.next;
      e.prev = Qt.Undefined, e.next = Qt.Undefined, e = t;
    }
    this._first = Qt.Undefined, this._last = Qt.Undefined, this._size = 0;
  }
  unshift(e) {
    return this._insert(e, !1);
  }
  push(e) {
    return this._insert(e, !0);
  }
  _insert(e, t) {
    const n = new Qt(e);
    if (this._first === Qt.Undefined)
      this._first = n, this._last = n;
    else if (t) {
      const s = this._last;
      this._last = n, n.prev = s, s.next = n;
    } else {
      const s = this._first;
      this._first = n, n.next = s, s.prev = n;
    }
    this._size += 1;
    let r = !1;
    return () => {
      r || (r = !0, this._remove(n));
    };
  }
  shift() {
    if (this._first !== Qt.Undefined) {
      const e = this._first.element;
      return this._remove(this._first), e;
    }
  }
  pop() {
    if (this._last !== Qt.Undefined) {
      const e = this._last.element;
      return this._remove(this._last), e;
    }
  }
  _remove(e) {
    if (e.prev !== Qt.Undefined && e.next !== Qt.Undefined) {
      const t = e.prev;
      t.next = e.next, e.next.prev = t;
    } else e.prev === Qt.Undefined && e.next === Qt.Undefined ? (this._first = Qt.Undefined, this._last = Qt.Undefined) : e.next === Qt.Undefined ? (this._last = this._last.prev, this._last.next = Qt.Undefined) : e.prev === Qt.Undefined && (this._first = this._first.next, this._first.prev = Qt.Undefined);
    this._size -= 1;
  }
  *[Symbol.iterator]() {
    let e = this._first;
    for (; e !== Qt.Undefined; )
      yield e.element, e = e.next;
  }
}
const GR = globalThis.performance.now.bind(globalThis.performance);
class Js {
  static create(e) {
    return new Js(e);
  }
  constructor(e) {
    this._now = e === !1 ? Date.now : GR, this._startTime = this._now(), this._stopTime = -1;
  }
  stop() {
    this._stopTime = this._now();
  }
  reset() {
    this._startTime = this._now(), this._stopTime = -1;
  }
  elapsed() {
    return this._stopTime !== -1 ? this._stopTime - this._startTime : this._now() - this._startTime;
  }
}
var Pt;
(function(i) {
  i.None = () => xe.None;
  function e(Z, Y) {
    return f(Z, () => {
    }, 0, void 0, !0, void 0, Y);
  }
  i.defer = e;
  function t(Z) {
    return (Y, ee = null, re) => {
      let ce = !1, Oe;
      return Oe = Z((Ve) => {
        if (!ce)
          return Oe ? Oe.dispose() : ce = !0, Y.call(ee, Ve);
      }, null, re), ce && Oe.dispose(), Oe;
    };
  }
  i.once = t;
  function n(Z, Y) {
    return i.once(i.filter(Z, Y));
  }
  i.onceIf = n;
  function r(Z, Y, ee) {
    return u((re, ce = null, Oe) => Z((Ve) => re.call(ce, Y(Ve)), null, Oe), ee);
  }
  i.map = r;
  function s(Z, Y, ee) {
    return u((re, ce = null, Oe) => Z((Ve) => {
      Y(Ve), re.call(ce, Ve);
    }, null, Oe), ee);
  }
  i.forEach = s;
  function o(Z, Y, ee) {
    return u((re, ce = null, Oe) => Z((Ve) => Y(Ve) && re.call(ce, Ve), null, Oe), ee);
  }
  i.filter = o;
  function a(Z) {
    return Z;
  }
  i.signal = a;
  function l(...Z) {
    return (Y, ee = null, re) => {
      const ce = LE(...Z.map((Oe) => Oe((Ve) => Y.call(ee, Ve))));
      return d(ce, re);
    };
  }
  i.any = l;
  function c(Z, Y, ee, re) {
    let ce = ee;
    return r(Z, (Oe) => (ce = Y(ce, Oe), ce), re);
  }
  i.reduce = c;
  function u(Z, Y) {
    let ee;
    const re = {
      onWillAddFirstListener() {
        ee = Z(ce.fire, ce);
      },
      onDidRemoveLastListener() {
        ee == null || ee.dispose();
      }
    }, ce = new M(re);
    return Y == null || Y.add(ce), ce.event;
  }
  function d(Z, Y) {
    return Y instanceof Array ? Y.push(Z) : Y && Y.add(Z), Z;
  }
  function f(Z, Y, ee = 100, re = !1, ce = !1, Oe, Ve) {
    let Qe, It, Zt, ht = 0, Mt;
    const fn = {
      leakWarningThreshold: Oe,
      onWillAddFirstListener() {
        Qe = Z((Ar) => {
          ht++, It = Y(It, Ar), re && !Zt && (vi.fire(It), It = void 0), Mt = () => {
            const er = It;
            It = void 0, Zt = void 0, (!re || ht > 1) && vi.fire(er), ht = 0;
          }, typeof ee == "number" ? (Zt && clearTimeout(Zt), Zt = setTimeout(Mt, ee)) : Zt === void 0 && (Zt = null, queueMicrotask(Mt));
        });
      },
      onWillRemoveListener() {
        ce && ht > 0 && (Mt == null || Mt());
      },
      onDidRemoveLastListener() {
        Mt = void 0, Qe.dispose();
      }
    }, vi = new M(fn);
    return Ve == null || Ve.add(vi), vi.event;
  }
  i.debounce = f;
  function p(Z, Y = 0, ee) {
    return i.debounce(Z, (re, ce) => re ? (re.push(ce), re) : [ce], Y, void 0, !0, void 0, ee);
  }
  i.accumulate = p;
  function v(Z, Y = (re, ce) => re === ce, ee) {
    let re = !0, ce;
    return o(Z, (Oe) => {
      const Ve = re || !Y(Oe, ce);
      return re = !1, ce = Oe, Ve;
    }, ee);
  }
  i.latch = v;
  function _(Z, Y, ee) {
    return [
      i.filter(Z, Y, ee),
      i.filter(Z, (re) => !Y(re), ee)
    ];
  }
  i.split = _;
  function m(Z, Y = !1, ee = [], re) {
    let ce = ee.slice(), Oe = Z((It) => {
      ce ? ce.push(It) : Qe.fire(It);
    });
    re && re.add(Oe);
    const Ve = () => {
      ce == null || ce.forEach((It) => Qe.fire(It)), ce = null;
    }, Qe = new M({
      onWillAddFirstListener() {
        Oe || (Oe = Z((It) => Qe.fire(It)), re && re.add(Oe));
      },
      onDidAddFirstListener() {
        ce && (Y ? setTimeout(Ve) : Ve());
      },
      onDidRemoveLastListener() {
        Oe && Oe.dispose(), Oe = null;
      }
    });
    return re && re.add(Qe), Qe.event;
  }
  i.buffer = m;
  function E(Z, Y) {
    return (re, ce, Oe) => {
      const Ve = Y(new k());
      return Z(function(Qe) {
        const It = Ve.evaluate(Qe);
        It !== S && re.call(ce, It);
      }, void 0, Oe);
    };
  }
  i.chain = E;
  const S = Symbol("HaltChainable");
  class k {
    constructor() {
      this.steps = [];
    }
    map(Y) {
      return this.steps.push(Y), this;
    }
    forEach(Y) {
      return this.steps.push((ee) => (Y(ee), ee)), this;
    }
    filter(Y) {
      return this.steps.push((ee) => Y(ee) ? ee : S), this;
    }
    reduce(Y, ee) {
      let re = ee;
      return this.steps.push((ce) => (re = Y(re, ce), re)), this;
    }
    latch(Y = (ee, re) => ee === re) {
      let ee = !0, re;
      return this.steps.push((ce) => {
        const Oe = ee || !Y(ce, re);
        return ee = !1, re = ce, Oe ? ce : S;
      }), this;
    }
    evaluate(Y) {
      for (const ee of this.steps)
        if (Y = ee(Y), Y === S)
          break;
      return Y;
    }
  }
  function q(Z, Y, ee = (re) => re) {
    const re = (...Qe) => Ve.fire(ee(...Qe)), ce = () => Z.on(Y, re), Oe = () => Z.removeListener(Y, re), Ve = new M(
      { onWillAddFirstListener: ce, onDidRemoveLastListener: Oe }
    );
    return Ve.event;
  }
  i.fromNodeEventEmitter = q;
  function B(Z, Y, ee = (re) => re) {
    const re = (...Qe) => Ve.fire(ee(...Qe)), ce = () => Z.addEventListener(Y, re), Oe = () => Z.removeEventListener(Y, re), Ve = new M(
      { onWillAddFirstListener: ce, onDidRemoveLastListener: Oe }
    );
    return Ve.event;
  }
  i.fromDOMEventEmitter = B;
  function te(Z, Y) {
    let ee;
    const re = new Promise((ce, Oe) => {
      const Ve = t(Z)(ce, null, Y);
      ee = () => Ve.dispose();
    });
    return re.cancel = ee, re;
  }
  i.toPromise = te;
  function G(Z) {
    const Y = new M();
    return Z.then((ee) => {
      Y.fire(ee);
    }, () => {
      Y.fire(void 0);
    }).finally(() => {
      Y.dispose();
    }), Y.event;
  }
  i.fromPromise = G;
  function ae(Z, Y) {
    return Z((ee) => Y.fire(ee));
  }
  i.forward = ae;
  function K(Z, Y, ee) {
    return Y(ee), Z((re) => Y(re));
  }
  i.runAndSubscribe = K;
  class Ee {
    constructor(Y, ee) {
      this._observable = Y, this._counter = 0, this._hasChanged = !1;
      const re = {
        onWillAddFirstListener: () => {
          Y.addObserver(this), this._observable.reportChanges();
        },
        onDidRemoveLastListener: () => {
          Y.removeObserver(this);
        }
      };
      this.emitter = new M(re), ee && ee.add(this.emitter);
    }
    beginUpdate(Y) {
      this._counter++;
    }
    handlePossibleChange(Y) {
    }
    handleChange(Y, ee) {
      this._hasChanged = !0;
    }
    endUpdate(Y) {
      this._counter--, this._counter === 0 && (this._observable.reportChanges(), this._hasChanged && (this._hasChanged = !1, this.emitter.fire(this._observable.get())));
    }
  }
  function He(Z, Y) {
    return new Ee(Z, Y).emitter.event;
  }
  i.fromObservable = He;
  function Re(Z) {
    return (Y, ee, re) => {
      let ce = 0, Oe = !1;
      const Ve = {
        beginUpdate() {
          ce++;
        },
        endUpdate() {
          ce--, ce === 0 && (Z.reportChanges(), Oe && (Oe = !1, Y.call(ee)));
        },
        handlePossibleChange() {
        },
        handleChange() {
          Oe = !0;
        }
      };
      Z.addObserver(Ve), Z.reportChanges();
      const Qe = {
        dispose() {
          Z.removeObserver(Ve);
        }
      };
      return re instanceof Te ? re.add(Qe) : Array.isArray(re) && re.push(Qe), Qe;
    };
  }
  i.fromObservableLight = Re;
})(Pt || (Pt = {}));
const Hc = class Hc {
  constructor(e) {
    this.listenerCount = 0, this.invocationCount = 0, this.elapsedOverall = 0, this.durations = [], this.name = `${e}_${Hc._idPool++}`, Hc.all.add(this);
  }
  start(e) {
    this._stopWatch = new Js(), this.listenerCount = e;
  }
  stop() {
    if (this._stopWatch) {
      const e = this._stopWatch.elapsed();
      this.durations.push(e), this.elapsedOverall += e, this.invocationCount += 1, this._stopWatch = void 0;
    }
  }
};
Hc.all = /* @__PURE__ */ new Set(), Hc._idPool = 0;
let Nw = Hc, QR = -1;
const S1 = class S1 {
  constructor(e, t, n = (S1._idPool++).toString(16).padStart(3, "0")) {
    this._errorHandler = e, this.threshold = t, this.name = n, this._warnCountdown = 0;
  }
  dispose() {
    var e;
    (e = this._stacks) == null || e.clear();
  }
  check(e, t) {
    const n = this.threshold;
    if (n <= 0 || t < n)
      return;
    this._stacks || (this._stacks = /* @__PURE__ */ new Map());
    const r = this._stacks.get(e.value) || 0;
    if (this._stacks.set(e.value, r + 1), this._warnCountdown -= 1, this._warnCountdown <= 0) {
      this._warnCountdown = n * 0.5;
      const [s, o] = this.getMostFrequentStack(), a = `[${this.name}] potential listener LEAK detected, having ${t} listeners already. MOST frequent listener (${o}):`;
      console.warn(a), console.warn(s);
      const l = new KR(a, s);
      this._errorHandler(l);
    }
    return () => {
      const s = this._stacks.get(e.value) || 0;
      this._stacks.set(e.value, s - 1);
    };
  }
  getMostFrequentStack() {
    if (!this._stacks)
      return;
    let e, t = 0;
    for (const [n, r] of this._stacks)
      (!e || t < r) && (e = [n, r], t = r);
    return e;
  }
};
S1._idPool = 1;
let Mw = S1;
class NE {
  static create() {
    const e = new Error();
    return new NE(e.stack ?? "");
  }
  constructor(e) {
    this.value = e;
  }
  print() {
    console.warn(this.value.split(`
`).slice(2).join(`
`));
  }
}
class KR extends Error {
  constructor(e, t) {
    super(e), this.name = "ListenerLeakError", this.stack = t;
  }
}
class JR extends Error {
  constructor(e, t) {
    super(e), this.name = "ListenerRefusalError", this.stack = t;
  }
}
let YR = 0;
class dg {
  constructor(e) {
    this.value = e, this.id = YR++;
  }
}
const XR = 2, ZR = (i, e) => {
  if (i instanceof dg)
    e(i);
  else
    for (let t = 0; t < i.length; t++) {
      const n = i[t];
      n && e(n);
    }
};
class M {
  constructor(e) {
    var t, n, r, s;
    this._size = 0, this._options = e, this._leakageMon = (t = this._options) != null && t.leakWarningThreshold ? new Mw(
      (e == null ? void 0 : e.onListenerError) ?? Fi,
      ((n = this._options) == null ? void 0 : n.leakWarningThreshold) ?? QR
    ) : void 0, this._perfMon = (r = this._options) != null && r._profName ? new Nw(this._options._profName) : void 0, this._deliveryQueue = (s = this._options) == null ? void 0 : s.deliveryQueue;
  }
  dispose() {
    var e, t, n, r;
    this._disposed || (this._disposed = !0, ((e = this._deliveryQueue) == null ? void 0 : e.current) === this && this._deliveryQueue.reset(), this._listeners && (this._listeners = void 0, this._size = 0), (n = (t = this._options) == null ? void 0 : t.onDidRemoveLastListener) == null || n.call(t), (r = this._leakageMon) == null || r.dispose());
  }
  get event() {
    return this._event ?? (this._event = (e, t, n) => {
      var a, l, c, u, d, f, p;
      if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {
        const v = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;
        console.warn(v);
        const _ = this._leakageMon.getMostFrequentStack() ?? ["UNKNOWN stack", -1], m = new JR(
          `${v}. HINT: Stack shows most frequent listener (${_[1]}-times)`,
          _[0]
        );
        return (((a = this._options) == null ? void 0 : a.onListenerError) || Fi)(m), xe.None;
      }
      if (this._disposed)
        return xe.None;
      t && (e = e.bind(t));
      const r = new dg(e);
      let s;
      this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2) && (r.stack = NE.create(), s = this._leakageMon.check(r.stack, this._size + 1)), this._listeners ? this._listeners instanceof dg ? (this._deliveryQueue ?? (this._deliveryQueue = new e8()), this._listeners = [this._listeners, r]) : this._listeners.push(r) : ((c = (l = this._options) == null ? void 0 : l.onWillAddFirstListener) == null || c.call(l, this), this._listeners = r, (d = (u = this._options) == null ? void 0 : u.onDidAddFirstListener) == null || d.call(u, this)), (p = (f = this._options) == null ? void 0 : f.onDidAddListener) == null || p.call(f, this), this._size++;
      const o = Ie(() => {
        s == null || s(), this._removeListener(r);
      });
      return n instanceof Te ? n.add(o) : Array.isArray(n) && n.push(o), o;
    }), this._event;
  }
  _removeListener(e) {
    var s, o, a, l;
    if ((o = (s = this._options) == null ? void 0 : s.onWillRemoveListener) == null || o.call(s, this), !this._listeners)
      return;
    if (this._size === 1) {
      this._listeners = void 0, (l = (a = this._options) == null ? void 0 : a.onDidRemoveLastListener) == null || l.call(a, this), this._size = 0;
      return;
    }
    const t = this._listeners, n = t.indexOf(e);
    if (n === -1)
      throw console.log("disposed?", this._disposed), console.log("size?", this._size), console.log("arr?", JSON.stringify(this._listeners)), new Error("Attempted to dispose unknown listener");
    this._size--, t[n] = void 0;
    const r = this._deliveryQueue.current === this;
    if (this._size * XR <= t.length) {
      let c = 0;
      for (let u = 0; u < t.length; u++)
        t[u] ? t[c++] = t[u] : r && c < this._deliveryQueue.end && (this._deliveryQueue.end--, c < this._deliveryQueue.i && this._deliveryQueue.i--);
      t.length = c;
    }
  }
  _deliver(e, t) {
    var r;
    if (!e)
      return;
    const n = ((r = this._options) == null ? void 0 : r.onListenerError) || Fi;
    if (!n) {
      e.value(t);
      return;
    }
    try {
      e.value(t);
    } catch (s) {
      n(s);
    }
  }
  _deliverQueue(e) {
    const t = e.current._listeners;
    for (; e.i < e.end; )
      this._deliver(t[e.i++], e.value);
    e.reset();
  }
  fire(e) {
    var t, n, r, s;
    if ((t = this._deliveryQueue) != null && t.current && (this._deliverQueue(this._deliveryQueue), (n = this._perfMon) == null || n.stop()), (r = this._perfMon) == null || r.start(this._size), this._listeners) if (this._listeners instanceof dg)
      this._deliver(this._listeners, e);
    else {
      const o = this._deliveryQueue;
      o.enqueue(this, e, this._listeners.length), this._deliverQueue(o);
    }
    (s = this._perfMon) == null || s.stop();
  }
  hasListeners() {
    return this._size > 0;
  }
}
class e8 {
  constructor() {
    this.i = -1, this.end = 0;
  }
  enqueue(e, t, n) {
    this.i = 0, this.end = n, this.current = e, this.value = t;
  }
  reset() {
    this.i = this.end, this.current = void 0, this.value = void 0;
  }
}
class th extends M {
  async fireAsync(e, t, n) {
    if (this._listeners)
      for (this._asyncDeliveryQueue || (this._asyncDeliveryQueue = new ea()), ZR(this._listeners, (r) => this._asyncDeliveryQueue.push([r.value, e])); this._asyncDeliveryQueue.size > 0 && !t.isCancellationRequested; ) {
        const [r, s] = this._asyncDeliveryQueue.shift(), o = [], a = {
          ...s,
          token: t,
          waitUntil: (l) => {
            if (Object.isFrozen(o))
              throw new Error("waitUntil can NOT be called asynchronous");
            n && (l = n(l, r)), o.push(l);
          }
        };
        try {
          r(a);
        } catch (l) {
          Fi(l);
          continue;
        }
        await Promise.allSettled(o).then((l) => {
          for (const c of l)
            c.status === "rejected" && Fi(c.reason);
        });
      }
  }
}
class zg extends M {
  get isPaused() {
    return this._isPaused !== 0;
  }
  constructor(e) {
    super(e), this._isPaused = 0, this._eventQueue = new ea(), this._mergeFn = e == null ? void 0 : e.merge;
  }
  pause() {
    this._isPaused++;
  }
  resume() {
    if (this._isPaused !== 0 && --this._isPaused === 0)
      if (this._mergeFn) {
        if (this._eventQueue.size > 0) {
          const e = Array.from(this._eventQueue);
          this._eventQueue.clear(), super.fire(this._mergeFn(e));
        }
      } else
        for (; !this._isPaused && this._eventQueue.size !== 0; )
          super.fire(this._eventQueue.shift());
  }
  fire(e) {
    this._size && (this._isPaused !== 0 ? this._eventQueue.push(e) : super.fire(e));
  }
}
class t8 extends zg {
  constructor(e) {
    super(e), this._delay = e.delay ?? 100;
  }
  fire(e) {
    this._handle || (this.pause(), this._handle = setTimeout(() => {
      this._handle = void 0, this.resume();
    }, this._delay)), super.fire(e);
  }
}
class i8 extends M {
  constructor(e) {
    super(e), this._queuedEvents = [], this._mergeFn = e == null ? void 0 : e.merge;
  }
  fire(e) {
    this.hasListeners() && (this._queuedEvents.push(e), this._queuedEvents.length === 1 && queueMicrotask(() => {
      this._mergeFn ? super.fire(this._mergeFn(this._queuedEvents)) : this._queuedEvents.forEach((t) => super.fire(t)), this._queuedEvents = [];
    }));
  }
}
var $h;
(function(i) {
  i[i.Desktop = 1] = "Desktop", i[i.Web = 2] = "Web";
})($h || ($h = {}));
var l2;
(function(i) {
  i[i.VersionMismatch = 55] = "VersionMismatch", i[i.UnexpectedError = 81] = "UnexpectedError";
})(l2 || (l2 = {}));
var Sr;
(function(i) {
  i[i.Initialized = 0] = "Initialized", i[i.Ready = 1] = "Ready", i[i.Terminate = 2] = "Terminate";
})(Sr || (Sr = {}));
function c2(i) {
  const e = he.alloc(1);
  switch (i) {
    case Sr.Initialized:
      e.writeUInt8(1, 0);
      break;
    case Sr.Ready:
      e.writeUInt8(2, 0);
      break;
    case Sr.Terminate:
      e.writeUInt8(3, 0);
      break;
  }
  return e;
}
function n8(i, e) {
  if (i.byteLength !== 1)
    return !1;
  switch (i.readUInt8(0)) {
    case 1:
      return e === Sr.Initialized;
    case 2:
      return e === Sr.Ready;
    case 3:
      return e === Sr.Terminate;
    default:
      return !1;
  }
}
var u2;
(function(i) {
  i.Start = "START_NATIVE_LOG", i.End = "END_NATIVE_LOG";
})(u2 || (u2 = {}));
function Kv(i) {
  const e = [];
  typeof i == "number" && e.push("code/timeOrigin", i);
  function t(r, s) {
    e.push(r, (s == null ? void 0 : s.startTime) ?? Date.now());
  }
  function n() {
    const r = [];
    for (let s = 0; s < e.length; s += 2)
      r.push({
        name: e[s],
        startTime: e[s + 1]
      });
    return r;
  }
  return { mark: t, getMarks: n };
}
function r8() {
  if (typeof performance == "object" && typeof performance.mark == "function" && !performance.nodeTiming)
    return typeof performance.timeOrigin != "number" && !performance.timing ? Kv() : {
      mark(i, e) {
        performance.mark(i, e);
      },
      getMarks() {
        let i = performance.timeOrigin;
        typeof i != "number" && (i = (performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart) ?? 0);
        const e = [{ name: "code/timeOrigin", startTime: Math.round(i) }];
        for (const t of performance.getEntriesByType("mark"))
          e.push({
            name: t.name,
            startTime: Math.round(i + t.startTime)
          });
        return e;
      }
    };
  if (typeof process == "object") {
    const i = performance == null ? void 0 : performance.timeOrigin;
    return Kv(i);
  } else
    return console.trace("perf-util loaded in UNKNOWN environment"), Kv();
}
function s8(i) {
  return i.MonacoPerformanceMarks || (i.MonacoPerformanceMarks = r8()), i.MonacoPerformanceMarks;
}
const RT = s8(globalThis), an = RT.mark, o8 = RT.getMarks;
var L;
(function(i) {
  i[i.Null = 0] = "Null", i[i.Backspace = 8] = "Backspace", i[i.Tab = 9] = "Tab", i[i.LineFeed = 10] = "LineFeed", i[i.CarriageReturn = 13] = "CarriageReturn", i[i.Space = 32] = "Space", i[i.ExclamationMark = 33] = "ExclamationMark", i[i.DoubleQuote = 34] = "DoubleQuote", i[i.Hash = 35] = "Hash", i[i.DollarSign = 36] = "DollarSign", i[i.PercentSign = 37] = "PercentSign", i[i.Ampersand = 38] = "Ampersand", i[i.SingleQuote = 39] = "SingleQuote", i[i.OpenParen = 40] = "OpenParen", i[i.CloseParen = 41] = "CloseParen", i[i.Asterisk = 42] = "Asterisk", i[i.Plus = 43] = "Plus", i[i.Comma = 44] = "Comma", i[i.Dash = 45] = "Dash", i[i.Period = 46] = "Period", i[i.Slash = 47] = "Slash", i[i.Digit0 = 48] = "Digit0", i[i.Digit1 = 49] = "Digit1", i[i.Digit2 = 50] = "Digit2", i[i.Digit3 = 51] = "Digit3", i[i.Digit4 = 52] = "Digit4", i[i.Digit5 = 53] = "Digit5", i[i.Digit6 = 54] = "Digit6", i[i.Digit7 = 55] = "Digit7", i[i.Digit8 = 56] = "Digit8", i[i.Digit9 = 57] = "Digit9", i[i.Colon = 58] = "Colon", i[i.Semicolon = 59] = "Semicolon", i[i.LessThan = 60] = "LessThan", i[i.Equals = 61] = "Equals", i[i.GreaterThan = 62] = "GreaterThan", i[i.QuestionMark = 63] = "QuestionMark", i[i.AtSign = 64] = "AtSign", i[i.A = 65] = "A", i[i.B = 66] = "B", i[i.C = 67] = "C", i[i.D = 68] = "D", i[i.E = 69] = "E", i[i.F = 70] = "F", i[i.G = 71] = "G", i[i.H = 72] = "H", i[i.I = 73] = "I", i[i.J = 74] = "J", i[i.K = 75] = "K", i[i.L = 76] = "L", i[i.M = 77] = "M", i[i.N = 78] = "N", i[i.O = 79] = "O", i[i.P = 80] = "P", i[i.Q = 81] = "Q", i[i.R = 82] = "R", i[i.S = 83] = "S", i[i.T = 84] = "T", i[i.U = 85] = "U", i[i.V = 86] = "V", i[i.W = 87] = "W", i[i.X = 88] = "X", i[i.Y = 89] = "Y", i[i.Z = 90] = "Z", i[i.OpenSquareBracket = 91] = "OpenSquareBracket", i[i.Backslash = 92] = "Backslash", i[i.CloseSquareBracket = 93] = "CloseSquareBracket", i[i.Caret = 94] = "Caret", i[i.Underline = 95] = "Underline", i[i.BackTick = 96] = "BackTick", i[i.a = 97] = "a", i[i.b = 98] = "b", i[i.c = 99] = "c", i[i.d = 100] = "d", i[i.e = 101] = "e", i[i.f = 102] = "f", i[i.g = 103] = "g", i[i.h = 104] = "h", i[i.i = 105] = "i", i[i.j = 106] = "j", i[i.k = 107] = "k", i[i.l = 108] = "l", i[i.m = 109] = "m", i[i.n = 110] = "n", i[i.o = 111] = "o", i[i.p = 112] = "p", i[i.q = 113] = "q", i[i.r = 114] = "r", i[i.s = 115] = "s", i[i.t = 116] = "t", i[i.u = 117] = "u", i[i.v = 118] = "v", i[i.w = 119] = "w", i[i.x = 120] = "x", i[i.y = 121] = "y", i[i.z = 122] = "z", i[i.OpenCurlyBrace = 123] = "OpenCurlyBrace", i[i.Pipe = 124] = "Pipe", i[i.CloseCurlyBrace = 125] = "CloseCurlyBrace", i[i.Tilde = 126] = "Tilde", i[i.NoBreakSpace = 160] = "NoBreakSpace", i[i.U_Combining_Grave_Accent = 768] = "U_Combining_Grave_Accent", i[i.U_Combining_Acute_Accent = 769] = "U_Combining_Acute_Accent", i[i.U_Combining_Circumflex_Accent = 770] = "U_Combining_Circumflex_Accent", i[i.U_Combining_Tilde = 771] = "U_Combining_Tilde", i[i.U_Combining_Macron = 772] = "U_Combining_Macron", i[i.U_Combining_Overline = 773] = "U_Combining_Overline", i[i.U_Combining_Breve = 774] = "U_Combining_Breve", i[i.U_Combining_Dot_Above = 775] = "U_Combining_Dot_Above", i[i.U_Combining_Diaeresis = 776] = "U_Combining_Diaeresis", i[i.U_Combining_Hook_Above = 777] = "U_Combining_Hook_Above", i[i.U_Combining_Ring_Above = 778] = "U_Combining_Ring_Above", i[i.U_Combining_Double_Acute_Accent = 779] = "U_Combining_Double_Acute_Accent", i[i.U_Combining_Caron = 780] = "U_Combining_Caron", i[i.U_Combining_Vertical_Line_Above = 781] = "U_Combining_Vertical_Line_Above", i[i.U_Combining_Double_Vertical_Line_Above = 782] = "U_Combining_Double_Vertical_Line_Above", i[i.U_Combining_Double_Grave_Accent = 783] = "U_Combining_Double_Grave_Accent", i[i.U_Combining_Candrabindu = 784] = "U_Combining_Candrabindu", i[i.U_Combining_Inverted_Breve = 785] = "U_Combining_Inverted_Breve", i[i.U_Combining_Turned_Comma_Above = 786] = "U_Combining_Turned_Comma_Above", i[i.U_Combining_Comma_Above = 787] = "U_Combining_Comma_Above", i[i.U_Combining_Reversed_Comma_Above = 788] = "U_Combining_Reversed_Comma_Above", i[i.U_Combining_Comma_Above_Right = 789] = "U_Combining_Comma_Above_Right", i[i.U_Combining_Grave_Accent_Below = 790] = "U_Combining_Grave_Accent_Below", i[i.U_Combining_Acute_Accent_Below = 791] = "U_Combining_Acute_Accent_Below", i[i.U_Combining_Left_Tack_Below = 792] = "U_Combining_Left_Tack_Below", i[i.U_Combining_Right_Tack_Below = 793] = "U_Combining_Right_Tack_Below", i[i.U_Combining_Left_Angle_Above = 794] = "U_Combining_Left_Angle_Above", i[i.U_Combining_Horn = 795] = "U_Combining_Horn", i[i.U_Combining_Left_Half_Ring_Below = 796] = "U_Combining_Left_Half_Ring_Below", i[i.U_Combining_Up_Tack_Below = 797] = "U_Combining_Up_Tack_Below", i[i.U_Combining_Down_Tack_Below = 798] = "U_Combining_Down_Tack_Below", i[i.U_Combining_Plus_Sign_Below = 799] = "U_Combining_Plus_Sign_Below", i[i.U_Combining_Minus_Sign_Below = 800] = "U_Combining_Minus_Sign_Below", i[i.U_Combining_Palatalized_Hook_Below = 801] = "U_Combining_Palatalized_Hook_Below", i[i.U_Combining_Retroflex_Hook_Below = 802] = "U_Combining_Retroflex_Hook_Below", i[i.U_Combining_Dot_Below = 803] = "U_Combining_Dot_Below", i[i.U_Combining_Diaeresis_Below = 804] = "U_Combining_Diaeresis_Below", i[i.U_Combining_Ring_Below = 805] = "U_Combining_Ring_Below", i[i.U_Combining_Comma_Below = 806] = "U_Combining_Comma_Below", i[i.U_Combining_Cedilla = 807] = "U_Combining_Cedilla", i[i.U_Combining_Ogonek = 808] = "U_Combining_Ogonek", i[i.U_Combining_Vertical_Line_Below = 809] = "U_Combining_Vertical_Line_Below", i[i.U_Combining_Bridge_Below = 810] = "U_Combining_Bridge_Below", i[i.U_Combining_Inverted_Double_Arch_Below = 811] = "U_Combining_Inverted_Double_Arch_Below", i[i.U_Combining_Caron_Below = 812] = "U_Combining_Caron_Below", i[i.U_Combining_Circumflex_Accent_Below = 813] = "U_Combining_Circumflex_Accent_Below", i[i.U_Combining_Breve_Below = 814] = "U_Combining_Breve_Below", i[i.U_Combining_Inverted_Breve_Below = 815] = "U_Combining_Inverted_Breve_Below", i[i.U_Combining_Tilde_Below = 816] = "U_Combining_Tilde_Below", i[i.U_Combining_Macron_Below = 817] = "U_Combining_Macron_Below", i[i.U_Combining_Low_Line = 818] = "U_Combining_Low_Line", i[i.U_Combining_Double_Low_Line = 819] = "U_Combining_Double_Low_Line", i[i.U_Combining_Tilde_Overlay = 820] = "U_Combining_Tilde_Overlay", i[i.U_Combining_Short_Stroke_Overlay = 821] = "U_Combining_Short_Stroke_Overlay", i[i.U_Combining_Long_Stroke_Overlay = 822] = "U_Combining_Long_Stroke_Overlay", i[i.U_Combining_Short_Solidus_Overlay = 823] = "U_Combining_Short_Solidus_Overlay", i[i.U_Combining_Long_Solidus_Overlay = 824] = "U_Combining_Long_Solidus_Overlay", i[i.U_Combining_Right_Half_Ring_Below = 825] = "U_Combining_Right_Half_Ring_Below", i[i.U_Combining_Inverted_Bridge_Below = 826] = "U_Combining_Inverted_Bridge_Below", i[i.U_Combining_Square_Below = 827] = "U_Combining_Square_Below", i[i.U_Combining_Seagull_Below = 828] = "U_Combining_Seagull_Below", i[i.U_Combining_X_Above = 829] = "U_Combining_X_Above", i[i.U_Combining_Vertical_Tilde = 830] = "U_Combining_Vertical_Tilde", i[i.U_Combining_Double_Overline = 831] = "U_Combining_Double_Overline", i[i.U_Combining_Grave_Tone_Mark = 832] = "U_Combining_Grave_Tone_Mark", i[i.U_Combining_Acute_Tone_Mark = 833] = "U_Combining_Acute_Tone_Mark", i[i.U_Combining_Greek_Perispomeni = 834] = "U_Combining_Greek_Perispomeni", i[i.U_Combining_Greek_Koronis = 835] = "U_Combining_Greek_Koronis", i[i.U_Combining_Greek_Dialytika_Tonos = 836] = "U_Combining_Greek_Dialytika_Tonos", i[i.U_Combining_Greek_Ypogegrammeni = 837] = "U_Combining_Greek_Ypogegrammeni", i[i.U_Combining_Bridge_Above = 838] = "U_Combining_Bridge_Above", i[i.U_Combining_Equals_Sign_Below = 839] = "U_Combining_Equals_Sign_Below", i[i.U_Combining_Double_Vertical_Line_Below = 840] = "U_Combining_Double_Vertical_Line_Below", i[i.U_Combining_Left_Angle_Below = 841] = "U_Combining_Left_Angle_Below", i[i.U_Combining_Not_Tilde_Above = 842] = "U_Combining_Not_Tilde_Above", i[i.U_Combining_Homothetic_Above = 843] = "U_Combining_Homothetic_Above", i[i.U_Combining_Almost_Equal_To_Above = 844] = "U_Combining_Almost_Equal_To_Above", i[i.U_Combining_Left_Right_Arrow_Below = 845] = "U_Combining_Left_Right_Arrow_Below", i[i.U_Combining_Upwards_Arrow_Below = 846] = "U_Combining_Upwards_Arrow_Below", i[i.U_Combining_Grapheme_Joiner = 847] = "U_Combining_Grapheme_Joiner", i[i.U_Combining_Right_Arrowhead_Above = 848] = "U_Combining_Right_Arrowhead_Above", i[i.U_Combining_Left_Half_Ring_Above = 849] = "U_Combining_Left_Half_Ring_Above", i[i.U_Combining_Fermata = 850] = "U_Combining_Fermata", i[i.U_Combining_X_Below = 851] = "U_Combining_X_Below", i[i.U_Combining_Left_Arrowhead_Below = 852] = "U_Combining_Left_Arrowhead_Below", i[i.U_Combining_Right_Arrowhead_Below = 853] = "U_Combining_Right_Arrowhead_Below", i[i.U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below = 854] = "U_Combining_Right_Arrowhead_And_Up_Arrowhead_Below", i[i.U_Combining_Right_Half_Ring_Above = 855] = "U_Combining_Right_Half_Ring_Above", i[i.U_Combining_Dot_Above_Right = 856] = "U_Combining_Dot_Above_Right", i[i.U_Combining_Asterisk_Below = 857] = "U_Combining_Asterisk_Below", i[i.U_Combining_Double_Ring_Below = 858] = "U_Combining_Double_Ring_Below", i[i.U_Combining_Zigzag_Above = 859] = "U_Combining_Zigzag_Above", i[i.U_Combining_Double_Breve_Below = 860] = "U_Combining_Double_Breve_Below", i[i.U_Combining_Double_Breve = 861] = "U_Combining_Double_Breve", i[i.U_Combining_Double_Macron = 862] = "U_Combining_Double_Macron", i[i.U_Combining_Double_Macron_Below = 863] = "U_Combining_Double_Macron_Below", i[i.U_Combining_Double_Tilde = 864] = "U_Combining_Double_Tilde", i[i.U_Combining_Double_Inverted_Breve = 865] = "U_Combining_Double_Inverted_Breve", i[i.U_Combining_Double_Rightwards_Arrow_Below = 866] = "U_Combining_Double_Rightwards_Arrow_Below", i[i.U_Combining_Latin_Small_Letter_A = 867] = "U_Combining_Latin_Small_Letter_A", i[i.U_Combining_Latin_Small_Letter_E = 868] = "U_Combining_Latin_Small_Letter_E", i[i.U_Combining_Latin_Small_Letter_I = 869] = "U_Combining_Latin_Small_Letter_I", i[i.U_Combining_Latin_Small_Letter_O = 870] = "U_Combining_Latin_Small_Letter_O", i[i.U_Combining_Latin_Small_Letter_U = 871] = "U_Combining_Latin_Small_Letter_U", i[i.U_Combining_Latin_Small_Letter_C = 872] = "U_Combining_Latin_Small_Letter_C", i[i.U_Combining_Latin_Small_Letter_D = 873] = "U_Combining_Latin_Small_Letter_D", i[i.U_Combining_Latin_Small_Letter_H = 874] = "U_Combining_Latin_Small_Letter_H", i[i.U_Combining_Latin_Small_Letter_M = 875] = "U_Combining_Latin_Small_Letter_M", i[i.U_Combining_Latin_Small_Letter_R = 876] = "U_Combining_Latin_Small_Letter_R", i[i.U_Combining_Latin_Small_Letter_T = 877] = "U_Combining_Latin_Small_Letter_T", i[i.U_Combining_Latin_Small_Letter_V = 878] = "U_Combining_Latin_Small_Letter_V", i[i.U_Combining_Latin_Small_Letter_X = 879] = "U_Combining_Latin_Small_Letter_X", i[i.LINE_SEPARATOR = 8232] = "LINE_SEPARATOR", i[i.PARAGRAPH_SEPARATOR = 8233] = "PARAGRAPH_SEPARATOR", i[i.NEXT_LINE = 133] = "NEXT_LINE", i[i.U_CIRCUMFLEX = 94] = "U_CIRCUMFLEX", i[i.U_GRAVE_ACCENT = 96] = "U_GRAVE_ACCENT", i[i.U_DIAERESIS = 168] = "U_DIAERESIS", i[i.U_MACRON = 175] = "U_MACRON", i[i.U_ACUTE_ACCENT = 180] = "U_ACUTE_ACCENT", i[i.U_CEDILLA = 184] = "U_CEDILLA", i[i.U_MODIFIER_LETTER_LEFT_ARROWHEAD = 706] = "U_MODIFIER_LETTER_LEFT_ARROWHEAD", i[i.U_MODIFIER_LETTER_RIGHT_ARROWHEAD = 707] = "U_MODIFIER_LETTER_RIGHT_ARROWHEAD", i[i.U_MODIFIER_LETTER_UP_ARROWHEAD = 708] = "U_MODIFIER_LETTER_UP_ARROWHEAD", i[i.U_MODIFIER_LETTER_DOWN_ARROWHEAD = 709] = "U_MODIFIER_LETTER_DOWN_ARROWHEAD", i[i.U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = 722] = "U_MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING", i[i.U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = 723] = "U_MODIFIER_LETTER_CENTRED_LEFT_HALF_RING", i[i.U_MODIFIER_LETTER_UP_TACK = 724] = "U_MODIFIER_LETTER_UP_TACK", i[i.U_MODIFIER_LETTER_DOWN_TACK = 725] = "U_MODIFIER_LETTER_DOWN_TACK", i[i.U_MODIFIER_LETTER_PLUS_SIGN = 726] = "U_MODIFIER_LETTER_PLUS_SIGN", i[i.U_MODIFIER_LETTER_MINUS_SIGN = 727] = "U_MODIFIER_LETTER_MINUS_SIGN", i[i.U_BREVE = 728] = "U_BREVE", i[i.U_DOT_ABOVE = 729] = "U_DOT_ABOVE", i[i.U_RING_ABOVE = 730] = "U_RING_ABOVE", i[i.U_OGONEK = 731] = "U_OGONEK", i[i.U_SMALL_TILDE = 732] = "U_SMALL_TILDE", i[i.U_DOUBLE_ACUTE_ACCENT = 733] = "U_DOUBLE_ACUTE_ACCENT", i[i.U_MODIFIER_LETTER_RHOTIC_HOOK = 734] = "U_MODIFIER_LETTER_RHOTIC_HOOK", i[i.U_MODIFIER_LETTER_CROSS_ACCENT = 735] = "U_MODIFIER_LETTER_CROSS_ACCENT", i[i.U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = 741] = "U_MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR", i[i.U_MODIFIER_LETTER_HIGH_TONE_BAR = 742] = "U_MODIFIER_LETTER_HIGH_TONE_BAR", i[i.U_MODIFIER_LETTER_MID_TONE_BAR = 743] = "U_MODIFIER_LETTER_MID_TONE_BAR", i[i.U_MODIFIER_LETTER_LOW_TONE_BAR = 744] = "U_MODIFIER_LETTER_LOW_TONE_BAR", i[i.U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = 745] = "U_MODIFIER_LETTER_EXTRA_LOW_TONE_BAR", i[i.U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = 746] = "U_MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK", i[i.U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = 747] = "U_MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK", i[i.U_MODIFIER_LETTER_UNASPIRATED = 749] = "U_MODIFIER_LETTER_UNASPIRATED", i[i.U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = 751] = "U_MODIFIER_LETTER_LOW_DOWN_ARROWHEAD", i[i.U_MODIFIER_LETTER_LOW_UP_ARROWHEAD = 752] = "U_MODIFIER_LETTER_LOW_UP_ARROWHEAD", i[i.U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = 753] = "U_MODIFIER_LETTER_LOW_LEFT_ARROWHEAD", i[i.U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = 754] = "U_MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD", i[i.U_MODIFIER_LETTER_LOW_RING = 755] = "U_MODIFIER_LETTER_LOW_RING", i[i.U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = 756] = "U_MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT", i[i.U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = 757] = "U_MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT", i[i.U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = 758] = "U_MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT", i[i.U_MODIFIER_LETTER_LOW_TILDE = 759] = "U_MODIFIER_LETTER_LOW_TILDE", i[i.U_MODIFIER_LETTER_RAISED_COLON = 760] = "U_MODIFIER_LETTER_RAISED_COLON", i[i.U_MODIFIER_LETTER_BEGIN_HIGH_TONE = 761] = "U_MODIFIER_LETTER_BEGIN_HIGH_TONE", i[i.U_MODIFIER_LETTER_END_HIGH_TONE = 762] = "U_MODIFIER_LETTER_END_HIGH_TONE", i[i.U_MODIFIER_LETTER_BEGIN_LOW_TONE = 763] = "U_MODIFIER_LETTER_BEGIN_LOW_TONE", i[i.U_MODIFIER_LETTER_END_LOW_TONE = 764] = "U_MODIFIER_LETTER_END_LOW_TONE", i[i.U_MODIFIER_LETTER_SHELF = 765] = "U_MODIFIER_LETTER_SHELF", i[i.U_MODIFIER_LETTER_OPEN_SHELF = 766] = "U_MODIFIER_LETTER_OPEN_SHELF", i[i.U_MODIFIER_LETTER_LOW_LEFT_ARROW = 767] = "U_MODIFIER_LETTER_LOW_LEFT_ARROW", i[i.U_GREEK_LOWER_NUMERAL_SIGN = 885] = "U_GREEK_LOWER_NUMERAL_SIGN", i[i.U_GREEK_TONOS = 900] = "U_GREEK_TONOS", i[i.U_GREEK_DIALYTIKA_TONOS = 901] = "U_GREEK_DIALYTIKA_TONOS", i[i.U_GREEK_KORONIS = 8125] = "U_GREEK_KORONIS", i[i.U_GREEK_PSILI = 8127] = "U_GREEK_PSILI", i[i.U_GREEK_PERISPOMENI = 8128] = "U_GREEK_PERISPOMENI", i[i.U_GREEK_DIALYTIKA_AND_PERISPOMENI = 8129] = "U_GREEK_DIALYTIKA_AND_PERISPOMENI", i[i.U_GREEK_PSILI_AND_VARIA = 8141] = "U_GREEK_PSILI_AND_VARIA", i[i.U_GREEK_PSILI_AND_OXIA = 8142] = "U_GREEK_PSILI_AND_OXIA", i[i.U_GREEK_PSILI_AND_PERISPOMENI = 8143] = "U_GREEK_PSILI_AND_PERISPOMENI", i[i.U_GREEK_DASIA_AND_VARIA = 8157] = "U_GREEK_DASIA_AND_VARIA", i[i.U_GREEK_DASIA_AND_OXIA = 8158] = "U_GREEK_DASIA_AND_OXIA", i[i.U_GREEK_DASIA_AND_PERISPOMENI = 8159] = "U_GREEK_DASIA_AND_PERISPOMENI", i[i.U_GREEK_DIALYTIKA_AND_VARIA = 8173] = "U_GREEK_DIALYTIKA_AND_VARIA", i[i.U_GREEK_DIALYTIKA_AND_OXIA = 8174] = "U_GREEK_DIALYTIKA_AND_OXIA", i[i.U_GREEK_VARIA = 8175] = "U_GREEK_VARIA", i[i.U_GREEK_OXIA = 8189] = "U_GREEK_OXIA", i[i.U_GREEK_DASIA = 8190] = "U_GREEK_DASIA", i[i.U_IDEOGRAPHIC_FULL_STOP = 12290] = "U_IDEOGRAPHIC_FULL_STOP", i[i.U_LEFT_CORNER_BRACKET = 12300] = "U_LEFT_CORNER_BRACKET", i[i.U_RIGHT_CORNER_BRACKET = 12301] = "U_RIGHT_CORNER_BRACKET", i[i.U_LEFT_BLACK_LENTICULAR_BRACKET = 12304] = "U_LEFT_BLACK_LENTICULAR_BRACKET", i[i.U_RIGHT_BLACK_LENTICULAR_BRACKET = 12305] = "U_RIGHT_BLACK_LENTICULAR_BRACKET", i[i.U_OVERLINE = 8254] = "U_OVERLINE", i[i.UTF8_BOM = 65279] = "UTF8_BOM", i[i.U_FULLWIDTH_SEMICOLON = 65307] = "U_FULLWIDTH_SEMICOLON", i[i.U_FULLWIDTH_COMMA = 65292] = "U_FULLWIDTH_COMMA";
})(L || (L = {}));
var rt;
(function(i) {
  i[i.Uri = 1] = "Uri", i[i.Regexp = 2] = "Regexp", i[i.ScmResource = 3] = "ScmResource", i[i.ScmResourceGroup = 4] = "ScmResourceGroup", i[i.ScmProvider = 5] = "ScmProvider", i[i.CommentController = 6] = "CommentController", i[i.CommentThread = 7] = "CommentThread", i[i.CommentThreadInstance = 8] = "CommentThreadInstance", i[i.CommentThreadReply = 9] = "CommentThreadReply", i[i.CommentNode = 10] = "CommentNode", i[i.CommentThreadNode = 11] = "CommentThreadNode", i[i.TimelineActionContext = 12] = "TimelineActionContext", i[i.NotebookCellActionContext = 13] = "NotebookCellActionContext", i[i.NotebookActionContext = 14] = "NotebookActionContext", i[i.TerminalContext = 15] = "TerminalContext", i[i.TestItemContext = 16] = "TestItemContext", i[i.Date = 17] = "Date", i[i.TestMessageMenuArgs = 18] = "TestMessageMenuArgs", i[i.ChatViewContext = 19] = "ChatViewContext", i[i.LanguageModelToolResult = 20] = "LanguageModelToolResult", i[i.LanguageModelTextPart = 21] = "LanguageModelTextPart", i[i.LanguageModelPromptTsxPart = 22] = "LanguageModelPromptTsxPart", i[i.LanguageModelDataPart = 23] = "LanguageModelDataPart", i[i.ChatSessionContext = 24] = "ChatSessionContext", i[i.ChatResponsePullRequestPart = 25] = "ChatResponsePullRequestPart";
})(rt || (rt = {}));
function a8() {
  return globalThis._VSCODE_NLS_MESSAGES;
}
function LT() {
  return globalThis._VSCODE_NLS_LANGUAGE;
}
const l8 = LT() === "pseudo" || typeof document < "u" && document.location && typeof document.location.hash == "string" && document.location.hash.indexOf("pseudo=true") >= 0;
function qg(i, e) {
  let t;
  return e.length === 0 ? t = i : t = i.replace(/\{(\d+)\}/g, (n, r) => {
    const s = r[0], o = e[s];
    let a = n;
    return typeof o == "string" ? a = o : (typeof o == "number" || typeof o == "boolean" || o === void 0 || o === null) && (a = String(o)), a;
  }), l8 && (t = "［" + t.replace(/[aouei]/g, "$&$&") + "］"), t;
}
function h(i, e, ...t) {
  return qg(typeof i == "number" ? NT(i, e) : e, t);
}
function NT(i, e) {
  var n;
  const t = (n = a8()) == null ? void 0 : n[i];
  if (typeof t != "string") {
    if (typeof e == "string")
      return e;
    throw new Error(`!!! NLS MISSING: ${i} !!!`);
  }
  return t;
}
function X1(i, e, ...t) {
  let n;
  typeof i == "number" ? n = NT(i, e) : n = e;
  const r = qg(n, t);
  return {
    value: r,
    original: e === n ? r : qg(e, t)
  };
}
const No = "en";
let Hh = !1, Bh = !1, ih = !1, MT = !1, ME = !1, OE = !1, OT = !1, FT = !1, Wp, hg = No, d2 = No, c8, rr;
const Gs = globalThis;
let Pi;
var hT;
typeof Gs.vscode < "u" && typeof Gs.vscode.process < "u" ? Pi = Gs.vscode.process : typeof process < "u" && typeof ((hT = process == null ? void 0 : process.versions) == null ? void 0 : hT.node) == "string" && (Pi = process);
var fT;
const u8 = typeof ((fT = Pi == null ? void 0 : Pi.versions) == null ? void 0 : fT.electron) == "string", d8 = u8 && (Pi == null ? void 0 : Pi.type) === "renderer";
var pT;
if (typeof Pi == "object") {
  Hh = Pi.platform === "win32", Bh = Pi.platform === "darwin", ih = Pi.platform === "linux", ih && Pi.env.SNAP && Pi.env.SNAP_REVISION, OT = !!Pi.env.CI || !!Pi.env.BUILD_ARTIFACTSTAGINGDIRECTORY || !!Pi.env.GITHUB_WORKSPACE, Wp = No, hg = No;
  const i = Pi.env.VSCODE_NLS_CONFIG;
  if (i)
    try {
      const e = JSON.parse(i);
      Wp = e.userLocale, d2 = e.osLocale, hg = e.resolvedLanguage || No, c8 = (pT = e.languagePack) == null ? void 0 : pT.translationsConfigFile;
    } catch {
    }
  MT = !0;
} else typeof navigator == "object" && !d8 ? (rr = navigator.userAgent, Hh = rr.indexOf("Windows") >= 0, Bh = rr.indexOf("Macintosh") >= 0, OE = (rr.indexOf("Macintosh") >= 0 || rr.indexOf("iPad") >= 0 || rr.indexOf("iPhone") >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0, ih = rr.indexOf("Linux") >= 0, FT = (rr == null ? void 0 : rr.indexOf("Mobi")) >= 0, ME = !0, hg = LT() || No, Wp = navigator.language.toLowerCase(), d2 = Wp) : console.error("Unable to resolve platform.");
var yr;
(function(i) {
  i[i.Web = 0] = "Web", i[i.Mac = 1] = "Mac", i[i.Linux = 2] = "Linux", i[i.Windows = 3] = "Windows";
})(yr || (yr = {}));
function h8(i) {
  switch (i) {
    case yr.Web:
      return "Web";
    case yr.Mac:
      return "Mac";
    case yr.Linux:
      return "Linux";
    case yr.Windows:
      return "Windows";
  }
}
yr.Web;
Bh ? yr.Mac : Hh ? yr.Windows : ih && yr.Linux;
const Yi = Hh, Un = Bh, jo = ih, UT = MT, xp = ME, Wh = ME && typeof Gs.importScripts == "function", f8 = Wh ? Gs.origin : void 0, p8 = OE, g8 = FT, aa = OT, ds = rr, so = hg;
var h2;
(function(i) {
  function e() {
    return so;
  }
  i.value = e;
  function t() {
    return so.length === 2 ? so === "en" : so.length >= 3 ? so[0] === "e" && so[1] === "n" && so[2] === "-" : !1;
  }
  i.isDefaultVariant = t;
  function n() {
    return so === "en";
  }
  i.isDefault = n;
})(h2 || (h2 = {}));
const m8 = typeof Gs.postMessage == "function" && !Gs.importScripts, $T = (() => {
  if (m8) {
    const i = [];
    Gs.addEventListener("message", (t) => {
      if (t.data && t.data.vscodeScheduleAsyncWork)
        for (let n = 0, r = i.length; n < r; n++) {
          const s = i[n];
          if (s.id === t.data.vscodeScheduleAsyncWork) {
            i.splice(n, 1), s.callback();
            return;
          }
        }
    });
    let e = 0;
    return (t) => {
      const n = ++e;
      i.push({
        id: n,
        callback: t
      }), Gs.postMessage({ vscodeScheduleAsyncWork: n }, "*");
    };
  }
  return (i) => setTimeout(i);
})();
var is;
(function(i) {
  i[i.Windows = 1] = "Windows", i[i.Macintosh = 2] = "Macintosh", i[i.Linux = 3] = "Linux";
})(is || (is = {}));
const Vp = Bh || OE ? is.Macintosh : Hh ? is.Windows : is.Linux;
let f2 = !0, p2 = !1;
function HT() {
  if (!p2) {
    p2 = !0;
    const i = new Uint8Array(2);
    i[0] = 1, i[1] = 2, f2 = new Uint16Array(i.buffer)[0] === 513;
  }
  return f2;
}
const FE = !!(ds && ds.indexOf("Chrome") >= 0), _8 = !!(ds && ds.indexOf("Firefox") >= 0), v8 = !!(!FE && ds && ds.indexOf("Safari") >= 0), BT = !!(ds && ds.indexOf("Edg/") >= 0);
ds && ds.indexOf("Android") >= 0;
let al;
const Jv = globalThis.vscode;
var gT;
if (typeof Jv < "u" && typeof Jv.process < "u") {
  const i = Jv.process;
  al = {
    get platform() {
      return i.platform;
    },
    get arch() {
      return i.arch;
    },
    get env() {
      return i.env;
    },
    cwd() {
      return i.cwd();
    }
  };
} else typeof process < "u" && typeof ((gT = process == null ? void 0 : process.versions) == null ? void 0 : gT.node) == "string" ? al = {
  get platform() {
    return process.platform;
  },
  get arch() {
    return process.arch;
  },
  get env() {
    return process.env;
  },
  cwd() {
    return process.env.VSCODE_CWD || process.cwd();
  }
} : al = {
  get platform() {
    return Yi ? "win32" : Un ? "darwin" : "linux";
  },
  get arch() {
  },
  get env() {
    return {};
  },
  cwd() {
    return "/";
  }
};
const Ou = al.cwd, Vh = al.env, w8 = al.platform;
al.arch;
const b8 = 65, y8 = 97, x8 = 90, E8 = 122, ll = 46, Ii = 47, mn = 92, ps = 58, S8 = 63;
class WT extends Error {
  constructor(e, t, n) {
    let r;
    typeof t == "string" && t.indexOf("not ") === 0 ? (r = "must not be", t = t.replace(/^not /, "")) : r = "must be";
    const s = e.indexOf(".") !== -1 ? "property" : "argument";
    let o = `The "${e}" ${s} ${r} of type ${t}`;
    o += `. Received type ${typeof n}`, super(o), this.code = "ERR_INVALID_ARG_TYPE";
  }
}
function D8(i, e) {
  if (i === null || typeof i != "object")
    throw new WT(e, "Object", i);
}
function ni(i, e) {
  if (typeof i != "string")
    throw new WT(e, "string", i);
}
const Pr = w8 === "win32";
function Je(i) {
  return i === Ii || i === mn;
}
function Ow(i) {
  return i === Ii;
}
function gs(i) {
  return i >= b8 && i <= x8 || i >= y8 && i <= E8;
}
function jg(i, e, t, n) {
  let r = "", s = 0, o = -1, a = 0, l = 0;
  for (let c = 0; c <= i.length; ++c) {
    if (c < i.length)
      l = i.charCodeAt(c);
    else {
      if (n(l))
        break;
      l = Ii;
    }
    if (n(l)) {
      if (!(o === c - 1 || a === 1)) if (a === 2) {
        if (r.length < 2 || s !== 2 || r.charCodeAt(r.length - 1) !== ll || r.charCodeAt(r.length - 2) !== ll) {
          if (r.length > 2) {
            const u = r.lastIndexOf(t);
            u === -1 ? (r = "", s = 0) : (r = r.slice(0, u), s = r.length - 1 - r.lastIndexOf(t)), o = c, a = 0;
            continue;
          } else if (r.length !== 0) {
            r = "", s = 0, o = c, a = 0;
            continue;
          }
        }
        e && (r += r.length > 0 ? `${t}..` : "..", s = 2);
      } else
        r.length > 0 ? r += `${t}${i.slice(o + 1, c)}` : r = i.slice(o + 1, c), s = c - o - 1;
      o = c, a = 0;
    } else l === ll && a !== -1 ? ++a : a = -1;
  }
  return r;
}
function k8(i) {
  return i ? `${i[0] === "." ? "" : "."}${i}` : "";
}
function VT(i, e) {
  D8(e, "pathObject");
  const t = e.dir || e.root, n = e.base || `${e.name || ""}${k8(e.ext)}`;
  return t ? t === e.root ? `${t}${n}` : `${t}${i}${n}` : n;
}
const Oi = {
  resolve(...i) {
    let e = "", t = "", n = !1;
    for (let r = i.length - 1; r >= -1; r--) {
      let s;
      if (r >= 0) {
        if (s = i[r], ni(s, `paths[${r}]`), s.length === 0)
          continue;
      } else e.length === 0 ? s = Ou() : (s = Vh[`=${e}`] || Ou(), (s === void 0 || s.slice(0, 2).toLowerCase() !== e.toLowerCase() && s.charCodeAt(2) === mn) && (s = `${e}\\`));
      const o = s.length;
      let a = 0, l = "", c = !1;
      const u = s.charCodeAt(0);
      if (o === 1)
        Je(u) && (a = 1, c = !0);
      else if (Je(u))
        if (c = !0, Je(s.charCodeAt(1))) {
          let d = 2, f = d;
          for (; d < o && !Je(s.charCodeAt(d)); )
            d++;
          if (d < o && d !== f) {
            const p = s.slice(f, d);
            for (f = d; d < o && Je(s.charCodeAt(d)); )
              d++;
            if (d < o && d !== f) {
              for (f = d; d < o && !Je(s.charCodeAt(d)); )
                d++;
              (d === o || d !== f) && (l = `\\\\${p}\\${s.slice(f, d)}`, a = d);
            }
          }
        } else
          a = 1;
      else gs(u) && s.charCodeAt(1) === ps && (l = s.slice(0, 2), a = 2, o > 2 && Je(s.charCodeAt(2)) && (c = !0, a = 3));
      if (l.length > 0)
        if (e.length > 0) {
          if (l.toLowerCase() !== e.toLowerCase())
            continue;
        } else
          e = l;
      if (n) {
        if (e.length > 0)
          break;
      } else if (t = `${s.slice(a)}\\${t}`, n = c, c && e.length > 0)
        break;
    }
    return t = jg(t, !n, "\\", Je), n ? `${e}\\${t}` : `${e}${t}` || ".";
  },
  normalize(i) {
    ni(i, "path");
    const e = i.length;
    if (e === 0)
      return ".";
    let t = 0, n, r = !1;
    const s = i.charCodeAt(0);
    if (e === 1)
      return Ow(s) ? "\\" : i;
    if (Je(s))
      if (r = !0, Je(i.charCodeAt(1))) {
        let a = 2, l = a;
        for (; a < e && !Je(i.charCodeAt(a)); )
          a++;
        if (a < e && a !== l) {
          const c = i.slice(l, a);
          for (l = a; a < e && Je(i.charCodeAt(a)); )
            a++;
          if (a < e && a !== l) {
            for (l = a; a < e && !Je(i.charCodeAt(a)); )
              a++;
            if (a === e)
              return `\\\\${c}\\${i.slice(l)}\\`;
            a !== l && (n = `\\\\${c}\\${i.slice(l, a)}`, t = a);
          }
        }
      } else
        t = 1;
    else gs(s) && i.charCodeAt(1) === ps && (n = i.slice(0, 2), t = 2, e > 2 && Je(i.charCodeAt(2)) && (r = !0, t = 3));
    let o = t < e ? jg(i.slice(t), !r, "\\", Je) : "";
    if (o.length === 0 && !r && (o = "."), o.length > 0 && Je(i.charCodeAt(e - 1)) && (o += "\\"), !r && n === void 0 && i.includes(":")) {
      if (o.length >= 2 && gs(o.charCodeAt(0)) && o.charCodeAt(1) === ps)
        return `.\\${o}`;
      let a = i.indexOf(":");
      do
        if (a === e - 1 || Je(i.charCodeAt(a + 1)))
          return `.\\${o}`;
      while ((a = i.indexOf(":", a + 1)) !== -1);
    }
    return n === void 0 ? r ? `\\${o}` : o : r ? `${n}\\${o}` : `${n}${o}`;
  },
  isAbsolute(i) {
    ni(i, "path");
    const e = i.length;
    if (e === 0)
      return !1;
    const t = i.charCodeAt(0);
    return Je(t) || e > 2 && gs(t) && i.charCodeAt(1) === ps && Je(i.charCodeAt(2));
  },
  join(...i) {
    if (i.length === 0)
      return ".";
    let e, t;
    for (let s = 0; s < i.length; ++s) {
      const o = i[s];
      ni(o, "path"), o.length > 0 && (e === void 0 ? e = t = o : e += `\\${o}`);
    }
    if (e === void 0)
      return ".";
    let n = !0, r = 0;
    if (typeof t == "string" && Je(t.charCodeAt(0))) {
      ++r;
      const s = t.length;
      s > 1 && Je(t.charCodeAt(1)) && (++r, s > 2 && (Je(t.charCodeAt(2)) ? ++r : n = !1));
    }
    if (n) {
      for (; r < e.length && Je(e.charCodeAt(r)); )
        r++;
      r >= 2 && (e = `\\${e.slice(r)}`);
    }
    return Oi.normalize(e);
  },
  relative(i, e) {
    if (ni(i, "from"), ni(e, "to"), i === e)
      return "";
    const t = Oi.resolve(i), n = Oi.resolve(e);
    if (t === n || (i = t.toLowerCase(), e = n.toLowerCase(), i === e))
      return "";
    if (t.length !== i.length || n.length !== e.length) {
      const v = t.split("\\"), _ = n.split("\\");
      v[v.length - 1] === "" && v.pop(), _[_.length - 1] === "" && _.pop();
      const m = v.length, E = _.length, S = m < E ? m : E;
      let k;
      for (k = 0; k < S && v[k].toLowerCase() === _[k].toLowerCase(); k++)
        ;
      return k === 0 ? n : k === S ? E > S ? _.slice(k).join("\\") : m > S ? "..\\".repeat(m - 1 - k) + ".." : "" : "..\\".repeat(m - k) + _.slice(k).join("\\");
    }
    let r = 0;
    for (; r < i.length && i.charCodeAt(r) === mn; )
      r++;
    let s = i.length;
    for (; s - 1 > r && i.charCodeAt(s - 1) === mn; )
      s--;
    const o = s - r;
    let a = 0;
    for (; a < e.length && e.charCodeAt(a) === mn; )
      a++;
    let l = e.length;
    for (; l - 1 > a && e.charCodeAt(l - 1) === mn; )
      l--;
    const c = l - a, u = o < c ? o : c;
    let d = -1, f = 0;
    for (; f < u; f++) {
      const v = i.charCodeAt(r + f);
      if (v !== e.charCodeAt(a + f))
        break;
      v === mn && (d = f);
    }
    if (f !== u) {
      if (d === -1)
        return n;
    } else {
      if (c > u) {
        if (e.charCodeAt(a + f) === mn)
          return n.slice(a + f + 1);
        if (f === 2)
          return n.slice(a + f);
      }
      o > u && (i.charCodeAt(r + f) === mn ? d = f : f === 2 && (d = 3)), d === -1 && (d = 0);
    }
    let p = "";
    for (f = r + d + 1; f <= s; ++f)
      (f === s || i.charCodeAt(f) === mn) && (p += p.length === 0 ? ".." : "\\..");
    return a += d, p.length > 0 ? `${p}${n.slice(a, l)}` : (n.charCodeAt(a) === mn && ++a, n.slice(a, l));
  },
  toNamespacedPath(i) {
    if (typeof i != "string" || i.length === 0)
      return i;
    const e = Oi.resolve(i);
    if (e.length <= 2)
      return i;
    if (e.charCodeAt(0) === mn) {
      if (e.charCodeAt(1) === mn) {
        const t = e.charCodeAt(2);
        if (t !== S8 && t !== ll)
          return `\\\\?\\UNC\\${e.slice(2)}`;
      }
    } else if (gs(e.charCodeAt(0)) && e.charCodeAt(1) === ps && e.charCodeAt(2) === mn)
      return `\\\\?\\${e}`;
    return e;
  },
  dirname(i) {
    ni(i, "path");
    const e = i.length;
    if (e === 0)
      return ".";
    let t = -1, n = 0;
    const r = i.charCodeAt(0);
    if (e === 1)
      return Je(r) ? i : ".";
    if (Je(r)) {
      if (t = n = 1, Je(i.charCodeAt(1))) {
        let a = 2, l = a;
        for (; a < e && !Je(i.charCodeAt(a)); )
          a++;
        if (a < e && a !== l) {
          for (l = a; a < e && Je(i.charCodeAt(a)); )
            a++;
          if (a < e && a !== l) {
            for (l = a; a < e && !Je(i.charCodeAt(a)); )
              a++;
            if (a === e)
              return i;
            a !== l && (t = n = a + 1);
          }
        }
      }
    } else gs(r) && i.charCodeAt(1) === ps && (t = e > 2 && Je(i.charCodeAt(2)) ? 3 : 2, n = t);
    let s = -1, o = !0;
    for (let a = e - 1; a >= n; --a)
      if (Je(i.charCodeAt(a))) {
        if (!o) {
          s = a;
          break;
        }
      } else
        o = !1;
    if (s === -1) {
      if (t === -1)
        return ".";
      s = t;
    }
    return i.slice(0, s);
  },
  basename(i, e) {
    e !== void 0 && ni(e, "suffix"), ni(i, "path");
    let t = 0, n = -1, r = !0, s;
    if (i.length >= 2 && gs(i.charCodeAt(0)) && i.charCodeAt(1) === ps && (t = 2), e !== void 0 && e.length > 0 && e.length <= i.length) {
      if (e === i)
        return "";
      let o = e.length - 1, a = -1;
      for (s = i.length - 1; s >= t; --s) {
        const l = i.charCodeAt(s);
        if (Je(l)) {
          if (!r) {
            t = s + 1;
            break;
          }
        } else
          a === -1 && (r = !1, a = s + 1), o >= 0 && (l === e.charCodeAt(o) ? --o === -1 && (n = s) : (o = -1, n = a));
      }
      return t === n ? n = a : n === -1 && (n = i.length), i.slice(t, n);
    }
    for (s = i.length - 1; s >= t; --s)
      if (Je(i.charCodeAt(s))) {
        if (!r) {
          t = s + 1;
          break;
        }
      } else n === -1 && (r = !1, n = s + 1);
    return n === -1 ? "" : i.slice(t, n);
  },
  extname(i) {
    ni(i, "path");
    let e = 0, t = -1, n = 0, r = -1, s = !0, o = 0;
    i.length >= 2 && i.charCodeAt(1) === ps && gs(i.charCodeAt(0)) && (e = n = 2);
    for (let a = i.length - 1; a >= e; --a) {
      const l = i.charCodeAt(a);
      if (Je(l)) {
        if (!s) {
          n = a + 1;
          break;
        }
        continue;
      }
      r === -1 && (s = !1, r = a + 1), l === ll ? t === -1 ? t = a : o !== 1 && (o = 1) : t !== -1 && (o = -1);
    }
    return t === -1 || r === -1 || o === 0 || o === 1 && t === r - 1 && t === n + 1 ? "" : i.slice(t, r);
  },
  format: VT.bind(null, "\\"),
  parse(i) {
    ni(i, "path");
    const e = { root: "", dir: "", base: "", ext: "", name: "" };
    if (i.length === 0)
      return e;
    const t = i.length;
    let n = 0, r = i.charCodeAt(0);
    if (t === 1)
      return Je(r) ? (e.root = e.dir = i, e) : (e.base = e.name = i, e);
    if (Je(r)) {
      if (n = 1, Je(i.charCodeAt(1))) {
        let d = 2, f = d;
        for (; d < t && !Je(i.charCodeAt(d)); )
          d++;
        if (d < t && d !== f) {
          for (f = d; d < t && Je(i.charCodeAt(d)); )
            d++;
          if (d < t && d !== f) {
            for (f = d; d < t && !Je(i.charCodeAt(d)); )
              d++;
            d === t ? n = d : d !== f && (n = d + 1);
          }
        }
      }
    } else if (gs(r) && i.charCodeAt(1) === ps) {
      if (t <= 2)
        return e.root = e.dir = i, e;
      if (n = 2, Je(i.charCodeAt(2))) {
        if (t === 3)
          return e.root = e.dir = i, e;
        n = 3;
      }
    }
    n > 0 && (e.root = i.slice(0, n));
    let s = -1, o = n, a = -1, l = !0, c = i.length - 1, u = 0;
    for (; c >= n; --c) {
      if (r = i.charCodeAt(c), Je(r)) {
        if (!l) {
          o = c + 1;
          break;
        }
        continue;
      }
      a === -1 && (l = !1, a = c + 1), r === ll ? s === -1 ? s = c : u !== 1 && (u = 1) : s !== -1 && (u = -1);
    }
    return a !== -1 && (s === -1 || u === 0 || u === 1 && s === a - 1 && s === o + 1 ? e.base = e.name = i.slice(o, a) : (e.name = i.slice(o, s), e.base = i.slice(o, a), e.ext = i.slice(s, a))), o > 0 && o !== n ? e.dir = i.slice(0, o - 1) : e.dir = e.root, e;
  },
  sep: "\\",
  delimiter: ";",
  win32: null,
  posix: null
}, I8 = (() => {
  if (Pr) {
    const i = /\\/g;
    return () => {
      const e = Ou().replace(i, "/");
      return e.slice(e.indexOf("/"));
    };
  }
  return () => Ou();
})(), pt = {
  resolve(...i) {
    let e = "", t = !1;
    for (let n = i.length - 1; n >= 0 && !t; n--) {
      const r = i[n];
      ni(r, `paths[${n}]`), r.length !== 0 && (e = `${r}/${e}`, t = r.charCodeAt(0) === Ii);
    }
    if (!t) {
      const n = I8();
      e = `${n}/${e}`, t = n.charCodeAt(0) === Ii;
    }
    return e = jg(e, !t, "/", Ow), t ? `/${e}` : e.length > 0 ? e : ".";
  },
  normalize(i) {
    if (ni(i, "path"), i.length === 0)
      return ".";
    const e = i.charCodeAt(0) === Ii, t = i.charCodeAt(i.length - 1) === Ii;
    return i = jg(i, !e, "/", Ow), i.length === 0 ? e ? "/" : t ? "./" : "." : (t && (i += "/"), e ? `/${i}` : i);
  },
  isAbsolute(i) {
    return ni(i, "path"), i.length > 0 && i.charCodeAt(0) === Ii;
  },
  join(...i) {
    if (i.length === 0)
      return ".";
    const e = [];
    for (let t = 0; t < i.length; ++t) {
      const n = i[t];
      ni(n, "path"), n.length > 0 && e.push(n);
    }
    return e.length === 0 ? "." : pt.normalize(e.join("/"));
  },
  relative(i, e) {
    if (ni(i, "from"), ni(e, "to"), i === e || (i = pt.resolve(i), e = pt.resolve(e), i === e))
      return "";
    const t = 1, n = i.length, r = n - t, s = 1, o = e.length - s, a = r < o ? r : o;
    let l = -1, c = 0;
    for (; c < a; c++) {
      const d = i.charCodeAt(t + c);
      if (d !== e.charCodeAt(s + c))
        break;
      d === Ii && (l = c);
    }
    if (c === a)
      if (o > a) {
        if (e.charCodeAt(s + c) === Ii)
          return e.slice(s + c + 1);
        if (c === 0)
          return e.slice(s + c);
      } else r > a && (i.charCodeAt(t + c) === Ii ? l = c : c === 0 && (l = 0));
    let u = "";
    for (c = t + l + 1; c <= n; ++c)
      (c === n || i.charCodeAt(c) === Ii) && (u += u.length === 0 ? ".." : "/..");
    return `${u}${e.slice(s + l)}`;
  },
  toNamespacedPath(i) {
    return i;
  },
  dirname(i) {
    if (ni(i, "path"), i.length === 0)
      return ".";
    const e = i.charCodeAt(0) === Ii;
    let t = -1, n = !0;
    for (let r = i.length - 1; r >= 1; --r)
      if (i.charCodeAt(r) === Ii) {
        if (!n) {
          t = r;
          break;
        }
      } else
        n = !1;
    return t === -1 ? e ? "/" : "." : e && t === 1 ? "//" : i.slice(0, t);
  },
  basename(i, e) {
    e !== void 0 && ni(e, "suffix"), ni(i, "path");
    let t = 0, n = -1, r = !0, s;
    if (e !== void 0 && e.length > 0 && e.length <= i.length) {
      if (e === i)
        return "";
      let o = e.length - 1, a = -1;
      for (s = i.length - 1; s >= 0; --s) {
        const l = i.charCodeAt(s);
        if (l === Ii) {
          if (!r) {
            t = s + 1;
            break;
          }
        } else
          a === -1 && (r = !1, a = s + 1), o >= 0 && (l === e.charCodeAt(o) ? --o === -1 && (n = s) : (o = -1, n = a));
      }
      return t === n ? n = a : n === -1 && (n = i.length), i.slice(t, n);
    }
    for (s = i.length - 1; s >= 0; --s)
      if (i.charCodeAt(s) === Ii) {
        if (!r) {
          t = s + 1;
          break;
        }
      } else n === -1 && (r = !1, n = s + 1);
    return n === -1 ? "" : i.slice(t, n);
  },
  extname(i) {
    ni(i, "path");
    let e = -1, t = 0, n = -1, r = !0, s = 0;
    for (let o = i.length - 1; o >= 0; --o) {
      const a = i[o];
      if (a === "/") {
        if (!r) {
          t = o + 1;
          break;
        }
        continue;
      }
      n === -1 && (r = !1, n = o + 1), a === "." ? e === -1 ? e = o : s !== 1 && (s = 1) : e !== -1 && (s = -1);
    }
    return e === -1 || n === -1 || s === 0 || s === 1 && e === n - 1 && e === t + 1 ? "" : i.slice(e, n);
  },
  format: VT.bind(null, "/"),
  parse(i) {
    ni(i, "path");
    const e = { root: "", dir: "", base: "", ext: "", name: "" };
    if (i.length === 0)
      return e;
    const t = i.charCodeAt(0) === Ii;
    let n;
    t ? (e.root = "/", n = 1) : n = 0;
    let r = -1, s = 0, o = -1, a = !0, l = i.length - 1, c = 0;
    for (; l >= n; --l) {
      const u = i.charCodeAt(l);
      if (u === Ii) {
        if (!a) {
          s = l + 1;
          break;
        }
        continue;
      }
      o === -1 && (a = !1, o = l + 1), u === ll ? r === -1 ? r = l : c !== 1 && (c = 1) : r !== -1 && (c = -1);
    }
    if (o !== -1) {
      const u = s === 0 && t ? 1 : s;
      r === -1 || c === 0 || c === 1 && r === o - 1 && r === s + 1 ? e.base = e.name = i.slice(u, o) : (e.name = i.slice(u, r), e.base = i.slice(u, o), e.ext = i.slice(r, o));
    }
    return s > 0 ? e.dir = i.slice(0, s - 1) : t && (e.dir = "/"), e;
  },
  sep: "/",
  delimiter: ":",
  win32: null,
  posix: null
};
pt.win32 = Oi.win32 = Oi;
pt.posix = Oi.posix = pt;
const Fu = Pr ? Oi.normalize : pt.normalize, Gg = Pr ? Oi.isAbsolute : pt.isAbsolute, Fw = Pr ? Oi.join : pt.join, C8 = Pr ? Oi.resolve : pt.resolve, zh = Pr ? Oi.relative : pt.relative, Qc = Pr ? Oi.dirname : pt.dirname, yn = Pr ? Oi.basename : pt.basename, Qg = Pr ? Oi.extname : pt.extname;
Pr ? Oi.parse : pt.parse;
const Jn = Pr ? Oi.sep : pt.sep, T8 = /^\w[\w\d+.-]*$/, P8 = /^\//, A8 = /^\/\//;
function R8(i, e) {
  if (!i.scheme && e)
    throw new Error(
      `[UriError]: Scheme is missing: {scheme: "", authority: "${i.authority}", path: "${i.path}", query: "${i.query}", fragment: "${i.fragment}"}`
    );
  if (i.scheme && !T8.test(i.scheme))
    throw new Error("[UriError]: Scheme contains illegal characters.");
  if (i.path) {
    if (i.authority) {
      if (!P8.test(i.path))
        throw new Error(
          '[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character'
        );
    } else if (A8.test(i.path))
      throw new Error(
        '[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")'
      );
  }
}
function L8(i, e) {
  return !i && !e ? "file" : i;
}
function N8(i, e) {
  switch (i) {
    case "https":
    case "http":
    case "file":
      e ? e[0] !== _r && (e = _r + e) : e = _r;
      break;
  }
  return e;
}
const Rt = "", _r = "/", M8 = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
class x {
  static isUri(e) {
    return e instanceof x ? !0 : !e || typeof e != "object" ? !1 : typeof e.authority == "string" && typeof e.fragment == "string" && typeof e.path == "string" && typeof e.query == "string" && typeof e.scheme == "string" && typeof e.fsPath == "string" && typeof e.with == "function" && typeof e.toString == "function";
  }
  constructor(e, t, n, r, s, o = !1) {
    typeof e == "object" ? (this.scheme = e.scheme || Rt, this.authority = e.authority || Rt, this.path = e.path || Rt, this.query = e.query || Rt, this.fragment = e.fragment || Rt) : (this.scheme = L8(e, o), this.authority = t || Rt, this.path = N8(this.scheme, n || Rt), this.query = r || Rt, this.fragment = s || Rt, R8(this, o));
  }
  get fsPath() {
    return Kg(this, !1);
  }
  with(e) {
    if (!e)
      return this;
    let { scheme: t, authority: n, path: r, query: s, fragment: o } = e;
    return t === void 0 ? t = this.scheme : t === null && (t = Rt), n === void 0 ? n = this.authority : n === null && (n = Rt), r === void 0 ? r = this.path : r === null && (r = Rt), s === void 0 ? s = this.query : s === null && (s = Rt), o === void 0 ? o = this.fragment : o === null && (o = Rt), t === this.scheme && n === this.authority && r === this.path && s === this.query && o === this.fragment ? this : new cc(t, n, r, s, o);
  }
  static parse(e, t = !1) {
    const n = M8.exec(e);
    return n ? new cc(
      n[2] || Rt,
      zp(n[4] || Rt),
      zp(n[5] || Rt),
      zp(n[7] || Rt),
      zp(n[9] || Rt),
      t
    ) : new cc(Rt, Rt, Rt, Rt, Rt);
  }
  static file(e) {
    let t = Rt;
    if (Yi && (e = e.replace(/\\/g, _r)), e[0] === _r && e[1] === _r) {
      const n = e.indexOf(_r, 2);
      n === -1 ? (t = e.substring(2), e = _r) : (t = e.substring(2, n), e = e.substring(n) || _r);
    }
    return new cc("file", t, e, Rt, Rt);
  }
  static from(e, t) {
    return new cc(
      e.scheme,
      e.authority,
      e.path,
      e.query,
      e.fragment,
      t
    );
  }
  static joinPath(e, ...t) {
    if (!e.path)
      throw new Error("[UriError]: cannot call joinPath on URI without path");
    let n;
    return Yi && e.scheme === "file" ? n = x.file(Oi.join(Kg(e, !0), ...t)).path : n = pt.join(e.path, ...t), e.with({ path: n });
  }
  toString(e = !1) {
    return $w(this, e);
  }
  toJSON() {
    return this;
  }
  static revive(e) {
    if (e) {
      if (e instanceof x)
        return e;
      {
        const t = new cc(e);
        return t._formatted = e.external ?? null, t._fsPath = e._sep === zT ? e.fsPath ?? null : null, t;
      }
    } else return e;
  }
  [Symbol.for("debug.description")]() {
    return `URI(${this.toString()})`;
  }
}
function Uw(i) {
  return !i || typeof i != "object" ? !1 : typeof i.scheme == "string" && (typeof i.authority == "string" || typeof i.authority > "u") && (typeof i.path == "string" || typeof i.path > "u") && (typeof i.query == "string" || typeof i.query > "u") && (typeof i.fragment == "string" || typeof i.fragment > "u");
}
const zT = Yi ? 1 : void 0;
class cc extends x {
  constructor() {
    super(...arguments), this._formatted = null, this._fsPath = null;
  }
  get fsPath() {
    return this._fsPath || (this._fsPath = Kg(this, !1)), this._fsPath;
  }
  toString(e = !1) {
    return e ? $w(this, !0) : (this._formatted || (this._formatted = $w(this, !1)), this._formatted);
  }
  toJSON() {
    const e = {
      $mid: rt.Uri
    };
    return this._fsPath && (e.fsPath = this._fsPath, e._sep = zT), this._formatted && (e.external = this._formatted), this.path && (e.path = this.path), this.scheme && (e.scheme = this.scheme), this.authority && (e.authority = this.authority), this.query && (e.query = this.query), this.fragment && (e.fragment = this.fragment), e;
  }
}
const qT = {
  [L.Colon]: "%3A",
  [L.Slash]: "%2F",
  [L.QuestionMark]: "%3F",
  [L.Hash]: "%23",
  [L.OpenSquareBracket]: "%5B",
  [L.CloseSquareBracket]: "%5D",
  [L.AtSign]: "%40",
  [L.ExclamationMark]: "%21",
  [L.DollarSign]: "%24",
  [L.Ampersand]: "%26",
  [L.SingleQuote]: "%27",
  [L.OpenParen]: "%28",
  [L.CloseParen]: "%29",
  [L.Asterisk]: "%2A",
  [L.Plus]: "%2B",
  [L.Comma]: "%2C",
  [L.Semicolon]: "%3B",
  [L.Equals]: "%3D",
  [L.Space]: "%20"
};
function g2(i, e, t) {
  let n, r = -1;
  for (let s = 0; s < i.length; s++) {
    const o = i.charCodeAt(s);
    if (o >= L.a && o <= L.z || o >= L.A && o <= L.Z || o >= L.Digit0 && o <= L.Digit9 || o === L.Dash || o === L.Period || o === L.Underline || o === L.Tilde || e && o === L.Slash || t && o === L.OpenSquareBracket || t && o === L.CloseSquareBracket || t && o === L.Colon)
      r !== -1 && (n += encodeURIComponent(i.substring(r, s)), r = -1), n !== void 0 && (n += i.charAt(s));
    else {
      n === void 0 && (n = i.substr(0, s));
      const a = qT[o];
      a !== void 0 ? (r !== -1 && (n += encodeURIComponent(i.substring(r, s)), r = -1), n += a) : r === -1 && (r = s);
    }
  }
  return r !== -1 && (n += encodeURIComponent(i.substring(r))), n !== void 0 ? n : i;
}
function O8(i) {
  let e;
  for (let t = 0; t < i.length; t++) {
    const n = i.charCodeAt(t);
    n === L.Hash || n === L.QuestionMark ? (e === void 0 && (e = i.substr(0, t)), e += qT[n]) : e !== void 0 && (e += i[t]);
  }
  return e !== void 0 ? e : i;
}
function Kg(i, e) {
  let t;
  return i.authority && i.path.length > 1 && i.scheme === "file" ? t = `//${i.authority}${i.path}` : i.path.charCodeAt(0) === L.Slash && (i.path.charCodeAt(1) >= L.A && i.path.charCodeAt(1) <= L.Z || i.path.charCodeAt(1) >= L.a && i.path.charCodeAt(1) <= L.z) && i.path.charCodeAt(2) === L.Colon ? e ? t = i.path.substr(1) : t = i.path[1].toLowerCase() + i.path.substr(2) : t = i.path, Yi && (t = t.replace(/\//g, "\\")), t;
}
function $w(i, e) {
  const t = e ? O8 : g2;
  let n = "", { scheme: r, authority: s, path: o, query: a, fragment: l } = i;
  if (r && (n += r, n += ":"), (s || r === "file") && (n += _r, n += _r), s) {
    let c = s.indexOf("@");
    if (c !== -1) {
      const u = s.substr(0, c);
      s = s.substr(c + 1), c = u.lastIndexOf(":"), c === -1 ? n += t(u, !1, !1) : (n += t(u.substr(0, c), !1, !1), n += ":", n += t(u.substr(c + 1), !1, !0)), n += "@";
    }
    s = s.toLowerCase(), c = s.lastIndexOf(":"), c === -1 ? n += t(s, !1, !0) : (n += t(s.substr(0, c), !1, !0), n += s.substr(c));
  }
  if (o) {
    if (o.length >= 3 && o.charCodeAt(0) === L.Slash && o.charCodeAt(2) === L.Colon) {
      const c = o.charCodeAt(1);
      c >= L.A && c <= L.Z && (o = `/${String.fromCharCode(c + 32)}:${o.substr(3)}`);
    } else if (o.length >= 2 && o.charCodeAt(1) === L.Colon) {
      const c = o.charCodeAt(0);
      c >= L.A && c <= L.Z && (o = `${String.fromCharCode(c + 32)}:${o.substr(2)}`);
    }
    n += t(o, !0, !1);
  }
  return a && (n += "?", n += t(a, !1, !1)), l && (n += "#", n += e ? l : g2(l, !1, !1)), n;
}
function jT(i) {
  try {
    return decodeURIComponent(i);
  } catch {
    return i.length > 3 ? i.substr(0, 3) + jT(i.substr(3)) : i;
  }
}
const m2 = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
function zp(i) {
  return i.match(m2) ? i.replace(m2, (e) => jT(e)) : i;
}
const D1 = class D1 {
  constructor(e) {
    this._proxyIdentifierBrand = void 0, this.sid = e, this.nid = ++D1.count;
  }
};
D1.count = 0;
let Jg = D1;
const GT = [];
function V(i) {
  const e = new Jg(i);
  return GT[e.nid] = e, e;
}
function qp(i) {
  return GT[i].sid;
}
class Ki {
  constructor(e) {
    this.value = e;
  }
}
var _2;
(function(i) {
  i[i.Default = 0] = "Default", i[i.InCenter = 1] = "InCenter", i[i.InCenterIfOutsideViewport = 2] = "InCenterIfOutsideViewport", i[i.AtTop = 3] = "AtTop";
})(_2 || (_2 = {}));
var In;
(function(i) {
  i[i.UnknownInput = 0] = "UnknownInput", i[i.TextInput = 1] = "TextInput", i[i.TextDiffInput = 2] = "TextDiffInput", i[i.TextMergeInput = 3] = "TextMergeInput", i[i.NotebookInput = 4] = "NotebookInput", i[i.NotebookDiffInput = 5] = "NotebookDiffInput", i[i.CustomEditorInput = 6] = "CustomEditorInput", i[i.WebviewEditorInput = 7] = "WebviewEditorInput", i[i.TerminalEditorInput = 8] = "TerminalEditorInput", i[i.InteractiveEditorInput = 9] = "InteractiveEditorInput", i[i.ChatEditorInput = 10] = "ChatEditorInput", i[i.MultiDiffEditorInput = 11] = "MultiDiffEditorInput";
})(In || (In = {}));
var Hs;
(function(i) {
  i[i.TAB_OPEN = 0] = "TAB_OPEN", i[i.TAB_CLOSE = 1] = "TAB_CLOSE", i[i.TAB_UPDATE = 2] = "TAB_UPDATE", i[i.TAB_MOVE = 3] = "TAB_MOVE";
})(Hs || (Hs = {}));
var v2;
(function(i) {
  i[i.Editable = 0] = "Editable", i[i.SupportsHotExit = 1] = "SupportsHotExit";
})(v2 || (v2 = {}));
var Gt;
(function(i) {
  i[i.Int8Array = 1] = "Int8Array", i[i.Uint8Array = 2] = "Uint8Array", i[i.Uint8ClampedArray = 3] = "Uint8ClampedArray", i[i.Int16Array = 4] = "Int16Array", i[i.Uint16Array = 5] = "Uint16Array", i[i.Int32Array = 6] = "Int32Array", i[i.Uint32Array = 7] = "Uint32Array", i[i.Float32Array = 8] = "Float32Array", i[i.Float64Array = 9] = "Float64Array", i[i.BigInt64Array = 10] = "BigInt64Array", i[i.BigUint64Array = 11] = "BigUint64Array";
})(Gt || (Gt = {}));
var w2;
(function(i) {
  i[i.Text = 1] = "Text", i[i.Error = 2] = "Error", i[i.Rich = 3] = "Rich";
})(w2 || (w2 = {}));
var b2;
(function(i) {
  i[i.Default = 0] = "Default", i[i.InCenter = 1] = "InCenter", i[i.InCenterIfOutsideViewport = 2] = "InCenterIfOutsideViewport", i[i.AtTop = 3] = "AtTop";
})(b2 || (b2 = {}));
var Hw;
(function(i) {
  i[i.None = 0] = "None", i[i.Process = 1] = "Process", i[i.Output = 2] = "Output", i[i.Hybrid = 3] = "Hybrid";
})(Hw || (Hw = {}));
var Be;
(function(i) {
  i.label = "a", i.kind = "b", i.detail = "c", i.documentation = "d", i.sortText = "e", i.filterText = "f", i.preselect = "g", i.insertText = "h", i.insertTextRules = "i", i.range = "j", i.commitCharacters = "k", i.additionalTextEdits = "l", i.kindModifier = "m", i.commandIdent = "n", i.commandId = "o", i.commandArguments = "p";
})(Be || (Be = {}));
var Ec;
(function(i) {
  i.defaultRanges = "a", i.completions = "b", i.isIncomplete = "c", i.duration = "d";
})(Ec || (Ec = {}));
var y2;
(function(i) {
  i[i.Workspace = 0] = "Workspace", i[i.TextDocument = 1] = "TextDocument";
})(y2 || (y2 = {}));
const ie = {
  MainThreadAuthentication: V("MainThreadAuthentication"),
  MainThreadBulkEdits: V("MainThreadBulkEdits"),
  MainThreadLanguageModels: V("MainThreadLanguageModels"),
  MainThreadEmbeddings: V("MainThreadEmbeddings"),
  MainThreadChatAgents2: V("MainThreadChatAgents2"),
  MainThreadCodeMapper: V("MainThreadCodeMapper"),
  MainThreadLanguageModelTools: V("MainThreadChatSkills"),
  MainThreadClipboard: V("MainThreadClipboard"),
  MainThreadCommands: V("MainThreadCommands"),
  MainThreadComments: V("MainThreadComments"),
  MainThreadConfiguration: V("MainThreadConfiguration"),
  MainThreadConsole: V("MainThreadConsole"),
  MainThreadDebugService: V("MainThreadDebugService"),
  MainThreadDecorations: V("MainThreadDecorations"),
  MainThreadDiagnostics: V("MainThreadDiagnostics"),
  MainThreadDialogs: V("MainThreadDiaglogs"),
  MainThreadDocuments: V("MainThreadDocuments"),
  MainThreadDocumentContentProviders: V("MainThreadDocumentContentProviders"),
  MainThreadTextEditors: V("MainThreadTextEditors"),
  MainThreadEditorInsets: V("MainThreadEditorInsets"),
  MainThreadEditorTabs: V("MainThreadEditorTabs"),
  MainThreadErrors: V("MainThreadErrors"),
  MainThreadTreeViews: V("MainThreadTreeViews"),
  MainThreadDownloadService: V("MainThreadDownloadService"),
  MainThreadLanguageFeatures: V("MainThreadLanguageFeatures"),
  MainThreadLanguages: V("MainThreadLanguages"),
  MainThreadLogger: V("MainThreadLogger"),
  MainThreadMessageService: V("MainThreadMessageService"),
  MainThreadOutputService: V("MainThreadOutputService"),
  MainThreadProgress: V("MainThreadProgress"),
  MainThreadQuickDiff: V("MainThreadQuickDiff"),
  MainThreadQuickOpen: V("MainThreadQuickOpen"),
  MainThreadStatusBar: V("MainThreadStatusBar"),
  MainThreadSecretState: V("MainThreadSecretState"),
  MainThreadStorage: V("MainThreadStorage"),
  MainThreadSpeech: V("MainThreadSpeechProvider"),
  MainThreadTelemetry: V("MainThreadTelemetry"),
  MainThreadTerminalService: V("MainThreadTerminalService"),
  MainThreadTerminalShellIntegration: V("MainThreadTerminalShellIntegration"),
  MainThreadWebviews: V("MainThreadWebviews"),
  MainThreadWebviewPanels: V("MainThreadWebviewPanels"),
  MainThreadWebviewViews: V("MainThreadWebviewViews"),
  MainThreadCustomEditors: V("MainThreadCustomEditors"),
  MainThreadUrls: V("MainThreadUrls"),
  MainThreadUriOpeners: V("MainThreadUriOpeners"),
  MainThreadProfileContentHandlers: V("MainThreadProfileContentHandlers"),
  MainThreadWorkspace: V("MainThreadWorkspace"),
  MainThreadFileSystem: V("MainThreadFileSystem"),
  MainThreadFileSystemEventService: V("MainThreadFileSystemEventService"),
  MainThreadExtensionService: V("MainThreadExtensionService"),
  MainThreadSCM: V("MainThreadSCM"),
  MainThreadSearch: V("MainThreadSearch"),
  MainThreadShare: V("MainThreadShare"),
  MainThreadTask: V("MainThreadTask"),
  MainThreadWindow: V("MainThreadWindow"),
  MainThreadLabelService: V("MainThreadLabelService"),
  MainThreadNotebook: V("MainThreadNotebook"),
  MainThreadNotebookDocuments: V("MainThreadNotebookDocumentsShape"),
  MainThreadNotebookEditors: V("MainThreadNotebookEditorsShape"),
  MainThreadNotebookKernels: V("MainThreadNotebookKernels"),
  MainThreadNotebookRenderers: V("MainThreadNotebookRenderers"),
  MainThreadInteractive: V("MainThreadInteractive"),
  MainThreadTheming: V("MainThreadTheming"),
  MainThreadTunnelService: V("MainThreadTunnelService"),
  MainThreadManagedSockets: V("MainThreadManagedSockets"),
  MainThreadTimeline: V("MainThreadTimeline"),
  MainThreadTesting: V("MainThreadTesting"),
  MainThreadLocalization: V("MainThreadLocalizationShape"),
  MainThreadMcp: V("MainThreadMcpShape"),
  MainThreadAiRelatedInformation: V("MainThreadAiRelatedInformation"),
  MainThreadAiEmbeddingVector: V("MainThreadAiEmbeddingVector"),
  MainThreadChatStatus: V("MainThreadChatStatus"),
  MainThreadAiSettingsSearch: V("MainThreadAiSettingsSearch"),
  MainThreadDataChannels: V("MainThreadDataChannels"),
  MainThreadChatSessions: V("MainThreadChatSessions"),
  MainThreadChatOutputRenderer: V("MainThreadChatOutputRenderer")
}, pe = {
  ExtHostCodeMapper: V("ExtHostCodeMapper"),
  ExtHostCommands: V("ExtHostCommands"),
  ExtHostConfiguration: V("ExtHostConfiguration"),
  ExtHostDiagnostics: V("ExtHostDiagnostics"),
  ExtHostDebugService: V("ExtHostDebugService"),
  ExtHostDecorations: V("ExtHostDecorations"),
  ExtHostDocumentsAndEditors: V("ExtHostDocumentsAndEditors"),
  ExtHostDocuments: V("ExtHostDocuments"),
  ExtHostDocumentContentProviders: V("ExtHostDocumentContentProviders"),
  ExtHostDocumentSaveParticipant: V("ExtHostDocumentSaveParticipant"),
  ExtHostEditors: V("ExtHostEditors"),
  ExtHostTreeViews: V("ExtHostTreeViews"),
  ExtHostFileSystem: V("ExtHostFileSystem"),
  ExtHostFileSystemInfo: V("ExtHostFileSystemInfo"),
  ExtHostFileSystemEventService: V("ExtHostFileSystemEventService"),
  ExtHostLanguages: V("ExtHostLanguages"),
  ExtHostLanguageFeatures: V("ExtHostLanguageFeatures"),
  ExtHostQuickOpen: V("ExtHostQuickOpen"),
  ExtHostQuickDiff: V("ExtHostQuickDiff"),
  ExtHostStatusBar: V("ExtHostStatusBar"),
  ExtHostShare: V("ExtHostShare"),
  ExtHostExtensionService: V("ExtHostExtensionService"),
  ExtHostLogLevelServiceShape: V("ExtHostLogLevelServiceShape"),
  ExtHostTerminalService: V("ExtHostTerminalService"),
  ExtHostTerminalShellIntegration: V("ExtHostTerminalShellIntegration"),
  ExtHostSCM: V("ExtHostSCM"),
  ExtHostSearch: V("ExtHostSearch"),
  ExtHostTask: V("ExtHostTask"),
  ExtHostWorkspace: V("ExtHostWorkspace"),
  ExtHostWindow: V("ExtHostWindow"),
  ExtHostWebviews: V("ExtHostWebviews"),
  ExtHostWebviewPanels: V("ExtHostWebviewPanels"),
  ExtHostCustomEditors: V("ExtHostCustomEditors"),
  ExtHostWebviewViews: V("ExtHostWebviewViews"),
  ExtHostEditorInsets: V("ExtHostEditorInsets"),
  ExtHostEditorTabs: V("ExtHostEditorTabs"),
  ExtHostProgress: V("ExtHostProgress"),
  ExtHostComments: V("ExtHostComments"),
  ExtHostSecretState: V("ExtHostSecretState"),
  ExtHostStorage: V("ExtHostStorage"),
  ExtHostUrls: V("ExtHostUrls"),
  ExtHostUriOpeners: V("ExtHostUriOpeners"),
  ExtHostChatOutputRenderer: V("ExtHostChatOutputRenderer"),
  ExtHostProfileContentHandlers: V("ExtHostProfileContentHandlers"),
  ExtHostOutputService: V("ExtHostOutputService"),
  ExtHostLabelService: V("ExtHostLabelService"),
  ExtHostNotebook: V("ExtHostNotebook"),
  ExtHostNotebookDocuments: V("ExtHostNotebookDocuments"),
  ExtHostNotebookEditors: V("ExtHostNotebookEditors"),
  ExtHostNotebookKernels: V("ExtHostNotebookKernels"),
  ExtHostNotebookRenderers: V("ExtHostNotebookRenderers"),
  ExtHostNotebookDocumentSaveParticipant: V("ExtHostNotebookDocumentSaveParticipant"),
  ExtHostInteractive: V("ExtHostInteractive"),
  ExtHostChatAgents2: V("ExtHostChatAgents"),
  ExtHostLanguageModelTools: V("ExtHostChatSkills"),
  ExtHostChatProvider: V("ExtHostChatProvider"),
  ExtHostSpeech: V("ExtHostSpeech"),
  ExtHostEmbeddings: V("ExtHostEmbeddings"),
  ExtHostAiRelatedInformation: V("ExtHostAiRelatedInformation"),
  ExtHostAiEmbeddingVector: V("ExtHostAiEmbeddingVector"),
  ExtHostAiSettingsSearch: V("ExtHostAiSettingsSearch"),
  ExtHostTheming: V("ExtHostTheming"),
  ExtHostTunnelService: V("ExtHostTunnelService"),
  ExtHostManagedSockets: V("ExtHostManagedSockets"),
  ExtHostAuthentication: V("ExtHostAuthentication"),
  ExtHostTimeline: V("ExtHostTimeline"),
  ExtHostTesting: V("ExtHostTesting"),
  ExtHostTelemetry: V("ExtHostTelemetry"),
  ExtHostLocalization: V("ExtHostLocalization"),
  ExtHostMcp: V("ExtHostMcp"),
  ExtHostDataChannels: V("ExtHostDataChannels"),
  ExtHostChatSessions: V("ExtHostChatSessions")
}, QT = Object.freeze(function(i, e) {
  const t = setTimeout(i.bind(e), 0);
  return { dispose() {
    clearTimeout(t);
  } };
});
var Dt;
(function(i) {
  function e(t) {
    return t === i.None || t === i.Cancelled || t instanceof fg ? !0 : !t || typeof t != "object" ? !1 : typeof t.isCancellationRequested == "boolean" && typeof t.onCancellationRequested == "function";
  }
  i.isCancellationToken = e, i.None = Object.freeze({
    isCancellationRequested: !1,
    onCancellationRequested: Pt.None
  }), i.Cancelled = Object.freeze({
    isCancellationRequested: !0,
    onCancellationRequested: QT
  });
})(Dt || (Dt = {}));
class fg {
  constructor() {
    this._isCancelled = !1, this._emitter = null;
  }
  cancel() {
    this._isCancelled || (this._isCancelled = !0, this._emitter && (this._emitter.fire(void 0), this.dispose()));
  }
  get isCancellationRequested() {
    return this._isCancelled;
  }
  get onCancellationRequested() {
    return this._isCancelled ? QT : (this._emitter || (this._emitter = new M()), this._emitter.event);
  }
  dispose() {
    this._emitter && (this._emitter.dispose(), this._emitter = null);
  }
}
class Lt {
  constructor(e) {
    this._token = void 0, this._parentListener = void 0, this._parentListener = e && e.onCancellationRequested(this.cancel, this);
  }
  get token() {
    return this._token || (this._token = new fg()), this._token;
  }
  cancel() {
    this._token ? this._token instanceof fg && this._token.cancel() : this._token = Dt.Cancelled;
  }
  dispose(e = !1) {
    var t;
    e && this.cancel(), (t = this._parentListener) == null || t.dispose(), this._token ? this._token instanceof fg && this._token.dispose() : this._token = Dt.None;
  }
}
function F8(i) {
  return i;
}
class U8 {
  constructor(e, t) {
    this.lastCache = void 0, this.lastArgKey = void 0, typeof e == "function" ? (this._fn = e, this._computeKey = F8) : (this._fn = t, this._computeKey = e.getCacheKey);
  }
  get(e) {
    const t = this._computeKey(e);
    return this.lastArgKey !== t && (this.lastArgKey = t, this.lastCache = this._fn(e)), this.lastCache;
  }
}
var Ai;
(function(i) {
  i[i.MAX_SAFE_SMALL_INTEGER = 1073741824] = "MAX_SAFE_SMALL_INTEGER", i[i.MIN_SAFE_SMALL_INTEGER = -1073741824] = "MIN_SAFE_SMALL_INTEGER", i[i.MAX_UINT_8 = 255] = "MAX_UINT_8", i[i.MAX_UINT_16 = 65535] = "MAX_UINT_16", i[i.MAX_UINT_32 = 4294967295] = "MAX_UINT_32", i[i.UNICODE_SUPPLEMENTARY_PLANE_BEGIN = 65536] = "UNICODE_SUPPLEMENTARY_PLANE_BEGIN";
})(Ai || (Ai = {}));
function x2(i) {
  return i < 0 ? 0 : i > Ai.MAX_UINT_8 ? Ai.MAX_UINT_8 : i | 0;
}
function uc(i) {
  return i < 0 ? 0 : i > Ai.MAX_UINT_32 ? Ai.MAX_UINT_32 : i | 0;
}
function qh(i) {
  return !i || typeof i != "string" ? !0 : i.trim().length === 0;
}
const $8 = /{([^}]+)}/g;
function E2(i, e) {
  return Object.keys(e).length === 0 ? i : i.replace($8, (t, n) => e[n] ?? t);
}
function Nl(i) {
  return i.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g, "\\$&");
}
function H8(i, e) {
  let t = 0, n = i.indexOf(e);
  for (; n !== -1; )
    t++, n = i.indexOf(e, n + e.length);
  return t;
}
function B8(i, e) {
  if (!i || !e)
    return i;
  const t = e.length;
  if (t === 0 || i.length === 0)
    return i;
  let n = 0;
  for (; i.indexOf(e, n) === n; )
    n = n + t;
  return i.substring(n);
}
function Bw(i, e) {
  if (!i || !e)
    return i;
  const t = e.length, n = i.length;
  if (t === 0 || n === 0)
    return i;
  let r = n, s = -1;
  for (; s = i.lastIndexOf(e, r - 1), !(s === -1 || s + t !== r); ) {
    if (s === 0)
      return "";
    r = s;
  }
  return i.substring(0, r);
}
function W8(i, e, t = {}) {
  if (!i)
    throw new Error("Cannot create regex from empty string");
  e || (i = Nl(i)), t.wholeWord && (/\B/.test(i.charAt(0)) || (i = "\\b" + i), /\B/.test(i.charAt(i.length - 1)) || (i = i + "\\b"));
  let n = "";
  return t.global && (n += "g"), t.matchCase || (n += "i"), t.multiline && (n += "m"), t.unicode && (n += "u"), new RegExp(i, n);
}
function KT(i) {
  return i.source === "^" || i.source === "^$" || i.source === "$" || i.source === "^\\s*$" ? !1 : !!(i.exec("") && i.lastIndex === 0);
}
function JT(i) {
  return i.split(/\r\n|\r|\n/);
}
function Yv(i) {
  for (let e = 0, t = i.length; e < t; e++) {
    const n = i.charCodeAt(e);
    if (n !== L.Space && n !== L.Tab)
      return e;
  }
  return -1;
}
function V8(i, e = i.length - 1) {
  for (let t = e; t >= 0; t--) {
    const n = i.charCodeAt(t);
    if (n !== L.Space && n !== L.Tab)
      return t;
  }
  return -1;
}
function Ml(i, e) {
  return i < e ? -1 : i > e ? 1 : 0;
}
function UE(i, e, t = 0, n = i.length, r = 0, s = e.length) {
  for (; t < n && r < s; t++, r++) {
    const l = i.charCodeAt(t), c = e.charCodeAt(r);
    if (l < c)
      return -1;
    if (l > c)
      return 1;
  }
  const o = n - t, a = s - r;
  return o < a ? -1 : o > a ? 1 : 0;
}
function Ww(i, e) {
  return Ep(i, e, 0, i.length, 0, e.length);
}
function Ep(i, e, t = 0, n = i.length, r = 0, s = e.length) {
  for (; t < n && r < s; t++, r++) {
    let l = i.charCodeAt(t), c = e.charCodeAt(r);
    if (l === c)
      continue;
    if (l >= 128 || c >= 128)
      return UE(i.toLowerCase(), e.toLowerCase(), t, n, r, s);
    S2(l) && (l -= 32), S2(c) && (c -= 32);
    const u = l - c;
    if (u !== 0)
      return u;
  }
  const o = n - t, a = s - r;
  return o < a ? -1 : o > a ? 1 : 0;
}
function S2(i) {
  return i >= L.a && i <= L.z;
}
function Aa(i, e) {
  return i.length === e.length && Ep(i, e) === 0;
}
function $E(i, e) {
  const t = e.length;
  return e.length > i.length ? !1 : Ep(i, e, 0, t) === 0;
}
function z8(i, e) {
  const t = Math.min(i.length, e.length);
  let n;
  for (n = 0; n < t; n++)
    if (i.charCodeAt(n) !== e.charCodeAt(n))
      return n;
  return t;
}
function HE(i) {
  return 55296 <= i && i <= 56319;
}
function YT(i) {
  return 56320 <= i && i <= 57343;
}
function XT(i, e) {
  return (i - 55296 << 10) + (e - 56320) + 65536;
}
function ZT(i, e, t) {
  const n = i.charCodeAt(t);
  if (HE(n) && t + 1 < e) {
    const r = i.charCodeAt(t + 1);
    if (YT(r))
      return XT(n, r);
  }
  return n;
}
function q8(i, e) {
  const t = i.charCodeAt(e - 1);
  if (YT(t) && e > 1) {
    const n = i.charCodeAt(e - 2);
    if (HE(n))
      return XT(n, t);
  }
  return t;
}
class j8 {
  get offset() {
    return this._offset;
  }
  constructor(e, t = 0) {
    this._str = e, this._len = e.length, this._offset = t;
  }
  setOffset(e) {
    this._offset = e;
  }
  prevCodePoint() {
    const e = q8(this._str, this._offset);
    return this._offset -= e >= Ai.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1, e;
  }
  nextCodePoint() {
    const e = ZT(this._str, this._len, this._offset);
    return this._offset += e >= Ai.UNICODE_SUPPLEMENTARY_PLANE_BEGIN ? 2 : 1, e;
  }
  eol() {
    return this._offset >= this._len;
  }
}
class G8 {
  get offset() {
    return this._iterator.offset;
  }
  constructor(e, t = 0) {
    this._iterator = new j8(e, t);
  }
  nextGraphemeLength() {
    const e = Yg.getInstance(), t = this._iterator, n = t.offset;
    let r = e.getGraphemeBreakType(t.nextCodePoint());
    for (; !t.eol(); ) {
      const s = t.offset, o = e.getGraphemeBreakType(t.nextCodePoint());
      if (I2(r, o)) {
        t.setOffset(s);
        break;
      }
      r = o;
    }
    return t.offset - n;
  }
  prevGraphemeLength() {
    const e = Yg.getInstance(), t = this._iterator, n = t.offset;
    let r = e.getGraphemeBreakType(t.prevCodePoint());
    for (; t.offset > 0; ) {
      const s = t.offset, o = e.getGraphemeBreakType(t.prevCodePoint());
      if (I2(o, r)) {
        t.setOffset(s);
        break;
      }
      r = o;
    }
    return n - t.offset;
  }
  eol() {
    return this._iterator.eol();
  }
}
function D2(i, e) {
  return new G8(i, e).nextGraphemeLength();
}
let Xv;
function Q8() {
  return /(?:[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u0710\u0712-\u072F\u074D-\u07A5\u07B1-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u0858\u085E-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFD3D\uFD50-\uFDC7\uFDF0-\uFDFC\uFE70-\uFEFC]|\uD802[\uDC00-\uDD1B\uDD20-\uDE00\uDE10-\uDE35\uDE40-\uDEE4\uDEEB-\uDF35\uDF40-\uDFFF]|\uD803[\uDC00-\uDD23\uDE80-\uDEA9\uDEAD-\uDF45\uDF51-\uDF81\uDF86-\uDFF6]|\uD83A[\uDC00-\uDCCF\uDD00-\uDD43\uDD4B-\uDFFF]|\uD83B[\uDC00-\uDEBB])/;
}
function eP(i) {
  return Xv || (Xv = Q8()), Xv.test(i);
}
const K8 = /^[\t\n\r\x20-\x7E]*$/;
function J8(i) {
  return K8.test(i);
}
const Y8 = /[\u2028\u2029]/;
function tP(i) {
  return Y8.test(i);
}
const X8 = String.fromCharCode(L.UTF8_BOM);
function Z8(i) {
  return !!(i && i.length > 0 && i.charCodeAt(0) === L.UTF8_BOM);
}
function k2(i, e = !1) {
  return i ? (e && (i = i.replace(/\\./g, "")), i.toLowerCase() !== i) : !1;
}
function eL(i, e = 1) {
  if (e === 0)
    return "";
  let t = -1;
  do
    t = i.indexOf(`
`, t + 1), e--;
  while (e > 0 && t >= 0);
  return t === -1 ? i : (i[t - 1] === "\r" && t--, i.substr(0, t));
}
function I2(i, e) {
  return i === it.Other ? e !== it.Extend && e !== it.SpacingMark : i === it.CR && e === it.LF ? !1 : i === it.Control || i === it.CR || i === it.LF || e === it.Control || e === it.CR || e === it.LF ? !0 : !(i === it.L && (e === it.L || e === it.V || e === it.LV || e === it.LVT) || (i === it.LV || i === it.V) && (e === it.V || e === it.T) || (i === it.LVT || i === it.T) && e === it.T || e === it.Extend || e === it.ZWJ || e === it.SpacingMark || i === it.Prepend || i === it.ZWJ && e === it.Extended_Pictographic || i === it.Regional_Indicator && e === it.Regional_Indicator);
}
var it;
(function(i) {
  i[i.Other = 0] = "Other", i[i.Prepend = 1] = "Prepend", i[i.CR = 2] = "CR", i[i.LF = 3] = "LF", i[i.Control = 4] = "Control", i[i.Extend = 5] = "Extend", i[i.Regional_Indicator = 6] = "Regional_Indicator", i[i.SpacingMark = 7] = "SpacingMark", i[i.L = 8] = "L", i[i.V = 9] = "V", i[i.T = 10] = "T", i[i.LV = 11] = "LV", i[i.LVT = 12] = "LVT", i[i.ZWJ = 13] = "ZWJ", i[i.Extended_Pictographic = 14] = "Extended_Pictographic";
})(it || (it = {}));
const Da = class Da {
  static getInstance() {
    return Da._INSTANCE || (Da._INSTANCE = new Da()), Da._INSTANCE;
  }
  constructor() {
    this._data = tL();
  }
  getGraphemeBreakType(e) {
    if (e < 32)
      return e === L.LineFeed ? it.LF : e === L.CarriageReturn ? it.CR : it.Control;
    if (e < 127)
      return it.Other;
    const t = this._data, n = t.length / 3;
    let r = 1;
    for (; r <= n; )
      if (e < t[3 * r])
        r = 2 * r;
      else if (e > t[3 * r + 1])
        r = 2 * r + 1;
      else
        return t[3 * r + 2];
    return it.Other;
  }
};
Da._INSTANCE = null;
let Yg = Da;
function tL() {
  return JSON.parse("[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]");
}
var C2;
(function(i) {
  i[i.zwj = 8205] = "zwj", i[i.emojiVariantSelector = 65039] = "emojiVariantSelector", i[i.enclosingKeyCap = 8419] = "enclosingKeyCap", i[i.space = 32] = "space";
})(C2 || (C2 = {}));
const Fr = class Fr {
  static getInstance(e) {
    return Fr.cache.get(Array.from(e));
  }
  static getLocales() {
    return Fr._locales.value;
  }
  constructor(e) {
    this.confusableDictionary = e;
  }
  isAmbiguous(e) {
    return this.confusableDictionary.has(e);
  }
  containsAmbiguousCharacter(e) {
    for (let t = 0; t < e.length; t++) {
      const n = e.codePointAt(t);
      if (typeof n == "number" && this.isAmbiguous(n))
        return !0;
    }
    return !1;
  }
  getPrimaryConfusable(e) {
    return this.confusableDictionary.get(e);
  }
  getConfusableCodePoints() {
    return new Set(this.confusableDictionary.keys());
  }
};
Fr.ambiguousCharacterData = new Qi(() => JSON.parse('{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,1523,96,8242,96,1370,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,118002,50,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,118003,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,118004,52,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,118005,53,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,118006,54,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,118007,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,118008,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,118009,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,117974,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,117975,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71913,67,71922,67,65315,67,8557,67,8450,67,8493,67,117976,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,117977,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,117978,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,117979,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,117980,71,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,117981,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,117983,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,117984,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,118001,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,117982,108,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,117985,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,117986,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,117987,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,118000,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,117988,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,117989,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,117990,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,117991,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,117992,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,117993,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,117994,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,117995,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71910,87,71919,87,117996,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,117997,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,117998,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,71909,90,66293,90,65338,90,8484,90,8488,90,117999,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65283,35,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,8218,44,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"cs":[65374,126,8218,44,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"es":[8211,45,65374,126,8218,44,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"fr":[65374,126,8218,44,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"it":[160,32,8211,45,65374,126,8218,44,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"ja":[8211,45,8218,44,65281,33,8216,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65292,44,65297,49,65307,59],"ko":[8211,45,65374,126,8218,44,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"pt-BR":[65374,126,8218,44,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,8218,44,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"ru":[65374,126,8218,44,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,8218,44,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41,65292,44,65297,49,65307,59,65311,63],"zh-hans":[160,32,65374,126,8218,44,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65297,49],"zh-hant":[8211,45,65374,126,8218,44,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89]}')), Fr.cache = new U8({ getCacheKey: JSON.stringify }, (e) => {
  function t(u) {
    const d = /* @__PURE__ */ new Map();
    for (let f = 0; f < u.length; f += 2)
      d.set(u[f], u[f + 1]);
    return d;
  }
  function n(u, d) {
    const f = new Map(u);
    for (const [p, v] of d)
      f.set(p, v);
    return f;
  }
  function r(u, d) {
    if (!u)
      return d;
    const f = /* @__PURE__ */ new Map();
    for (const [p, v] of u)
      d.has(p) && f.set(p, v);
    return f;
  }
  const s = Fr.ambiguousCharacterData.value;
  let o = e.filter((u) => !u.startsWith("_") && u in s);
  o.length === 0 && (o = ["_default"]);
  let a;
  for (const u of o) {
    const d = t(s[u]);
    a = r(a, d);
  }
  const l = t(s._common), c = n(l, a);
  return new Fr(c);
}), Fr._locales = new Qi(() => Object.keys(Fr.ambiguousCharacterData.value).filter((e) => !e.startsWith("_")));
let T2 = Fr;
function oo(i) {
  return i === L.Slash || i === L.Backslash;
}
function iP(i) {
  return i.replace(/[\\/]/g, pt.sep);
}
function iL(i) {
  return i.indexOf("/") === -1 && (i = iP(i)), /^[a-zA-Z]:(\/|$)/.test(i) && (i = "/" + i), i;
}
function P2(i, e = pt.sep) {
  if (!i)
    return "";
  const t = i.length, n = i.charCodeAt(0);
  if (oo(n)) {
    if (oo(i.charCodeAt(1)) && !oo(i.charCodeAt(2))) {
      let s = 3;
      const o = s;
      for (; s < t && !oo(i.charCodeAt(s)); s++)
        ;
      if (o !== s && !oo(i.charCodeAt(s + 1))) {
        for (s += 1; s < t; s++)
          if (oo(i.charCodeAt(s)))
            return i.slice(0, s + 1).replace(/[\\/]/g, e);
      }
    }
    return e;
  } else if (nP(n) && i.charCodeAt(1) === L.Colon)
    return oo(i.charCodeAt(2)) ? i.slice(0, 2) + e : i.slice(0, 2);
  let r = i.indexOf("://");
  if (r !== -1) {
    for (r += 3; r < t; r++)
      if (oo(i.charCodeAt(r)))
        return i.slice(0, r + 1);
  }
  return "";
}
function Xg(i, e, t, n = Jn) {
  if (i === e)
    return !0;
  if (!i || !e || e.length > i.length)
    return !1;
  if (t) {
    if (!$E(i, e))
      return !1;
    if (e.length === i.length)
      return !0;
    let s = e.length;
    return e.charAt(e.length - 1) === n && s--, i.charAt(s) === n;
  }
  return e.charAt(e.length - 1) !== n && (e += n), i.indexOf(e) === 0;
}
function nP(i) {
  return i >= L.A && i <= L.Z || i >= L.a && i <= L.z;
}
function nL(i, e = Yi) {
  return e ? nP(i.charCodeAt(0)) && i.charCodeAt(1) === L.Colon : !1;
}
var fe;
(function(i) {
  i.inMemory = "inmemory", i.vscode = "vscode", i.internal = "private", i.walkThrough = "walkThrough", i.walkThroughSnippet = "walkThroughSnippet", i.http = "http", i.https = "https", i.file = "file", i.mailto = "mailto", i.untitled = "untitled", i.data = "data", i.command = "command", i.vscodeRemote = "vscode-remote", i.vscodeRemoteResource = "vscode-remote-resource", i.vscodeManagedRemoteResource = "vscode-managed-remote-resource", i.vscodeUserData = "vscode-userdata", i.vscodeCustomEditor = "vscode-custom-editor", i.vscodeNotebookCell = "vscode-notebook-cell", i.vscodeNotebookCellMetadata = "vscode-notebook-cell-metadata", i.vscodeNotebookCellMetadataDiff = "vscode-notebook-cell-metadata-diff", i.vscodeNotebookCellOutput = "vscode-notebook-cell-output", i.vscodeNotebookCellOutputDiff = "vscode-notebook-cell-output-diff", i.vscodeNotebookMetadata = "vscode-notebook-metadata", i.vscodeInteractiveInput = "vscode-interactive-input", i.vscodeSettings = "vscode-settings", i.vscodeWorkspaceTrust = "vscode-workspace-trust", i.vscodeTerminal = "vscode-terminal", i.vscodeChatCodeBlock = "vscode-chat-code-block", i.vscodeChatCodeCompareBlock = "vscode-chat-code-compare-block", i.vscodeChatEditor = "vscode-chat-editor", i.vscodeChatInput = "chatSessionInput", i.vscodeChatSession = "vscode-chat-session", i.webviewPanel = "webview-panel", i.vscodeWebview = "vscode-webview", i.extension = "extension", i.vscodeFileResource = "vscode-file", i.tmp = "tmp", i.vsls = "vsls", i.vscodeSourceControl = "vscode-scm", i.commentsInput = "comment", i.codeSetting = "code-setting", i.outputChannel = "output", i.accessibleView = "accessible-view";
})(fe || (fe = {}));
function Vw(i, e) {
  return x.isUri(i) ? Aa(i.scheme, e) : $E(i, e + ":");
}
function rL(i, ...e) {
  return e.some((t) => Vw(i, t));
}
const sL = "tkn";
class oL {
  constructor() {
    this._hosts = /* @__PURE__ */ Object.create(null), this._ports = /* @__PURE__ */ Object.create(null), this._connectionTokens = /* @__PURE__ */ Object.create(null), this._preferredWebSchema = "http", this._delegate = null, this._serverRootPath = "/";
  }
  setPreferredWebSchema(e) {
    this._preferredWebSchema = e;
  }
  setDelegate(e) {
    this._delegate = e;
  }
  setServerRootPath(e, t) {
    this._serverRootPath = pt.join(t ?? "/", lL(e));
  }
  getServerRootPath() {
    return this._serverRootPath;
  }
  get _remoteResourcesPath() {
    return pt.join(this._serverRootPath, fe.vscodeRemoteResource);
  }
  set(e, t, n) {
    this._hosts[e] = t, this._ports[e] = n;
  }
  setConnectionToken(e, t) {
    this._connectionTokens[e] = t;
  }
  getPreferredWebSchema() {
    return this._preferredWebSchema;
  }
  rewrite(e) {
    if (this._delegate)
      try {
        return this._delegate(e);
      } catch (a) {
        return Fi(a), e;
      }
    const t = e.authority;
    let n = this._hosts[t];
    n && n.indexOf(":") !== -1 && n.indexOf("[") === -1 && (n = `[${n}]`);
    const r = this._ports[t], s = this._connectionTokens[t];
    let o = `path=${encodeURIComponent(e.path)}`;
    return typeof s == "string" && (o += `&${sL}=${encodeURIComponent(s)}`), x.from({
      scheme: xp ? this._preferredWebSchema : fe.vscodeRemoteResource,
      authority: `${n}:${r}`,
      path: this._remoteResourcesPath,
      query: o
    });
  }
}
const aL = new oL();
function lL(i) {
  return `${i.quality ?? "oss"}-${i.commit ?? "dev"}`;
}
const cL = "vscode-app", Bc = class Bc {
  constructor() {
    this.staticBrowserUris = new mi(), this.appResourcePathUrls = /* @__PURE__ */ new Map();
  }
  registerAppResourcePathUrl(e, t) {
    this.appResourcePathUrls.set(e, t);
  }
  toUrl(e) {
    var n;
    let t = this.appResourcePathUrls.get(e);
    return typeof t == "function" && (t = t()), new URL(t ?? e, ((n = globalThis.location) == null ? void 0 : n.href) ?? import.meta.url).toString();
  }
  asBrowserUri(e) {
    const t = this.toUri(e);
    return this.uriToBrowserUri(t);
  }
  uriToBrowserUri(e) {
    return e.scheme === fe.vscodeRemote ? aL.rewrite(e) : e.scheme === fe.file && (UT || f8 === `${fe.vscodeFileResource}://${Bc.FALLBACK_AUTHORITY}`) ? e.with({
      scheme: fe.vscodeFileResource,
      authority: e.authority || Bc.FALLBACK_AUTHORITY,
      query: null,
      fragment: null
    }) : this.staticBrowserUris.get(e) ?? e;
  }
  asFileUri(e) {
    const t = this.toUri(e);
    return this.uriToFileUri(t);
  }
  uriToFileUri(e) {
    return e.scheme === fe.vscodeFileResource ? e.with({
      scheme: fe.file,
      authority: e.authority !== Bc.FALLBACK_AUTHORITY ? e.authority : null,
      query: null,
      fragment: null
    }) : e;
  }
  toUri(e) {
    if (x.isUri(e))
      return e;
    if (globalThis._VSCODE_FILE_ROOT) {
      const t = globalThis._VSCODE_FILE_ROOT;
      if (/^\w[\w\d+.-]*:\/\//.test(t))
        return x.joinPath(x.parse(t, !0), e);
      const n = Fw(t, e);
      return x.file(n);
    }
    return x.parse(this.toUrl(e));
  }
  registerStaticBrowserUri(e, t) {
    return this.staticBrowserUris.set(e, t), Ie(() => {
      this.staticBrowserUris.get(e) === t && this.staticBrowserUris.delete(e);
    });
  }
  getRegisteredBrowserUris() {
    return this.staticBrowserUris.keys();
  }
};
Bc.FALLBACK_AUTHORITY = cL;
let zw = Bc;
new zw();
var A2;
(function(i) {
  const e = /* @__PURE__ */ new Map([
    ["1", { "Cross-Origin-Opener-Policy": "same-origin" }],
    ["2", { "Cross-Origin-Embedder-Policy": "require-corp" }],
    ["3", { "Cross-Origin-Opener-Policy": "same-origin", "Cross-Origin-Embedder-Policy": "require-corp" }]
  ]);
  i.CoopAndCoep = Object.freeze(e.get("3"));
  const t = "vscode-coi";
  function n(s) {
    let o;
    typeof s == "string" ? o = new URL(s).searchParams : s instanceof URL ? o = s.searchParams : x.isUri(s) && (o = new URL(s.toString(!0)).searchParams);
    const a = o == null ? void 0 : o.get(t);
    if (a)
      return e.get(a);
  }
  i.getHeadersFromQuery = n;
  function r(s, o, a) {
    if (!globalThis.crossOriginIsolated)
      return;
    const l = o && a ? "3" : a ? "2" : "1";
    s instanceof URLSearchParams ? s.set(t, l) : s[t] = l;
  }
  i.addSearchParam = r;
})(A2 || (A2 = {}));
function or(i) {
  return Kg(i, !0);
}
class Sp {
  constructor(e) {
    this._ignorePathCasing = e;
  }
  compare(e, t, n = !1) {
    return e === t ? 0 : Ml(this.getComparisonKey(e, n), this.getComparisonKey(t, n));
  }
  isEqual(e, t, n = !1) {
    return e === t ? !0 : !e || !t ? !1 : this.getComparisonKey(e, n) === this.getComparisonKey(t, n);
  }
  getComparisonKey(e, t = !1) {
    return e.with({
      path: this._ignorePathCasing(e) ? e.path.toLowerCase() : void 0,
      fragment: t ? null : void 0
    }).toString();
  }
  ignorePathCasing(e) {
    return this._ignorePathCasing(e);
  }
  isEqualOrParent(e, t, n = !1) {
    if (e.scheme === t.scheme) {
      if (e.scheme === fe.file)
        return Xg(or(e), or(t), this._ignorePathCasing(e)) && e.query === t.query && (n || e.fragment === t.fragment);
      if (R2(e.authority, t.authority))
        return Xg(e.path, t.path, this._ignorePathCasing(e), "/") && e.query === t.query && (n || e.fragment === t.fragment);
    }
    return !1;
  }
  joinPath(e, ...t) {
    return x.joinPath(e, ...t);
  }
  basenameOrAuthority(e) {
    return Xs(e) || e.authority;
  }
  basename(e) {
    return pt.basename(e.path);
  }
  extname(e) {
    return pt.extname(e.path);
  }
  dirname(e) {
    if (e.path.length === 0)
      return e;
    let t;
    return e.scheme === fe.file ? t = x.file(Qc(or(e))).path : (t = pt.dirname(e.path), e.authority && t.length && t.charCodeAt(0) !== L.Slash && (console.error(`dirname("${e.toString})) resulted in a relative path`), t = "/")), e.with({
      path: t
    });
  }
  normalizePath(e) {
    if (!e.path.length)
      return e;
    let t;
    return e.scheme === fe.file ? t = x.file(Fu(or(e))).path : t = pt.normalize(e.path), e.with({
      path: t
    });
  }
  relativePath(e, t) {
    if (e.scheme !== t.scheme || !R2(e.authority, t.authority))
      return;
    if (e.scheme === fe.file) {
      const s = zh(or(e), or(t));
      return Yi ? iP(s) : s;
    }
    let n = e.path || "/";
    const r = t.path || "/";
    if (this._ignorePathCasing(e)) {
      let s = 0;
      for (const o = Math.min(n.length, r.length); s < o && !(n.charCodeAt(s) !== r.charCodeAt(s) && n.charAt(s).toLowerCase() !== r.charAt(s).toLowerCase()); s++)
        ;
      n = r.substr(0, s) + n.substr(s);
    }
    return pt.relative(n, r);
  }
  resolvePath(e, t) {
    if (e.scheme === fe.file) {
      const n = x.file(C8(or(e), t));
      return e.with({
        authority: n.authority,
        path: n.path
      });
    }
    return t = iL(t), e.with({
      path: pt.resolve(e.path, t)
    });
  }
  isAbsolutePath(e) {
    return !!e.path && e.path[0] === "/";
  }
  isEqualAuthority(e, t) {
    return e === t || e !== void 0 && t !== void 0 && Aa(e, t);
  }
  hasTrailingPathSeparator(e, t = Jn) {
    if (e.scheme === fe.file) {
      const n = or(e);
      return n.length > P2(n).length && n[n.length - 1] === t;
    } else {
      const n = e.path;
      return n.length > 1 && n.charCodeAt(n.length - 1) === L.Slash && !/^[a-zA-Z]:(\/$|\\$)/.test(e.fsPath);
    }
  }
  removeTrailingPathSeparator(e, t = Jn) {
    return L2(e, t) ? e.with({ path: e.path.substr(0, e.path.length - 1) }) : e;
  }
  addTrailingPathSeparator(e, t = Jn) {
    let n = !1;
    if (e.scheme === fe.file) {
      const r = or(e);
      n = r !== void 0 && r.length === P2(r).length && r[r.length - 1] === t;
    } else {
      t = "/";
      const r = e.path;
      n = r.length === 1 && r.charCodeAt(r.length - 1) === L.Slash;
    }
    return !n && !L2(e, t) ? e.with({ path: e.path + "/" }) : e;
  }
}
const ct = new Sp(() => !1), uL = new Sp((i) => i.scheme === fe.file ? !jo : !0), dL = new Sp((i) => !0), Kc = ct.isEqual.bind(ct);
ct.isEqualOrParent.bind(ct);
ct.getComparisonKey.bind(ct);
const qw = ct.basenameOrAuthority.bind(ct), Xs = ct.basename.bind(ct), hL = ct.extname.bind(ct), Z1 = ct.dirname.bind(ct), Ei = ct.joinPath.bind(ct);
ct.normalizePath.bind(ct);
const rP = ct.relativePath.bind(ct);
ct.resolvePath.bind(ct);
const fL = ct.isAbsolutePath.bind(ct), R2 = ct.isEqualAuthority.bind(ct), L2 = ct.hasTrailingPathSeparator.bind(ct);
ct.removeTrailingPathSeparator.bind(ct);
ct.addTrailingPathSeparator.bind(ct);
var N2;
(function(i) {
  i.META_DATA_LABEL = "label", i.META_DATA_DESCRIPTION = "description", i.META_DATA_SIZE = "size", i.META_DATA_MIME = "mime";
  function e(t) {
    const n = /* @__PURE__ */ new Map();
    t.path.substring(t.path.indexOf(";") + 1, t.path.lastIndexOf(";")).split(";").forEach((o) => {
      const [a, l] = o.split(":");
      a && l && n.set(a, l);
    });
    const s = t.path.substring(0, t.path.indexOf(";"));
    return s && n.set(i.META_DATA_MIME, s), n;
  }
  i.parseMetaData = e;
})(N2 || (N2 = {}));
const pL = Symbol("MicrotaskDelay");
function Go(i) {
  return !!i && typeof i.then == "function";
}
function gL(i) {
  const e = new Lt(), t = i(e.token);
  let n = !1;
  const r = new Promise((s, o) => {
    const a = e.token.onCancellationRequested(() => {
      n = !0, a.dispose(), o(new Yn());
    });
    Promise.resolve(t).then((l) => {
      a.dispose(), e.dispose(), n ? CT(l) && l.dispose() : s(l);
    }, (l) => {
      a.dispose(), e.dispose(), o(l);
    });
  });
  return new class {
    cancel() {
      e.cancel(), e.dispose();
    }
    then(s, o) {
      return r.then(s, o);
    }
    catch(s) {
      return this.then(void 0, s);
    }
    finally(s) {
      return r.finally(s);
    }
  }();
}
function mL(i, e, t) {
  return new Promise((n, r) => {
    const s = e.onCancellationRequested(() => {
      s.dispose(), n(t);
    });
    i.then(n, r).finally(() => s.dispose());
  });
}
function BE(i, e) {
  return new Promise((t, n) => {
    const r = e.onCancellationRequested(() => {
      r.dispose(), n(new Yn());
    });
    i.then(t, n).finally(() => r.dispose());
  });
}
function Mi(i) {
  return new Promise((e, t) => {
    const n = i();
    Go(n) ? n.then(e, t) : e(n);
  });
}
function _L() {
  let i, e;
  return { promise: new Promise((n, r) => {
    i = n, e = r;
  }), resolve: i, reject: e };
}
let vL = class {
  constructor() {
    this.isDisposed = !1, this.activePromise = null, this.queuedPromise = null, this.queuedPromiseFactory = null;
  }
  queue(e) {
    if (this.isDisposed)
      return Promise.reject(new Error("Throttler is disposed"));
    if (this.activePromise) {
      if (this.queuedPromiseFactory = e, !this.queuedPromise) {
        const t = () => {
          if (this.queuedPromise = null, this.isDisposed)
            return;
          const n = this.queue(this.queuedPromiseFactory);
          return this.queuedPromiseFactory = null, n;
        };
        this.queuedPromise = new Promise((n) => {
          this.activePromise.then(t, t).then(n);
        });
      }
      return new Promise((t, n) => {
        this.queuedPromise.then(t, n);
      });
    }
    return this.activePromise = e(), new Promise((t, n) => {
      this.activePromise.then((r) => {
        this.activePromise = null, t(r);
      }, (r) => {
        this.activePromise = null, n(r);
      });
    });
  }
  dispose() {
    this.isDisposed = !0;
  }
};
class wL {
  constructor() {
    this.current = Promise.resolve(null);
  }
  queue(e) {
    return this.current = this.current.then(() => e(), () => e());
  }
}
class bL {
  constructor() {
    this.promiseMap = /* @__PURE__ */ new Map();
  }
  queue(e, t) {
    const r = (this.promiseMap.get(e) ?? Promise.resolve()).catch(() => {
    }).then(t).finally(() => {
      this.promiseMap.get(e) === r && this.promiseMap.delete(e);
    });
    return this.promiseMap.set(e, r), r;
  }
  keys() {
    return this.promiseMap.keys();
  }
}
const yL = (i, e) => {
  let t = !0;
  const n = setTimeout(() => {
    t = !1, e();
  }, i);
  return {
    isTriggered: () => t,
    dispose: () => {
      clearTimeout(n), t = !1;
    }
  };
}, xL = (i) => {
  let e = !0;
  return queueMicrotask(() => {
    e && (e = !1, i());
  }), {
    isTriggered: () => e,
    dispose: () => {
      e = !1;
    }
  };
};
class EL {
  constructor(e) {
    this.defaultDelay = e, this.deferred = null, this.completionPromise = null, this.doResolve = null, this.doReject = null, this.task = null;
  }
  trigger(e, t = this.defaultDelay) {
    this.task = e, this.cancelTimeout(), this.completionPromise || (this.completionPromise = new Promise((r, s) => {
      this.doResolve = r, this.doReject = s;
    }).then(() => {
      if (this.completionPromise = null, this.doResolve = null, this.task) {
        const r = this.task;
        return this.task = null, r();
      }
    }));
    const n = () => {
      var r;
      this.deferred = null, (r = this.doResolve) == null || r.call(this, null);
    };
    return this.deferred = t === pL ? xL(n) : yL(t, n), this.completionPromise;
  }
  isTriggered() {
    var e;
    return !!((e = this.deferred) != null && e.isTriggered());
  }
  cancel() {
    var e;
    this.cancelTimeout(), this.completionPromise && ((e = this.doReject) == null || e.call(this, new Yn()), this.completionPromise = null);
  }
  cancelTimeout() {
    var e;
    (e = this.deferred) == null || e.dispose(), this.deferred = null;
  }
  dispose() {
    this.cancel();
  }
}
class sP {
  constructor(e) {
    this.delayer = new EL(e), this.throttler = new vL();
  }
  trigger(e, t) {
    return this.delayer.trigger(() => this.throttler.queue(e), t);
  }
  isTriggered() {
    return this.delayer.isTriggered();
  }
  cancel() {
    this.delayer.cancel();
  }
  dispose() {
    this.delayer.dispose(), this.throttler.dispose();
  }
}
class Jr {
  constructor() {
    this._isOpen = !1, this._promise = new Promise((e, t) => {
      this._completePromise = e;
    });
  }
  isOpen() {
    return this._isOpen;
  }
  open() {
    this._isOpen = !0, this._completePromise(!0);
  }
  wait() {
    return this._promise;
  }
}
function ns(i, e) {
  return e ? new Promise((t, n) => {
    const r = setTimeout(() => {
      s.dispose(), t();
    }, i), s = e.onCancellationRequested(() => {
      clearTimeout(r), s.dispose(), n(new Yn());
    });
  }) : gL((t) => ns(i, t));
}
function SL(i, e = 0, t) {
  const n = setTimeout(() => {
    i();
  }, e);
  return Ie(() => {
    clearTimeout(n);
  });
}
class DL {
  constructor(e) {
    this._size = 0, this._isDisposed = !1, this.maxDegreeOfParalellism = e, this.outstandingPromises = [], this.runningPromises = 0, this._onDrained = new M();
  }
  whenIdle() {
    return this.size > 0 ? Pt.toPromise(this.onDrained) : Promise.resolve();
  }
  get onDrained() {
    return this._onDrained.event;
  }
  get size() {
    return this._size;
  }
  queue(e) {
    if (this._isDisposed)
      throw new Error("Object has been disposed");
    return this._size++, new Promise((t, n) => {
      this.outstandingPromises.push({ factory: e, c: t, e: n }), this.consume();
    });
  }
  consume() {
    for (; this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism; ) {
      const e = this.outstandingPromises.shift();
      this.runningPromises++;
      const t = e.factory();
      t.then(e.c, e.e), t.then(() => this.consumed(), () => this.consumed());
    }
  }
  consumed() {
    this._isDisposed || (this.runningPromises--, --this._size === 0 && this._onDrained.fire(), this.outstandingPromises.length > 0 && this.consume());
  }
  clear() {
    if (this._isDisposed)
      throw new Error("Object has been disposed");
    this.outstandingPromises.length = 0, this._size = this.runningPromises;
  }
  dispose() {
    this._isDisposed = !0, this.outstandingPromises.length = 0, this._size = 0, this._onDrained.dispose();
  }
}
class kL extends DL {
  constructor() {
    super(1);
  }
}
class IL {
  constructor() {
    this.queues = /* @__PURE__ */ new Map(), this.drainers = /* @__PURE__ */ new Set(), this.drainListeners = void 0, this.drainListenerCount = 0;
  }
  async whenDrained() {
    if (this.isDrained())
      return;
    const e = new Qo();
    return this.drainers.add(e), e.p;
  }
  isDrained() {
    for (const [, e] of this.queues)
      if (e.size > 0)
        return !1;
    return !0;
  }
  queueSize(e, t = ct) {
    var r;
    const n = t.getComparisonKey(e);
    return ((r = this.queues.get(n)) == null ? void 0 : r.size) ?? 0;
  }
  queueFor(e, t, n = ct) {
    const r = n.getComparisonKey(e);
    let s = this.queues.get(r);
    if (!s) {
      s = new kL();
      const o = this.drainListenerCount++, a = Pt.once(s.onDrained)(() => {
        var l, c;
        s == null || s.dispose(), this.queues.delete(r), this.onDidQueueDrain(), (l = this.drainListeners) == null || l.deleteAndDispose(o), ((c = this.drainListeners) == null ? void 0 : c.size) === 0 && (this.drainListeners.dispose(), this.drainListeners = void 0);
      });
      this.drainListeners || (this.drainListeners = new Vg()), this.drainListeners.set(o, a), this.queues.set(r, s);
    }
    return s.queue(t);
  }
  onDidQueueDrain() {
    this.isDrained() && this.releaseDrainers();
  }
  releaseDrainers() {
    for (const e of this.drainers)
      e.complete();
    this.drainers.clear();
  }
  dispose() {
    var e;
    for (const [, t] of this.queues)
      t.dispose();
    this.queues.clear(), this.releaseDrainers(), (e = this.drainListeners) == null || e.dispose();
  }
}
class CL {
  constructor() {
    this.disposable = void 0, this.isDisposed = !1;
  }
  cancel() {
    var e;
    (e = this.disposable) == null || e.dispose(), this.disposable = void 0;
  }
  cancelAndSet(e, t, n = globalThis) {
    if (this.isDisposed)
      throw new cn("Calling 'cancelAndSet' on a disposed IntervalTimer");
    this.cancel();
    const r = n.setInterval(() => {
      e();
    }, t);
    this.disposable = Ie(() => {
      n.clearInterval(r), this.disposable = void 0;
    });
  }
  dispose() {
    this.cancel(), this.isDisposed = !0;
  }
}
class Gl {
  constructor(e, t) {
    this.timeoutToken = void 0, this.runner = e, this.timeout = t, this.timeoutHandler = this.onTimeout.bind(this);
  }
  dispose() {
    this.cancel(), this.runner = null;
  }
  cancel() {
    this.isScheduled() && (clearTimeout(this.timeoutToken), this.timeoutToken = void 0);
  }
  schedule(e = this.timeout) {
    this.cancel(), this.timeoutToken = setTimeout(this.timeoutHandler, e);
  }
  get delay() {
    return this.timeout;
  }
  set delay(e) {
    this.timeout = e;
  }
  isScheduled() {
    return this.timeoutToken !== void 0;
  }
  flush() {
    this.isScheduled() && (this.cancel(), this.doRun());
  }
  onTimeout() {
    this.timeoutToken = void 0, this.runner && this.doRun();
  }
  doRun() {
    var e;
    (e = this.runner) == null || e.call(this);
  }
}
let oP, pg;
(function() {
  const i = globalThis;
  typeof i.requestIdleCallback != "function" || typeof i.cancelIdleCallback != "function" ? pg = (e, t, n) => {
    $T(() => {
      if (r)
        return;
      const s = Date.now() + 15;
      t(Object.freeze({
        didTimeout: !0,
        timeRemaining() {
          return Math.max(0, s - Date.now());
        }
      }));
    });
    let r = !1;
    return {
      dispose() {
        r || (r = !0);
      }
    };
  } : pg = (e, t, n) => {
    const r = e.requestIdleCallback(t, typeof n == "number" ? { timeout: n } : void 0);
    let s = !1;
    return {
      dispose() {
        s || (s = !0, e.cancelIdleCallback(r));
      }
    };
  }, oP = (e, t) => pg(globalThis, e, t);
})();
class TL {
  constructor(e, t) {
    this._didRun = !1, this._executor = () => {
      try {
        this._value = t();
      } catch (n) {
        this._error = n;
      } finally {
        this._didRun = !0;
      }
    }, this._handle = pg(e, () => this._executor());
  }
  dispose() {
    this._handle.dispose();
  }
  get value() {
    if (this._didRun || (this._handle.dispose(), this._executor()), this._error)
      throw this._error;
    return this._value;
  }
  get isInitialized() {
    return this._didRun;
  }
}
class PL extends TL {
  constructor(e) {
    super(globalThis, e);
  }
}
var _a;
(function(i) {
  i[i.Resolved = 0] = "Resolved", i[i.Rejected = 1] = "Rejected";
})(_a || (_a = {}));
class Qo {
  get isRejected() {
    var e;
    return ((e = this.outcome) == null ? void 0 : e.outcome) === _a.Rejected;
  }
  get isResolved() {
    var e;
    return ((e = this.outcome) == null ? void 0 : e.outcome) === _a.Resolved;
  }
  get isSettled() {
    return !!this.outcome;
  }
  get value() {
    var e, t;
    return ((e = this.outcome) == null ? void 0 : e.outcome) === _a.Resolved ? (t = this.outcome) == null ? void 0 : t.value : void 0;
  }
  constructor() {
    this.p = new Promise((e, t) => {
      this.completeCallback = e, this.errorCallback = t;
    });
  }
  complete(e) {
    return new Promise((t) => {
      this.completeCallback(e), this.outcome = { outcome: _a.Resolved, value: e }, t();
    });
  }
  error(e) {
    return new Promise((t) => {
      this.errorCallback(e), this.outcome = { outcome: _a.Rejected, value: e }, t();
    });
  }
  settleWith(e) {
    return e.then((t) => this.complete(t), (t) => this.error(t));
  }
  cancel() {
    return this.error(new Yn());
  }
}
var Uu;
(function(i) {
  async function e(n) {
    let r;
    const s = await Promise.all(n.map((o) => o.then((a) => a, (a) => {
      r || (r = a);
    })));
    if (typeof r < "u")
      throw r;
    return s;
  }
  i.settled = e;
  function t(n) {
    return new Promise(async (r, s) => {
      try {
        await n(r, s);
      } catch (o) {
        s(o);
      }
    });
  }
  i.withAsyncBody = t;
})(Uu || (Uu = {}));
var ar;
(function(i) {
  i[i.Initial = 0] = "Initial", i[i.DoneOK = 1] = "DoneOK", i[i.DoneError = 2] = "DoneError";
})(ar || (ar = {}));
const nn = class nn {
  static fromArray(e) {
    return new nn((t) => {
      t.emitMany(e);
    });
  }
  static fromPromise(e) {
    return new nn(async (t) => {
      t.emitMany(await e);
    });
  }
  static fromPromisesResolveOrder(e) {
    return new nn(async (t) => {
      await Promise.all(e.map(async (n) => t.emitOne(await n)));
    });
  }
  static merge(e) {
    return new nn(async (t) => {
      await Promise.all(e.map(async (n) => {
        for await (const r of n)
          t.emitOne(r);
      }));
    });
  }
  constructor(e, t) {
    this._state = ar.Initial, this._results = [], this._error = null, this._onReturn = t, this._onStateChanged = new M(), queueMicrotask(async () => {
      const n = {
        emitOne: (r) => this.emitOne(r),
        emitMany: (r) => this.emitMany(r),
        reject: (r) => this.reject(r)
      };
      try {
        await Promise.resolve(e(n)), this.resolve();
      } catch (r) {
        this.reject(r);
      } finally {
        n.emitOne = void 0, n.emitMany = void 0, n.reject = void 0;
      }
    });
  }
  [Symbol.asyncIterator]() {
    let e = 0;
    return {
      next: async () => {
        do {
          if (this._state === ar.DoneError)
            throw this._error;
          if (e < this._results.length)
            return { done: !1, value: this._results[e++] };
          if (this._state === ar.DoneOK)
            return { done: !0, value: void 0 };
          await Pt.toPromise(this._onStateChanged.event);
        } while (!0);
      },
      return: async () => {
        var t;
        return (t = this._onReturn) == null || t.call(this), { done: !0, value: void 0 };
      }
    };
  }
  static map(e, t) {
    return new nn(async (n) => {
      for await (const r of e)
        n.emitOne(t(r));
    });
  }
  map(e) {
    return nn.map(this, e);
  }
  static filter(e, t) {
    return new nn(async (n) => {
      for await (const r of e)
        t(r) && n.emitOne(r);
    });
  }
  filter(e) {
    return nn.filter(this, e);
  }
  static coalesce(e) {
    return nn.filter(e, (t) => !!t);
  }
  coalesce() {
    return nn.coalesce(this);
  }
  static async toPromise(e) {
    const t = [];
    for await (const n of e)
      t.push(n);
    return t;
  }
  toPromise() {
    return nn.toPromise(this);
  }
  emitOne(e) {
    this._state === ar.Initial && (this._results.push(e), this._onStateChanged.fire());
  }
  emitMany(e) {
    this._state === ar.Initial && (this._results = this._results.concat(e), this._onStateChanged.fire());
  }
  resolve() {
    this._state === ar.Initial && (this._state = ar.DoneOK, this._onStateChanged.fire());
  }
  reject(e) {
    this._state === ar.Initial && (this._state = ar.DoneError, this._error = e, this._onStateChanged.fire());
  }
};
nn.EMPTY = nn.fromArray([]);
let Ol = nn;
class jw {
  constructor(e) {
    this._deferred = new Qo(), this._asyncIterable = new Ol((r) => {
      if (t) {
        r.reject(t);
        return;
      }
      return n && r.emitMany(n), this._errorFn = (s) => r.reject(s), this._emitOneFn = (s) => r.emitOne(s), this._emitManyFn = (s) => r.emitMany(s), this._deferred.p;
    }, e);
    let t, n;
    this._errorFn = (r) => {
      t || (t = r);
    }, this._emitOneFn = (r) => {
      n || (n = []), n.push(r);
    }, this._emitManyFn = (r) => {
      n ? r.forEach((s) => n.push(s)) : n = r.slice();
    };
  }
  get asyncIterable() {
    return this._asyncIterable;
  }
  resolve() {
    this._deferred.complete();
  }
  reject(e) {
    this._errorFn(e), this._deferred.complete();
  }
  emitOne(e) {
    this._emitOneFn(e);
  }
  emitMany(e) {
    this._emitManyFn(e);
  }
}
function aP(i, e, t, n) {
  if (!i || n > 200)
    return null;
  if (typeof i == "object") {
    if (i.$mid === rt.Uri)
      return t ? x.revive(e.transformIncoming(i)) : e.transformIncoming(i);
    if (i instanceof he)
      return null;
    for (const r in i)
      if (Object.hasOwnProperty.call(i, r)) {
        const s = aP(i[r], e, t, n + 1);
        s !== null && (i[r] = s);
      }
  }
  return null;
}
function Rd(i, e) {
  const t = aP(i, e, !1, 0);
  return t === null ? i : t;
}
class lP {
  constructor() {
    this._actual = null, this._actualOk = null, this._actualErr = null, this._hasValue = !1, this._value = null, this._hasErr = !1, this._err = null;
  }
  get [Symbol.toStringTag]() {
    return this.toString();
  }
  _ensureActual() {
    return this._actual || (this._actual = new Promise((e, t) => {
      this._actualOk = e, this._actualErr = t, this._hasValue && this._actualOk(this._value), this._hasErr && this._actualErr(this._err);
    })), this._actual;
  }
  resolveOk(e) {
    this._hasValue || this._hasErr || (this._hasValue = !0, this._value = e, this._actual && this._actualOk(e));
  }
  resolveErr(e) {
    this._hasValue || this._hasErr || (this._hasErr = !0, this._err = e, this._actual ? this._actualErr(e) : Fi(e));
  }
  then(e, t) {
    return this._ensureActual().then(e, t);
  }
  catch(e) {
    return this._ensureActual().then(void 0, e);
  }
  finally(e) {
    return this._ensureActual().finally(e);
  }
}
class AL extends lP {
  constructor() {
    super(), this._hasErr = !0, this._err = new Yn();
  }
}
var M2;
function Gw(i, e) {
  try {
    return JSON.stringify(i, e);
  } catch {
    return "null";
  }
}
const WE = "$$ref$$", RL = { [WE]: -1 };
function O2(i, e = null, t = !1) {
  const n = [];
  return {
    jsonString: (t ? Gw : JSON.stringify)(i, (s, o) => {
      if (typeof o > "u")
        return RL;
      if (typeof o == "object") {
        if (o instanceof he) {
          const a = n.push(o) - 1;
          return { [WE]: a };
        }
        if (e)
          return e(s, o);
      }
      return o;
    }),
    referencedBuffers: n
  };
}
function cP(i, e, t) {
  return JSON.parse(i, (n, r) => {
    if (r) {
      const s = r[WE];
      if (typeof s == "number")
        return e[s];
      if (t && r.$mid === rt.Uri)
        return t.transformIncoming(r);
    }
    return r;
  });
}
function F2(i, e) {
  return JSON.stringify(i, e);
}
function LL(i) {
  return i ? (e, t) => t && t.$mid === rt.Uri ? i.transformOutgoing(t) : t : null;
}
var qn;
(function(i) {
  i[i.LocalSide = 0] = "LocalSide", i[i.OtherSide = 1] = "OtherSide";
})(qn || (qn = {}));
var nh;
(function(i) {
  i[i.Responsive = 0] = "Responsive", i[i.Unresponsive = 1] = "Unresponsive";
})(nh || (nh = {}));
const NL = () => {
}, ML = Symbol.for("rpcProtocol"), OL = Symbol.for("rpcProxy"), Lh = class Lh extends xe {
  constructor(e, t = null, n = null) {
    super(), this[M2] = !0, this._onDidChangeResponsiveState = this._register(new M()), this.onDidChangeResponsiveState = this._onDidChangeResponsiveState.event, this._protocol = e, this._logger = t, this._uriTransformer = n, this._uriReplacer = LL(this._uriTransformer), this._isDisposed = !1, this._locals = [], this._proxies = [];
    for (let r = 0, s = Jg.count; r < s; r++)
      this._locals[r] = null, this._proxies[r] = null;
    this._lastMessageId = 0, this._cancelInvokedHandlers = /* @__PURE__ */ Object.create(null), this._pendingRPCReplies = {}, this._responsiveState = nh.Responsive, this._unacknowledgedCount = 0, this._unresponsiveTime = 0, this._asyncCheckUresponsive = this._register(new Gl(() => this._checkUnresponsive(), 1e3)), this._register(this._protocol.onMessage((r) => this._receiveOneMessage(r)));
  }
  dispose() {
    this._isDisposed = !0, Object.keys(this._pendingRPCReplies).forEach((e) => {
      const t = this._pendingRPCReplies[e];
      delete this._pendingRPCReplies[e], t.resolveErr(e2());
    }), super.dispose();
  }
  drain() {
    return typeof this._protocol.drain == "function" ? this._protocol.drain() : Promise.resolve();
  }
  _onWillSendRequest(e) {
    this._unacknowledgedCount === 0 && (this._unresponsiveTime = Date.now() + Lh.UNRESPONSIVE_TIME), this._unacknowledgedCount++, this._asyncCheckUresponsive.isScheduled() || this._asyncCheckUresponsive.schedule();
  }
  _onDidReceiveAcknowledge(e) {
    this._unresponsiveTime = Date.now() + Lh.UNRESPONSIVE_TIME, this._unacknowledgedCount--, this._unacknowledgedCount === 0 && this._asyncCheckUresponsive.cancel(), this._setResponsiveState(nh.Responsive);
  }
  _checkUnresponsive() {
    this._unacknowledgedCount !== 0 && (Date.now() > this._unresponsiveTime ? this._setResponsiveState(nh.Unresponsive) : this._asyncCheckUresponsive.schedule());
  }
  _setResponsiveState(e) {
    this._responsiveState !== e && (this._responsiveState = e, this._onDidChangeResponsiveState.fire(this._responsiveState));
  }
  get responsiveState() {
    return this._responsiveState;
  }
  transformIncomingURIs(e) {
    return this._uriTransformer ? Rd(e, this._uriTransformer) : e;
  }
  getProxy(e) {
    const { nid: t, sid: n } = e;
    return this._proxies[t] || (this._proxies[t] = this._createProxy(t, n)), this._proxies[t];
  }
  _createProxy(e, t) {
    const n = {
      get: (r, s) => (typeof s == "string" && !r[s] && s.charCodeAt(0) === L.DollarSign && (r[s] = (...o) => this._remoteCall(e, s, o)), s === OL ? t : r[s])
    };
    return new Proxy(/* @__PURE__ */ Object.create(null), n);
  }
  set(e, t) {
    return this._locals[e.nid] = t, t;
  }
  assertRegistered(e) {
    for (let t = 0, n = e.length; t < n; t++) {
      const r = e[t];
      if (!this._locals[r.nid])
        throw new Error(`Missing proxy instance ${r.sid}`);
    }
  }
  _receiveOneMessage(e) {
    var o;
    if (this._isDisposed)
      return;
    const t = e.byteLength, n = Bt.read(e, 0), r = n.readUInt8(), s = n.readUInt32();
    switch (r) {
      case Ct.RequestJSONArgs:
      case Ct.RequestJSONArgsWithCancellation: {
        let { rpcId: a, method: l, args: c } = zn.deserializeRequestJSONArgs(n);
        this._uriTransformer && (c = Rd(c, this._uriTransformer)), this._receiveRequest(t, s, a, l, c, r === Ct.RequestJSONArgsWithCancellation);
        break;
      }
      case Ct.RequestMixedArgs:
      case Ct.RequestMixedArgsWithCancellation: {
        let { rpcId: a, method: l, args: c } = zn.deserializeRequestMixedArgs(n);
        this._uriTransformer && (c = Rd(c, this._uriTransformer)), this._receiveRequest(t, s, a, l, c, r === Ct.RequestMixedArgsWithCancellation);
        break;
      }
      case Ct.Acknowledged: {
        (o = this._logger) == null || o.logIncoming(t, s, qn.LocalSide, "ack"), this._onDidReceiveAcknowledge(s);
        break;
      }
      case Ct.Cancel: {
        this._receiveCancel(t, s);
        break;
      }
      case Ct.ReplyOKEmpty: {
        this._receiveReply(t, s, void 0);
        break;
      }
      case Ct.ReplyOKJSON: {
        let a = zn.deserializeReplyOKJSON(n);
        this._uriTransformer && (a = Rd(a, this._uriTransformer)), this._receiveReply(t, s, a);
        break;
      }
      case Ct.ReplyOKJSONWithBuffers: {
        const a = zn.deserializeReplyOKJSONWithBuffers(n, this._uriTransformer);
        this._receiveReply(t, s, a);
        break;
      }
      case Ct.ReplyOKVSBuffer: {
        const a = zn.deserializeReplyOKVSBuffer(n);
        this._receiveReply(t, s, a);
        break;
      }
      case Ct.ReplyErrError: {
        let a = zn.deserializeReplyErrError(n);
        this._uriTransformer && (a = Rd(a, this._uriTransformer)), this._receiveReplyErr(t, s, a);
        break;
      }
      case Ct.ReplyErrEmpty: {
        this._receiveReplyErr(t, s, void 0);
        break;
      }
      default:
        console.error("received unexpected message"), console.error(e);
    }
  }
  _receiveRequest(e, t, n, r, s, o) {
    var d, f;
    (d = this._logger) == null || d.logIncoming(e, t, qn.OtherSide, `receiveRequest ${qp(n)}.${r}(`, s);
    const a = String(t);
    let l, c;
    if (o) {
      const p = new Lt();
      s.push(p.token), l = this._invokeHandler(n, r, s), c = () => p.cancel();
    } else
      l = this._invokeHandler(n, r, s), c = NL;
    this._cancelInvokedHandlers[a] = c;
    const u = zn.serializeAcknowledged(t);
    (f = this._logger) == null || f.logOutgoing(u.byteLength, t, qn.OtherSide, "ack"), this._protocol.send(u), l.then((p) => {
      var _;
      delete this._cancelInvokedHandlers[a];
      const v = zn.serializeReplyOK(t, p, this._uriReplacer);
      (_ = this._logger) == null || _.logOutgoing(v.byteLength, t, qn.OtherSide, "reply:", p), this._protocol.send(v);
    }, (p) => {
      var _;
      delete this._cancelInvokedHandlers[a];
      const v = zn.serializeReplyErr(t, p);
      (_ = this._logger) == null || _.logOutgoing(v.byteLength, t, qn.OtherSide, "replyErr:", p), this._protocol.send(v);
    });
  }
  _receiveCancel(e, t) {
    var r, s, o;
    (r = this._logger) == null || r.logIncoming(e, t, qn.OtherSide, "receiveCancel");
    const n = String(t);
    (o = (s = this._cancelInvokedHandlers)[n]) == null || o.call(s);
  }
  _receiveReply(e, t, n) {
    var o;
    (o = this._logger) == null || o.logIncoming(e, t, qn.LocalSide, "receiveReply:", n);
    const r = String(t);
    if (!this._pendingRPCReplies.hasOwnProperty(r))
      return;
    const s = this._pendingRPCReplies[r];
    delete this._pendingRPCReplies[r], s.resolveOk(n);
  }
  _receiveReplyErr(e, t, n) {
    var a;
    (a = this._logger) == null || a.logIncoming(e, t, qn.LocalSide, "receiveReplyErr:", n);
    const r = String(t);
    if (!this._pendingRPCReplies.hasOwnProperty(r))
      return;
    const s = this._pendingRPCReplies[r];
    delete this._pendingRPCReplies[r];
    let o;
    n && (n.$isError ? (o = new Error(), o.name = n.name, o.message = n.message, o.stack = n.stack) : o = n), s.resolveErr(o);
  }
  _invokeHandler(e, t, n) {
    try {
      return Promise.resolve(this._doInvokeHandler(e, t, n));
    } catch (r) {
      return Promise.reject(r);
    }
  }
  _doInvokeHandler(e, t, n) {
    const r = this._locals[e];
    if (!r)
      throw new Error("Unknown actor " + qp(e));
    const s = r[t];
    if (typeof s != "function")
      throw new Error(
        "Unknown method " + t + " on actor " + qp(e)
      );
    return s.apply(r, n);
  }
  _remoteCall(e, t, n) {
    var d;
    if (this._isDisposed)
      return new AL();
    let r = null;
    if (n.length > 0 && Dt.isCancellationToken(n[n.length - 1]) && (r = n.pop()), r && r.isCancellationRequested)
      return Promise.reject(e2());
    const s = zn.serializeRequestArguments(n, this._uriReplacer), o = ++this._lastMessageId, a = String(o), l = new lP(), c = new Te();
    r && c.add(r.onCancellationRequested(() => {
      var p;
      const f = zn.serializeCancel(o);
      (p = this._logger) == null || p.logOutgoing(f.byteLength, o, qn.LocalSide, "cancel"), this._protocol.send(f);
    })), this._pendingRPCReplies[a] = new FL(l, c), this._onWillSendRequest(o);
    const u = zn.serializeRequest(o, e, t, s, !!r);
    return (d = this._logger) == null || d.logOutgoing(u.byteLength, o, qn.LocalSide, `request: ${qp(e)}.${t}(`, n), this._protocol.send(u), l;
  }
};
M2 = ML, Lh.UNRESPONSIVE_TIME = 3 * 1e3;
let Qw = Lh;
class FL {
  constructor(e, t) {
    this._promise = e, this._disposable = t;
  }
  resolveOk(e) {
    this._promise.resolveOk(e), this._disposable.dispose();
  }
  resolveErr(e) {
    this._promise.resolveErr(e), this._disposable.dispose();
  }
}
const Nh = class Nh {
  static alloc(e, t, n) {
    const r = new Nh(he.alloc(n + 1 + 4), 0);
    return r.writeUInt8(e), r.writeUInt32(t), r;
  }
  static read(e, t) {
    return new Nh(e, t);
  }
  get buffer() {
    return this._buff;
  }
  constructor(e, t) {
    this._buff = e, this._offset = t;
  }
  static sizeUInt8() {
    return 1;
  }
  writeUInt8(e) {
    this._buff.writeUInt8(e, this._offset), this._offset += 1;
  }
  readUInt8() {
    const e = this._buff.readUInt8(this._offset);
    return this._offset += 1, e;
  }
  writeUInt32(e) {
    this._buff.writeUInt32BE(e, this._offset), this._offset += 4;
  }
  readUInt32() {
    const e = this._buff.readUInt32BE(this._offset);
    return this._offset += 4, e;
  }
  static sizeShortString(e) {
    return 1 + e.byteLength;
  }
  writeShortString(e) {
    this._buff.writeUInt8(e.byteLength, this._offset), this._offset += 1, this._buff.set(e, this._offset), this._offset += e.byteLength;
  }
  readShortString() {
    const e = this._buff.readUInt8(this._offset);
    this._offset += 1;
    const n = this._buff.slice(this._offset, this._offset + e).toString();
    return this._offset += e, n;
  }
  static sizeLongString(e) {
    return 4 + e.byteLength;
  }
  writeLongString(e) {
    this._buff.writeUInt32BE(e.byteLength, this._offset), this._offset += 4, this._buff.set(e, this._offset), this._offset += e.byteLength;
  }
  readLongString() {
    const e = this._buff.readUInt32BE(this._offset);
    this._offset += 4;
    const n = this._buff.slice(this._offset, this._offset + e).toString();
    return this._offset += e, n;
  }
  writeBuffer(e) {
    this._buff.writeUInt32BE(e.byteLength, this._offset), this._offset += 4, this._buff.set(e, this._offset), this._offset += e.byteLength;
  }
  static sizeVSBuffer(e) {
    return 4 + e.byteLength;
  }
  writeVSBuffer(e) {
    this._buff.writeUInt32BE(e.byteLength, this._offset), this._offset += 4, this._buff.set(e, this._offset), this._offset += e.byteLength;
  }
  readVSBuffer() {
    const e = this._buff.readUInt32BE(this._offset);
    this._offset += 4;
    const t = this._buff.slice(this._offset, this._offset + e);
    return this._offset += e, t;
  }
  static sizeMixedArray(e) {
    let t = 0;
    t += 1;
    for (let n = 0, r = e.length; n < r; n++) {
      const s = e[n];
      switch (t += 1, s.type) {
        case pi.String:
          t += this.sizeLongString(s.value);
          break;
        case pi.VSBuffer:
          t += this.sizeVSBuffer(s.value);
          break;
        case pi.SerializedObjectWithBuffers:
          t += this.sizeUInt32, t += this.sizeLongString(s.value);
          for (let o = 0; o < s.buffers.length; ++o)
            t += this.sizeVSBuffer(s.buffers[o]);
          break;
      }
    }
    return t;
  }
  writeMixedArray(e) {
    this._buff.writeUInt8(e.length, this._offset), this._offset += 1;
    for (let t = 0, n = e.length; t < n; t++) {
      const r = e[t];
      switch (r.type) {
        case pi.String:
          this.writeUInt8(pi.String), this.writeLongString(r.value);
          break;
        case pi.VSBuffer:
          this.writeUInt8(pi.VSBuffer), this.writeVSBuffer(r.value);
          break;
        case pi.SerializedObjectWithBuffers:
          this.writeUInt8(pi.SerializedObjectWithBuffers), this.writeUInt32(r.buffers.length), this.writeLongString(r.value);
          for (let s = 0; s < r.buffers.length; ++s)
            this.writeBuffer(r.buffers[s]);
          break;
        case pi.Undefined:
          this.writeUInt8(pi.Undefined);
          break;
      }
    }
  }
  readMixedArray() {
    const e = this._buff.readUInt8(this._offset);
    this._offset += 1;
    const t = new Array(e);
    for (let n = 0; n < e; n++)
      switch (this.readUInt8()) {
        case pi.String:
          t[n] = this.readLongString();
          break;
        case pi.VSBuffer:
          t[n] = this.readVSBuffer();
          break;
        case pi.SerializedObjectWithBuffers: {
          const s = this.readUInt32(), o = this.readLongString(), a = [];
          for (let l = 0; l < s; ++l)
            a.push(this.readVSBuffer());
          t[n] = new Ki(cP(o, a, null));
          break;
        }
        case pi.Undefined:
          t[n] = void 0;
          break;
      }
    return t;
  }
};
Nh.sizeUInt32 = 4;
let Bt = Nh;
var Sc;
(function(i) {
  i[i.Simple = 0] = "Simple", i[i.Mixed = 1] = "Mixed";
})(Sc || (Sc = {}));
class zn {
  static _useMixedArgSerialization(e) {
    for (let t = 0, n = e.length; t < n; t++)
      if (e[t] instanceof he || e[t] instanceof Ki || typeof e[t] > "u")
        return !0;
    return !1;
  }
  static serializeRequestArguments(e, t) {
    if (this._useMixedArgSerialization(e)) {
      const n = [];
      for (let r = 0, s = e.length; r < s; r++) {
        const o = e[r];
        if (o instanceof he)
          n[r] = { type: pi.VSBuffer, value: o };
        else if (typeof o > "u")
          n[r] = { type: pi.Undefined };
        else if (o instanceof Ki) {
          const { jsonString: a, referencedBuffers: l } = O2(o.value, t);
          n[r] = { type: pi.SerializedObjectWithBuffers, value: he.fromString(a), buffers: l };
        } else
          n[r] = { type: pi.String, value: he.fromString(F2(o, t)) };
      }
      return {
        type: Sc.Mixed,
        args: n
      };
    }
    return {
      type: Sc.Simple,
      args: F2(e, t)
    };
  }
  static serializeRequest(e, t, n, r, s) {
    switch (r.type) {
      case Sc.Simple:
        return this._requestJSONArgs(e, t, n, r.args, s);
      case Sc.Mixed:
        return this._requestMixedArgs(e, t, n, r.args, s);
    }
  }
  static _requestJSONArgs(e, t, n, r, s) {
    const o = he.fromString(n), a = he.fromString(r);
    let l = 0;
    l += Bt.sizeUInt8(), l += Bt.sizeShortString(o), l += Bt.sizeLongString(a);
    const c = Bt.alloc(s ? Ct.RequestJSONArgsWithCancellation : Ct.RequestJSONArgs, e, l);
    return c.writeUInt8(t), c.writeShortString(o), c.writeLongString(a), c.buffer;
  }
  static deserializeRequestJSONArgs(e) {
    const t = e.readUInt8(), n = e.readShortString(), r = e.readLongString();
    return {
      rpcId: t,
      method: n,
      args: JSON.parse(r)
    };
  }
  static _requestMixedArgs(e, t, n, r, s) {
    const o = he.fromString(n);
    let a = 0;
    a += Bt.sizeUInt8(), a += Bt.sizeShortString(o), a += Bt.sizeMixedArray(r);
    const l = Bt.alloc(s ? Ct.RequestMixedArgsWithCancellation : Ct.RequestMixedArgs, e, a);
    return l.writeUInt8(t), l.writeShortString(o), l.writeMixedArray(r), l.buffer;
  }
  static deserializeRequestMixedArgs(e) {
    const t = e.readUInt8(), n = e.readShortString(), r = e.readMixedArray(), s = new Array(r.length);
    for (let o = 0, a = r.length; o < a; o++) {
      const l = r[o];
      typeof l == "string" ? s[o] = JSON.parse(l) : s[o] = l;
    }
    return {
      rpcId: t,
      method: n,
      args: s
    };
  }
  static serializeAcknowledged(e) {
    return Bt.alloc(Ct.Acknowledged, e, 0).buffer;
  }
  static serializeCancel(e) {
    return Bt.alloc(Ct.Cancel, e, 0).buffer;
  }
  static serializeReplyOK(e, t, n) {
    if (typeof t > "u")
      return this._serializeReplyOKEmpty(e);
    if (t instanceof he)
      return this._serializeReplyOKVSBuffer(e, t);
    if (t instanceof Ki) {
      const { jsonString: r, referencedBuffers: s } = O2(t.value, n, !0);
      return this._serializeReplyOKJSONWithBuffers(e, r, s);
    } else
      return this._serializeReplyOKJSON(e, Gw(t, n));
  }
  static _serializeReplyOKEmpty(e) {
    return Bt.alloc(Ct.ReplyOKEmpty, e, 0).buffer;
  }
  static _serializeReplyOKVSBuffer(e, t) {
    let n = 0;
    n += Bt.sizeVSBuffer(t);
    const r = Bt.alloc(Ct.ReplyOKVSBuffer, e, n);
    return r.writeVSBuffer(t), r.buffer;
  }
  static deserializeReplyOKVSBuffer(e) {
    return e.readVSBuffer();
  }
  static _serializeReplyOKJSON(e, t) {
    const n = he.fromString(t);
    let r = 0;
    r += Bt.sizeLongString(n);
    const s = Bt.alloc(Ct.ReplyOKJSON, e, r);
    return s.writeLongString(n), s.buffer;
  }
  static _serializeReplyOKJSONWithBuffers(e, t, n) {
    const r = he.fromString(t);
    let s = 0;
    s += Bt.sizeUInt32, s += Bt.sizeLongString(r);
    for (const a of n)
      s += Bt.sizeVSBuffer(a);
    const o = Bt.alloc(Ct.ReplyOKJSONWithBuffers, e, s);
    o.writeUInt32(n.length), o.writeLongString(r);
    for (const a of n)
      o.writeBuffer(a);
    return o.buffer;
  }
  static deserializeReplyOKJSON(e) {
    const t = e.readLongString();
    return JSON.parse(t);
  }
  static deserializeReplyOKJSONWithBuffers(e, t) {
    const n = e.readUInt32(), r = e.readLongString(), s = [];
    for (let o = 0; o < n; ++o)
      s.push(e.readVSBuffer());
    return new Ki(cP(r, s, t));
  }
  static serializeReplyErr(e, t) {
    const n = t ? Gw(Lu(t), null) : void 0;
    if (typeof n != "string")
      return this._serializeReplyErrEmpty(e);
    const r = he.fromString(n);
    let s = 0;
    s += Bt.sizeLongString(r);
    const o = Bt.alloc(Ct.ReplyErrError, e, s);
    return o.writeLongString(r), o.buffer;
  }
  static deserializeReplyErrError(e) {
    const t = e.readLongString();
    return JSON.parse(t);
  }
  static _serializeReplyErrEmpty(e) {
    return Bt.alloc(Ct.ReplyErrEmpty, e, 0).buffer;
  }
}
var Ct;
(function(i) {
  i[i.RequestJSONArgs = 1] = "RequestJSONArgs", i[i.RequestJSONArgsWithCancellation = 2] = "RequestJSONArgsWithCancellation", i[i.RequestMixedArgs = 3] = "RequestMixedArgs", i[i.RequestMixedArgsWithCancellation = 4] = "RequestMixedArgsWithCancellation", i[i.Acknowledged = 5] = "Acknowledged", i[i.Cancel = 6] = "Cancel", i[i.ReplyOKEmpty = 7] = "ReplyOKEmpty", i[i.ReplyOKVSBuffer = 8] = "ReplyOKVSBuffer", i[i.ReplyOKJSON = 9] = "ReplyOKJSON", i[i.ReplyOKJSONWithBuffers = 10] = "ReplyOKJSONWithBuffers", i[i.ReplyErrError = 11] = "ReplyErrError", i[i.ReplyErrEmpty = 12] = "ReplyErrEmpty";
})(Ct || (Ct = {}));
var pi;
(function(i) {
  i[i.String = 1] = "String", i[i.VSBuffer = 2] = "VSBuffer", i[i.SerializedObjectWithBuffers = 3] = "SerializedObjectWithBuffers", i[i.Undefined = 4] = "Undefined";
})(pi || (pi = {}));
function VE(i) {
  if (!i)
    return;
  const e = i.indexOf("+");
  return e < 0 ? i : i.substr(0, e);
}
const UL = [
  "AI",
  "Azure",
  "Chat",
  "Data Science",
  "Debuggers",
  "Extension Packs",
  "Education",
  "Formatters",
  "Keymaps",
  "Language Packs",
  "Linters",
  "Machine Learning",
  "Notebooks",
  "Programming Languages",
  "SCM Providers",
  "Snippets",
  "Testing",
  "Themes",
  "Visualization",
  "Other"
];
var U2;
(function(i) {
  i[i.System = 0] = "System", i[i.User = 1] = "User";
})(U2 || (U2 = {}));
var Kw;
(function(i) {
  i.WIN32_X64 = "win32-x64", i.WIN32_ARM64 = "win32-arm64", i.LINUX_X64 = "linux-x64", i.LINUX_ARM64 = "linux-arm64", i.LINUX_ARMHF = "linux-armhf", i.ALPINE_X64 = "alpine-x64", i.ALPINE_ARM64 = "alpine-arm64", i.DARWIN_X64 = "darwin-x64", i.DARWIN_ARM64 = "darwin-arm64", i.WEB = "web", i.UNIVERSAL = "universal", i.UNKNOWN = "unknown", i.UNDEFINED = "undefined";
})(Kw || (Kw = {}));
class gt {
  constructor(e) {
    this.value = e, this._lower = e.toLowerCase();
  }
  static equals(e, t) {
    if (typeof e > "u" || e === null)
      return typeof t > "u" || t === null;
    if (typeof t > "u" || t === null)
      return !1;
    if (typeof e == "string" || typeof t == "string") {
      const n = typeof e == "string" ? e : e.value, r = typeof t == "string" ? t : t.value;
      return Aa(n, r);
    }
    return e._lower === t._lower;
  }
  static toKey(e) {
    return typeof e == "string" ? e.toLowerCase() : e._lower;
  }
}
class Ql {
  get size() {
    return this._set.size;
  }
  constructor(e) {
    if (this._set = /* @__PURE__ */ new Set(), e)
      for (const t of e)
        this.add(t);
  }
  add(e) {
    this._set.add(gt.toKey(e));
  }
  delete(e) {
    return this._set.delete(gt.toKey(e));
  }
  has(e) {
    return this._set.has(gt.toKey(e));
  }
}
class Ko {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
  clear() {
    this._map.clear();
  }
  delete(e) {
    this._map.delete(gt.toKey(e));
  }
  get(e) {
    return this._map.get(gt.toKey(e));
  }
  has(e) {
    return this._map.has(gt.toKey(e));
  }
  set(e, t) {
    this._map.set(gt.toKey(e), t);
  }
  values() {
    return this._map.values();
  }
  forEach(e) {
    this._map.forEach(e);
  }
  [Symbol.iterator]() {
    return this._map[Symbol.iterator]();
  }
}
class uP extends Error {
  constructor(e, t, n) {
    super(`Error in extension ${gt.toKey(e)}: ${n ?? t.message}`, { cause: t }), this.name = "ExtensionError", this.extension = e;
  }
}
var xr;
(function(i) {
  i.serviceIds = /* @__PURE__ */ new Map(), i.DI_TARGET = "$di$target", i.DI_DEPENDENCIES = "$di$dependencies";
  function e(t) {
    return t[i.DI_DEPENDENCIES] || [];
  }
  i.getServiceDependencies = e;
})(xr || (xr = {}));
const Dp = me("instantiationService");
function $L(i, e, t) {
  e[xr.DI_TARGET] === e ? e[xr.DI_DEPENDENCIES].push({ id: i, index: t }) : (e[xr.DI_DEPENDENCIES] = [{ id: i, index: t }], e[xr.DI_TARGET] = e);
}
function me(i) {
  if (xr.serviceIds.has(i))
    return xr.serviceIds.get(i);
  const e = function(t, n, r) {
    if (arguments.length !== 3)
      throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
    $L(e, t, r);
  };
  return e.toString = () => i, xr.serviceIds.set(i, e), e;
}
const ot = me("logService"), ta = me("loggerService");
class vr {
  constructor(e, t = [], n = !1) {
    this.ctor = e, this.staticArguments = t, this.supportsDelayedInstantiation = n;
  }
}
const dP = [];
var mt;
(function(i) {
  i[i.Eager = 0] = "Eager", i[i.Delayed = 1] = "Delayed";
})(mt || (mt = {}));
function vt(i, e, t) {
  e instanceof vr || (e = new vr(e, [], !!t)), dP.push([i, e]);
}
function HL() {
  return dP;
}
class zE {
  constructor(...e) {
    this._entries = /* @__PURE__ */ new Map();
    for (const [t, n] of e)
      this.set(t, n);
  }
  set(e, t) {
    const n = this._entries.get(e);
    return this._entries.set(e, t), n;
  }
  has(e) {
    return this._entries.has(e);
  }
  get(e) {
    return this._entries.get(e);
  }
}
const _i = me("IExtHostInitDataService");
let BL = class {
  constructor(e, t) {
    this.key = e, this.data = t, this.incoming = /* @__PURE__ */ new Map(), this.outgoing = /* @__PURE__ */ new Map();
  }
};
class $2 {
  constructor(e) {
    this._hashFn = e, this._nodes = /* @__PURE__ */ new Map();
  }
  roots() {
    const e = [];
    for (const t of this._nodes.values())
      t.outgoing.size === 0 && e.push(t);
    return e;
  }
  insertEdge(e, t) {
    const n = this.lookupOrInsertNode(e), r = this.lookupOrInsertNode(t);
    n.outgoing.set(r.key, r), r.incoming.set(n.key, n);
  }
  removeNode(e) {
    const t = this._hashFn(e);
    this._nodes.delete(t);
    for (const n of this._nodes.values())
      n.outgoing.delete(t), n.incoming.delete(t);
  }
  lookupOrInsertNode(e) {
    const t = this._hashFn(e);
    let n = this._nodes.get(t);
    return n || (n = new BL(t, e), this._nodes.set(t, n)), n;
  }
  lookup(e) {
    return this._nodes.get(this._hashFn(e));
  }
  isEmpty() {
    return this._nodes.size === 0;
  }
  toString() {
    const e = [];
    for (const [t, n] of this._nodes)
      e.push(`${t}
	(-> incoming)[${[...n.incoming.keys()].join(", ")}]
	(outgoing ->)[${[...n.outgoing.keys()].join(",")}]
`);
    return e.join(`
`);
  }
  findCycleSlow() {
    for (const [e, t] of this._nodes) {
      const n = /* @__PURE__ */ new Set([e]), r = this._findCycle(t, n);
      if (r)
        return r;
    }
  }
  _findCycle(e, t) {
    for (const [n, r] of e.outgoing) {
      if (t.has(n))
        return [...t, n].join(" -> ");
      t.add(n);
      const s = this._findCycle(r, t);
      if (s)
        return s;
      t.delete(n);
    }
  }
}
const WL = !1;
class H2 extends Error {
  constructor(e) {
    super("cyclic dependency between services"), this.message = e.findCycleSlow() ?? `UNABLE to detect cycle, dumping graph: 
${e.toString()}`;
  }
}
class Zg {
  constructor(e = new zE(), t = !1, n, r = WL) {
    this._services = e, this._strict = t, this._parent = n, this._enableTracing = r, this._isDisposed = !1, this._servicesToMaybeDispose = /* @__PURE__ */ new Set(), this._children = /* @__PURE__ */ new Set(), this._activeInstantiations = /* @__PURE__ */ new Set(), this._services.set(Dp, this), this._globalGraph = r ? (n == null ? void 0 : n._globalGraph) ?? new $2((s) => s) : void 0;
  }
  dispose() {
    if (!this._isDisposed) {
      this._isDisposed = !0, Kn(this._children), this._children.clear();
      for (const e of this._servicesToMaybeDispose)
        CT(e) && e.dispose();
      this._servicesToMaybeDispose.clear();
    }
  }
  _throwIfDisposed() {
    if (this._isDisposed)
      throw new Error("InstantiationService has been disposed");
  }
  createChild(e, t) {
    this._throwIfDisposed();
    const n = this, r = new class extends Zg {
      dispose() {
        n._children.delete(r), super.dispose();
      }
    }(e, this._strict, this, this._enableTracing);
    return this._children.add(r), t == null || t.add(r), r;
  }
  invokeFunction(e, ...t) {
    this._throwIfDisposed();
    const n = rh.traceInvocation(this._enableTracing, e);
    let r = !1;
    try {
      return e({
        get: (o) => {
          if (r)
            throw TE("service accessor is only valid during the invocation of its target method");
          const a = this._getOrCreateServiceInstance(o, n);
          if (!a)
            throw new Error(`[invokeFunction] unknown service '${o}'`);
          return a;
        }
      }, ...t);
    } finally {
      r = !0, n.stop();
    }
  }
  createInstance(e, ...t) {
    this._throwIfDisposed();
    let n, r;
    return e instanceof vr ? (n = rh.traceCreation(this._enableTracing, e.ctor), r = this._createInstance(e.ctor, e.staticArguments.concat(t), n)) : (n = rh.traceCreation(this._enableTracing, e), r = this._createInstance(e, t, n)), n.stop(), r;
  }
  _createInstance(e, t = [], n) {
    const r = xr.getServiceDependencies(e).sort((a, l) => a.index - l.index), s = [];
    for (const a of r) {
      const l = this._getOrCreateServiceInstance(a.id, n);
      l || this._throwIfStrict(`[createInstance] ${e.name} depends on UNKNOWN service ${a.id}.`, !1), s.push(l);
    }
    const o = r.length > 0 ? r[0].index : t.length;
    if (t.length !== o) {
      console.trace(`[createInstance] First service dependency of ${e.name} at position ${o + 1} conflicts with ${t.length} static arguments`);
      const a = o - t.length;
      a > 0 ? t = t.concat(new Array(a)) : t = t.slice(0, o);
    }
    return Reflect.construct(e, t.concat(s));
  }
  _setCreatedServiceInstance(e, t) {
    if (this._services.get(e) instanceof vr)
      this._services.set(e, t);
    else if (this._parent)
      this._parent._setCreatedServiceInstance(e, t);
    else
      throw new Error("illegalState - setting UNKNOWN service instance");
  }
  _getServiceInstanceOrDescriptor(e) {
    const t = this._services.get(e);
    return !t && this._parent ? this._parent._getServiceInstanceOrDescriptor(e) : t;
  }
  _getOrCreateServiceInstance(e, t) {
    this._globalGraph && this._globalGraphImplicitDependency && this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(e));
    const n = this._getServiceInstanceOrDescriptor(e);
    return n instanceof vr ? this._safeCreateAndCacheServiceInstance(e, n, t.branch(e, !0)) : (t.branch(e, !1), n);
  }
  _safeCreateAndCacheServiceInstance(e, t, n) {
    if (this._activeInstantiations.has(e))
      throw new Error(`illegal state - RECURSIVELY instantiating service '${e}'`);
    this._activeInstantiations.add(e);
    try {
      return this._createAndCacheServiceInstance(e, t, n);
    } finally {
      this._activeInstantiations.delete(e);
    }
  }
  _createAndCacheServiceInstance(e, t, n) {
    var l;
    const r = new $2((c) => c.id.toString());
    let s = 0;
    const o = [{ id: e, desc: t, _trace: n }], a = /* @__PURE__ */ new Set();
    for (; o.length; ) {
      const c = o.pop();
      if (!a.has(String(c.id))) {
        if (a.add(String(c.id)), r.lookupOrInsertNode(c), s++ > 1e3)
          throw new H2(r);
        for (const u of xr.getServiceDependencies(c.desc.ctor)) {
          const d = this._getServiceInstanceOrDescriptor(u.id);
          if (d || this._throwIfStrict(`[createInstance] ${e} depends on ${u.id} which is NOT registered.`, !0), (l = this._globalGraph) == null || l.insertEdge(String(c.id), String(u.id)), d instanceof vr) {
            const f = { id: u.id, desc: d, _trace: c._trace.branch(u.id, !0) };
            r.lookup(f) || o.push(f), r.insertEdge(c, f);
          }
        }
      }
    }
    for (; ; ) {
      const c = r.roots();
      if (c.length === 0) {
        if (!r.isEmpty())
          throw new H2(r);
        break;
      }
      for (const { data: u } of c) {
        if (this._getServiceInstanceOrDescriptor(u.id) instanceof vr) {
          const f = this._createServiceInstanceWithOwner(u.id, u.desc.ctor, u.desc.staticArguments, u.desc.supportsDelayedInstantiation, u._trace);
          this._setCreatedServiceInstance(u.id, f);
        }
        r.removeNode(u);
      }
    }
    return this._getServiceInstanceOrDescriptor(e);
  }
  _createServiceInstanceWithOwner(e, t, n = [], r, s) {
    if (this._services.get(e) instanceof vr)
      return this._createServiceInstance(e, t, n, r, s, this._servicesToMaybeDispose);
    if (this._parent)
      return this._parent._createServiceInstanceWithOwner(e, t, n, r, s);
    throw new Error(`illegalState - creating UNKNOWN service instance ${t.name}`);
  }
  _createServiceInstance(e, t, n = [], r, s, o) {
    if (r) {
      const a = new Zg(void 0, this._strict, this, this._enableTracing);
      a._globalGraphImplicitDependency = String(e);
      const l = /* @__PURE__ */ new Map(), c = new PL(() => {
        const u = a._createInstance(t, n, s);
        for (const [d, f] of l) {
          const p = u[d];
          if (typeof p == "function")
            for (const v of f)
              v.disposable = p.apply(u, v.listener);
        }
        return l.clear(), o.add(u), u;
      });
      return new Proxy(/* @__PURE__ */ Object.create(null), {
        get(u, d) {
          if (!c.isInitialized && typeof d == "string" && (d.startsWith("onDid") || d.startsWith("onWill"))) {
            let v = l.get(d);
            return v || (v = new ea(), l.set(d, v)), (m, E, S) => {
              if (c.isInitialized)
                return c.value[d](m, E, S);
              {
                const k = { listener: [m, E, S], disposable: void 0 }, q = v.push(k);
                return Ie(() => {
                  var te;
                  q(), (te = k.disposable) == null || te.dispose();
                });
              }
            };
          }
          if (d in u)
            return u[d];
          const f = c.value;
          let p = f[d];
          return typeof p != "function" || (p = p.bind(f), u[d] = p), p;
        },
        set(u, d, f) {
          return c.value[d] = f, !0;
        },
        getPrototypeOf(u) {
          return t.prototype;
        }
      });
    } else {
      const a = this._createInstance(t, n, s);
      return o.add(a), a;
    }
  }
  _throwIfStrict(e, t) {
    if (t && console.warn(e), this._strict)
      throw new Error(e);
  }
}
var va;
(function(i) {
  i[i.None = 0] = "None", i[i.Creation = 1] = "Creation", i[i.Invocation = 2] = "Invocation", i[i.Branch = 3] = "Branch";
})(va || (va = {}));
const vn = class vn {
  static traceInvocation(e, t) {
    return e ? new vn(va.Invocation, t.name || new Error().stack.split(`
`).slice(3, 4).join(`
`)) : vn._None;
  }
  static traceCreation(e, t) {
    return e ? new vn(va.Creation, t.name) : vn._None;
  }
  constructor(e, t) {
    this.type = e, this.name = t, this._start = Date.now(), this._dep = [];
  }
  branch(e, t) {
    const n = new vn(va.Branch, e.toString());
    return this._dep.push([e, t, n]), n;
  }
  stop() {
    const e = Date.now() - this._start;
    vn._totals += e;
    let t = !1;
    function n(s, o) {
      const a = [], l = new Array(s + 1).join("	");
      for (const [c, u, d] of o._dep)
        if (u && d) {
          t = !0, a.push(`${l}CREATES -> ${c}`);
          const f = n(s + 1, d);
          f && a.push(f);
        } else
          a.push(`${l}uses -> ${c}`);
      return a.join(`
`);
    }
    const r = [
      `${this.type === va.Creation ? "CREATE" : "CALL"} ${this.name}`,
      `${n(1, this)}`,
      `DONE, took ${e.toFixed(2)}ms (grand total ${vn._totals.toFixed(2)}ms)`
    ];
    (e > 2 || t) && vn.all.add(r.join(`
`));
  }
};
vn.all = /* @__PURE__ */ new Set(), vn._None = new class extends vn {
  constructor() {
    super(va.None, null);
  }
  stop() {
  }
  branch() {
    return this;
  }
}(), vn._totals = 0;
let rh = vn;
const tt = me("IExtHostRpcService");
class VL {
  constructor(e) {
    this.getProxy = e.getProxy.bind(e), this.set = e.set.bind(e), this.dispose = e.dispose.bind(e), this.assertRegistered = e.assertRegistered.bind(e), this.drain = e.drain.bind(e);
  }
}
const ev = me("IURITransformerService");
class zL {
  constructor(e) {
    e ? (this.transformIncoming = e.transformIncoming.bind(e), this.transformOutgoing = e.transformOutgoing.bind(e), this.transformOutgoingURI = e.transformOutgoingURI.bind(e), this.transformOutgoingScheme = e.transformOutgoingScheme.bind(e)) : (this.transformIncoming = (t) => t, this.transformOutgoing = (t) => t, this.transformOutgoingURI = (t) => t, this.transformOutgoingScheme = (t) => t);
  }
}
function z(i, e, t, n) {
  var r = arguments.length, s = r < 3 ? e : n === null ? n = Object.getOwnPropertyDescriptor(e, t) : n, o;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function") s = Reflect.decorate(i, e, t, n);
  else for (var a = i.length - 1; a >= 0; a--) (o = i[a]) && (s = (r < 3 ? o(s) : r > 3 ? o(e, t, s) : o(e, t)) || s);
  return r > 3 && s && Object.defineProperty(e, t, s), s;
}
function O(i, e) {
  return function(t, n) {
    e(t, n, i);
  };
}
class qL {
  constructor() {
    this._value = "", this._pos = 0;
  }
  reset(e) {
    return this._value = e, this._pos = 0, this;
  }
  next() {
    return this._pos += 1, this;
  }
  hasNext() {
    return this._pos < this._value.length - 1;
  }
  cmp(e) {
    const t = e.charCodeAt(0), n = this._value.charCodeAt(this._pos);
    return t - n;
  }
  value() {
    return this._value[this._pos];
  }
}
class jL {
  constructor(e = !0) {
    this._caseSensitive = e;
  }
  reset(e) {
    return this._value = e, this._from = 0, this._to = 0, this.next();
  }
  hasNext() {
    return this._to < this._value.length;
  }
  next() {
    this._from = this._to;
    let e = !0;
    for (; this._to < this._value.length; this._to++)
      if (this._value.charCodeAt(this._to) === L.Period)
        if (e)
          this._from++;
        else
          break;
      else
        e = !1;
    return this;
  }
  cmp(e) {
    return this._caseSensitive ? UE(e, this._value, 0, e.length, this._from, this._to) : Ep(e, this._value, 0, e.length, this._from, this._to);
  }
  value() {
    return this._value.substring(this._from, this._to);
  }
}
class hP {
  constructor(e = !0, t = !0) {
    this._splitOnBackslash = e, this._caseSensitive = t;
  }
  reset(e) {
    this._from = 0, this._to = 0, this._value = e, this._valueLen = e.length;
    for (let t = e.length - 1; t >= 0; t--, this._valueLen--) {
      const n = this._value.charCodeAt(t);
      if (!(n === L.Slash || this._splitOnBackslash && n === L.Backslash))
        break;
    }
    return this.next();
  }
  hasNext() {
    return this._to < this._valueLen;
  }
  next() {
    this._from = this._to;
    let e = !0;
    for (; this._to < this._valueLen; this._to++) {
      const t = this._value.charCodeAt(this._to);
      if (t === L.Slash || this._splitOnBackslash && t === L.Backslash)
        if (e)
          this._from++;
        else
          break;
      else
        e = !1;
    }
    return this;
  }
  cmp(e) {
    return this._caseSensitive ? UE(e, this._value, 0, e.length, this._from, this._to) : Ep(e, this._value, 0, e.length, this._from, this._to);
  }
  value() {
    return this._value.substring(this._from, this._to);
  }
}
var yi;
(function(i) {
  i[i.Scheme = 1] = "Scheme", i[i.Authority = 2] = "Authority", i[i.Path = 3] = "Path", i[i.Query = 4] = "Query", i[i.Fragment = 5] = "Fragment";
})(yi || (yi = {}));
class fP {
  constructor(e, t) {
    this._ignorePathCasing = e, this._ignoreQueryAndFragment = t, this._states = [], this._stateIdx = 0;
  }
  reset(e) {
    return this._value = e, this._states = [], this._value.scheme && this._states.push(yi.Scheme), this._value.authority && this._states.push(yi.Authority), this._value.path && (this._pathIterator = new hP(!1, !this._ignorePathCasing(e)), this._pathIterator.reset(e.path), this._pathIterator.value() && this._states.push(yi.Path)), this._ignoreQueryAndFragment(e) || (this._value.query && this._states.push(yi.Query), this._value.fragment && this._states.push(yi.Fragment)), this._stateIdx = 0, this;
  }
  next() {
    return this._states[this._stateIdx] === yi.Path && this._pathIterator.hasNext() ? this._pathIterator.next() : this._stateIdx += 1, this;
  }
  hasNext() {
    return this._states[this._stateIdx] === yi.Path && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;
  }
  cmp(e) {
    if (this._states[this._stateIdx] === yi.Scheme)
      return Ww(e, this._value.scheme);
    if (this._states[this._stateIdx] === yi.Authority)
      return Ww(e, this._value.authority);
    if (this._states[this._stateIdx] === yi.Path)
      return this._pathIterator.cmp(e);
    if (this._states[this._stateIdx] === yi.Query)
      return Ml(e, this._value.query);
    if (this._states[this._stateIdx] === yi.Fragment)
      return Ml(e, this._value.fragment);
    throw new Error();
  }
  value() {
    if (this._states[this._stateIdx] === yi.Scheme)
      return this._value.scheme;
    if (this._states[this._stateIdx] === yi.Authority)
      return this._value.authority;
    if (this._states[this._stateIdx] === yi.Path)
      return this._pathIterator.value();
    if (this._states[this._stateIdx] === yi.Query)
      return this._value.query;
    if (this._states[this._stateIdx] === yi.Fragment)
      return this._value.fragment;
    throw new Error();
  }
}
const Mh = class Mh {
  static wrap(e) {
    return e === void 0 ? Mh.Val : e;
  }
  static unwrap(e) {
    return e === Mh.Val ? void 0 : e;
  }
};
Mh.Val = Symbol("undefined_placeholder");
let bs = Mh;
class jp {
  constructor() {
    this.height = 1, this.value = void 0, this.key = void 0, this.left = void 0, this.mid = void 0, this.right = void 0;
  }
  isEmpty() {
    return !this.left && !this.mid && !this.right && this.value === void 0;
  }
  rotateLeft() {
    const e = this.right;
    return this.right = e.left, e.left = this, this.updateHeight(), e.updateHeight(), e;
  }
  rotateRight() {
    const e = this.left;
    return this.left = e.right, e.right = this, this.updateHeight(), e.updateHeight(), e;
  }
  updateHeight() {
    this.height = 1 + Math.max(this.heightLeft, this.heightRight);
  }
  balanceFactor() {
    return this.heightRight - this.heightLeft;
  }
  get heightLeft() {
    var e;
    return ((e = this.left) == null ? void 0 : e.height) ?? 0;
  }
  get heightRight() {
    var e;
    return ((e = this.right) == null ? void 0 : e.height) ?? 0;
  }
}
var _t;
(function(i) {
  i[i.Left = -1] = "Left", i[i.Mid = 0] = "Mid", i[i.Right = 1] = "Right";
})(_t || (_t = {}));
class Yr {
  static forUris(e = () => !1, t = () => !1) {
    return new Yr(new fP(e, t));
  }
  static forPaths(e = !1) {
    return new Yr(new hP(void 0, !e));
  }
  static forStrings() {
    return new Yr(new qL());
  }
  static forConfigKeys() {
    return new Yr(new jL());
  }
  constructor(e) {
    this._iter = e;
  }
  clear() {
    this._root = void 0;
  }
  fill(e, t) {
    if (t) {
      const n = t.slice(0);
      t2(n);
      for (const r of n)
        this.set(r, e);
    } else {
      const n = e.slice(0);
      t2(n);
      for (const r of n)
        this.set(r[0], r[1]);
    }
  }
  set(e, t) {
    const n = this._iter.reset(e);
    let r;
    this._root || (this._root = new jp(), this._root.segment = n.value());
    const s = [];
    for (r = this._root; ; ) {
      const a = n.cmp(r.segment);
      if (a > 0)
        r.left || (r.left = new jp(), r.left.segment = n.value()), s.push([_t.Left, r]), r = r.left;
      else if (a < 0)
        r.right || (r.right = new jp(), r.right.segment = n.value()), s.push([_t.Right, r]), r = r.right;
      else if (n.hasNext())
        n.next(), r.mid || (r.mid = new jp(), r.mid.segment = n.value()), s.push([_t.Mid, r]), r = r.mid;
      else
        break;
    }
    const o = bs.unwrap(r.value);
    r.value = bs.wrap(t), r.key = e;
    for (let a = s.length - 1; a >= 0; a--) {
      const l = s[a][1];
      l.updateHeight();
      const c = l.balanceFactor();
      if (c < -1 || c > 1) {
        const u = s[a][0], d = s[a + 1][0];
        if (u === _t.Right && d === _t.Right)
          s[a][1] = l.rotateLeft();
        else if (u === _t.Left && d === _t.Left)
          s[a][1] = l.rotateRight();
        else if (u === _t.Right && d === _t.Left)
          l.right = s[a + 1][1] = s[a + 1][1].rotateRight(), s[a][1] = l.rotateLeft();
        else if (u === _t.Left && d === _t.Right)
          l.left = s[a + 1][1] = s[a + 1][1].rotateLeft(), s[a][1] = l.rotateRight();
        else
          throw new Error();
        if (a > 0)
          switch (s[a - 1][0]) {
            case _t.Left:
              s[a - 1][1].left = s[a][1];
              break;
            case _t.Right:
              s[a - 1][1].right = s[a][1];
              break;
            case _t.Mid:
              s[a - 1][1].mid = s[a][1];
              break;
          }
        else
          this._root = s[0][1];
      }
    }
    return o;
  }
  get(e) {
    var t;
    return bs.unwrap((t = this._getNode(e)) == null ? void 0 : t.value);
  }
  _getNode(e) {
    const t = this._iter.reset(e);
    let n = this._root;
    for (; n; ) {
      const r = t.cmp(n.segment);
      if (r > 0)
        n = n.left;
      else if (r < 0)
        n = n.right;
      else if (t.hasNext())
        t.next(), n = n.mid;
      else
        break;
    }
    return n;
  }
  has(e) {
    const t = this._getNode(e);
    return !((t == null ? void 0 : t.value) === void 0 && (t == null ? void 0 : t.mid) === void 0);
  }
  delete(e) {
    return this._delete(e, !1);
  }
  deleteSuperstr(e) {
    return this._delete(e, !0);
  }
  _delete(e, t) {
    const n = this._iter.reset(e), r = [];
    let s = this._root;
    for (; s; ) {
      const o = n.cmp(s.segment);
      if (o > 0)
        r.push([_t.Left, s]), s = s.left;
      else if (o < 0)
        r.push([_t.Right, s]), s = s.right;
      else if (n.hasNext())
        n.next(), r.push([_t.Mid, s]), s = s.mid;
      else
        break;
    }
    if (s) {
      if (t ? (s.left = void 0, s.mid = void 0, s.right = void 0, s.height = 1) : (s.key = void 0, s.value = void 0), !s.mid && !s.value)
        if (s.left && s.right) {
          const o = [[_t.Right, s]], a = this._min(s.right, o);
          if (a.key) {
            s.key = a.key, s.value = a.value, s.segment = a.segment;
            const l = a.right;
            if (o.length > 1) {
              const [u, d] = o[o.length - 1];
              switch (u) {
                case _t.Left:
                  d.left = l;
                  break;
                case _t.Mid:
                  Lw(!1);
                case _t.Right:
                  Lw(!1);
              }
            } else
              s.right = l;
            const c = this._balanceByStack(o);
            if (r.length > 0) {
              const [u, d] = r[r.length - 1];
              switch (u) {
                case _t.Left:
                  d.left = c;
                  break;
                case _t.Mid:
                  d.mid = c;
                  break;
                case _t.Right:
                  d.right = c;
                  break;
              }
            } else
              this._root = c;
          }
        } else {
          const o = s.left ?? s.right;
          if (r.length > 0) {
            const [a, l] = r[r.length - 1];
            switch (a) {
              case _t.Left:
                l.left = o;
                break;
              case _t.Mid:
                l.mid = o;
                break;
              case _t.Right:
                l.right = o;
                break;
            }
          } else
            this._root = o;
        }
      this._root = this._balanceByStack(r) ?? this._root;
    }
  }
  _min(e, t) {
    for (; e.left; )
      t.push([_t.Left, e]), e = e.left;
    return e;
  }
  _balanceByStack(e) {
    for (let t = e.length - 1; t >= 0; t--) {
      const n = e[t][1];
      n.updateHeight();
      const r = n.balanceFactor();
      if (r > 1 ? (n.right.balanceFactor() >= 0 || (n.right = n.right.rotateRight()), e[t][1] = n.rotateLeft()) : r < -1 && (n.left.balanceFactor() <= 0 || (n.left = n.left.rotateLeft()), e[t][1] = n.rotateRight()), t > 0)
        switch (e[t - 1][0]) {
          case _t.Left:
            e[t - 1][1].left = e[t][1];
            break;
          case _t.Right:
            e[t - 1][1].right = e[t][1];
            break;
          case _t.Mid:
            e[t - 1][1].mid = e[t][1];
            break;
        }
      else
        return e[0][1];
    }
  }
  findSubstr(e) {
    const t = this._iter.reset(e);
    let n = this._root, r;
    for (; n; ) {
      const s = t.cmp(n.segment);
      if (s > 0)
        n = n.left;
      else if (s < 0)
        n = n.right;
      else if (t.hasNext())
        t.next(), r = bs.unwrap(n.value) || r, n = n.mid;
      else
        break;
    }
    return n && bs.unwrap(n.value) || r;
  }
  findSuperstr(e) {
    return this._findSuperstrOrElement(e, !1);
  }
  _findSuperstrOrElement(e, t) {
    const n = this._iter.reset(e);
    let r = this._root;
    for (; r; ) {
      const s = n.cmp(r.segment);
      if (s > 0)
        r = r.left;
      else if (s < 0)
        r = r.right;
      else if (n.hasNext())
        n.next(), r = r.mid;
      else
        return r.mid ? this._entries(r.mid) : t ? bs.unwrap(r.value) : void 0;
    }
  }
  hasElementOrSubtree(e) {
    return this._findSuperstrOrElement(e, !0) !== void 0;
  }
  forEach(e) {
    for (const [t, n] of this)
      e(n, t);
  }
  *[Symbol.iterator]() {
    yield* this._entries(this._root);
  }
  _entries(e) {
    const t = [];
    return this._dfsEntries(e, t), t[Symbol.iterator]();
  }
  _dfsEntries(e, t) {
    e && (e.left && this._dfsEntries(e.left, t), e.value !== void 0 && t.push([e.key, bs.unwrap(e.value)]), e.mid && this._dfsEntries(e.mid, t), e.right && this._dfsEntries(e.right, t));
  }
  _isBalanced() {
    const e = (t) => {
      if (!t)
        return !0;
      const n = t.balanceFactor();
      return n < -1 || n > 1 ? !1 : e(t.left) && e(t.right);
    };
    return e(this._root);
  }
}
function St(i) {
  if (!i || typeof i != "object" || i instanceof RegExp)
    return i;
  const e = Array.isArray(i) ? [] : {};
  return Object.entries(i).forEach(([t, n]) => {
    e[t] = n && typeof n == "object" ? St(n) : n;
  }), e;
}
function Jw(i) {
  if (!i || typeof i != "object")
    return i;
  const e = [i];
  for (; e.length > 0; ) {
    const t = e.shift();
    for (const n in t)
      if (pP.call(t, n)) {
        const r = t[n];
        typeof r == "object" && !Object.isFrozen(r) && !kR(r) && e.push(r);
      }
  }
  return i;
}
const pP = Object.prototype.hasOwnProperty;
function $u(i, e) {
  return Yw(i, e, /* @__PURE__ */ new Set());
}
function Yw(i, e, t) {
  if (oi(i))
    return i;
  const n = e(i);
  if (typeof n < "u")
    return n;
  if (Array.isArray(i)) {
    const r = [];
    for (const s of i)
      r.push(Yw(s, e, t));
    return r;
  }
  if (ai(i)) {
    if (t.has(i))
      throw new Error("Cannot clone recursive data-structure");
    t.add(i);
    const r = {};
    for (const s in i)
      pP.call(i, s) && (r[s] = Yw(i[s], e, t));
    return t.delete(i), r;
  }
  return i;
}
function Fl(i, e, t = !0) {
  return ai(i) ? (ai(e) && Object.keys(e).forEach((n) => {
    n in i ? t && (ai(i[n]) && ai(e[n]) ? Fl(i[n], e[n], t) : i[n] = e[n]) : i[n] = e[n];
  }), i) : e;
}
function un(i, e) {
  if (i === e)
    return !0;
  if (i == null || e === null || e === void 0 || typeof i != typeof e || typeof i != "object" || Array.isArray(i) !== Array.isArray(e))
    return !1;
  let t, n;
  if (Array.isArray(i)) {
    if (i.length !== e.length)
      return !1;
    for (t = 0; t < i.length; t++)
      if (!un(i[t], e[t]))
        return !1;
  } else {
    const r = [];
    for (n in i)
      r.push(n);
    r.sort();
    const s = [];
    for (n in e)
      s.push(n);
    if (s.sort(), !un(r, s))
      return !1;
    for (t = 0; t < r.length; t++)
      if (!un(i[r[t]], e[r[t]]))
        return !1;
  }
  return !0;
}
function GL(i) {
  const e = /* @__PURE__ */ new Set();
  return JSON.stringify(i, (t, n) => {
    if (ai(n) || Array.isArray(n)) {
      if (e.has(n))
        return "[Circular]";
      e.add(n);
    }
    return typeof n == "bigint" ? `[BigInt ${n.toString()}]` : n;
  });
}
function B2(i, e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const [n, r] of Object.entries(i))
    e(n, r) && (t[n] = r);
  return t;
}
class QL {
  constructor() {
    this._next = 0;
  }
  getNext() {
    return this._next++;
  }
}
var cl;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.File = 1] = "File", i[i.Directory = 2] = "Directory", i[i.SymbolicLink = 64] = "SymbolicLink";
})(cl || (cl = {}));
var Hu;
(function(i) {
  i[i.Readonly = 1] = "Readonly", i[i.Locked = 2] = "Locked";
})(Hu || (Hu = {}));
var ho;
(function(i) {
  i[i.UPDATED = 2] = "UPDATED", i[i.ADDED = 4] = "ADDED", i[i.DELETED = 8] = "DELETED";
})(ho || (ho = {}));
var zr;
(function(i) {
  i[i.None = 0] = "None", i[i.FileReadWrite = 2] = "FileReadWrite", i[i.FileOpenReadWriteClose = 4] = "FileOpenReadWriteClose", i[i.FileReadStream = 16] = "FileReadStream", i[i.FileFolderCopy = 8] = "FileFolderCopy", i[i.PathCaseSensitive = 1024] = "PathCaseSensitive", i[i.Readonly = 2048] = "Readonly", i[i.Trash = 4096] = "Trash", i[i.FileWriteUnlock = 8192] = "FileWriteUnlock", i[i.FileAtomicRead = 16384] = "FileAtomicRead", i[i.FileAtomicWrite = 32768] = "FileAtomicWrite", i[i.FileAtomicDelete = 65536] = "FileAtomicDelete", i[i.FileClone = 131072] = "FileClone", i[i.FileRealpath = 262144] = "FileRealpath";
})(zr || (zr = {}));
var Ue;
(function(i) {
  i.FileExists = "EntryExists", i.FileNotFound = "EntryNotFound", i.FileNotADirectory = "EntryNotADirectory", i.FileIsADirectory = "EntryIsADirectory", i.FileExceedsStorageQuota = "EntryExceedsStorageQuota", i.FileTooLarge = "EntryTooLarge", i.FileWriteLocked = "EntryWriteLocked", i.NoPermissions = "NoPermissions", i.Unavailable = "Unavailable", i.Unknown = "Unknown";
})(Ue || (Ue = {}));
class tv extends Error {
  static create(e, t) {
    const n = new tv(e.toString(), t);
    return gP(n, t), n;
  }
  constructor(e, t) {
    super(e), this.code = t;
  }
}
function gP(i, e) {
  return i.name = e ? `${e} (FileSystemError)` : "FileSystemError", i;
}
function em(i) {
  if (!i)
    return Ue.Unknown;
  if (i instanceof tv)
    return i.code;
  const e = /^(.+) \(FileSystemError\)$/.exec(i.name);
  if (!e)
    return Ue.Unknown;
  switch (e[1]) {
    case Ue.FileExists:
      return Ue.FileExists;
    case Ue.FileIsADirectory:
      return Ue.FileIsADirectory;
    case Ue.FileNotADirectory:
      return Ue.FileNotADirectory;
    case Ue.FileNotFound:
      return Ue.FileNotFound;
    case Ue.FileTooLarge:
      return Ue.FileTooLarge;
    case Ue.FileWriteLocked:
      return Ue.FileWriteLocked;
    case Ue.NoPermissions:
      return Ue.NoPermissions;
    case Ue.Unavailable:
      return Ue.Unavailable;
  }
  return Ue.Unknown;
}
function KL(i) {
  if (i instanceof Xw)
    return i.fileOperationResult;
  switch (em(i)) {
    case Ue.FileNotFound:
      return An.FILE_NOT_FOUND;
    case Ue.FileIsADirectory:
      return An.FILE_IS_DIRECTORY;
    case Ue.FileNotADirectory:
      return An.FILE_NOT_DIRECTORY;
    case Ue.FileWriteLocked:
      return An.FILE_WRITE_LOCKED;
    case Ue.NoPermissions:
      return An.FILE_PERMISSION_DENIED;
    case Ue.FileExists:
      return An.FILE_MOVE_CONFLICT;
    case Ue.FileTooLarge:
      return An.FILE_TOO_LARGE;
    default:
      return An.FILE_OTHER_ERROR;
  }
}
var Or;
(function(i) {
  i[i.CREATE = 0] = "CREATE", i[i.DELETE = 1] = "DELETE", i[i.MOVE = 2] = "MOVE", i[i.COPY = 3] = "COPY", i[i.WRITE = 4] = "WRITE";
})(Or || (Or = {}));
var sh;
(function(i) {
  i[i.UPDATED = 0] = "UPDATED", i[i.ADDED = 1] = "ADDED", i[i.DELETED = 2] = "DELETED";
})(sh || (sh = {}));
class Xw extends Error {
  constructor(e, t, n) {
    super(e), this.fileOperationResult = t, this.options = n;
  }
}
var An;
(function(i) {
  i[i.FILE_IS_DIRECTORY = 0] = "FILE_IS_DIRECTORY", i[i.FILE_NOT_FOUND = 1] = "FILE_NOT_FOUND", i[i.FILE_NOT_MODIFIED_SINCE = 2] = "FILE_NOT_MODIFIED_SINCE", i[i.FILE_MODIFIED_SINCE = 3] = "FILE_MODIFIED_SINCE", i[i.FILE_MOVE_CONFLICT = 4] = "FILE_MOVE_CONFLICT", i[i.FILE_WRITE_LOCKED = 5] = "FILE_WRITE_LOCKED", i[i.FILE_PERMISSION_DENIED = 6] = "FILE_PERMISSION_DENIED", i[i.FILE_TOO_LARGE = 7] = "FILE_TOO_LARGE", i[i.FILE_INVALID_PATH = 8] = "FILE_INVALID_PATH", i[i.FILE_NOT_DIRECTORY = 9] = "FILE_NOT_DIRECTORY", i[i.FILE_OTHER_ERROR = 10] = "FILE_OTHER_ERROR";
})(An || (An = {}));
var W2;
(function(i) {
  i[i.FILE = 0] = "FILE", i[i.FOLDER = 1] = "FOLDER", i[i.ROOT_FOLDER = 2] = "ROOT_FOLDER";
})(W2 || (W2 = {}));
const JL = "";
function V2(i) {
  if (!(typeof i.size != "number" || typeof i.mtime != "number"))
    return i.mtime.toString(29) + i.size.toString(31);
}
const wi = class wi {
  static formatSize(e) {
    return ol(e) || (e = 0), e < wi.KB ? h(1908, "{0}B", e.toFixed(0)) : e < wi.MB ? h(1909, "{0}KB", (e / wi.KB).toFixed(2)) : e < wi.GB ? h(1910, "{0}MB", (e / wi.MB).toFixed(2)) : e < wi.TB ? h(1911, "{0}GB", (e / wi.GB).toFixed(2)) : h(1912, "{0}TB", (e / wi.TB).toFixed(2));
  }
};
wi.KB = 1024, wi.MB = wi.KB * wi.KB, wi.GB = wi.MB * wi.KB, wi.TB = wi.GB * wi.KB;
let z2 = wi;
var jh;
(function(i) {
  i[i.Ignore = 0] = "Ignore", i[i.Info = 1] = "Info", i[i.Warning = 2] = "Warning", i[i.Error = 3] = "Error";
})(jh || (jh = {}));
(function(i) {
  const e = "error", t = "warning", n = "warn", r = "info", s = "ignore";
  function o(l) {
    return l ? Aa(e, l) ? i.Error : Aa(t, l) || Aa(n, l) ? i.Warning : Aa(r, l) ? i.Info : i.Ignore : i.Ignore;
  }
  i.fromValue = o;
  function a(l) {
    switch (l) {
      case i.Error:
        return e;
      case i.Warning:
        return t;
      case i.Info:
        return r;
      default:
        return s;
    }
  }
  i.toString = a;
})(jh || (jh = {}));
var Yt = jh, q2;
(function(i) {
  i[i.DEFAULT = 0] = "DEFAULT", i[i.OPTIONAL = 1] = "OPTIONAL", i[i.SILENT = 2] = "SILENT", i[i.URGENT = 3] = "URGENT";
})(q2 || (q2 = {}));
var j2;
(function(i) {
  i[i.WORKSPACE = 0] = "WORKSPACE", i[i.PROFILE = 1] = "PROFILE", i[i.APPLICATION = 2] = "APPLICATION";
})(j2 || (j2 = {}));
var G2;
(function(i) {
  i[i.OFF = 0] = "OFF", i[i.ERROR = 1] = "ERROR";
})(G2 || (G2 = {}));
function YL(i) {
  const e = i;
  return typeof (e == null ? void 0 : e.id) == "string" && x.isUri(e.uri);
}
function XL(i) {
  const e = i;
  return typeof (e == null ? void 0 : e.id) == "string" && x.isUri(e.configPath);
}
var tm;
(function(i) {
  i[i.EMPTY = 1] = "EMPTY", i[i.FOLDER = 2] = "FOLDER", i[i.WORKSPACE = 3] = "WORKSPACE";
})(tm || (tm = {}));
let ZL = class {
  get folders() {
    return this._folders;
  }
  set folders(e) {
    this._folders = e, this.updateFoldersMap();
  }
  constructor(e, t, n, r, s) {
    this._id = e, this._transient = n, this._configuration = r, this.ignorePathCasing = s, this.foldersMap = Yr.forUris(this.ignorePathCasing, () => !0), this.folders = t;
  }
  update(e) {
    this._id = e.id, this._configuration = e.configuration, this._transient = e.transient, this.ignorePathCasing = e.ignorePathCasing, this.folders = e.folders;
  }
  get id() {
    return this._id;
  }
  get transient() {
    return this._transient;
  }
  get configuration() {
    return this._configuration;
  }
  set configuration(e) {
    this._configuration = e;
  }
  getFolder(e) {
    return e && this.foldersMap.findSubstr(e) || null;
  }
  updateFoldersMap() {
    this.foldersMap = Yr.forUris(this.ignorePathCasing, () => !0);
    for (const e of this.folders)
      this.foldersMap.set(e.uri, e);
  }
  toJSON() {
    return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };
  }
};
class mP {
  constructor(e, t) {
    this.raw = t, this.uri = e.uri, this.index = e.index, this.name = e.name;
  }
  toResource(e) {
    return Ei(this.uri, e);
  }
  toJSON() {
    return { uri: this.uri, name: this.name, index: this.index };
  }
}
function Zv(i) {
  return new mP(
    { uri: i, index: 0, name: qw(i) },
    { uri: i.toString() }
  );
}
const e7 = "code-workspace";
h(2419, "Code Workspace");
class t7 {
  constructor() {
    this._systemSchemes = new Set(Object.keys(fe)), this._providerInfo = /* @__PURE__ */ new Map(), this.extUri = new Sp((e) => {
      const t = this._providerInfo.get(e.scheme);
      return !(t === void 0 || t & zr.PathCaseSensitive);
    });
  }
  $acceptProviderInfos(e, t) {
    t === null ? this._providerInfo.delete(e.scheme) : this._providerInfo.set(e.scheme, t);
  }
  isFreeScheme(e) {
    return !this._providerInfo.has(e) && !this._systemSchemes.has(e);
  }
  getCapabilities(e) {
    return this._providerInfo.get(e);
  }
}
const md = me("IExtHostFileSystemInfo"), dn = (function() {
  if (typeof crypto.randomUUID == "function")
    return crypto.randomUUID.bind(crypto);
  const i = new Uint8Array(16), e = [];
  for (let t = 0; t < 256; t++)
    e.push(t.toString(16).padStart(2, "0"));
  return function() {
    crypto.getRandomValues(i), i[6] = i[6] & 15 | 64, i[8] = i[8] & 63 | 128;
    let n = 0, r = "";
    return r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r += "-", r += e[i[n++]], r += e[i[n++]], r += "-", r += e[i[n++]], r += e[i[n++]], r += "-", r += e[i[n++]], r += e[i[n++]], r += "-", r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r += e[i[n++]], r;
  };
})(), Zw = Object.freeze({
  create: (i) => xc(i.map((e) => e.toString())).join(`\r
`),
  split: (i) => i.split(`\r
`),
  parse: (i) => Zw.split(i).filter((e) => !e.startsWith("#"))
});
var Q2;
(function(i) {
  i[i.InitialConsonant = 4352] = "InitialConsonant", i[i.Vowel = 4449] = "Vowel", i[i.FinalConsonant = 4520] = "FinalConsonant", i[i.CompatibilityJamo = 12593] = "CompatibilityJamo";
})(Q2 || (Q2 = {}));
var se;
(function(i) {
  i[i.NUL = 0] = "NUL", i[i.A = 65] = "A", i[i.B = 66] = "B", i[i.C = 67] = "C", i[i.D = 68] = "D", i[i.E = 69] = "E", i[i.F = 70] = "F", i[i.G = 71] = "G", i[i.H = 72] = "H", i[i.I = 73] = "I", i[i.J = 74] = "J", i[i.K = 75] = "K", i[i.L = 76] = "L", i[i.M = 77] = "M", i[i.N = 78] = "N", i[i.O = 79] = "O", i[i.P = 80] = "P", i[i.Q = 81] = "Q", i[i.R = 82] = "R", i[i.S = 83] = "S", i[i.T = 84] = "T", i[i.U = 85] = "U", i[i.V = 86] = "V", i[i.W = 87] = "W", i[i.X = 88] = "X", i[i.Y = 89] = "Y", i[i.Z = 90] = "Z", i[i.a = 97] = "a", i[i.b = 98] = "b", i[i.c = 99] = "c", i[i.d = 100] = "d", i[i.e = 101] = "e", i[i.f = 102] = "f", i[i.g = 103] = "g", i[i.h = 104] = "h", i[i.i = 105] = "i", i[i.j = 106] = "j", i[i.k = 107] = "k", i[i.l = 108] = "l", i[i.m = 109] = "m", i[i.n = 110] = "n", i[i.o = 111] = "o", i[i.p = 112] = "p", i[i.q = 113] = "q", i[i.r = 114] = "r", i[i.s = 115] = "s", i[i.t = 116] = "t", i[i.u = 117] = "u", i[i.v = 118] = "v", i[i.w = 119] = "w", i[i.x = 120] = "x", i[i.y = 121] = "y", i[i.z = 122] = "z";
})(se || (se = {}));
var nt;
(function(i) {
  i[i.fa = 24934] = "fa", i[i.fg = 26470] = "fg", i[i.fq = 29030] = "fq", i[i.fr = 29286] = "fr", i[i.ft = 29798] = "ft", i[i.fv = 30310] = "fv", i[i.fx = 30822] = "fx", i[i.hk = 27496] = "hk", i[i.hl = 27752] = "hl", i[i.ho = 28520] = "ho", i[i.ml = 27757] = "ml", i[i.nj = 27246] = "nj", i[i.nl = 27758] = "nl", i[i.np = 28782] = "np", i[i.qt = 29809] = "qt", i[i.rt = 29810] = "rt", i[i.sg = 26483] = "sg", i[i.sw = 30579] = "sw";
})(nt || (nt = {}));
new Uint8Array([
  se.r,
  se.R,
  se.s,
  se.e,
  se.E,
  se.f,
  se.a,
  se.q,
  se.Q,
  se.t,
  se.T,
  se.d,
  se.w,
  se.W,
  se.c,
  se.z,
  se.x,
  se.v,
  se.g
]);
new Uint16Array([
  se.k,
  se.o,
  se.i,
  se.O,
  se.j,
  se.p,
  se.u,
  se.P,
  se.h,
  nt.hk,
  nt.ho,
  nt.hl,
  se.y,
  se.n,
  nt.nj,
  nt.np,
  nt.nl,
  se.b,
  se.m,
  nt.ml,
  se.l
]);
new Uint16Array([
  se.r,
  se.R,
  nt.rt,
  se.s,
  nt.sw,
  nt.sg,
  se.e,
  se.f,
  nt.fr,
  nt.fa,
  nt.fq,
  nt.ft,
  nt.fx,
  nt.fv,
  nt.fg,
  se.a,
  se.q,
  nt.qt,
  se.t,
  se.T,
  se.d,
  se.w,
  se.c,
  se.z,
  se.x,
  se.v,
  se.g
]);
new Uint16Array([
  se.r,
  se.R,
  nt.rt,
  se.s,
  nt.sw,
  nt.sg,
  se.e,
  se.E,
  se.f,
  nt.fr,
  nt.fa,
  nt.fq,
  nt.ft,
  nt.fx,
  nt.fv,
  nt.fg,
  se.a,
  se.q,
  se.Q,
  nt.qt,
  se.t,
  se.T,
  se.d,
  se.w,
  se.W,
  se.c,
  se.z,
  se.x,
  se.v,
  se.g,
  se.k,
  se.o,
  se.i,
  se.O,
  se.j,
  se.p,
  se.u,
  se.P,
  se.h,
  nt.hk,
  nt.ho,
  nt.hl,
  se.y,
  se.n,
  nt.nj,
  nt.np,
  nt.nl,
  se.b,
  se.m,
  nt.ml,
  se.l
]);
function _P(...i) {
  return function(e, t) {
    for (let n = 0, r = i.length; n < r; n++) {
      const s = i[n](e, t);
      if (s)
        return s;
    }
    return null;
  };
}
wP.bind(void 0, !1);
const vP = wP.bind(void 0, !0);
function wP(i, e, t) {
  if (!t || t.length < e.length)
    return null;
  let n;
  return i ? n = $E(t, e) : n = t.indexOf(e) === 0, n ? e.length > 0 ? [{ start: 0, end: e.length }] : [] : null;
}
function i7(i, e) {
  const t = e.toLowerCase().indexOf(i.toLowerCase());
  return t === -1 ? null : [{ start: t, end: t + i.length }];
}
function n7(i, e) {
  return eb(i.toLowerCase(), e.toLowerCase(), 0, 0);
}
function eb(i, e, t, n) {
  if (t === i.length)
    return [];
  if (n === e.length)
    return null;
  if (i[t] === e[n]) {
    let r = null;
    return (r = eb(i, e, t + 1, n + 1)) ? yP({ start: n, end: n + 1 }, r) : null;
  }
  return eb(i, e, t, n + 1);
}
function qE(i) {
  return L.a <= i && i <= L.z;
}
function iv(i) {
  return L.A <= i && i <= L.Z;
}
function jE(i) {
  return L.Digit0 <= i && i <= L.Digit9;
}
function r7(i) {
  return i === L.Space || i === L.Tab || i === L.LineFeed || i === L.CarriageReturn;
}
const s7 = /* @__PURE__ */ new Set();
"()[]{}<>`'\"-/;:,.?!".split("").forEach((i) => s7.add(i.charCodeAt(0)));
function bP(i) {
  return qE(i) || iv(i) || jE(i);
}
function yP(i, e) {
  return e.length === 0 ? e = [i] : i.end === e[0].start ? e[0].start = i.start : e.unshift(i), e;
}
function xP(i, e) {
  for (let t = e; t < i.length; t++) {
    const n = i.charCodeAt(t);
    if (iv(n) || jE(n) || t > 0 && !bP(i.charCodeAt(t - 1)))
      return t;
  }
  return i.length;
}
function tb(i, e, t, n) {
  if (t === i.length)
    return [];
  if (n === e.length)
    return null;
  if (i[t] !== e[n].toLowerCase())
    return null;
  {
    let r = null, s = n + 1;
    for (r = tb(i, e, t + 1, n + 1); !r && (s = xP(e, s)) < e.length; )
      r = tb(i, e, t + 1, s), s++;
    return r === null ? null : yP({ start: n, end: n + 1 }, r);
  }
}
function o7(i) {
  let e = 0, t = 0, n = 0, r = 0, s = 0;
  for (let u = 0; u < i.length; u++)
    s = i.charCodeAt(u), iv(s) && e++, qE(s) && t++, bP(s) && n++, jE(s) && r++;
  const o = e / i.length, a = t / i.length, l = n / i.length, c = r / i.length;
  return { upperPercent: o, lowerPercent: a, alphaPercent: l, numericPercent: c };
}
function a7(i) {
  const { upperPercent: e, lowerPercent: t } = i;
  return t === 0 && e > 0.6;
}
function l7(i) {
  const { upperPercent: e, lowerPercent: t, alphaPercent: n, numericPercent: r } = i;
  return t > 0.2 && e < 0.8 && n > 0.6 && r < 0.2;
}
function c7(i) {
  let e = 0, t = 0, n = 0, r = 0;
  for (let s = 0; s < i.length; s++)
    n = i.charCodeAt(s), iv(n) && e++, qE(n) && t++, r7(n) && r++;
  return (e === 0 || t === 0) && r === 0 ? i.length <= 30 : e <= 5;
}
function EP(i, e) {
  if (!e || (e = e.trim(), e.length === 0) || !c7(i))
    return null;
  e.length > 60 && (e = e.substring(0, 60));
  const t = o7(e);
  if (!l7(t)) {
    if (!a7(t))
      return null;
    e = e.toLowerCase();
  }
  let n = null, r = 0;
  for (i = i.toLowerCase(); r < e.length && (n = tb(i, e, 0, r)) === null; )
    r = xP(e, r + 1);
  return n;
}
_P(vP, EP, i7);
_P(vP, EP, n7);
new AE(1e4);
const K2 = 128;
function GE() {
  const i = [], e = [];
  for (let t = 0; t <= K2; t++)
    e[t] = 0;
  for (let t = 0; t <= K2; t++)
    i.push(e.slice(0));
  return i;
}
GE();
GE();
GE();
var J2;
(function(i) {
  i[i.Diag = 1] = "Diag", i[i.Left = 2] = "Left", i[i.LeftLeft = 3] = "LeftLeft";
})(J2 || (J2 = {}));
var Y2;
(function(i) {
  i.Default = [-100, 0];
  function e(t) {
    return !t || t.length === 2 && t[0] === -100 && t[1] === 0;
  }
  i.isDefault = e;
})(Y2 || (Y2 = {}));
const ib = /* @__PURE__ */ Object.create(null);
function g(i, e) {
  if (st(e)) {
    const t = ib[e];
    if (t === void 0)
      throw new Error(`${i} references an unknown codicon: ${e}`);
    e = t;
  }
  return ib[i] = e, { id: i };
}
function u7() {
  return ib;
}
const d7 = {
  add: g("add", 6e4),
  plus: g("plus", 6e4),
  gistNew: g("gist-new", 6e4),
  repoCreate: g("repo-create", 6e4),
  lightbulb: g("lightbulb", 60001),
  lightBulb: g("light-bulb", 60001),
  repo: g("repo", 60002),
  repoDelete: g("repo-delete", 60002),
  gistFork: g("gist-fork", 60003),
  repoForked: g("repo-forked", 60003),
  gitPullRequest: g("git-pull-request", 60004),
  gitPullRequestAbandoned: g("git-pull-request-abandoned", 60004),
  recordKeys: g("record-keys", 60005),
  keyboard: g("keyboard", 60005),
  tag: g("tag", 60006),
  gitPullRequestLabel: g("git-pull-request-label", 60006),
  tagAdd: g("tag-add", 60006),
  tagRemove: g("tag-remove", 60006),
  person: g("person", 60007),
  personFollow: g("person-follow", 60007),
  personOutline: g("person-outline", 60007),
  personFilled: g("person-filled", 60007),
  gitBranch: g("git-branch", 60008),
  gitBranchCreate: g("git-branch-create", 60008),
  gitBranchDelete: g("git-branch-delete", 60008),
  sourceControl: g("source-control", 60008),
  mirror: g("mirror", 60009),
  mirrorPublic: g("mirror-public", 60009),
  star: g("star", 60010),
  starAdd: g("star-add", 60010),
  starDelete: g("star-delete", 60010),
  starEmpty: g("star-empty", 60010),
  comment: g("comment", 60011),
  commentAdd: g("comment-add", 60011),
  alert: g("alert", 60012),
  warning: g("warning", 60012),
  search: g("search", 60013),
  searchSave: g("search-save", 60013),
  logOut: g("log-out", 60014),
  signOut: g("sign-out", 60014),
  logIn: g("log-in", 60015),
  signIn: g("sign-in", 60015),
  eye: g("eye", 60016),
  eyeUnwatch: g("eye-unwatch", 60016),
  eyeWatch: g("eye-watch", 60016),
  circleFilled: g("circle-filled", 60017),
  primitiveDot: g("primitive-dot", 60017),
  closeDirty: g("close-dirty", 60017),
  debugBreakpoint: g("debug-breakpoint", 60017),
  debugBreakpointDisabled: g("debug-breakpoint-disabled", 60017),
  debugHint: g("debug-hint", 60017),
  terminalDecorationSuccess: g("terminal-decoration-success", 60017),
  primitiveSquare: g("primitive-square", 60018),
  edit: g("edit", 60019),
  pencil: g("pencil", 60019),
  info: g("info", 60020),
  issueOpened: g("issue-opened", 60020),
  gistPrivate: g("gist-private", 60021),
  gitForkPrivate: g("git-fork-private", 60021),
  lock: g("lock", 60021),
  mirrorPrivate: g("mirror-private", 60021),
  close: g("close", 60022),
  removeClose: g("remove-close", 60022),
  x: g("x", 60022),
  repoSync: g("repo-sync", 60023),
  sync: g("sync", 60023),
  clone: g("clone", 60024),
  desktopDownload: g("desktop-download", 60024),
  beaker: g("beaker", 60025),
  microscope: g("microscope", 60025),
  vm: g("vm", 60026),
  deviceDesktop: g("device-desktop", 60026),
  file: g("file", 60027),
  fileText: g("file-text", 60027),
  more: g("more", 60028),
  ellipsis: g("ellipsis", 60028),
  kebabHorizontal: g("kebab-horizontal", 60028),
  mailReply: g("mail-reply", 60029),
  reply: g("reply", 60029),
  organization: g("organization", 60030),
  organizationFilled: g("organization-filled", 60030),
  organizationOutline: g("organization-outline", 60030),
  newFile: g("new-file", 60031),
  fileAdd: g("file-add", 60031),
  newFolder: g("new-folder", 60032),
  fileDirectoryCreate: g("file-directory-create", 60032),
  trash: g("trash", 60033),
  trashcan: g("trashcan", 60033),
  history: g("history", 60034),
  clock: g("clock", 60034),
  folder: g("folder", 60035),
  fileDirectory: g("file-directory", 60035),
  symbolFolder: g("symbol-folder", 60035),
  logoGithub: g("logo-github", 60036),
  markGithub: g("mark-github", 60036),
  github: g("github", 60036),
  terminal: g("terminal", 60037),
  console: g("console", 60037),
  repl: g("repl", 60037),
  zap: g("zap", 60038),
  symbolEvent: g("symbol-event", 60038),
  error: g("error", 60039),
  stop: g("stop", 60039),
  variable: g("variable", 60040),
  symbolVariable: g("symbol-variable", 60040),
  array: g("array", 60042),
  symbolArray: g("symbol-array", 60042),
  symbolModule: g("symbol-module", 60043),
  symbolPackage: g("symbol-package", 60043),
  symbolNamespace: g("symbol-namespace", 60043),
  symbolObject: g("symbol-object", 60043),
  symbolMethod: g("symbol-method", 60044),
  symbolFunction: g("symbol-function", 60044),
  symbolConstructor: g("symbol-constructor", 60044),
  symbolBoolean: g("symbol-boolean", 60047),
  symbolNull: g("symbol-null", 60047),
  symbolNumeric: g("symbol-numeric", 60048),
  symbolNumber: g("symbol-number", 60048),
  symbolStructure: g("symbol-structure", 60049),
  symbolStruct: g("symbol-struct", 60049),
  symbolParameter: g("symbol-parameter", 60050),
  symbolTypeParameter: g("symbol-type-parameter", 60050),
  symbolKey: g("symbol-key", 60051),
  symbolText: g("symbol-text", 60051),
  symbolReference: g("symbol-reference", 60052),
  goToFile: g("go-to-file", 60052),
  symbolEnum: g("symbol-enum", 60053),
  symbolValue: g("symbol-value", 60053),
  symbolRuler: g("symbol-ruler", 60054),
  symbolUnit: g("symbol-unit", 60054),
  activateBreakpoints: g("activate-breakpoints", 60055),
  archive: g("archive", 60056),
  arrowBoth: g("arrow-both", 60057),
  arrowDown: g("arrow-down", 60058),
  arrowLeft: g("arrow-left", 60059),
  arrowRight: g("arrow-right", 60060),
  arrowSmallDown: g("arrow-small-down", 60061),
  arrowSmallLeft: g("arrow-small-left", 60062),
  arrowSmallRight: g("arrow-small-right", 60063),
  arrowSmallUp: g("arrow-small-up", 60064),
  arrowUp: g("arrow-up", 60065),
  bell: g("bell", 60066),
  bold: g("bold", 60067),
  book: g("book", 60068),
  bookmark: g("bookmark", 60069),
  debugBreakpointConditionalUnverified: g("debug-breakpoint-conditional-unverified", 60070),
  debugBreakpointConditional: g("debug-breakpoint-conditional", 60071),
  debugBreakpointConditionalDisabled: g("debug-breakpoint-conditional-disabled", 60071),
  debugBreakpointDataUnverified: g("debug-breakpoint-data-unverified", 60072),
  debugBreakpointData: g("debug-breakpoint-data", 60073),
  debugBreakpointDataDisabled: g("debug-breakpoint-data-disabled", 60073),
  debugBreakpointLogUnverified: g("debug-breakpoint-log-unverified", 60074),
  debugBreakpointLog: g("debug-breakpoint-log", 60075),
  debugBreakpointLogDisabled: g("debug-breakpoint-log-disabled", 60075),
  briefcase: g("briefcase", 60076),
  broadcast: g("broadcast", 60077),
  browser: g("browser", 60078),
  bug: g("bug", 60079),
  calendar: g("calendar", 60080),
  caseSensitive: g("case-sensitive", 60081),
  check: g("check", 60082),
  checklist: g("checklist", 60083),
  chevronDown: g("chevron-down", 60084),
  chevronLeft: g("chevron-left", 60085),
  chevronRight: g("chevron-right", 60086),
  chevronUp: g("chevron-up", 60087),
  chromeClose: g("chrome-close", 60088),
  chromeMaximize: g("chrome-maximize", 60089),
  chromeMinimize: g("chrome-minimize", 60090),
  chromeRestore: g("chrome-restore", 60091),
  circleOutline: g("circle-outline", 60092),
  circle: g("circle", 60092),
  debugBreakpointUnverified: g("debug-breakpoint-unverified", 60092),
  terminalDecorationIncomplete: g("terminal-decoration-incomplete", 60092),
  circleSlash: g("circle-slash", 60093),
  circuitBoard: g("circuit-board", 60094),
  clearAll: g("clear-all", 60095),
  clippy: g("clippy", 60096),
  closeAll: g("close-all", 60097),
  cloudDownload: g("cloud-download", 60098),
  cloudUpload: g("cloud-upload", 60099),
  code: g("code", 60100),
  collapseAll: g("collapse-all", 60101),
  colorMode: g("color-mode", 60102),
  commentDiscussion: g("comment-discussion", 60103),
  creditCard: g("credit-card", 60105),
  dash: g("dash", 60108),
  dashboard: g("dashboard", 60109),
  database: g("database", 60110),
  debugContinue: g("debug-continue", 60111),
  debugDisconnect: g("debug-disconnect", 60112),
  debugPause: g("debug-pause", 60113),
  debugRestart: g("debug-restart", 60114),
  debugStart: g("debug-start", 60115),
  debugStepInto: g("debug-step-into", 60116),
  debugStepOut: g("debug-step-out", 60117),
  debugStepOver: g("debug-step-over", 60118),
  debugStop: g("debug-stop", 60119),
  debug: g("debug", 60120),
  deviceCameraVideo: g("device-camera-video", 60121),
  deviceCamera: g("device-camera", 60122),
  deviceMobile: g("device-mobile", 60123),
  diffAdded: g("diff-added", 60124),
  diffIgnored: g("diff-ignored", 60125),
  diffModified: g("diff-modified", 60126),
  diffRemoved: g("diff-removed", 60127),
  diffRenamed: g("diff-renamed", 60128),
  diff: g("diff", 60129),
  diffSidebyside: g("diff-sidebyside", 60129),
  discard: g("discard", 60130),
  editorLayout: g("editor-layout", 60131),
  emptyWindow: g("empty-window", 60132),
  exclude: g("exclude", 60133),
  extensions: g("extensions", 60134),
  eyeClosed: g("eye-closed", 60135),
  fileBinary: g("file-binary", 60136),
  fileCode: g("file-code", 60137),
  fileMedia: g("file-media", 60138),
  filePdf: g("file-pdf", 60139),
  fileSubmodule: g("file-submodule", 60140),
  fileSymlinkDirectory: g("file-symlink-directory", 60141),
  fileSymlinkFile: g("file-symlink-file", 60142),
  fileZip: g("file-zip", 60143),
  files: g("files", 60144),
  filter: g("filter", 60145),
  flame: g("flame", 60146),
  foldDown: g("fold-down", 60147),
  foldUp: g("fold-up", 60148),
  fold: g("fold", 60149),
  folderActive: g("folder-active", 60150),
  folderOpened: g("folder-opened", 60151),
  gear: g("gear", 60152),
  gift: g("gift", 60153),
  gistSecret: g("gist-secret", 60154),
  gist: g("gist", 60155),
  gitCommit: g("git-commit", 60156),
  gitCompare: g("git-compare", 60157),
  compareChanges: g("compare-changes", 60157),
  gitMerge: g("git-merge", 60158),
  githubAction: g("github-action", 60159),
  githubAlt: g("github-alt", 60160),
  globe: g("globe", 60161),
  grabber: g("grabber", 60162),
  graph: g("graph", 60163),
  gripper: g("gripper", 60164),
  heart: g("heart", 60165),
  home: g("home", 60166),
  horizontalRule: g("horizontal-rule", 60167),
  hubot: g("hubot", 60168),
  inbox: g("inbox", 60169),
  issueReopened: g("issue-reopened", 60171),
  issues: g("issues", 60172),
  italic: g("italic", 60173),
  jersey: g("jersey", 60174),
  json: g("json", 60175),
  kebabVertical: g("kebab-vertical", 60176),
  key: g("key", 60177),
  law: g("law", 60178),
  lightbulbAutofix: g("lightbulb-autofix", 60179),
  linkExternal: g("link-external", 60180),
  link: g("link", 60181),
  listOrdered: g("list-ordered", 60182),
  listUnordered: g("list-unordered", 60183),
  liveShare: g("live-share", 60184),
  loading: g("loading", 60185),
  location: g("location", 60186),
  mailRead: g("mail-read", 60187),
  mail: g("mail", 60188),
  markdown: g("markdown", 60189),
  megaphone: g("megaphone", 60190),
  mention: g("mention", 60191),
  milestone: g("milestone", 60192),
  gitPullRequestMilestone: g("git-pull-request-milestone", 60192),
  mortarBoard: g("mortar-board", 60193),
  move: g("move", 60194),
  multipleWindows: g("multiple-windows", 60195),
  mute: g("mute", 60196),
  noNewline: g("no-newline", 60197),
  note: g("note", 60198),
  octoface: g("octoface", 60199),
  openPreview: g("open-preview", 60200),
  package: g("package", 60201),
  paintcan: g("paintcan", 60202),
  pin: g("pin", 60203),
  play: g("play", 60204),
  run: g("run", 60204),
  plug: g("plug", 60205),
  preserveCase: g("preserve-case", 60206),
  preview: g("preview", 60207),
  project: g("project", 60208),
  pulse: g("pulse", 60209),
  question: g("question", 60210),
  quote: g("quote", 60211),
  radioTower: g("radio-tower", 60212),
  reactions: g("reactions", 60213),
  references: g("references", 60214),
  refresh: g("refresh", 60215),
  regex: g("regex", 60216),
  remoteExplorer: g("remote-explorer", 60217),
  remote: g("remote", 60218),
  remove: g("remove", 60219),
  replaceAll: g("replace-all", 60220),
  replace: g("replace", 60221),
  repoClone: g("repo-clone", 60222),
  repoForcePush: g("repo-force-push", 60223),
  repoPull: g("repo-pull", 60224),
  repoPush: g("repo-push", 60225),
  report: g("report", 60226),
  requestChanges: g("request-changes", 60227),
  rocket: g("rocket", 60228),
  rootFolderOpened: g("root-folder-opened", 60229),
  rootFolder: g("root-folder", 60230),
  rss: g("rss", 60231),
  ruby: g("ruby", 60232),
  saveAll: g("save-all", 60233),
  saveAs: g("save-as", 60234),
  save: g("save", 60235),
  screenFull: g("screen-full", 60236),
  screenNormal: g("screen-normal", 60237),
  searchStop: g("search-stop", 60238),
  server: g("server", 60240),
  settingsGear: g("settings-gear", 60241),
  settings: g("settings", 60242),
  shield: g("shield", 60243),
  smiley: g("smiley", 60244),
  sortPrecedence: g("sort-precedence", 60245),
  splitHorizontal: g("split-horizontal", 60246),
  splitVertical: g("split-vertical", 60247),
  squirrel: g("squirrel", 60248),
  starFull: g("star-full", 60249),
  starHalf: g("star-half", 60250),
  symbolClass: g("symbol-class", 60251),
  symbolColor: g("symbol-color", 60252),
  symbolConstant: g("symbol-constant", 60253),
  symbolEnumMember: g("symbol-enum-member", 60254),
  symbolField: g("symbol-field", 60255),
  symbolFile: g("symbol-file", 60256),
  symbolInterface: g("symbol-interface", 60257),
  symbolKeyword: g("symbol-keyword", 60258),
  symbolMisc: g("symbol-misc", 60259),
  symbolOperator: g("symbol-operator", 60260),
  symbolProperty: g("symbol-property", 60261),
  wrench: g("wrench", 60261),
  wrenchSubaction: g("wrench-subaction", 60261),
  symbolSnippet: g("symbol-snippet", 60262),
  tasklist: g("tasklist", 60263),
  telescope: g("telescope", 60264),
  textSize: g("text-size", 60265),
  threeBars: g("three-bars", 60266),
  thumbsdown: g("thumbsdown", 60267),
  thumbsup: g("thumbsup", 60268),
  tools: g("tools", 60269),
  triangleDown: g("triangle-down", 60270),
  triangleLeft: g("triangle-left", 60271),
  triangleRight: g("triangle-right", 60272),
  triangleUp: g("triangle-up", 60273),
  twitter: g("twitter", 60274),
  unfold: g("unfold", 60275),
  unlock: g("unlock", 60276),
  unmute: g("unmute", 60277),
  unverified: g("unverified", 60278),
  verified: g("verified", 60279),
  versions: g("versions", 60280),
  vmActive: g("vm-active", 60281),
  vmOutline: g("vm-outline", 60282),
  vmRunning: g("vm-running", 60283),
  watch: g("watch", 60284),
  whitespace: g("whitespace", 60285),
  wholeWord: g("whole-word", 60286),
  window: g("window", 60287),
  wordWrap: g("word-wrap", 60288),
  zoomIn: g("zoom-in", 60289),
  zoomOut: g("zoom-out", 60290),
  listFilter: g("list-filter", 60291),
  listFlat: g("list-flat", 60292),
  listSelection: g("list-selection", 60293),
  selection: g("selection", 60293),
  listTree: g("list-tree", 60294),
  debugBreakpointFunctionUnverified: g("debug-breakpoint-function-unverified", 60295),
  debugBreakpointFunction: g("debug-breakpoint-function", 60296),
  debugBreakpointFunctionDisabled: g("debug-breakpoint-function-disabled", 60296),
  debugStackframeActive: g("debug-stackframe-active", 60297),
  circleSmallFilled: g("circle-small-filled", 60298),
  debugStackframeDot: g("debug-stackframe-dot", 60298),
  terminalDecorationMark: g("terminal-decoration-mark", 60298),
  debugStackframe: g("debug-stackframe", 60299),
  debugStackframeFocused: g("debug-stackframe-focused", 60299),
  debugBreakpointUnsupported: g("debug-breakpoint-unsupported", 60300),
  symbolString: g("symbol-string", 60301),
  debugReverseContinue: g("debug-reverse-continue", 60302),
  debugStepBack: g("debug-step-back", 60303),
  debugRestartFrame: g("debug-restart-frame", 60304),
  debugAlt: g("debug-alt", 60305),
  callIncoming: g("call-incoming", 60306),
  callOutgoing: g("call-outgoing", 60307),
  menu: g("menu", 60308),
  expandAll: g("expand-all", 60309),
  feedback: g("feedback", 60310),
  gitPullRequestReviewer: g("git-pull-request-reviewer", 60310),
  groupByRefType: g("group-by-ref-type", 60311),
  ungroupByRefType: g("ungroup-by-ref-type", 60312),
  account: g("account", 60313),
  gitPullRequestAssignee: g("git-pull-request-assignee", 60313),
  bellDot: g("bell-dot", 60314),
  debugConsole: g("debug-console", 60315),
  library: g("library", 60316),
  output: g("output", 60317),
  runAll: g("run-all", 60318),
  syncIgnored: g("sync-ignored", 60319),
  pinned: g("pinned", 60320),
  githubInverted: g("github-inverted", 60321),
  serverProcess: g("server-process", 60322),
  serverEnvironment: g("server-environment", 60323),
  pass: g("pass", 60324),
  issueClosed: g("issue-closed", 60324),
  stopCircle: g("stop-circle", 60325),
  playCircle: g("play-circle", 60326),
  record: g("record", 60327),
  debugAltSmall: g("debug-alt-small", 60328),
  vmConnect: g("vm-connect", 60329),
  cloud: g("cloud", 60330),
  merge: g("merge", 60331),
  export: g("export", 60332),
  graphLeft: g("graph-left", 60333),
  magnet: g("magnet", 60334),
  notebook: g("notebook", 60335),
  redo: g("redo", 60336),
  checkAll: g("check-all", 60337),
  pinnedDirty: g("pinned-dirty", 60338),
  passFilled: g("pass-filled", 60339),
  circleLargeFilled: g("circle-large-filled", 60340),
  circleLarge: g("circle-large", 60341),
  circleLargeOutline: g("circle-large-outline", 60341),
  combine: g("combine", 60342),
  gather: g("gather", 60342),
  table: g("table", 60343),
  variableGroup: g("variable-group", 60344),
  typeHierarchy: g("type-hierarchy", 60345),
  typeHierarchySub: g("type-hierarchy-sub", 60346),
  typeHierarchySuper: g("type-hierarchy-super", 60347),
  gitPullRequestCreate: g("git-pull-request-create", 60348),
  runAbove: g("run-above", 60349),
  runBelow: g("run-below", 60350),
  notebookTemplate: g("notebook-template", 60351),
  debugRerun: g("debug-rerun", 60352),
  workspaceTrusted: g("workspace-trusted", 60353),
  workspaceUntrusted: g("workspace-untrusted", 60354),
  workspaceUnknown: g("workspace-unknown", 60355),
  terminalCmd: g("terminal-cmd", 60356),
  terminalDebian: g("terminal-debian", 60357),
  terminalLinux: g("terminal-linux", 60358),
  terminalPowershell: g("terminal-powershell", 60359),
  terminalTmux: g("terminal-tmux", 60360),
  terminalUbuntu: g("terminal-ubuntu", 60361),
  terminalBash: g("terminal-bash", 60362),
  arrowSwap: g("arrow-swap", 60363),
  copy: g("copy", 60364),
  personAdd: g("person-add", 60365),
  filterFilled: g("filter-filled", 60366),
  wand: g("wand", 60367),
  debugLineByLine: g("debug-line-by-line", 60368),
  inspect: g("inspect", 60369),
  layers: g("layers", 60370),
  layersDot: g("layers-dot", 60371),
  layersActive: g("layers-active", 60372),
  compass: g("compass", 60373),
  compassDot: g("compass-dot", 60374),
  compassActive: g("compass-active", 60375),
  azure: g("azure", 60376),
  issueDraft: g("issue-draft", 60377),
  gitPullRequestClosed: g("git-pull-request-closed", 60378),
  gitPullRequestDraft: g("git-pull-request-draft", 60379),
  debugAll: g("debug-all", 60380),
  debugCoverage: g("debug-coverage", 60381),
  runErrors: g("run-errors", 60382),
  folderLibrary: g("folder-library", 60383),
  debugContinueSmall: g("debug-continue-small", 60384),
  beakerStop: g("beaker-stop", 60385),
  graphLine: g("graph-line", 60386),
  graphScatter: g("graph-scatter", 60387),
  pieChart: g("pie-chart", 60388),
  bracket: g("bracket", 60175),
  bracketDot: g("bracket-dot", 60389),
  bracketError: g("bracket-error", 60390),
  lockSmall: g("lock-small", 60391),
  azureDevops: g("azure-devops", 60392),
  verifiedFilled: g("verified-filled", 60393),
  newline: g("newline", 60394),
  layout: g("layout", 60395),
  layoutActivitybarLeft: g("layout-activitybar-left", 60396),
  layoutActivitybarRight: g("layout-activitybar-right", 60397),
  layoutPanelLeft: g("layout-panel-left", 60398),
  layoutPanelCenter: g("layout-panel-center", 60399),
  layoutPanelJustify: g("layout-panel-justify", 60400),
  layoutPanelRight: g("layout-panel-right", 60401),
  layoutPanel: g("layout-panel", 60402),
  layoutSidebarLeft: g("layout-sidebar-left", 60403),
  layoutSidebarRight: g("layout-sidebar-right", 60404),
  layoutStatusbar: g("layout-statusbar", 60405),
  layoutMenubar: g("layout-menubar", 60406),
  layoutCentered: g("layout-centered", 60407),
  target: g("target", 60408),
  indent: g("indent", 60409),
  recordSmall: g("record-small", 60410),
  errorSmall: g("error-small", 60411),
  terminalDecorationError: g("terminal-decoration-error", 60411),
  arrowCircleDown: g("arrow-circle-down", 60412),
  arrowCircleLeft: g("arrow-circle-left", 60413),
  arrowCircleRight: g("arrow-circle-right", 60414),
  arrowCircleUp: g("arrow-circle-up", 60415),
  layoutSidebarRightOff: g("layout-sidebar-right-off", 60416),
  layoutPanelOff: g("layout-panel-off", 60417),
  layoutSidebarLeftOff: g("layout-sidebar-left-off", 60418),
  blank: g("blank", 60419),
  heartFilled: g("heart-filled", 60420),
  map: g("map", 60421),
  mapHorizontal: g("map-horizontal", 60421),
  foldHorizontal: g("fold-horizontal", 60421),
  mapFilled: g("map-filled", 60422),
  mapHorizontalFilled: g("map-horizontal-filled", 60422),
  foldHorizontalFilled: g("fold-horizontal-filled", 60422),
  circleSmall: g("circle-small", 60423),
  bellSlash: g("bell-slash", 60424),
  bellSlashDot: g("bell-slash-dot", 60425),
  commentUnresolved: g("comment-unresolved", 60426),
  gitPullRequestGoToChanges: g("git-pull-request-go-to-changes", 60427),
  gitPullRequestNewChanges: g("git-pull-request-new-changes", 60428),
  searchFuzzy: g("search-fuzzy", 60429),
  commentDraft: g("comment-draft", 60430),
  send: g("send", 60431),
  sparkle: g("sparkle", 60432),
  insert: g("insert", 60433),
  mic: g("mic", 60434),
  thumbsdownFilled: g("thumbsdown-filled", 60435),
  thumbsupFilled: g("thumbsup-filled", 60436),
  coffee: g("coffee", 60437),
  snake: g("snake", 60438),
  game: g("game", 60439),
  vr: g("vr", 60440),
  chip: g("chip", 60441),
  piano: g("piano", 60442),
  music: g("music", 60443),
  micFilled: g("mic-filled", 60444),
  repoFetch: g("repo-fetch", 60445),
  copilot: g("copilot", 60446),
  lightbulbSparkle: g("lightbulb-sparkle", 60447),
  robot: g("robot", 60448),
  sparkleFilled: g("sparkle-filled", 60449),
  diffSingle: g("diff-single", 60450),
  diffMultiple: g("diff-multiple", 60451),
  surroundWith: g("surround-with", 60452),
  share: g("share", 60453),
  gitStash: g("git-stash", 60454),
  gitStashApply: g("git-stash-apply", 60455),
  gitStashPop: g("git-stash-pop", 60456),
  vscode: g("vscode", 60457),
  vscodeInsiders: g("vscode-insiders", 60458),
  codeOss: g("code-oss", 60459),
  runCoverage: g("run-coverage", 60460),
  runAllCoverage: g("run-all-coverage", 60461),
  coverage: g("coverage", 60462),
  githubProject: g("github-project", 60463),
  mapVertical: g("map-vertical", 60464),
  foldVertical: g("fold-vertical", 60464),
  mapVerticalFilled: g("map-vertical-filled", 60465),
  foldVerticalFilled: g("fold-vertical-filled", 60465),
  goToSearch: g("go-to-search", 60466),
  percentage: g("percentage", 60467),
  sortPercentage: g("sort-percentage", 60467),
  attach: g("attach", 60468),
  goToEditingSession: g("go-to-editing-session", 60469),
  editSession: g("edit-session", 60470),
  codeReview: g("code-review", 60471),
  copilotWarning: g("copilot-warning", 60472),
  python: g("python", 60473),
  copilotLarge: g("copilot-large", 60474),
  copilotWarningLarge: g("copilot-warning-large", 60475),
  keyboardTab: g("keyboard-tab", 60476),
  copilotBlocked: g("copilot-blocked", 60477),
  copilotNotConnected: g("copilot-not-connected", 60478),
  flag: g("flag", 60479),
  lightbulbEmpty: g("lightbulb-empty", 60480),
  symbolMethodArrow: g("symbol-method-arrow", 60481),
  copilotUnavailable: g("copilot-unavailable", 60482),
  repoPinned: g("repo-pinned", 60483),
  keyboardTabAbove: g("keyboard-tab-above", 60484),
  keyboardTabBelow: g("keyboard-tab-below", 60485),
  gitPullRequestDone: g("git-pull-request-done", 60486),
  mcp: g("mcp", 60487),
  extensionsLarge: g("extensions-large", 60488),
  layoutPanelDock: g("layout-panel-dock", 60489),
  layoutSidebarLeftDock: g("layout-sidebar-left-dock", 60490),
  layoutSidebarRightDock: g("layout-sidebar-right-dock", 60491),
  copilotInProgress: g("copilot-in-progress", 60492),
  copilotError: g("copilot-error", 60493),
  copilotSuccess: g("copilot-success", 60494),
  chatSparkle: g("chat-sparkle", 60495),
  searchSparkle: g("search-sparkle", 60496),
  editSparkle: g("edit-sparkle", 60497),
  copilotSnooze: g("copilot-snooze", 60498),
  sendToRemoteAgent: g("send-to-remote-agent", 60499)
}, h7 = {
  dialogError: g("dialog-error", "error"),
  dialogWarning: g("dialog-warning", "warning"),
  dialogInfo: g("dialog-info", "info"),
  dialogClose: g("dialog-close", "close"),
  treeItemExpanded: g("tree-item-expanded", "chevron-down"),
  treeFilterOnTypeOn: g("tree-filter-on-type-on", "list-filter"),
  treeFilterOnTypeOff: g("tree-filter-on-type-off", "list-selection"),
  treeFilterClear: g("tree-filter-clear", "close"),
  treeItemLoading: g("tree-item-loading", "loading"),
  menuSelection: g("menu-selection", "check"),
  menuSubmenu: g("menu-submenu", "chevron-right"),
  menuBarMore: g("menubar-more", "more"),
  scrollbarButtonLeft: g("scrollbar-button-left", "triangle-left"),
  scrollbarButtonRight: g("scrollbar-button-right", "triangle-right"),
  scrollbarButtonUp: g("scrollbar-button-up", "triangle-up"),
  scrollbarButtonDown: g("scrollbar-button-down", "triangle-down"),
  toolBarMore: g("toolbar-more", "more"),
  quickInputBack: g("quick-input-back", "arrow-left"),
  dropDownButton: g("drop-down-button", 60084),
  symbolCustomColor: g("symbol-customcolor", 60252),
  exportIcon: g("export", 60332),
  workspaceUnspecified: g("workspace-unspecified", 60355),
  newLine: g("newline", 60394),
  thumbsDownFilled: g("thumbsdown-filled", 60435),
  thumbsUpFilled: g("thumbsup-filled", 60436),
  gitFetch: g("git-fetch", 60445),
  lightbulbSparkleAutofix: g("lightbulb-sparkle-autofix", 60447),
  debugBreakpointPending: g("debug-breakpoint-pending", 60377)
}, _e = {
  ...d7,
  ...h7
};
var Bu;
(function(i) {
  function e(t) {
    return !!t && typeof t == "object" && typeof t.id == "string";
  }
  i.isThemeColor = e;
})(Bu || (Bu = {}));
var ci;
(function(i) {
  i.iconNameSegment = "[A-Za-z0-9]+", i.iconNameExpression = "[A-Za-z0-9-]+", i.iconModifierExpression = "~[A-Za-z]+", i.iconNameCharacter = "[A-Za-z0-9~-]";
  const e = new RegExp(
    `^(${i.iconNameExpression})(${i.iconModifierExpression})?$`
  );
  function t(f) {
    const p = e.exec(f.id);
    if (!p)
      return t(_e.error);
    const [, v, _] = p, m = ["codicon", "codicon-" + v];
    return _ && m.push("codicon-modifier-" + _.substring(1)), m;
  }
  i.asClassNameArray = t;
  function n(f) {
    return t(f).join(" ");
  }
  i.asClassName = n;
  function r(f) {
    return "." + t(f).join(".");
  }
  i.asCSSSelector = r;
  function s(f) {
    return !!f && typeof f == "object" && typeof f.id == "string" && (typeof f.color > "u" || Bu.isThemeColor(f.color));
  }
  i.isThemeIcon = s;
  const o = new RegExp(
    `^\\$\\((${i.iconNameExpression}(?:${i.iconModifierExpression})?)\\)$`
  );
  function a(f) {
    const p = o.exec(f);
    if (!p)
      return;
    const [, v] = p;
    return { id: v };
  }
  i.fromString = a;
  function l(f) {
    return { id: f };
  }
  i.fromId = l;
  function c(f, p) {
    let v = f.id;
    const _ = v.lastIndexOf("~");
    return _ !== -1 && (v = v.substring(0, _)), p && (v = `${v}~${p}`), { id: v };
  }
  i.modify = c;
  function u(f) {
    const p = f.id.lastIndexOf("~");
    if (p !== -1)
      return f.id.substring(p + 1);
  }
  i.getModifier = u;
  function d(f, p) {
    var v, _;
    return f.id === p.id && ((v = f.color) == null ? void 0 : v.id) === ((_ = p.color) == null ? void 0 : _.id);
  }
  i.isEqual = d;
})(ci || (ci = {}));
const QE = new RegExp(
  `\\$\\(${ci.iconNameExpression}(?:${ci.iconModifierExpression})?\\)`,
  "g"
), f7 = new RegExp(`(\\\\)?${QE.source}`, "g");
function p7(i) {
  return i.replace(f7, (e, t) => t ? e : `\\${e}`);
}
new RegExp(`\\\\${QE.source}`, "g");
new RegExp(`(\\s)?(\\\\)?${QE.source}(\\s)?`, "g");
new RegExp(`\\$\\(${ci.iconNameCharacter}+\\)`, "g");
var im;
(function(i) {
  i[i.Paragraph = 0] = "Paragraph", i[i.Break = 1] = "Break";
})(im || (im = {}));
let Gh = class SP {
  static lift(e) {
    const t = new SP(e.value, e);
    return t.uris = e.uris, t.baseUri = e.baseUri ? x.revive(e.baseUri) : void 0, t;
  }
  constructor(e = "", t = !1) {
    if (this.value = e, typeof this.value != "string")
      throw Ge("value");
    typeof t == "boolean" ? (this.isTrusted = t, this.supportThemeIcons = !1, this.supportHtml = !1) : (this.isTrusted = t.isTrusted ?? void 0, this.supportThemeIcons = t.supportThemeIcons ?? !1, this.supportHtml = t.supportHtml ?? !1);
  }
  appendText(e, t = im.Paragraph) {
    return this.value += g7(this.supportThemeIcons ? p7(e) : e).replace(/([ \t]+)/g, (n, r) => "&nbsp;".repeat(r.length)).replace(/\>/gm, "\\>").replace(/\n/g, t === im.Break ? `\\
` : `

`), this;
  }
  appendMarkdown(e) {
    return this.value += e, this;
  }
  appendCodeblock(e, t) {
    return this.value += `
${m7(t, e)}
`, this;
  }
  appendLink(e, t, n) {
    return this.value += "[", this.value += this._escape(t, "]"), this.value += "](", this.value += this._escape(String(e), ")"), n && (this.value += ` "${this._escape(this._escape(n, '"'), ")")}"`), this.value += ")", this;
  }
  _escape(e, t) {
    const n = new RegExp(Nl(t), "g");
    return e.replace(n, (r, s) => e.charAt(s - 1) !== "\\" ? `\\${r}` : r);
  }
};
function Kl(i) {
  return i instanceof Gh ? !0 : i && typeof i == "object" ? typeof i.value == "string" && (typeof i.isTrusted == "boolean" || typeof i.isTrusted == "object" || i.isTrusted === void 0) && (typeof i.supportThemeIcons == "boolean" || i.supportThemeIcons === void 0) : !1;
}
function g7(i) {
  return i.replace(/[\\`*_{}[\]()#+\-!~]/g, "\\$&");
}
function m7(i, e) {
  var r;
  const t = ((r = i.match(/^`+/gm)) == null ? void 0 : r.reduce((s, o) => s.length > o.length ? s : o).length) ?? 0, n = t >= 3 ? t + 1 : 3;
  return [
    `${"`".repeat(n)}${e}`,
    i,
    `${"`".repeat(n)}`
  ].join(`
`);
}
function _7(i) {
  const e = [], t = i.split("|").map((r) => r.trim());
  i = t[0];
  const n = t[1];
  if (n) {
    const r = /height=(\d+)/.exec(n), s = /width=(\d+)/.exec(n), o = r ? r[1] : "", a = s ? s[1] : "", l = isFinite(parseInt(a)), c = isFinite(parseInt(o));
    l && e.push(`width="${a}"`), c && e.push(`height="${o}"`);
  }
  return { href: i, dimensions: e };
}
function KE() {
  return {
    async: !1,
    breaks: !1,
    extensions: null,
    gfm: !0,
    hooks: null,
    pedantic: !1,
    renderer: null,
    silent: !1,
    tokenizer: null,
    walkTokens: null
  };
}
let Jl = KE();
function DP(i) {
  Jl = i;
}
const kP = /[&<>"']/, v7 = new RegExp(kP.source, "g"), IP = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, w7 = new RegExp(IP.source, "g"), b7 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
}, X2 = (i) => b7[i];
function Rn(i, e) {
  if (e) {
    if (kP.test(i))
      return i.replace(v7, X2);
  } else if (IP.test(i))
    return i.replace(w7, X2);
  return i;
}
const y7 = /(^|[^\[])\^/g;
function At(i, e) {
  let t = typeof i == "string" ? i : i.source;
  e = e || "";
  const n = {
    replace: (r, s) => {
      let o = typeof s == "string" ? s : s.source;
      return o = o.replace(y7, "$1"), t = t.replace(r, o), n;
    },
    getRegex: () => new RegExp(t, e)
  };
  return n;
}
function Z2(i) {
  try {
    i = encodeURI(i).replace(/%25/g, "%");
  } catch {
    return null;
  }
  return i;
}
const oh = { exec: () => null };
function eD(i, e) {
  const t = i.replace(/\|/g, (s, o, a) => {
    let l = !1, c = o;
    for (; --c >= 0 && a[c] === "\\"; )
      l = !l;
    return l ? "|" : " |";
  }), n = t.split(/ \|/);
  let r = 0;
  if (n[0].trim() || n.shift(), n.length > 0 && !n[n.length - 1].trim() && n.pop(), e)
    if (n.length > e)
      n.splice(e);
    else
      for (; n.length < e; )
        n.push("");
  for (; r < n.length; r++)
    n[r] = n[r].trim().replace(/\\\|/g, "|");
  return n;
}
function Ld(i, e, t) {
  const n = i.length;
  if (n === 0)
    return "";
  let r = 0;
  for (; r < n && i.charAt(n - r - 1) === e; )
    r++;
  return i.slice(0, n - r);
}
function x7(i, e) {
  if (i.indexOf(e[1]) === -1)
    return -1;
  let t = 0;
  for (let n = 0; n < i.length; n++)
    if (i[n] === "\\")
      n++;
    else if (i[n] === e[0])
      t++;
    else if (i[n] === e[1] && (t--, t < 0))
      return n;
  return -1;
}
function tD(i, e, t, n) {
  const r = e.href, s = e.title ? Rn(e.title) : null, o = i[1].replace(/\\([\[\]])/g, "$1");
  if (i[0].charAt(0) !== "!") {
    n.state.inLink = !0;
    const a = {
      type: "link",
      raw: t,
      href: r,
      title: s,
      text: o,
      tokens: n.inlineTokens(o)
    };
    return n.state.inLink = !1, a;
  }
  return {
    type: "image",
    raw: t,
    href: r,
    title: s,
    text: Rn(o)
  };
}
function E7(i, e) {
  const t = i.match(/^(\s+)(?:```)/);
  if (t === null)
    return e;
  const n = t[1];
  return e.split(`
`).map((r) => {
    const s = r.match(/^\s+/);
    if (s === null)
      return r;
    const [o] = s;
    return o.length >= n.length ? r.slice(n.length) : r;
  }).join(`
`);
}
class nm {
  // set by the lexer
  constructor(e) {
    Ot(this, "options");
    Ot(this, "rules");
    // set by the lexer
    Ot(this, "lexer");
    this.options = e || Jl;
  }
  space(e) {
    const t = this.rules.block.newline.exec(e);
    if (t && t[0].length > 0)
      return {
        type: "space",
        raw: t[0]
      };
  }
  code(e) {
    const t = this.rules.block.code.exec(e);
    if (t) {
      const n = t[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: t[0],
        codeBlockStyle: "indented",
        text: this.options.pedantic ? n : Ld(n, `
`)
      };
    }
  }
  fences(e) {
    const t = this.rules.block.fences.exec(e);
    if (t) {
      const n = t[0], r = E7(n, t[3] || "");
      return {
        type: "code",
        raw: n,
        lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : t[2],
        text: r
      };
    }
  }
  heading(e) {
    const t = this.rules.block.heading.exec(e);
    if (t) {
      let n = t[2].trim();
      if (/#$/.test(n)) {
        const r = Ld(n, "#");
        (this.options.pedantic || !r || / $/.test(r)) && (n = r.trim());
      }
      return {
        type: "heading",
        raw: t[0],
        depth: t[1].length,
        text: n,
        tokens: this.lexer.inline(n)
      };
    }
  }
  hr(e) {
    const t = this.rules.block.hr.exec(e);
    if (t)
      return {
        type: "hr",
        raw: Ld(t[0], `
`)
      };
  }
  blockquote(e) {
    const t = this.rules.block.blockquote.exec(e);
    if (t) {
      let n = Ld(t[0], `
`).split(`
`), r = "", s = "";
      const o = [];
      for (; n.length > 0; ) {
        let a = !1;
        const l = [];
        let c;
        for (c = 0; c < n.length; c++)
          if (/^ {0,3}>/.test(n[c]))
            l.push(n[c]), a = !0;
          else if (!a)
            l.push(n[c]);
          else
            break;
        n = n.slice(c);
        const u = l.join(`
`), d = u.replace(/\n {0,3}((?:=+|-+) *)(?=\n|$)/g, `
    $1`).replace(/^ {0,3}>[ \t]?/gm, "");
        r = r ? `${r}
${u}` : u, s = s ? `${s}
${d}` : d;
        const f = this.lexer.state.top;
        if (this.lexer.state.top = !0, this.lexer.blockTokens(d, o, !0), this.lexer.state.top = f, n.length === 0)
          break;
        const p = o[o.length - 1];
        if ((p == null ? void 0 : p.type) === "code")
          break;
        if ((p == null ? void 0 : p.type) === "blockquote") {
          const v = p, _ = v.raw + `
` + n.join(`
`), m = this.blockquote(_);
          o[o.length - 1] = m, r = r.substring(0, r.length - v.raw.length) + m.raw, s = s.substring(0, s.length - v.text.length) + m.text;
          break;
        } else if ((p == null ? void 0 : p.type) === "list") {
          const v = p, _ = v.raw + `
` + n.join(`
`), m = this.list(_);
          o[o.length - 1] = m, r = r.substring(0, r.length - p.raw.length) + m.raw, s = s.substring(0, s.length - v.raw.length) + m.raw, n = _.substring(o[o.length - 1].raw.length).split(`
`);
          continue;
        }
      }
      return {
        type: "blockquote",
        raw: r,
        tokens: o,
        text: s
      };
    }
  }
  list(e) {
    let t = this.rules.block.list.exec(e);
    if (t) {
      let n = t[1].trim();
      const r = n.length > 1, s = {
        type: "list",
        raw: "",
        ordered: r,
        start: r ? +n.slice(0, -1) : "",
        loose: !1,
        items: []
      };
      n = r ? `\\d{1,9}\\${n.slice(-1)}` : `\\${n}`, this.options.pedantic && (n = r ? n : "[*+-]");
      const o = new RegExp(`^( {0,3}${n})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      let a = !1;
      for (; e; ) {
        let l = !1, c = "", u = "";
        if (!(t = o.exec(e)) || this.rules.block.hr.test(e))
          break;
        c = t[0], e = e.substring(c.length);
        let d = t[2].split(`
`, 1)[0].replace(/^\t+/, (E) => " ".repeat(3 * E.length)), f = e.split(`
`, 1)[0], p = !d.trim(), v = 0;
        if (this.options.pedantic ? (v = 2, u = d.trimStart()) : p ? v = t[1].length + 1 : (v = t[2].search(/[^ ]/), v = v > 4 ? 1 : v, u = d.slice(v), v += t[1].length), p && /^ *$/.test(f) && (c += f + `
`, e = e.substring(f.length + 1), l = !0), !l) {
          const E = new RegExp(`^ {0,${Math.min(3, v - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`), S = new RegExp(`^ {0,${Math.min(3, v - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`), k = new RegExp(`^ {0,${Math.min(3, v - 1)}}(?:\`\`\`|~~~)`), q = new RegExp(`^ {0,${Math.min(3, v - 1)}}#`);
          for (; e; ) {
            const B = e.split(`
`, 1)[0];
            if (f = B, this.options.pedantic && (f = f.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ")), k.test(f) || q.test(f) || E.test(f) || S.test(e))
              break;
            if (f.search(/[^ ]/) >= v || !f.trim())
              u += `
` + f.slice(v);
            else {
              if (p || d.search(/[^ ]/) >= 4 || k.test(d) || q.test(d) || S.test(d))
                break;
              u += `
` + f;
            }
            !p && !f.trim() && (p = !0), c += B + `
`, e = e.substring(B.length + 1), d = f.slice(v);
          }
        }
        s.loose || (a ? s.loose = !0 : /\n *\n *$/.test(c) && (a = !0));
        let _ = null, m;
        this.options.gfm && (_ = /^\[[ xX]\] /.exec(u), _ && (m = _[0] !== "[ ] ", u = u.replace(/^\[[ xX]\] +/, ""))), s.items.push({
          type: "list_item",
          raw: c,
          task: !!_,
          checked: m,
          loose: !1,
          text: u,
          tokens: []
        }), s.raw += c;
      }
      s.items[s.items.length - 1].raw = s.items[s.items.length - 1].raw.trimEnd(), s.items[s.items.length - 1].text = s.items[s.items.length - 1].text.trimEnd(), s.raw = s.raw.trimEnd();
      for (let l = 0; l < s.items.length; l++)
        if (this.lexer.state.top = !1, s.items[l].tokens = this.lexer.blockTokens(s.items[l].text, []), !s.loose) {
          const c = s.items[l].tokens.filter((d) => d.type === "space"), u = c.length > 0 && c.some((d) => /\n.*\n/.test(d.raw));
          s.loose = u;
        }
      if (s.loose)
        for (let l = 0; l < s.items.length; l++)
          s.items[l].loose = !0;
      return s;
    }
  }
  html(e) {
    const t = this.rules.block.html.exec(e);
    if (t)
      return {
        type: "html",
        block: !0,
        raw: t[0],
        pre: t[1] === "pre" || t[1] === "script" || t[1] === "style",
        text: t[0]
      };
  }
  def(e) {
    const t = this.rules.block.def.exec(e);
    if (t) {
      const n = t[1].toLowerCase().replace(/\s+/g, " "), r = t[2] ? t[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "", s = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : t[3];
      return {
        type: "def",
        tag: n,
        raw: t[0],
        href: r,
        title: s
      };
    }
  }
  table(e) {
    const t = this.rules.block.table.exec(e);
    if (!t || !/[:|]/.test(t[2]))
      return;
    const n = eD(t[1]), r = t[2].replace(/^\||\| *$/g, "").split("|"), s = t[3] && t[3].trim() ? t[3].replace(/\n[ \t]*$/, "").split(`
`) : [], o = {
      type: "table",
      raw: t[0],
      header: [],
      align: [],
      rows: []
    };
    if (n.length === r.length) {
      for (const a of r)
        /^ *-+: *$/.test(a) ? o.align.push("right") : /^ *:-+: *$/.test(a) ? o.align.push("center") : /^ *:-+ *$/.test(a) ? o.align.push("left") : o.align.push(null);
      for (let a = 0; a < n.length; a++)
        o.header.push({
          text: n[a],
          tokens: this.lexer.inline(n[a]),
          header: !0,
          align: o.align[a]
        });
      for (const a of s)
        o.rows.push(eD(a, o.header.length).map((l, c) => ({
          text: l,
          tokens: this.lexer.inline(l),
          header: !1,
          align: o.align[c]
        })));
      return o;
    }
  }
  lheading(e) {
    const t = this.rules.block.lheading.exec(e);
    if (t)
      return {
        type: "heading",
        raw: t[0],
        depth: t[2].charAt(0) === "=" ? 1 : 2,
        text: t[1],
        tokens: this.lexer.inline(t[1])
      };
  }
  paragraph(e) {
    const t = this.rules.block.paragraph.exec(e);
    if (t) {
      const n = t[1].charAt(t[1].length - 1) === `
` ? t[1].slice(0, -1) : t[1];
      return {
        type: "paragraph",
        raw: t[0],
        text: n,
        tokens: this.lexer.inline(n)
      };
    }
  }
  text(e) {
    const t = this.rules.block.text.exec(e);
    if (t)
      return {
        type: "text",
        raw: t[0],
        text: t[0],
        tokens: this.lexer.inline(t[0])
      };
  }
  escape(e) {
    const t = this.rules.inline.escape.exec(e);
    if (t)
      return {
        type: "escape",
        raw: t[0],
        text: Rn(t[1])
      };
  }
  tag(e) {
    const t = this.rules.inline.tag.exec(e);
    if (t)
      return !this.lexer.state.inLink && /^<a /i.test(t[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && /^<\/a>/i.test(t[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(t[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0]) && (this.lexer.state.inRawBlock = !1), {
        type: "html",
        raw: t[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        block: !1,
        text: t[0]
      };
  }
  link(e) {
    const t = this.rules.inline.link.exec(e);
    if (t) {
      const n = t[2].trim();
      if (!this.options.pedantic && /^</.test(n)) {
        if (!/>$/.test(n))
          return;
        const o = Ld(n.slice(0, -1), "\\");
        if ((n.length - o.length) % 2 === 0)
          return;
      } else {
        const o = x7(t[2], "()");
        if (o > -1) {
          const l = (t[0].indexOf("!") === 0 ? 5 : 4) + t[1].length + o;
          t[2] = t[2].substring(0, o), t[0] = t[0].substring(0, l).trim(), t[3] = "";
        }
      }
      let r = t[2], s = "";
      if (this.options.pedantic) {
        const o = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(r);
        o && (r = o[1], s = o[3]);
      } else
        s = t[3] ? t[3].slice(1, -1) : "";
      return r = r.trim(), /^</.test(r) && (this.options.pedantic && !/>$/.test(n) ? r = r.slice(1) : r = r.slice(1, -1)), tD(t, {
        href: r && r.replace(this.rules.inline.anyPunctuation, "$1"),
        title: s && s.replace(this.rules.inline.anyPunctuation, "$1")
      }, t[0], this.lexer);
    }
  }
  reflink(e, t) {
    let n;
    if ((n = this.rules.inline.reflink.exec(e)) || (n = this.rules.inline.nolink.exec(e))) {
      const r = (n[2] || n[1]).replace(/\s+/g, " "), s = t[r.toLowerCase()];
      if (!s) {
        const o = n[0].charAt(0);
        return {
          type: "text",
          raw: o,
          text: o
        };
      }
      return tD(n, s, n[0], this.lexer);
    }
  }
  emStrong(e, t, n = "") {
    let r = this.rules.inline.emStrongLDelim.exec(e);
    if (!r || r[3] && n.match(/[\p{L}\p{N}]/u))
      return;
    if (!(r[1] || r[2] || "") || !n || this.rules.inline.punctuation.exec(n)) {
      const o = [...r[0]].length - 1;
      let a, l, c = o, u = 0;
      const d = r[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
      for (d.lastIndex = 0, t = t.slice(-1 * e.length + o); (r = d.exec(t)) != null; ) {
        if (a = r[1] || r[2] || r[3] || r[4] || r[5] || r[6], !a)
          continue;
        if (l = [...a].length, r[3] || r[4]) {
          c += l;
          continue;
        } else if ((r[5] || r[6]) && o % 3 && !((o + l) % 3)) {
          u += l;
          continue;
        }
        if (c -= l, c > 0)
          continue;
        l = Math.min(l, l + c + u);
        const f = [...r[0]][0].length, p = e.slice(0, o + r.index + f + l);
        if (Math.min(o, l) % 2) {
          const _ = p.slice(1, -1);
          return {
            type: "em",
            raw: p,
            text: _,
            tokens: this.lexer.inlineTokens(_)
          };
        }
        const v = p.slice(2, -2);
        return {
          type: "strong",
          raw: p,
          text: v,
          tokens: this.lexer.inlineTokens(v)
        };
      }
    }
  }
  codespan(e) {
    const t = this.rules.inline.code.exec(e);
    if (t) {
      let n = t[2].replace(/\n/g, " ");
      const r = /[^ ]/.test(n), s = /^ /.test(n) && / $/.test(n);
      return r && s && (n = n.substring(1, n.length - 1)), n = Rn(n, !0), {
        type: "codespan",
        raw: t[0],
        text: n
      };
    }
  }
  br(e) {
    const t = this.rules.inline.br.exec(e);
    if (t)
      return {
        type: "br",
        raw: t[0]
      };
  }
  del(e) {
    const t = this.rules.inline.del.exec(e);
    if (t)
      return {
        type: "del",
        raw: t[0],
        text: t[2],
        tokens: this.lexer.inlineTokens(t[2])
      };
  }
  autolink(e) {
    const t = this.rules.inline.autolink.exec(e);
    if (t) {
      let n, r;
      return t[2] === "@" ? (n = Rn(t[1]), r = "mailto:" + n) : (n = Rn(t[1]), r = n), {
        type: "link",
        raw: t[0],
        text: n,
        href: r,
        tokens: [
          {
            type: "text",
            raw: n,
            text: n
          }
        ]
      };
    }
  }
  url(e) {
    var n;
    let t;
    if (t = this.rules.inline.url.exec(e)) {
      let r, s;
      if (t[2] === "@")
        r = Rn(t[0]), s = "mailto:" + r;
      else {
        let o;
        do
          o = t[0], t[0] = ((n = this.rules.inline._backpedal.exec(t[0])) == null ? void 0 : n[0]) ?? "";
        while (o !== t[0]);
        r = Rn(t[0]), t[1] === "www." ? s = "http://" + t[0] : s = t[0];
      }
      return {
        type: "link",
        raw: t[0],
        text: r,
        href: s,
        tokens: [
          {
            type: "text",
            raw: r,
            text: r
          }
        ]
      };
    }
  }
  inlineText(e) {
    const t = this.rules.inline.text.exec(e);
    if (t) {
      let n;
      return this.lexer.state.inRawBlock ? n = t[0] : n = Rn(t[0]), {
        type: "text",
        raw: t[0],
        text: n
      };
    }
  }
}
const S7 = /^(?: *(?:\n|$))+/, D7 = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/, k7 = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/, kp = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/, I7 = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/, CP = /(?:[*+-]|\d{1,9}[.)])/, TP = At(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g, CP).replace(/blockCode/g, / {4}/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).getRegex(), JE = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/, C7 = /^[^\n]+/, YE = /(?!\s*\])(?:\\.|[^\[\]\\])+/, T7 = At(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace("label", YE).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(), P7 = At(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, CP).getRegex(), nv = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul", XE = /<!--(?:-?>|[\s\S]*?(?:-->|$))/, A7 = At("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))", "i").replace("comment", XE).replace("tag", nv).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(), PP = At(JE).replace("hr", kp).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", nv).getRegex(), R7 = At(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", PP).getRegex(), ZE = {
  blockquote: R7,
  code: D7,
  def: T7,
  fences: k7,
  heading: I7,
  hr: kp,
  html: A7,
  lheading: TP,
  list: P7,
  newline: S7,
  paragraph: PP,
  table: oh,
  text: C7
}, iD = At("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", kp).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", nv).getRegex(), L7 = {
  ...ZE,
  table: iD,
  paragraph: At(JE).replace("hr", kp).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", iD).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", nv).getRegex()
}, N7 = {
  ...ZE,
  html: At(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", XE).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: oh,
  // fences not supported
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: At(JE).replace("hr", kp).replace("heading", ` *#{1,6} *[^
]`).replace("lheading", TP).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
}, AP = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/, M7 = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/, RP = /^( {2,}|\\)\n(?!\s*$)/, O7 = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/, Ip = "\\p{P}\\p{S}", F7 = At(/^((?![*_])[\spunctuation])/, "u").replace(/punctuation/g, Ip).getRegex(), U7 = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g, $7 = At(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, "u").replace(/punct/g, Ip).getRegex(), H7 = At("^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])", "gu").replace(/punct/g, Ip).getRegex(), B7 = At("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])", "gu").replace(/punct/g, Ip).getRegex(), W7 = At(/\\([punct])/, "gu").replace(/punct/g, Ip).getRegex(), V7 = At(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(), z7 = At(XE).replace("(?:-->|$)", "-->").getRegex(), q7 = At("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment", z7).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(), rm = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/, j7 = At(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label", rm).replace("href", /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(), LP = At(/^!?\[(label)\]\[(ref)\]/).replace("label", rm).replace("ref", YE).getRegex(), NP = At(/^!?\[(ref)\](?:\[\])?/).replace("ref", YE).getRegex(), G7 = At("reflink|nolink(?!\\()", "g").replace("reflink", LP).replace("nolink", NP).getRegex(), eS = {
  _backpedal: oh,
  // only used for GFM url
  anyPunctuation: W7,
  autolink: V7,
  blockSkip: U7,
  br: RP,
  code: M7,
  del: oh,
  emStrongLDelim: $7,
  emStrongRDelimAst: H7,
  emStrongRDelimUnd: B7,
  escape: AP,
  link: j7,
  nolink: NP,
  punctuation: F7,
  reflink: LP,
  reflinkSearch: G7,
  tag: q7,
  text: O7,
  url: oh
}, Q7 = {
  ...eS,
  link: At(/^!?\[(label)\]\((.*?)\)/).replace("label", rm).getRegex(),
  reflink: At(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", rm).getRegex()
}, nb = {
  ...eS,
  escape: At(AP).replace("])", "~|])").getRegex(),
  url: At(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
}, K7 = {
  ...nb,
  br: At(RP).replace("{2,}", "*").getRegex(),
  text: At(nb.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
}, Gp = {
  normal: ZE,
  gfm: L7,
  pedantic: N7
}, Nd = {
  normal: eS,
  gfm: nb,
  breaks: K7,
  pedantic: Q7
};
class Xr {
  constructor(e) {
    Ot(this, "tokens");
    Ot(this, "options");
    Ot(this, "state");
    Ot(this, "tokenizer");
    Ot(this, "inlineQueue");
    this.tokens = [], this.tokens.links = /* @__PURE__ */ Object.create(null), this.options = e || Jl, this.options.tokenizer = this.options.tokenizer || new nm(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {
      inLink: !1,
      inRawBlock: !1,
      top: !0
    };
    const t = {
      block: Gp.normal,
      inline: Nd.normal
    };
    this.options.pedantic ? (t.block = Gp.pedantic, t.inline = Nd.pedantic) : this.options.gfm && (t.block = Gp.gfm, this.options.breaks ? t.inline = Nd.breaks : t.inline = Nd.gfm), this.tokenizer.rules = t;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block: Gp,
      inline: Nd
    };
  }
  /**
   * Static Lex Method
   */
  static lex(e, t) {
    return new Xr(t).lex(e);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(e, t) {
    return new Xr(t).inlineTokens(e);
  }
  /**
   * Preprocessing
   */
  lex(e) {
    e = e.replace(/\r\n|\r/g, `
`), this.blockTokens(e, this.tokens);
    for (let t = 0; t < this.inlineQueue.length; t++) {
      const n = this.inlineQueue[t];
      this.inlineTokens(n.src, n.tokens);
    }
    return this.inlineQueue = [], this.tokens;
  }
  blockTokens(e, t = [], n = !1) {
    this.options.pedantic ? e = e.replace(/\t/g, "    ").replace(/^ +$/gm, "") : e = e.replace(/^( *)(\t+)/gm, (a, l, c) => l + "    ".repeat(c.length));
    let r, s, o;
    for (; e; )
      if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((a) => (r = a.call({ lexer: this }, e, t)) ? (e = e.substring(r.raw.length), t.push(r), !0) : !1))) {
        if (r = this.tokenizer.space(e)) {
          e = e.substring(r.raw.length), r.raw.length === 1 && t.length > 0 ? t[t.length - 1].raw += `
` : t.push(r);
          continue;
        }
        if (r = this.tokenizer.code(e)) {
          e = e.substring(r.raw.length), s = t[t.length - 1], s && (s.type === "paragraph" || s.type === "text") ? (s.raw += `
` + r.raw, s.text += `
` + r.text, this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(r);
          continue;
        }
        if (r = this.tokenizer.fences(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.heading(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.hr(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.blockquote(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.list(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.html(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.def(e)) {
          e = e.substring(r.raw.length), s = t[t.length - 1], s && (s.type === "paragraph" || s.type === "text") ? (s.raw += `
` + r.raw, s.text += `
` + r.raw, this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : this.tokens.links[r.tag] || (this.tokens.links[r.tag] = {
            href: r.href,
            title: r.title
          });
          continue;
        }
        if (r = this.tokenizer.table(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (r = this.tokenizer.lheading(e)) {
          e = e.substring(r.raw.length), t.push(r);
          continue;
        }
        if (o = e, this.options.extensions && this.options.extensions.startBlock) {
          let a = 1 / 0;
          const l = e.slice(1);
          let c;
          this.options.extensions.startBlock.forEach((u) => {
            c = u.call({ lexer: this }, l), typeof c == "number" && c >= 0 && (a = Math.min(a, c));
          }), a < 1 / 0 && a >= 0 && (o = e.substring(0, a + 1));
        }
        if (this.state.top && (r = this.tokenizer.paragraph(o))) {
          s = t[t.length - 1], n && (s == null ? void 0 : s.type) === "paragraph" ? (s.raw += `
` + r.raw, s.text += `
` + r.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(r), n = o.length !== e.length, e = e.substring(r.raw.length);
          continue;
        }
        if (r = this.tokenizer.text(e)) {
          e = e.substring(r.raw.length), s = t[t.length - 1], s && s.type === "text" ? (s.raw += `
` + r.raw, s.text += `
` + r.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(r);
          continue;
        }
        if (e) {
          const a = "Infinite loop on byte: " + e.charCodeAt(0);
          if (this.options.silent) {
            console.error(a);
            break;
          } else
            throw new Error(a);
        }
      }
    return this.state.top = !0, t;
  }
  inline(e, t = []) {
    return this.inlineQueue.push({ src: e, tokens: t }), t;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(e, t = []) {
    let n, r, s, o = e, a, l, c;
    if (this.tokens.links) {
      const u = Object.keys(this.tokens.links);
      if (u.length > 0)
        for (; (a = this.tokenizer.rules.inline.reflinkSearch.exec(o)) != null; )
          u.includes(a[0].slice(a[0].lastIndexOf("[") + 1, -1)) && (o = o.slice(0, a.index) + "[" + "a".repeat(a[0].length - 2) + "]" + o.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
    }
    for (; (a = this.tokenizer.rules.inline.blockSkip.exec(o)) != null; )
      o = o.slice(0, a.index) + "[" + "a".repeat(a[0].length - 2) + "]" + o.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    for (; (a = this.tokenizer.rules.inline.anyPunctuation.exec(o)) != null; )
      o = o.slice(0, a.index) + "++" + o.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    for (; e; )
      if (l || (c = ""), l = !1, !(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((u) => (n = u.call({ lexer: this }, e, t)) ? (e = e.substring(n.raw.length), t.push(n), !0) : !1))) {
        if (n = this.tokenizer.escape(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.tag(e)) {
          e = e.substring(n.raw.length), r = t[t.length - 1], r && n.type === "text" && r.type === "text" ? (r.raw += n.raw, r.text += n.text) : t.push(n);
          continue;
        }
        if (n = this.tokenizer.link(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.reflink(e, this.tokens.links)) {
          e = e.substring(n.raw.length), r = t[t.length - 1], r && n.type === "text" && r.type === "text" ? (r.raw += n.raw, r.text += n.text) : t.push(n);
          continue;
        }
        if (n = this.tokenizer.emStrong(e, o, c)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.codespan(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.br(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.del(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (n = this.tokenizer.autolink(e)) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (!this.state.inLink && (n = this.tokenizer.url(e))) {
          e = e.substring(n.raw.length), t.push(n);
          continue;
        }
        if (s = e, this.options.extensions && this.options.extensions.startInline) {
          let u = 1 / 0;
          const d = e.slice(1);
          let f;
          this.options.extensions.startInline.forEach((p) => {
            f = p.call({ lexer: this }, d), typeof f == "number" && f >= 0 && (u = Math.min(u, f));
          }), u < 1 / 0 && u >= 0 && (s = e.substring(0, u + 1));
        }
        if (n = this.tokenizer.inlineText(s)) {
          e = e.substring(n.raw.length), n.raw.slice(-1) !== "_" && (c = n.raw.slice(-1)), l = !0, r = t[t.length - 1], r && r.type === "text" ? (r.raw += n.raw, r.text += n.text) : t.push(n);
          continue;
        }
        if (e) {
          const u = "Infinite loop on byte: " + e.charCodeAt(0);
          if (this.options.silent) {
            console.error(u);
            break;
          } else
            throw new Error(u);
        }
      }
    return t;
  }
}
class sm {
  // set by the parser
  constructor(e) {
    Ot(this, "options");
    Ot(this, "parser");
    this.options = e || Jl;
  }
  space(e) {
    return "";
  }
  code({ text: e, lang: t, escaped: n }) {
    var o;
    const r = (o = (t || "").match(/^\S*/)) == null ? void 0 : o[0], s = e.replace(/\n$/, "") + `
`;
    return r ? '<pre><code class="language-' + Rn(r) + '">' + (n ? s : Rn(s, !0)) + `</code></pre>
` : "<pre><code>" + (n ? s : Rn(s, !0)) + `</code></pre>
`;
  }
  blockquote({ tokens: e }) {
    return `<blockquote>
${this.parser.parse(e)}</blockquote>
`;
  }
  html({ text: e }) {
    return e;
  }
  heading({ tokens: e, depth: t }) {
    return `<h${t}>${this.parser.parseInline(e)}</h${t}>
`;
  }
  hr(e) {
    return `<hr>
`;
  }
  list(e) {
    const t = e.ordered, n = e.start;
    let r = "";
    for (let a = 0; a < e.items.length; a++) {
      const l = e.items[a];
      r += this.listitem(l);
    }
    const s = t ? "ol" : "ul", o = t && n !== 1 ? ' start="' + n + '"' : "";
    return "<" + s + o + `>
` + r + "</" + s + `>
`;
  }
  listitem(e) {
    let t = "";
    if (e.task) {
      const n = this.checkbox({ checked: !!e.checked });
      e.loose ? e.tokens.length > 0 && e.tokens[0].type === "paragraph" ? (e.tokens[0].text = n + " " + e.tokens[0].text, e.tokens[0].tokens && e.tokens[0].tokens.length > 0 && e.tokens[0].tokens[0].type === "text" && (e.tokens[0].tokens[0].text = n + " " + e.tokens[0].tokens[0].text)) : e.tokens.unshift({
        type: "text",
        raw: n + " ",
        text: n + " "
      }) : t += n + " ";
    }
    return t += this.parser.parse(e.tokens, !!e.loose), `<li>${t}</li>
`;
  }
  checkbox({ checked: e }) {
    return "<input " + (e ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph({ tokens: e }) {
    return `<p>${this.parser.parseInline(e)}</p>
`;
  }
  table(e) {
    let t = "", n = "";
    for (let s = 0; s < e.header.length; s++)
      n += this.tablecell(e.header[s]);
    t += this.tablerow({ text: n });
    let r = "";
    for (let s = 0; s < e.rows.length; s++) {
      const o = e.rows[s];
      n = "";
      for (let a = 0; a < o.length; a++)
        n += this.tablecell(o[a]);
      r += this.tablerow({ text: n });
    }
    return r && (r = `<tbody>${r}</tbody>`), `<table>
<thead>
` + t + `</thead>
` + r + `</table>
`;
  }
  tablerow({ text: e }) {
    return `<tr>
${e}</tr>
`;
  }
  tablecell(e) {
    const t = this.parser.parseInline(e.tokens), n = e.header ? "th" : "td";
    return (e.align ? `<${n} align="${e.align}">` : `<${n}>`) + t + `</${n}>
`;
  }
  /**
   * span level renderer
   */
  strong({ tokens: e }) {
    return `<strong>${this.parser.parseInline(e)}</strong>`;
  }
  em({ tokens: e }) {
    return `<em>${this.parser.parseInline(e)}</em>`;
  }
  codespan({ text: e }) {
    return `<code>${e}</code>`;
  }
  br(e) {
    return "<br>";
  }
  del({ tokens: e }) {
    return `<del>${this.parser.parseInline(e)}</del>`;
  }
  link({ href: e, title: t, tokens: n }) {
    const r = this.parser.parseInline(n), s = Z2(e);
    if (s === null)
      return r;
    e = s;
    let o = '<a href="' + e + '"';
    return t && (o += ' title="' + t + '"'), o += ">" + r + "</a>", o;
  }
  image({ href: e, title: t, text: n }) {
    const r = Z2(e);
    if (r === null)
      return n;
    e = r;
    let s = `<img src="${e}" alt="${n}"`;
    return t && (s += ` title="${t}"`), s += ">", s;
  }
  text(e) {
    return "tokens" in e && e.tokens ? this.parser.parseInline(e.tokens) : e.text;
  }
}
class tS {
  // no need for block level renderers
  strong({ text: e }) {
    return e;
  }
  em({ text: e }) {
    return e;
  }
  codespan({ text: e }) {
    return e;
  }
  del({ text: e }) {
    return e;
  }
  html({ text: e }) {
    return e;
  }
  text({ text: e }) {
    return e;
  }
  link({ text: e }) {
    return "" + e;
  }
  image({ text: e }) {
    return "" + e;
  }
  br() {
    return "";
  }
}
class Zr {
  constructor(e) {
    Ot(this, "options");
    Ot(this, "renderer");
    Ot(this, "textRenderer");
    this.options = e || Jl, this.options.renderer = this.options.renderer || new sm(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new tS();
  }
  /**
   * Static Parse Method
   */
  static parse(e, t) {
    return new Zr(t).parse(e);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(e, t) {
    return new Zr(t).parseInline(e);
  }
  /**
   * Parse Loop
   */
  parse(e, t = !0) {
    let n = "";
    for (let r = 0; r < e.length; r++) {
      const s = e[r];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[s.type]) {
        const a = s, l = this.options.extensions.renderers[a.type].call({ parser: this }, a);
        if (l !== !1 || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(a.type)) {
          n += l || "";
          continue;
        }
      }
      const o = s;
      switch (o.type) {
        case "space": {
          n += this.renderer.space(o);
          continue;
        }
        case "hr": {
          n += this.renderer.hr(o);
          continue;
        }
        case "heading": {
          n += this.renderer.heading(o);
          continue;
        }
        case "code": {
          n += this.renderer.code(o);
          continue;
        }
        case "table": {
          n += this.renderer.table(o);
          continue;
        }
        case "blockquote": {
          n += this.renderer.blockquote(o);
          continue;
        }
        case "list": {
          n += this.renderer.list(o);
          continue;
        }
        case "html": {
          n += this.renderer.html(o);
          continue;
        }
        case "paragraph": {
          n += this.renderer.paragraph(o);
          continue;
        }
        case "text": {
          let a = o, l = this.renderer.text(a);
          for (; r + 1 < e.length && e[r + 1].type === "text"; )
            a = e[++r], l += `
` + this.renderer.text(a);
          t ? n += this.renderer.paragraph({
            type: "paragraph",
            raw: l,
            text: l,
            tokens: [{ type: "text", raw: l, text: l }]
          }) : n += l;
          continue;
        }
        default: {
          const a = 'Token with "' + o.type + '" type was not found.';
          if (this.options.silent)
            return console.error(a), "";
          throw new Error(a);
        }
      }
    }
    return n;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(e, t) {
    t = t || this.renderer;
    let n = "";
    for (let r = 0; r < e.length; r++) {
      const s = e[r];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[s.type]) {
        const a = this.options.extensions.renderers[s.type].call({ parser: this }, s);
        if (a !== !1 || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(s.type)) {
          n += a || "";
          continue;
        }
      }
      const o = s;
      switch (o.type) {
        case "escape": {
          n += t.text(o);
          break;
        }
        case "html": {
          n += t.html(o);
          break;
        }
        case "link": {
          n += t.link(o);
          break;
        }
        case "image": {
          n += t.image(o);
          break;
        }
        case "strong": {
          n += t.strong(o);
          break;
        }
        case "em": {
          n += t.em(o);
          break;
        }
        case "codespan": {
          n += t.codespan(o);
          break;
        }
        case "br": {
          n += t.br(o);
          break;
        }
        case "del": {
          n += t.del(o);
          break;
        }
        case "text": {
          n += t.text(o);
          break;
        }
        default: {
          const a = 'Token with "' + o.type + '" type was not found.';
          if (this.options.silent)
            return console.error(a), "";
          throw new Error(a);
        }
      }
    }
    return n;
  }
}
class ah {
  constructor(e) {
    Ot(this, "options");
    this.options = e || Jl;
  }
  /**
   * Process markdown before marked
   */
  preprocess(e) {
    return e;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(e) {
    return e;
  }
  /**
   * Process all tokens before walk tokens
   */
  processAllTokens(e) {
    return e;
  }
}
Ot(ah, "passThroughHooks", /* @__PURE__ */ new Set([
  "preprocess",
  "postprocess",
  "processAllTokens"
]));
class J7 {
  constructor(...e) {
    Ot(this, "defaults", KE());
    Ot(this, "options", this.setOptions);
    Ot(this, "parse", this.parseMarkdown(Xr.lex, Zr.parse));
    Ot(this, "parseInline", this.parseMarkdown(Xr.lexInline, Zr.parseInline));
    Ot(this, "Parser", Zr);
    Ot(this, "Renderer", sm);
    Ot(this, "TextRenderer", tS);
    Ot(this, "Lexer", Xr);
    Ot(this, "Tokenizer", nm);
    Ot(this, "Hooks", ah);
    this.use(...e);
  }
  /**
   * Run callback for every token
   */
  walkTokens(e, t) {
    var r, s;
    let n = [];
    for (const o of e)
      switch (n = n.concat(t.call(this, o)), o.type) {
        case "table": {
          const a = o;
          for (const l of a.header)
            n = n.concat(this.walkTokens(l.tokens, t));
          for (const l of a.rows)
            for (const c of l)
              n = n.concat(this.walkTokens(c.tokens, t));
          break;
        }
        case "list": {
          const a = o;
          n = n.concat(this.walkTokens(a.items, t));
          break;
        }
        default: {
          const a = o;
          (s = (r = this.defaults.extensions) == null ? void 0 : r.childTokens) != null && s[a.type] ? this.defaults.extensions.childTokens[a.type].forEach((l) => {
            const c = a[l].flat(1 / 0);
            n = n.concat(this.walkTokens(c, t));
          }) : a.tokens && (n = n.concat(this.walkTokens(a.tokens, t)));
        }
      }
    return n;
  }
  use(...e) {
    const t = this.defaults.extensions || { renderers: {}, childTokens: {} };
    return e.forEach((n) => {
      const r = { ...n };
      if (r.async = this.defaults.async || r.async || !1, n.extensions && (n.extensions.forEach((s) => {
        if (!s.name)
          throw new Error("extension name required");
        if ("renderer" in s) {
          const o = t.renderers[s.name];
          o ? t.renderers[s.name] = function(...a) {
            let l = s.renderer.apply(this, a);
            return l === !1 && (l = o.apply(this, a)), l;
          } : t.renderers[s.name] = s.renderer;
        }
        if ("tokenizer" in s) {
          if (!s.level || s.level !== "block" && s.level !== "inline")
            throw new Error("extension level must be 'block' or 'inline'");
          const o = t[s.level];
          o ? o.unshift(s.tokenizer) : t[s.level] = [s.tokenizer], s.start && (s.level === "block" ? t.startBlock ? t.startBlock.push(s.start) : t.startBlock = [s.start] : s.level === "inline" && (t.startInline ? t.startInline.push(s.start) : t.startInline = [s.start]));
        }
        "childTokens" in s && s.childTokens && (t.childTokens[s.name] = s.childTokens);
      }), r.extensions = t), n.renderer) {
        const s = this.defaults.renderer || new sm(this.defaults);
        for (const o in n.renderer) {
          if (!(o in s))
            throw new Error(`renderer '${o}' does not exist`);
          if (["options", "parser"].includes(o))
            continue;
          const a = o, l = n.renderer[a], c = s[a];
          s[a] = (...u) => {
            let d = l.apply(s, u);
            return d === !1 && (d = c.apply(s, u)), d || "";
          };
        }
        r.renderer = s;
      }
      if (n.tokenizer) {
        const s = this.defaults.tokenizer || new nm(this.defaults);
        for (const o in n.tokenizer) {
          if (!(o in s))
            throw new Error(`tokenizer '${o}' does not exist`);
          if (["options", "rules", "lexer"].includes(o))
            continue;
          const a = o, l = n.tokenizer[a], c = s[a];
          s[a] = (...u) => {
            let d = l.apply(s, u);
            return d === !1 && (d = c.apply(s, u)), d;
          };
        }
        r.tokenizer = s;
      }
      if (n.hooks) {
        const s = this.defaults.hooks || new ah();
        for (const o in n.hooks) {
          if (!(o in s))
            throw new Error(`hook '${o}' does not exist`);
          if (o === "options")
            continue;
          const a = o, l = n.hooks[a], c = s[a];
          ah.passThroughHooks.has(o) ? s[a] = (u) => {
            if (this.defaults.async)
              return Promise.resolve(l.call(s, u)).then((f) => c.call(s, f));
            const d = l.call(s, u);
            return c.call(s, d);
          } : s[a] = (...u) => {
            let d = l.apply(s, u);
            return d === !1 && (d = c.apply(s, u)), d;
          };
        }
        r.hooks = s;
      }
      if (n.walkTokens) {
        const s = this.defaults.walkTokens, o = n.walkTokens;
        r.walkTokens = function(a) {
          let l = [];
          return l.push(o.call(this, a)), s && (l = l.concat(s.call(this, a))), l;
        };
      }
      this.defaults = { ...this.defaults, ...r };
    }), this;
  }
  setOptions(e) {
    return this.defaults = { ...this.defaults, ...e }, this;
  }
  lexer(e, t) {
    return Xr.lex(e, t ?? this.defaults);
  }
  parser(e, t) {
    return Zr.parse(e, t ?? this.defaults);
  }
  parseMarkdown(e, t) {
    return (r, s) => {
      const o = { ...s }, a = { ...this.defaults, ...o }, l = this.onError(!!a.silent, !!a.async);
      if (this.defaults.async === !0 && o.async === !1)
        return l(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));
      if (typeof r > "u" || r === null)
        return l(new Error("marked(): input parameter is undefined or null"));
      if (typeof r != "string")
        return l(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(r) + ", string expected"));
      if (a.hooks && (a.hooks.options = a), a.async)
        return Promise.resolve(a.hooks ? a.hooks.preprocess(r) : r).then((c) => e(c, a)).then((c) => a.hooks ? a.hooks.processAllTokens(c) : c).then((c) => a.walkTokens ? Promise.all(this.walkTokens(c, a.walkTokens)).then(() => c) : c).then((c) => t(c, a)).then((c) => a.hooks ? a.hooks.postprocess(c) : c).catch(l);
      try {
        a.hooks && (r = a.hooks.preprocess(r));
        let c = e(r, a);
        a.hooks && (c = a.hooks.processAllTokens(c)), a.walkTokens && this.walkTokens(c, a.walkTokens);
        let u = t(c, a);
        return a.hooks && (u = a.hooks.postprocess(u)), u;
      } catch (c) {
        return l(c);
      }
    };
  }
  onError(e, t) {
    return (n) => {
      if (n.message += `
Please report this to https://github.com/markedjs/marked.`, e) {
        const r = "<p>An error occurred:</p><pre>" + Rn(n.message + "", !0) + "</pre>";
        return t ? Promise.resolve(r) : r;
      }
      if (t)
        return Promise.reject(n);
      throw n;
    };
  }
}
const Ul = new J7();
function kt(i, e) {
  return Ul.parse(i, e);
}
kt.options = kt.setOptions = function(i) {
  return Ul.setOptions(i), kt.defaults = Ul.defaults, DP(kt.defaults), kt;
};
kt.getDefaults = KE;
kt.defaults = Jl;
kt.use = function(...i) {
  return Ul.use(...i), kt.defaults = Ul.defaults, DP(kt.defaults), kt;
};
kt.walkTokens = function(i, e) {
  return Ul.walkTokens(i, e);
};
kt.parseInline = Ul.parseInline;
kt.Parser = Zr;
kt.parser = Zr.parse;
kt.Renderer = sm;
kt.TextRenderer = tS;
kt.Lexer = Xr;
kt.lexer = Xr.lex;
kt.Tokenizer = nm;
kt.Hooks = ah;
kt.parse = kt;
kt.options;
kt.setOptions;
kt.use;
kt.walkTokens;
kt.parseInline;
Zr.parse;
Xr.lex;
function Y7(i) {
  return JSON.stringify(i, X7);
}
function MP(i) {
  let e = JSON.parse(i);
  return e = Wi(e), e;
}
function X7(i, e) {
  return e instanceof RegExp ? {
    $mid: rt.Regexp,
    source: e.source,
    flags: e.flags
  } : e;
}
function Wi(i, e = 0) {
  if (!i || e > 200)
    return i;
  if (typeof i == "object") {
    switch (i.$mid) {
      case rt.Uri:
        return x.revive(i);
      case rt.Regexp:
        return new RegExp(i.source, i.flags);
      case rt.Date:
        return new Date(i.source);
    }
    if (i instanceof he || i instanceof Uint8Array)
      return i;
    if (Array.isArray(i))
      for (let t = 0; t < i.length; ++t)
        i[t] = Wi(i[t], e + 1);
    else
      for (const t in i)
        Object.hasOwnProperty.call(i, t) && (i[t] = Wi(i[t], e + 1));
  }
  return i;
}
const Dr = Object.freeze({
  text: "text/plain",
  binary: "application/octet-stream",
  unknown: "application/unknown",
  markdown: "text/markdown",
  latex: "text/latex",
  uriList: "text/uri-list",
  html: "text/html"
}), Z7 = /^(.+)\/(.+?)(;.+)?$/;
function OP(i, e) {
  const t = Z7.exec(i);
  return t ? `${t[1].toLowerCase()}/${t[2].toLowerCase()}${t[3] ?? ""}` : e ? void 0 : i;
}
const qi = Symbol("unset");
class e3 {
  constructor() {
    this.root = new ew(), this._size = 0;
  }
  get size() {
    return this._size;
  }
  get nodes() {
    var e;
    return ((e = this.root.children) == null ? void 0 : e.values()) || Bi.empty();
  }
  get entries() {
    var e;
    return ((e = this.root.children) == null ? void 0 : e.entries()) || Bi.empty();
  }
  insert(e, t, n) {
    this.opNode(e, (r) => r._value = t, n);
  }
  mutate(e, t) {
    this.opNode(e, (n) => n._value = t(n._value === qi ? void 0 : n._value));
  }
  mutatePath(e, t) {
    this.opNode(e, () => {
    }, (n) => t(n));
  }
  delete(e) {
    var s;
    const t = this.getPathToKey(e);
    if (!t)
      return;
    let n = t.length - 1;
    const r = t[n].node._value;
    if (r !== qi) {
      for (this._size--, t[n].node._value = qi; n > 0; n--) {
        const { node: o, part: a } = t[n];
        if ((s = o.children) != null && s.size || o._value !== qi)
          break;
        t[n - 1].node.children.delete(a);
      }
      return r;
    }
  }
  *deleteRecursive(e) {
    const t = this.getPathToKey(e);
    if (!t)
      return;
    const n = t[t.length - 1].node;
    for (let r = t.length - 1; r > 0; r--) {
      const s = t[r - 1];
      if (s.node.children.delete(t[r].part), s.node.children.size > 0 || s.node._value !== qi)
        break;
    }
    for (const r of nD(n))
      r._value !== qi && (this._size--, yield r._value);
    n === this.root && (this.root._value = qi, this.root.children = void 0);
  }
  find(e) {
    var n;
    let t = this.root;
    for (const r of e) {
      const s = (n = t.children) == null ? void 0 : n.get(r);
      if (!s)
        return;
      t = s;
    }
    return t._value === qi ? void 0 : t._value;
  }
  hasKeyOrParent(e) {
    var n;
    let t = this.root;
    for (const r of e) {
      const s = (n = t.children) == null ? void 0 : n.get(r);
      if (!s)
        return !1;
      if (s._value !== qi)
        return !0;
      t = s;
    }
    return !1;
  }
  hasKeyOrChildren(e) {
    var n;
    let t = this.root;
    for (const r of e) {
      const s = (n = t.children) == null ? void 0 : n.get(r);
      if (!s)
        return !1;
      t = s;
    }
    return !0;
  }
  hasKey(e) {
    var n;
    let t = this.root;
    for (const r of e) {
      const s = (n = t.children) == null ? void 0 : n.get(r);
      if (!s)
        return !1;
      t = s;
    }
    return t._value !== qi;
  }
  getPathToKey(e) {
    var r;
    const t = [{ part: "", node: this.root }];
    let n = 0;
    for (const s of e) {
      const o = (r = t[n].node.children) == null ? void 0 : r.get(s);
      if (!o)
        return;
      t.push({ part: s, node: o }), n++;
    }
    return t;
  }
  opNode(e, t, n) {
    let r = this.root;
    for (const a of e) {
      if (r.children)
        if (r.children.has(a))
          r = r.children.get(a);
        else {
          const l = new ew();
          r.children.set(a, l), r = l;
        }
      else {
        const l = new ew();
        r.children = /* @__PURE__ */ new Map([[a, l]]), r = l;
      }
      n == null || n(r);
    }
    const s = r._value === qi ? 0 : 1;
    t(r);
    const o = r._value === qi ? 0 : 1;
    this._size += o - s;
  }
  *values() {
    for (const { _value: e } of nD(this.root))
      e !== qi && (yield e);
  }
}
function* nD(i) {
  const e = [i];
  for (; e.length > 0; ) {
    const t = e.pop();
    if (yield t, t.children)
      for (const n of t.children.values())
        e.push(n);
  }
}
class ew {
  constructor() {
    this._value = qi;
  }
  get value() {
    return this._value === qi ? void 0 : this._value;
  }
  set value(e) {
    this._value = e === void 0 ? qi : e;
  }
}
var ul;
(function(i) {
  i[i.Auto = 1] = "Auto", i[i.Hidden = 2] = "Hidden", i[i.Visible = 3] = "Visible";
})(ul || (ul = {}));
const rD = {
  bracketPairColorizationOptions: {
    enabled: !0,
    independentColorPoolPerBracketType: !1
  }
}, FP = "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?";
function t3(i = "") {
  let e = "(-?\\d*\\.\\d\\w*)|([^";
  for (const t of FP)
    i.indexOf(t) >= 0 || (e += "\\" + t);
  return e += "\\s]+)", new RegExp(e, "g");
}
const i3 = t3();
function UP(i) {
  let e = i3;
  if (i && i instanceof RegExp)
    if (i.global)
      e = i;
    else {
      let t = "g";
      i.ignoreCase && (t += "i"), i.multiline && (t += "m"), i.unicode && (t += "u"), e = new RegExp(i.source, t);
    }
  return e.lastIndex = 0, e;
}
const $P = new ea();
$P.unshift({
  maxLen: 1e3,
  windowSize: 15,
  timeBudget: 150
});
function HP(i, e, t, n, r) {
  if (e = UP(e), r || (r = Bi.first($P)), t.length > r.maxLen) {
    let c = i - r.maxLen / 2;
    return c < 0 ? c = 0 : n += c, t = t.substring(c, i + r.maxLen / 2), HP(i, e, t, n, r);
  }
  const s = Date.now(), o = i - 1 - n;
  let a = -1, l = null;
  for (let c = 1; !(Date.now() - s >= r.timeBudget); c++) {
    const u = o - r.windowSize * c;
    e.lastIndex = Math.max(0, u);
    const d = n3(e, t, o, a);
    if (!d && l || (l = d, u <= 0))
      break;
    a = u;
  }
  if (l) {
    const c = {
      word: l[0],
      startColumn: n + 1 + l.index,
      endColumn: n + 1 + l.index + l[0].length
    };
    return e.lastIndex = 0, c;
  }
  return null;
}
function n3(i, e, t, n) {
  let r;
  for (; r = i.exec(e); ) {
    const s = r.index || 0;
    if (s <= t && i.lastIndex >= t)
      return r;
    if (n > 0 && s > n)
      return null;
  }
  return null;
}
var ne;
(function(i) {
  i[i.LParen = 0] = "LParen", i[i.RParen = 1] = "RParen", i[i.Neg = 2] = "Neg", i[i.Eq = 3] = "Eq", i[i.NotEq = 4] = "NotEq", i[i.Lt = 5] = "Lt", i[i.LtEq = 6] = "LtEq", i[i.Gt = 7] = "Gt", i[i.GtEq = 8] = "GtEq", i[i.RegexOp = 9] = "RegexOp", i[i.RegexStr = 10] = "RegexStr", i[i.True = 11] = "True", i[i.False = 12] = "False", i[i.In = 13] = "In", i[i.Not = 14] = "Not", i[i.And = 15] = "And", i[i.Or = 16] = "Or", i[i.Str = 17] = "Str", i[i.QuotedStr = 18] = "QuotedStr", i[i.Error = 19] = "Error", i[i.EOF = 20] = "EOF";
})(ne || (ne = {}));
function tw(...i) {
  switch (i.length) {
    case 1:
      return h(1766, "Did you mean {0}?", i[0]);
    case 2:
      return h(1767, "Did you mean {0} or {1}?", i[0], i[1]);
    case 3:
      return h(1768, "Did you mean {0}, {1} or {2}?", i[0], i[1], i[2]);
    default:
      return;
  }
}
const r3 = h(1769, "Did you forget to open or close the quote?"), s3 = h(
  1770,
  "Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\/'."
), Wc = class Wc {
  constructor() {
    this._input = "", this._start = 0, this._current = 0, this._tokens = [], this._errors = [], this.stringRe = /[a-zA-Z0-9_<>\-\./\\:\*\?\+\[\]\^,#@;"%\$\p{L}-]+/uy;
  }
  static getLexeme(e) {
    switch (e.type) {
      case ne.LParen:
        return "(";
      case ne.RParen:
        return ")";
      case ne.Neg:
        return "!";
      case ne.Eq:
        return e.isTripleEq ? "===" : "==";
      case ne.NotEq:
        return e.isTripleEq ? "!==" : "!=";
      case ne.Lt:
        return "<";
      case ne.LtEq:
        return "<=";
      case ne.Gt:
        return ">=";
      case ne.GtEq:
        return ">=";
      case ne.RegexOp:
        return "=~";
      case ne.RegexStr:
        return e.lexeme;
      case ne.True:
        return "true";
      case ne.False:
        return "false";
      case ne.In:
        return "in";
      case ne.Not:
        return "not";
      case ne.And:
        return "&&";
      case ne.Or:
        return "||";
      case ne.Str:
        return e.lexeme;
      case ne.QuotedStr:
        return e.lexeme;
      case ne.Error:
        return e.lexeme;
      case ne.EOF:
        return "EOF";
      default:
        throw TE(`unhandled token type: ${JSON.stringify(e)}; have you forgotten to add a case?`);
    }
  }
  get errors() {
    return this._errors;
  }
  reset(e) {
    return this._input = e, this._start = 0, this._current = 0, this._tokens = [], this._errors = [], this;
  }
  scan() {
    for (; !this._isAtEnd(); )
      switch (this._start = this._current, this._advance()) {
        case L.OpenParen:
          this._addToken(ne.LParen);
          break;
        case L.CloseParen:
          this._addToken(ne.RParen);
          break;
        case L.ExclamationMark:
          if (this._match(L.Equals)) {
            const t = this._match(L.Equals);
            this._tokens.push({ type: ne.NotEq, offset: this._start, isTripleEq: t });
          } else
            this._addToken(ne.Neg);
          break;
        case L.SingleQuote:
          this._quotedString();
          break;
        case L.Slash:
          this._regex();
          break;
        case L.Equals:
          if (this._match(L.Equals)) {
            const t = this._match(L.Equals);
            this._tokens.push({ type: ne.Eq, offset: this._start, isTripleEq: t });
          } else this._match(L.Tilde) ? this._addToken(ne.RegexOp) : this._error(tw("==", "=~"));
          break;
        case L.LessThan:
          this._addToken(this._match(L.Equals) ? ne.LtEq : ne.Lt);
          break;
        case L.GreaterThan:
          this._addToken(this._match(L.Equals) ? ne.GtEq : ne.Gt);
          break;
        case L.Ampersand:
          this._match(L.Ampersand) ? this._addToken(ne.And) : this._error(tw("&&"));
          break;
        case L.Pipe:
          this._match(L.Pipe) ? this._addToken(ne.Or) : this._error(tw("||"));
          break;
        case L.Space:
        case L.CarriageReturn:
        case L.Tab:
        case L.LineFeed:
        case L.NoBreakSpace:
          break;
        default:
          this._string();
      }
    return this._start = this._current, this._addToken(ne.EOF), Array.from(this._tokens);
  }
  _match(e) {
    return this._isAtEnd() || this._input.charCodeAt(this._current) !== e ? !1 : (this._current++, !0);
  }
  _advance() {
    return this._input.charCodeAt(this._current++);
  }
  _peek() {
    return this._isAtEnd() ? L.Null : this._input.charCodeAt(this._current);
  }
  _addToken(e) {
    this._tokens.push({ type: e, offset: this._start });
  }
  _error(e) {
    const t = this._start, n = this._input.substring(this._start, this._current), r = { type: ne.Error, offset: this._start, lexeme: n };
    this._errors.push({ offset: t, lexeme: n, additionalInfo: e }), this._tokens.push(r);
  }
  _string() {
    this.stringRe.lastIndex = this._start;
    const e = this.stringRe.exec(this._input);
    if (e) {
      this._current = this._start + e[0].length;
      const t = this._input.substring(this._start, this._current), n = Wc._keywords.get(t);
      n ? this._addToken(n) : this._tokens.push({ type: ne.Str, lexeme: t, offset: this._start });
    }
  }
  _quotedString() {
    for (; this._peek() !== L.SingleQuote && !this._isAtEnd(); )
      this._advance();
    if (this._isAtEnd()) {
      this._error(r3);
      return;
    }
    this._advance(), this._tokens.push({ type: ne.QuotedStr, lexeme: this._input.substring(this._start + 1, this._current - 1), offset: this._start + 1 });
  }
  _regex() {
    let e = this._current, t = !1, n = !1;
    for (; ; ) {
      if (e >= this._input.length) {
        this._current = e, this._error(s3);
        return;
      }
      const s = this._input.charCodeAt(e);
      if (t)
        t = !1;
      else if (s === L.Slash && !n) {
        e++;
        break;
      } else s === L.OpenSquareBracket ? n = !0 : s === L.Backslash ? t = !0 : s === L.CloseSquareBracket && (n = !1);
      e++;
    }
    for (; e < this._input.length && Wc._regexFlags.has(this._input.charCodeAt(e)); )
      e++;
    this._current = e;
    const r = this._input.substring(this._start, this._current);
    this._tokens.push({ type: ne.RegexStr, lexeme: r, offset: this._start });
  }
  _isAtEnd() {
    return this._current >= this._input.length;
  }
};
Wc._regexFlags = new Set(["i", "g", "s", "m", "y", "u"].map((e) => e.charCodeAt(0))), Wc._keywords = /* @__PURE__ */ new Map([
  ["not", ne.Not],
  ["in", ne.In],
  ["false", ne.False],
  ["true", ne.True]
]);
let wa = Wc;
const ki = /* @__PURE__ */ new Map();
ki.set("false", !1);
ki.set("true", !0);
ki.set("isMac", Un);
ki.set("isLinux", jo);
ki.set("isWindows", Yi);
ki.set("isWeb", xp);
ki.set("isMacNative", Un && !xp);
ki.set("isEdge", BT);
ki.set("isFirefox", _8);
ki.set("isChrome", FE);
ki.set("isSafari", v8);
const o3 = Object.prototype.hasOwnProperty;
var $t;
(function(i) {
  i[i.False = 0] = "False", i[i.True = 1] = "True", i[i.Defined = 2] = "Defined", i[i.Not = 3] = "Not", i[i.Equals = 4] = "Equals", i[i.NotEquals = 5] = "NotEquals", i[i.And = 6] = "And", i[i.Regex = 7] = "Regex", i[i.NotRegex = 8] = "NotRegex", i[i.Or = 9] = "Or", i[i.In = 10] = "In", i[i.NotIn = 11] = "NotIn", i[i.Greater = 12] = "Greater", i[i.GreaterEquals = 13] = "GreaterEquals", i[i.Smaller = 14] = "Smaller", i[i.SmallerEquals = 15] = "SmallerEquals";
})($t || ($t = {}));
const a3 = {
  regexParsingWithErrorRecovery: !0
}, l3 = h(1746, "Empty context key expression"), c3 = h(
  1747,
  "Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively."
), u3 = h(1748, "'in' after 'not'."), sD = h(1749, "closing parenthesis ')'"), d3 = h(1750, "Unexpected token"), h3 = h(1751, "Did you forget to put && or || before the token?"), f3 = h(1752, "Unexpected end of expression"), p3 = h(1753, "Did you forget to put a context key?"), ka = class ka {
  get lexingErrors() {
    return this._scanner.errors;
  }
  get parsingErrors() {
    return this._parsingErrors;
  }
  constructor(e = a3) {
    this._config = e, this._scanner = new wa(), this._tokens = [], this._current = 0, this._parsingErrors = [], this._flagsGYRe = /g|y/g;
  }
  parse(e) {
    if (e === "") {
      this._parsingErrors.push({ message: l3, offset: 0, lexeme: "", additionalInfo: c3 });
      return;
    }
    this._tokens = this._scanner.reset(e).scan(), this._current = 0, this._parsingErrors = [];
    try {
      const t = this._expr();
      if (!this._isAtEnd()) {
        const n = this._peek(), r = n.type === ne.Str ? h3 : void 0;
        throw this._parsingErrors.push({ message: d3, offset: n.offset, lexeme: wa.getLexeme(n), additionalInfo: r }), ka._parseError;
      }
      return t;
    } catch (t) {
      if (t !== ka._parseError)
        throw t;
      return;
    }
  }
  _expr() {
    return this._or();
  }
  _or() {
    const e = [this._and()];
    for (; this._matchOne(ne.Or); ) {
      const t = this._and();
      e.push(t);
    }
    return e.length === 1 ? e[0] : Jt.or(...e);
  }
  _and() {
    const e = [this._term()];
    for (; this._matchOne(ne.And); ) {
      const t = this._term();
      e.push(t);
    }
    return e.length === 1 ? e[0] : Jt.and(...e);
  }
  _term() {
    if (this._matchOne(ne.Neg)) {
      const e = this._peek();
      switch (e.type) {
        case ne.True:
          return this._advance(), Vi.INSTANCE;
        case ne.False:
          return this._advance(), Xi.INSTANCE;
        case ne.LParen: {
          this._advance();
          const t = this._expr();
          return this._consume(ne.RParen, sD), t == null ? void 0 : t.negate();
        }
        case ne.Str:
          return this._advance(), Xl.create(e.lexeme);
        default:
          throw this._errExpectedButGot("KEY | true | false | '(' expression ')'", e);
      }
    }
    return this._primary();
  }
  _primary() {
    const e = this._peek();
    switch (e.type) {
      case ne.True:
        return this._advance(), Jt.true();
      case ne.False:
        return this._advance(), Jt.false();
      case ne.LParen: {
        this._advance();
        const t = this._expr();
        return this._consume(ne.RParen, sD), t;
      }
      case ne.Str: {
        const t = e.lexeme;
        if (this._advance(), this._matchOne(ne.RegexOp)) {
          const r = this._peek();
          if (!this._config.regexParsingWithErrorRecovery) {
            if (this._advance(), r.type !== ne.RegexStr)
              throw this._errExpectedButGot("REGEX", r);
            const s = r.lexeme, o = s.lastIndexOf("/"), a = o === s.length - 1 ? void 0 : this._removeFlagsGY(s.substring(o + 1));
            let l;
            try {
              l = new RegExp(s.substring(1, o), a);
            } catch {
              throw this._errExpectedButGot("REGEX", r);
            }
            return Qh.create(t, l);
          }
          switch (r.type) {
            case ne.RegexStr:
            case ne.Error: {
              const s = [r.lexeme];
              this._advance();
              let o = this._peek(), a = 0;
              for (let f = 0; f < r.lexeme.length; f++)
                r.lexeme.charCodeAt(f) === L.OpenParen ? a++ : r.lexeme.charCodeAt(f) === L.CloseParen && a--;
              for (; !this._isAtEnd() && o.type !== ne.And && o.type !== ne.Or; ) {
                switch (o.type) {
                  case ne.LParen:
                    a++;
                    break;
                  case ne.RParen:
                    a--;
                    break;
                  case ne.RegexStr:
                  case ne.QuotedStr:
                    for (let f = 0; f < o.lexeme.length; f++)
                      o.lexeme.charCodeAt(f) === L.OpenParen ? a++ : r.lexeme.charCodeAt(f) === L.CloseParen && a--;
                }
                if (a < 0)
                  break;
                s.push(wa.getLexeme(o)), this._advance(), o = this._peek();
              }
              const l = s.join(""), c = l.lastIndexOf("/"), u = c === l.length - 1 ? void 0 : this._removeFlagsGY(l.substring(c + 1));
              let d;
              try {
                d = new RegExp(l.substring(1, c), u);
              } catch {
                throw this._errExpectedButGot("REGEX", r);
              }
              return Jt.regex(t, d);
            }
            case ne.QuotedStr: {
              const s = r.lexeme;
              this._advance();
              let o = null;
              if (!qh(s)) {
                const a = s.indexOf("/"), l = s.lastIndexOf("/");
                if (a !== l && a >= 0) {
                  const c = s.slice(a + 1, l), u = s[l + 1] === "i" ? "i" : "";
                  try {
                    o = new RegExp(c, u);
                  } catch {
                    throw this._errExpectedButGot("REGEX", r);
                  }
                }
              }
              if (o === null)
                throw this._errExpectedButGot("REGEX", r);
              return Qh.create(t, o);
            }
            default:
              throw this._errExpectedButGot("REGEX", this._peek());
          }
        }
        if (this._matchOne(ne.Not)) {
          this._consume(ne.In, u3);
          const r = this._value();
          return Jt.notIn(t, r);
        }
        switch (this._peek().type) {
          case ne.Eq: {
            this._advance();
            const r = this._value();
            if (this._previous().type === ne.QuotedStr)
              return Jt.equals(t, r);
            switch (r) {
              case "true":
                return Jt.has(t);
              case "false":
                return Jt.not(t);
              default:
                return Jt.equals(t, r);
            }
          }
          case ne.NotEq: {
            this._advance();
            const r = this._value();
            if (this._previous().type === ne.QuotedStr)
              return Jt.notEquals(t, r);
            switch (r) {
              case "true":
                return Jt.not(t);
              case "false":
                return Jt.has(t);
              default:
                return Jt.notEquals(t, r);
            }
          }
          case ne.Lt:
            return this._advance(), Ap.create(t, this._value());
          case ne.LtEq:
            return this._advance(), Rp.create(t, this._value());
          case ne.Gt:
            return this._advance(), _d.create(t, this._value());
          case ne.GtEq:
            return this._advance(), Pp.create(t, this._value());
          case ne.In:
            return this._advance(), Jt.in(t, this._value());
          default:
            return Jt.has(t);
        }
      }
      case ne.EOF:
        throw this._parsingErrors.push({ message: f3, offset: e.offset, lexeme: "", additionalInfo: p3 }), ka._parseError;
      default:
        throw this._errExpectedButGot(`true | false | KEY 
	| KEY '=~' REGEX 
	| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());
    }
  }
  _value() {
    const e = this._peek();
    switch (e.type) {
      case ne.Str:
      case ne.QuotedStr:
        return this._advance(), e.lexeme;
      case ne.True:
        return this._advance(), "true";
      case ne.False:
        return this._advance(), "false";
      case ne.In:
        return this._advance(), "in";
      default:
        return "";
    }
  }
  _removeFlagsGY(e) {
    return e.replaceAll(this._flagsGYRe, "");
  }
  _previous() {
    return this._tokens[this._current - 1];
  }
  _matchOne(e) {
    return this._check(e) ? (this._advance(), !0) : !1;
  }
  _advance() {
    return this._isAtEnd() || this._current++, this._previous();
  }
  _consume(e, t) {
    if (this._check(e))
      return this._advance();
    throw this._errExpectedButGot(t, this._peek());
  }
  _errExpectedButGot(e, t, n) {
    const r = h(1754, `Expected: {0}
Received: '{1}'.`, e, wa.getLexeme(t)), s = t.offset, o = wa.getLexeme(t);
    return this._parsingErrors.push({ message: r, offset: s, lexeme: o, additionalInfo: n }), ka._parseError;
  }
  _check(e) {
    return this._peek().type === e;
  }
  _peek() {
    return this._tokens[this._current];
  }
  _isAtEnd() {
    return this._peek().type === ne.EOF;
  }
};
ka._parseError = new Error();
let om = ka;
const JS = class JS {
  static false() {
    return Vi.INSTANCE;
  }
  static true() {
    return Xi.INSTANCE;
  }
  static has(e) {
    return Yl.create(e);
  }
  static equals(e, t) {
    return Cp.create(e, t);
  }
  static notEquals(e, t) {
    return Tp.create(e, t);
  }
  static regex(e, t) {
    return Qh.create(e, t);
  }
  static in(e, t) {
    return rv.create(e, t);
  }
  static notIn(e, t) {
    return sv.create(e, t);
  }
  static not(e) {
    return Xl.create(e);
  }
  static and(...e) {
    return yo.create(e, null, !0);
  }
  static or(...e) {
    return Vr.create(e, null, !0);
  }
  static greater(e, t) {
    return _d.create(e, t);
  }
  static greaterEquals(e, t) {
    return Pp.create(e, t);
  }
  static smaller(e, t) {
    return Ap.create(e, t);
  }
  static smallerEquals(e, t) {
    return Rp.create(e, t);
  }
  static deserialize(e) {
    return e == null ? void 0 : this._parser.parse(e);
  }
};
JS._parser = new om({ regexParsingWithErrorRecovery: !1 });
let Jt = JS;
function g3(i) {
  const e = new om({ regexParsingWithErrorRecovery: !1 });
  return i.map((t) => (e.parse(t), e.lexingErrors.length > 0 ? e.lexingErrors.map((n) => ({
    errorMessage: n.additionalInfo ? h(1755, "Unexpected token. Hint: {0}", n.additionalInfo) : h(1756, "Unexpected token."),
    offset: n.offset,
    length: n.lexeme.length
  })) : e.parsingErrors.length > 0 ? e.parsingErrors.map((n) => ({
    errorMessage: n.additionalInfo ? `${n.message}. ${n.additionalInfo}` : n.message,
    offset: n.offset,
    length: n.lexeme.length
  })) : []));
}
function lh(i, e) {
  return i.cmp(e);
}
const k1 = class k1 {
  constructor() {
    this.type = $t.False;
  }
  cmp(e) {
    return this.type - e.type;
  }
  equals(e) {
    return e.type === this.type;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return !1;
  }
  serialize() {
    return "false";
  }
  keys() {
    return [];
  }
  map(e) {
    return this;
  }
  negate() {
    return Xi.INSTANCE;
  }
};
k1.INSTANCE = new k1();
let Vi = k1;
const I1 = class I1 {
  constructor() {
    this.type = $t.True;
  }
  cmp(e) {
    return this.type - e.type;
  }
  equals(e) {
    return e.type === this.type;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return !0;
  }
  serialize() {
    return "true";
  }
  keys() {
    return [];
  }
  map(e) {
    return this;
  }
  negate() {
    return Vi.INSTANCE;
  }
};
I1.INSTANCE = new I1();
let Xi = I1;
class Yl {
  static create(e, t = null) {
    const n = ki.get(e);
    return typeof n == "boolean" ? n ? Xi.INSTANCE : Vi.INSTANCE : new Yl(e, t);
  }
  constructor(e, t) {
    this.key = e, this.negated = t, this.type = $t.Defined;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : WP(this.key, e.key);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key : !1;
  }
  substituteConstants() {
    const e = ki.get(this.key);
    return typeof e == "boolean" ? e ? Xi.INSTANCE : Vi.INSTANCE : this;
  }
  evaluate(e) {
    return !!e.getValue(this.key);
  }
  serialize() {
    return this.key;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapDefined(this.key);
  }
  negate() {
    return this.negated || (this.negated = Xl.create(this.key, this)), this.negated;
  }
}
class Cp {
  static create(e, t, n = null) {
    if (typeof t == "boolean")
      return t ? Yl.create(e, n) : Xl.create(e, n);
    const r = ki.get(e);
    return typeof r == "boolean" ? t === (r ? "true" : "false") ? Xi.INSTANCE : Vi.INSTANCE : new Cp(e, t, n);
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.Equals;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    const e = ki.get(this.key);
    if (typeof e == "boolean") {
      const t = e ? "true" : "false";
      return this.value === t ? Xi.INSTANCE : Vi.INSTANCE;
    }
    return this;
  }
  evaluate(e) {
    return e.getValue(this.key) == this.value;
  }
  serialize() {
    return `${this.key} == '${this.value}'`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapEquals(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = Tp.create(this.key, this.value, this)), this.negated;
  }
}
class rv {
  static create(e, t) {
    return new rv(e, t);
  }
  constructor(e, t) {
    this.key = e, this.valueKey = t, this.type = $t.In, this.negated = null;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.valueKey, e.key, e.valueKey);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.valueKey === e.valueKey : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    const t = e.getValue(this.valueKey), n = e.getValue(this.key);
    return Array.isArray(t) ? t.includes(n) : typeof n == "string" && typeof t == "object" && t !== null ? o3.call(t, n) : !1;
  }
  serialize() {
    return `${this.key} in '${this.valueKey}'`;
  }
  keys() {
    return [this.key, this.valueKey];
  }
  map(e) {
    return e.mapIn(this.key, this.valueKey);
  }
  negate() {
    return this.negated || (this.negated = sv.create(this.key, this.valueKey)), this.negated;
  }
}
class sv {
  static create(e, t) {
    return new sv(e, t);
  }
  constructor(e, t) {
    this.key = e, this.valueKey = t, this.type = $t.NotIn, this._negated = rv.create(e, t);
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : this._negated.cmp(e._negated);
  }
  equals(e) {
    return e.type === this.type ? this._negated.equals(e._negated) : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return !this._negated.evaluate(e);
  }
  serialize() {
    return `${this.key} not in '${this.valueKey}'`;
  }
  keys() {
    return this._negated.keys();
  }
  map(e) {
    return e.mapNotIn(this.key, this.valueKey);
  }
  negate() {
    return this._negated;
  }
}
class Tp {
  static create(e, t, n = null) {
    if (typeof t == "boolean")
      return t ? Xl.create(e, n) : Yl.create(e, n);
    const r = ki.get(e);
    return typeof r == "boolean" ? t === (r ? "true" : "false") ? Vi.INSTANCE : Xi.INSTANCE : new Tp(e, t, n);
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.NotEquals;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    const e = ki.get(this.key);
    if (typeof e == "boolean") {
      const t = e ? "true" : "false";
      return this.value === t ? Vi.INSTANCE : Xi.INSTANCE;
    }
    return this;
  }
  evaluate(e) {
    return e.getValue(this.key) != this.value;
  }
  serialize() {
    return `${this.key} != '${this.value}'`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapNotEquals(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = Cp.create(this.key, this.value, this)), this.negated;
  }
}
class Xl {
  static create(e, t = null) {
    const n = ki.get(e);
    return typeof n == "boolean" ? n ? Vi.INSTANCE : Xi.INSTANCE : new Xl(e, t);
  }
  constructor(e, t) {
    this.key = e, this.negated = t, this.type = $t.Not;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : WP(this.key, e.key);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key : !1;
  }
  substituteConstants() {
    const e = ki.get(this.key);
    return typeof e == "boolean" ? e ? Vi.INSTANCE : Xi.INSTANCE : this;
  }
  evaluate(e) {
    return !e.getValue(this.key);
  }
  serialize() {
    return `!${this.key}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapNot(this.key);
  }
  negate() {
    return this.negated || (this.negated = Yl.create(this.key, this)), this.negated;
  }
}
function ov(i, e) {
  if (typeof i == "string") {
    const t = parseFloat(i);
    isNaN(t) || (i = t);
  }
  return typeof i == "string" || typeof i == "number" ? e(i) : Vi.INSTANCE;
}
class _d {
  static create(e, t, n = null) {
    return ov(t, (r) => new _d(e, r, n));
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.Greater;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return typeof this.value == "string" ? !1 : parseFloat(e.getValue(this.key)) > this.value;
  }
  serialize() {
    return `${this.key} > ${this.value}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapGreater(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = Rp.create(this.key, this.value, this)), this.negated;
  }
}
class Pp {
  static create(e, t, n = null) {
    return ov(t, (r) => new Pp(e, r, n));
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.GreaterEquals;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return typeof this.value == "string" ? !1 : parseFloat(e.getValue(this.key)) >= this.value;
  }
  serialize() {
    return `${this.key} >= ${this.value}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapGreaterEquals(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = Ap.create(this.key, this.value, this)), this.negated;
  }
}
class Ap {
  static create(e, t, n = null) {
    return ov(t, (r) => new Ap(e, r, n));
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.Smaller;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return typeof this.value == "string" ? !1 : parseFloat(e.getValue(this.key)) < this.value;
  }
  serialize() {
    return `${this.key} < ${this.value}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapSmaller(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = Pp.create(this.key, this.value, this)), this.negated;
  }
}
class Rp {
  static create(e, t, n = null) {
    return ov(t, (r) => new Rp(e, r, n));
  }
  constructor(e, t, n) {
    this.key = e, this.value = t, this.negated = n, this.type = $t.SmallerEquals;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : Zl(this.key, this.value, e.key, e.value);
  }
  equals(e) {
    return e.type === this.type ? this.key === e.key && this.value === e.value : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return typeof this.value == "string" ? !1 : parseFloat(e.getValue(this.key)) <= this.value;
  }
  serialize() {
    return `${this.key} <= ${this.value}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapSmallerEquals(this.key, this.value);
  }
  negate() {
    return this.negated || (this.negated = _d.create(this.key, this.value, this)), this.negated;
  }
}
class Qh {
  static create(e, t) {
    return new Qh(e, t);
  }
  constructor(e, t) {
    this.key = e, this.regexp = t, this.type = $t.Regex, this.negated = null;
  }
  cmp(e) {
    if (e.type !== this.type)
      return this.type - e.type;
    if (this.key < e.key)
      return -1;
    if (this.key > e.key)
      return 1;
    const t = this.regexp ? this.regexp.source : "", n = e.regexp ? e.regexp.source : "";
    return t < n ? -1 : t > n ? 1 : 0;
  }
  equals(e) {
    if (e.type === this.type) {
      const t = this.regexp ? this.regexp.source : "", n = e.regexp ? e.regexp.source : "";
      return this.key === e.key && t === n;
    }
    return !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    const t = e.getValue(this.key);
    return this.regexp ? this.regexp.test(t) : !1;
  }
  serialize() {
    const e = this.regexp ? `/${this.regexp.source}/${this.regexp.flags}` : "/invalid/";
    return `${this.key} =~ ${e}`;
  }
  keys() {
    return [this.key];
  }
  map(e) {
    return e.mapRegex(this.key, this.regexp);
  }
  negate() {
    return this.negated || (this.negated = am.create(this)), this.negated;
  }
}
class am {
  static create(e) {
    return new am(e);
  }
  constructor(e) {
    this._actual = e, this.type = $t.NotRegex;
  }
  cmp(e) {
    return e.type !== this.type ? this.type - e.type : this._actual.cmp(e._actual);
  }
  equals(e) {
    return e.type === this.type ? this._actual.equals(e._actual) : !1;
  }
  substituteConstants() {
    return this;
  }
  evaluate(e) {
    return !this._actual.evaluate(e);
  }
  serialize() {
    return `!(${this._actual.serialize()})`;
  }
  keys() {
    return this._actual.keys();
  }
  map(e) {
    return new am(this._actual.map(e));
  }
  negate() {
    return this._actual;
  }
}
function BP(i) {
  let e = null;
  for (let t = 0, n = i.length; t < n; t++) {
    const r = i[t].substituteConstants();
    if (i[t] !== r && e === null) {
      e = [];
      for (let s = 0; s < t; s++)
        e[s] = i[s];
    }
    e !== null && (e[t] = r);
  }
  return e === null ? i : e;
}
class yo {
  static create(e, t, n) {
    return yo._normalizeArr(e, t, n);
  }
  constructor(e, t) {
    this.expr = e, this.negated = t, this.type = $t.And;
  }
  cmp(e) {
    if (e.type !== this.type)
      return this.type - e.type;
    if (this.expr.length < e.expr.length)
      return -1;
    if (this.expr.length > e.expr.length)
      return 1;
    for (let t = 0, n = this.expr.length; t < n; t++) {
      const r = lh(this.expr[t], e.expr[t]);
      if (r !== 0)
        return r;
    }
    return 0;
  }
  equals(e) {
    if (e.type === this.type) {
      if (this.expr.length !== e.expr.length)
        return !1;
      for (let t = 0, n = this.expr.length; t < n; t++)
        if (!this.expr[t].equals(e.expr[t]))
          return !1;
      return !0;
    }
    return !1;
  }
  substituteConstants() {
    const e = BP(this.expr);
    return e === this.expr ? this : yo.create(e, this.negated, !1);
  }
  evaluate(e) {
    for (let t = 0, n = this.expr.length; t < n; t++)
      if (!this.expr[t].evaluate(e))
        return !1;
    return !0;
  }
  static _normalizeArr(e, t, n) {
    const r = [];
    let s = !1;
    for (const o of e)
      if (o) {
        if (o.type === $t.True) {
          s = !0;
          continue;
        }
        if (o.type === $t.False)
          return Vi.INSTANCE;
        if (o.type === $t.And) {
          r.push(...o.expr);
          continue;
        }
        r.push(o);
      }
    if (r.length === 0 && s)
      return Xi.INSTANCE;
    if (r.length !== 0) {
      if (r.length === 1)
        return r[0];
      r.sort(lh);
      for (let o = 1; o < r.length; o++)
        r[o - 1].equals(r[o]) && (r.splice(o, 1), o--);
      if (r.length === 1)
        return r[0];
      for (; r.length > 1; ) {
        const o = r[r.length - 1];
        if (o.type !== $t.Or)
          break;
        r.pop();
        const a = r.pop(), l = r.length === 0, c = Vr.create(o.expr.map(
          (u) => yo.create([u, a], null, n)
        ), null, l);
        c && (r.push(c), r.sort(lh));
      }
      if (r.length === 1)
        return r[0];
      if (n) {
        for (let o = 0; o < r.length; o++)
          for (let a = o + 1; a < r.length; a++)
            if (r[o].negate().equals(r[a]))
              return Vi.INSTANCE;
        if (r.length === 1)
          return r[0];
      }
      return new yo(r, t);
    }
  }
  serialize() {
    return this.expr.map((e) => e.serialize()).join(" && ");
  }
  keys() {
    const e = [];
    for (const t of this.expr)
      e.push(...t.keys());
    return e;
  }
  map(e) {
    return new yo(this.expr.map((t) => t.map(e)), null);
  }
  negate() {
    if (!this.negated) {
      const e = [];
      for (const t of this.expr)
        e.push(t.negate());
      this.negated = Vr.create(e, this, !0);
    }
    return this.negated;
  }
}
class Vr {
  static create(e, t, n) {
    return Vr._normalizeArr(e, t, n);
  }
  constructor(e, t) {
    this.expr = e, this.negated = t, this.type = $t.Or;
  }
  cmp(e) {
    if (e.type !== this.type)
      return this.type - e.type;
    if (this.expr.length < e.expr.length)
      return -1;
    if (this.expr.length > e.expr.length)
      return 1;
    for (let t = 0, n = this.expr.length; t < n; t++) {
      const r = lh(this.expr[t], e.expr[t]);
      if (r !== 0)
        return r;
    }
    return 0;
  }
  equals(e) {
    if (e.type === this.type) {
      if (this.expr.length !== e.expr.length)
        return !1;
      for (let t = 0, n = this.expr.length; t < n; t++)
        if (!this.expr[t].equals(e.expr[t]))
          return !1;
      return !0;
    }
    return !1;
  }
  substituteConstants() {
    const e = BP(this.expr);
    return e === this.expr ? this : Vr.create(e, this.negated, !1);
  }
  evaluate(e) {
    for (let t = 0, n = this.expr.length; t < n; t++)
      if (this.expr[t].evaluate(e))
        return !0;
    return !1;
  }
  static _normalizeArr(e, t, n) {
    let r = [], s = !1;
    if (e) {
      for (let o = 0, a = e.length; o < a; o++) {
        const l = e[o];
        if (l) {
          if (l.type === $t.False) {
            s = !0;
            continue;
          }
          if (l.type === $t.True)
            return Xi.INSTANCE;
          if (l.type === $t.Or) {
            r = r.concat(l.expr);
            continue;
          }
          r.push(l);
        }
      }
      if (r.length === 0 && s)
        return Vi.INSTANCE;
      r.sort(lh);
    }
    if (r.length !== 0) {
      if (r.length === 1)
        return r[0];
      for (let o = 1; o < r.length; o++)
        r[o - 1].equals(r[o]) && (r.splice(o, 1), o--);
      if (r.length === 1)
        return r[0];
      if (n) {
        for (let o = 0; o < r.length; o++)
          for (let a = o + 1; a < r.length; a++)
            if (r[o].negate().equals(r[a]))
              return Xi.INSTANCE;
        if (r.length === 1)
          return r[0];
      }
      return new Vr(r, t);
    }
  }
  serialize() {
    return this.expr.map((e) => e.serialize()).join(" || ");
  }
  keys() {
    const e = [];
    for (const t of this.expr)
      e.push(...t.keys());
    return e;
  }
  map(e) {
    return new Vr(this.expr.map((t) => t.map(e)), null);
  }
  negate() {
    if (!this.negated) {
      const e = [];
      for (const t of this.expr)
        e.push(t.negate());
      for (; e.length > 1; ) {
        const t = e.shift(), n = e.shift(), r = [];
        for (const s of oD(t))
          for (const o of oD(n))
            r.push(yo.create([s, o], null, !1));
        e.unshift(Vr.create(r, null, !1));
      }
      this.negated = Vr.create(e, this, !0);
    }
    return this.negated;
  }
}
const Vc = class Vc extends Yl {
  static all() {
    return Vc._info.values();
  }
  constructor(e, t, n) {
    super(e, null), this._defaultValue = t, typeof n == "object" ? Vc._info.push({ ...n, key: e }) : n !== !0 && Vc._info.push({ key: e, description: n, type: t != null ? typeof t : void 0 });
  }
  bindTo(e) {
    return e.createKey(this.key, this._defaultValue);
  }
  getValue(e) {
    return e.getContextKeyValue(this.key);
  }
  toNegated() {
    return this.negate();
  }
  isEqualTo(e) {
    return Cp.create(this.key, e);
  }
  notEqualsTo(e) {
    return Tp.create(this.key, e);
  }
  greater(e) {
    return _d.create(this.key, e);
  }
};
Vc._info = [];
let P = Vc;
function WP(i, e) {
  return i < e ? -1 : i > e ? 1 : 0;
}
function Zl(i, e, t, n) {
  return i < t ? -1 : i > t ? 1 : e < n ? -1 : e > n ? 1 : 0;
}
function oD(i) {
  return i.type === $t.Or ? i.expr : [i];
}
var br;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Disabled = 1] = "Disabled", i[i.Enabled = 2] = "Enabled";
})(br || (br = {}));
new P("accessibilityModeEnabled", !1);
var xo;
(function(i) {
  i[i.None = 0] = "None", i[i.Keep = 1] = "Keep", i[i.Brackets = 2] = "Brackets", i[i.Advanced = 3] = "Advanced", i[i.Full = 4] = "Full";
})(xo || (xo = {}));
const m3 = 8;
class _3 {
  constructor() {
    this.stableMinimapLayoutInput = null, this.stableFitMaxMinimapScale = 0, this.stableFitRemainingWidth = 0;
  }
}
class wt {
  constructor(e, t, n, r) {
    this.id = e, this.name = t, this.defaultValue = n, this.schema = r;
  }
  applyUpdate(e, t) {
    return av(e, t);
  }
  compute(e, t, n) {
    return n;
  }
}
class gg {
  constructor(e, t) {
    this.newValue = e, this.didChange = t;
  }
}
function av(i, e) {
  if (typeof i != "object" || typeof e != "object" || !i || !e)
    return new gg(e, i !== e);
  if (Array.isArray(i) || Array.isArray(e)) {
    const n = Array.isArray(i) && Array.isArray(e) && Fn(i, e);
    return new gg(e, !n);
  }
  let t = !1;
  for (const n in e)
    if (e.hasOwnProperty(n)) {
      const r = av(i[n], e[n]);
      r.didChange && (i[n] = r.newValue, t = !0);
    }
  return new gg(i, t);
}
class ia {
  constructor(e) {
    this.schema = void 0, this.id = e, this.name = "_never_", this.defaultValue = void 0;
  }
  applyUpdate(e, t) {
    return av(e, t);
  }
  validate(e) {
    return this.defaultValue;
  }
}
class vd {
  constructor(e, t, n, r) {
    this.id = e, this.name = t, this.defaultValue = n, this.schema = r;
  }
  applyUpdate(e, t) {
    return av(e, t);
  }
  validate(e) {
    return typeof e > "u" ? this.defaultValue : e;
  }
  compute(e, t, n) {
    return n;
  }
}
function oe(i, e) {
  return typeof i > "u" ? e : i === "false" ? !1 : !!i;
}
class ke extends vd {
  constructor(e, t, n, r = void 0) {
    typeof r < "u" && (r.type = "boolean", r.default = n), super(e, t, n, r);
  }
  validate(e) {
    return oe(e, this.defaultValue);
  }
}
function v3(i, e, t, n) {
  if (typeof i > "u")
    return e;
  let r = parseInt(i, 10);
  return isNaN(r) ? e : (r = Math.max(t, r), r = Math.min(n, r), r | 0);
}
class Ze extends vd {
  static clampedInt(e, t, n, r) {
    return v3(e, t, n, r);
  }
  constructor(e, t, n, r, s, o = void 0) {
    typeof o < "u" && (o.type = "integer", o.default = n, o.minimum = r, o.maximum = s), super(e, t, n, o), this.minimum = r, this.maximum = s;
  }
  validate(e) {
    return Ze.clampedInt(e, this.defaultValue, this.minimum, this.maximum);
  }
}
class Qn extends vd {
  static clamp(e, t, n) {
    return e < t ? t : e > n ? n : e;
  }
  static float(e, t) {
    if (typeof e == "number")
      return e;
    if (typeof e > "u")
      return t;
    const n = parseFloat(e);
    return isNaN(n) ? t : n;
  }
  constructor(e, t, n, r, s, o, a) {
    typeof s < "u" && (s.type = "number", s.default = n, s.minimum = o, s.maximum = a), super(e, t, n, s), this.validationFn = r, this.minimum = o, this.maximum = a;
  }
  validate(e) {
    return this.validationFn(Qn.float(e, this.defaultValue));
  }
}
class Li extends vd {
  static string(e, t) {
    return typeof e != "string" ? t : e;
  }
  constructor(e, t, n, r = void 0) {
    typeof r < "u" && (r.type = "string", r.default = n), super(e, t, n, r);
  }
  validate(e) {
    return Li.string(e, this.defaultValue);
  }
}
function yt(i, e, t, n) {
  return typeof i != "string" || t.indexOf(i) === -1 ? e : i;
}
class bt extends vd {
  constructor(e, t, n, r, s = void 0) {
    typeof s < "u" && (s.type = "string", s.enum = r, s.default = n), super(e, t, n, s), this._allowedValues = r;
  }
  validate(e) {
    return yt(e, this.defaultValue, this._allowedValues);
  }
}
class Md extends wt {
  constructor(e, t, n, r, s, o, a = void 0) {
    typeof a < "u" && (a.type = "string", a.enum = s, a.default = r), super(e, t, n, a), this._allowedValues = s, this._convert = o;
  }
  validate(e) {
    return typeof e != "string" ? this.defaultValue : this._allowedValues.indexOf(e) === -1 ? this.defaultValue : this._convert(e);
  }
}
function w3(i) {
  switch (i) {
    case "none":
      return xo.None;
    case "keep":
      return xo.Keep;
    case "brackets":
      return xo.Brackets;
    case "advanced":
      return xo.Advanced;
    case "full":
      return xo.Full;
  }
}
class b3 extends wt {
  constructor() {
    super(R.accessibilitySupport, "accessibilitySupport", br.Unknown, {
      type: "string",
      enum: ["auto", "on", "off"],
      enumDescriptions: [
        h(266, "Use platform APIs to detect when a Screen Reader is attached."),
        h(267, "Optimize for usage with a Screen Reader."),
        h(268, "Assume a screen reader is not attached.")
      ],
      default: "auto",
      tags: ["accessibility"],
      description: h(
        269,
        "Controls if the UI should run in a mode where it is optimized for screen readers."
      )
    });
  }
  validate(e) {
    switch (e) {
      case "auto":
        return br.Unknown;
      case "off":
        return br.Disabled;
      case "on":
        return br.Enabled;
    }
    return this.defaultValue;
  }
  compute(e, t, n) {
    return n === br.Unknown ? e.accessibilitySupport : n;
  }
}
class y3 extends wt {
  constructor() {
    const e = {
      insertSpace: !0,
      ignoreEmptyLines: !0
    };
    super(R.comments, "comments", e, {
      "editor.comments.insertSpace": {
        type: "boolean",
        default: e.insertSpace,
        description: h(270, "Controls whether a space character is inserted when commenting.")
      },
      "editor.comments.ignoreEmptyLines": {
        type: "boolean",
        default: e.ignoreEmptyLines,
        description: h(
          271,
          "Controls if empty lines should be ignored with toggle, add or remove actions for line comments."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      insertSpace: oe(t.insertSpace, this.defaultValue.insertSpace),
      ignoreEmptyLines: oe(t.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines)
    };
  }
}
var Eo;
(function(i) {
  i[i.Hidden = 0] = "Hidden", i[i.Blink = 1] = "Blink", i[i.Smooth = 2] = "Smooth", i[i.Phase = 3] = "Phase", i[i.Expand = 4] = "Expand", i[i.Solid = 5] = "Solid";
})(Eo || (Eo = {}));
function x3(i) {
  switch (i) {
    case "blink":
      return Eo.Blink;
    case "smooth":
      return Eo.Smooth;
    case "phase":
      return Eo.Phase;
    case "expand":
      return Eo.Expand;
    case "solid":
      return Eo.Solid;
  }
}
var wr;
(function(i) {
  i[i.Line = 1] = "Line", i[i.Block = 2] = "Block", i[i.Underline = 3] = "Underline", i[i.LineThin = 4] = "LineThin", i[i.BlockOutline = 5] = "BlockOutline", i[i.UnderlineThin = 6] = "UnderlineThin";
})(wr || (wr = {}));
function aD(i) {
  switch (i) {
    case "line":
      return wr.Line;
    case "block":
      return wr.Block;
    case "underline":
      return wr.Underline;
    case "line-thin":
      return wr.LineThin;
    case "block-outline":
      return wr.BlockOutline;
    case "underline-thin":
      return wr.UnderlineThin;
  }
}
class E3 extends ia {
  constructor() {
    super(R.editorClassName);
  }
  compute(e, t, n) {
    const r = ["monaco-editor"];
    return t.get(R.extraEditorClassName) && r.push(t.get(R.extraEditorClassName)), e.extraEditorClassName && r.push(e.extraEditorClassName), t.get(R.mouseStyle) === "default" ? r.push("mouse-default") : t.get(R.mouseStyle) === "copy" && r.push("mouse-copy"), t.get(R.showUnused) && r.push("showUnused"), t.get(R.showDeprecated) && r.push("showDeprecated"), r.join(" ");
  }
}
class S3 extends ke {
  constructor() {
    super(R.emptySelectionClipboard, "emptySelectionClipboard", !0, { description: h(
      272,
      "Controls whether copying without a selection copies the current line."
    ) });
  }
  compute(e, t, n) {
    return n && e.emptySelectionClipboard;
  }
}
class D3 extends wt {
  constructor() {
    const e = {
      cursorMoveOnType: !0,
      findOnType: !0,
      seedSearchStringFromSelection: "always",
      autoFindInSelection: "never",
      globalFindClipboard: !1,
      addExtraSpaceOnTop: !0,
      loop: !0,
      history: "workspace",
      replaceHistory: "workspace"
    };
    super(R.find, "find", e, {
      "editor.find.cursorMoveOnType": {
        type: "boolean",
        default: e.cursorMoveOnType,
        description: h(
          273,
          "Controls whether the cursor should jump to find matches while typing."
        )
      },
      "editor.find.seedSearchStringFromSelection": {
        type: "string",
        enum: ["never", "always", "selection"],
        default: e.seedSearchStringFromSelection,
        enumDescriptions: [
          h(274, "Never seed search string from the editor selection."),
          h(
            275,
            "Always seed search string from the editor selection, including word at cursor position."
          ),
          h(276, "Only seed search string from the editor selection.")
        ],
        description: h(
          277,
          "Controls whether the search string in the Find Widget is seeded from the editor selection."
        )
      },
      "editor.find.autoFindInSelection": {
        type: "string",
        enum: ["never", "always", "multiline"],
        default: e.autoFindInSelection,
        enumDescriptions: [
          h(278, "Never turn on Find in Selection automatically (default)."),
          h(279, "Always turn on Find in Selection automatically."),
          h(
            280,
            "Turn on Find in Selection automatically when multiple lines of content are selected."
          )
        ],
        description: h(
          281,
          "Controls the condition for turning on Find in Selection automatically."
        )
      },
      "editor.find.globalFindClipboard": {
        type: "boolean",
        default: e.globalFindClipboard,
        description: h(
          282,
          "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."
        ),
        included: Un
      },
      "editor.find.addExtraSpaceOnTop": {
        type: "boolean",
        default: e.addExtraSpaceOnTop,
        description: h(
          283,
          "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible."
        )
      },
      "editor.find.loop": {
        type: "boolean",
        default: e.loop,
        description: h(
          284,
          "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found."
        )
      },
      "editor.find.history": {
        type: "string",
        enum: ["never", "workspace"],
        default: "workspace",
        enumDescriptions: [
          h(285, "Do not store search history from the find widget."),
          h(286, "Store search history across the active workspace")
        ],
        description: h(287, "Controls how the find widget history should be stored")
      },
      "editor.find.replaceHistory": {
        type: "string",
        enum: ["never", "workspace"],
        default: "workspace",
        enumDescriptions: [
          h(288, "Do not store history from the replace widget."),
          h(289, "Store replace history across the active workspace")
        ],
        description: h(290, "Controls how the replace widget history should be stored")
      },
      "editor.find.findOnType": {
        type: "boolean",
        default: e.findOnType,
        description: h(291, "Controls whether the Find Widget should search as you type.")
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      cursorMoveOnType: oe(t.cursorMoveOnType, this.defaultValue.cursorMoveOnType),
      findOnType: oe(t.findOnType, this.defaultValue.findOnType),
      seedSearchStringFromSelection: typeof e.seedSearchStringFromSelection == "boolean" ? e.seedSearchStringFromSelection ? "always" : "never" : yt(t.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection, ["never", "always", "selection"]),
      autoFindInSelection: typeof e.autoFindInSelection == "boolean" ? e.autoFindInSelection ? "always" : "never" : yt(t.autoFindInSelection, this.defaultValue.autoFindInSelection, ["never", "always", "multiline"]),
      globalFindClipboard: oe(t.globalFindClipboard, this.defaultValue.globalFindClipboard),
      addExtraSpaceOnTop: oe(t.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),
      loop: oe(t.loop, this.defaultValue.loop),
      history: yt(t.history, this.defaultValue.history, ["never", "workspace"]),
      replaceHistory: yt(t.replaceHistory, this.defaultValue.replaceHistory, ["never", "workspace"])
    };
  }
}
const ks = class ks extends wt {
  constructor() {
    super(R.fontLigatures, "fontLigatures", ks.OFF, {
      anyOf: [
        {
          type: "boolean",
          description: h(
            292,
            "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."
          )
        },
        {
          type: "string",
          description: h(
            293,
            "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures."
          )
        }
      ],
      description: h(
        294,
        "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."
      ),
      default: !1
    });
  }
  validate(e) {
    return typeof e > "u" ? this.defaultValue : typeof e == "string" ? e === "false" || e.length === 0 ? ks.OFF : e === "true" ? ks.ON : e : e ? ks.ON : ks.OFF;
  }
};
ks.OFF = '"liga" off, "calt" off', ks.ON = '"liga" on, "calt" on';
let rb = ks;
const Is = class Is extends wt {
  constructor() {
    super(R.fontVariations, "fontVariations", Is.OFF, {
      anyOf: [
        {
          type: "boolean",
          description: h(
            295,
            "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."
          )
        },
        {
          type: "string",
          description: h(
            296,
            "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings."
          )
        }
      ],
      description: h(
        297,
        "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property."
      ),
      default: !1
    });
  }
  validate(e) {
    return typeof e > "u" ? this.defaultValue : typeof e == "string" ? e === "false" ? Is.OFF : e === "true" ? Is.TRANSLATE : e : e ? Is.TRANSLATE : Is.OFF;
  }
  compute(e, t, n) {
    return e.fontInfo.fontVariationSettings;
  }
};
Is.OFF = "normal", Is.TRANSLATE = "translate";
let sb = Is;
class k3 extends ia {
  constructor() {
    super(R.fontInfo);
  }
  compute(e, t, n) {
    return e.fontInfo;
  }
}
class I3 extends ia {
  constructor() {
    super(R.effectiveCursorStyle);
  }
  compute(e, t, n) {
    return e.inputMode === "overtype" ? t.get(R.overtypeCursorStyle) : t.get(R.cursorStyle);
  }
}
class C3 extends ia {
  constructor() {
    super(R.effectiveEditContext);
  }
  compute(e, t) {
    return e.editContextSupported && t.get(R.editContext);
  }
}
class T3 extends ia {
  constructor() {
    super(R.effectiveAllowVariableFonts);
  }
  compute(e, t) {
    return e.accessibilitySupport === br.Enabled ? t.get(R.allowVariableFontsInAccessibilityMode) : t.get(R.allowVariableFonts);
  }
}
class P3 extends vd {
  constructor() {
    super(R.fontSize, "fontSize", Qs.fontSize, {
      type: "number",
      minimum: 6,
      maximum: 100,
      default: Qs.fontSize,
      description: h(298, "Controls the font size in pixels.")
    });
  }
  validate(e) {
    const t = Qn.float(e, this.defaultValue);
    return t === 0 ? Qs.fontSize : Qn.clamp(t, 6, 100);
  }
  compute(e, t, n) {
    return e.fontInfo.fontSize;
  }
}
const Ur = class Ur extends wt {
  constructor() {
    super(R.fontWeight, "fontWeight", Qs.fontWeight, {
      anyOf: [
        {
          type: "number",
          minimum: Ur.MINIMUM_VALUE,
          maximum: Ur.MAXIMUM_VALUE,
          errorMessage: h(
            299,
            'Only "normal" and "bold" keywords or numbers between 1 and 1000 are allowed.'
          )
        },
        {
          type: "string",
          pattern: "^(normal|bold|1000|[1-9][0-9]{0,2})$"
        },
        {
          enum: Ur.SUGGESTION_VALUES
        }
      ],
      default: Qs.fontWeight,
      description: h(
        300,
        'Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.'
      )
    });
  }
  validate(e) {
    return e === "normal" || e === "bold" ? e : String(Ze.clampedInt(e, Qs.fontWeight, Ur.MINIMUM_VALUE, Ur.MAXIMUM_VALUE));
  }
};
Ur.SUGGESTION_VALUES = ["normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900"], Ur.MINIMUM_VALUE = 1, Ur.MAXIMUM_VALUE = 1e3;
let ob = Ur;
class A3 extends wt {
  constructor() {
    const e = {
      multiple: "peek",
      multipleDefinitions: "peek",
      multipleTypeDefinitions: "peek",
      multipleDeclarations: "peek",
      multipleImplementations: "peek",
      multipleReferences: "peek",
      multipleTests: "peek",
      alternativeDefinitionCommand: "editor.action.goToReferences",
      alternativeTypeDefinitionCommand: "editor.action.goToReferences",
      alternativeDeclarationCommand: "editor.action.goToReferences",
      alternativeImplementationCommand: "",
      alternativeReferenceCommand: "",
      alternativeTestsCommand: ""
    }, t = {
      type: "string",
      enum: ["peek", "gotoAndPeek", "goto"],
      default: e.multiple,
      enumDescriptions: [
        h(301, "Show Peek view of the results (default)"),
        h(302, "Go to the primary result and show a Peek view"),
        h(303, "Go to the primary result and enable Peek-less navigation to others")
      ]
    }, n = ["", "editor.action.referenceSearch.trigger", "editor.action.goToReferences", "editor.action.peekImplementation", "editor.action.goToImplementation", "editor.action.peekTypeDefinition", "editor.action.goToTypeDefinition", "editor.action.peekDeclaration", "editor.action.revealDeclaration", "editor.action.peekDefinition", "editor.action.revealDefinitionAside", "editor.action.revealDefinition"];
    super(R.gotoLocation, "gotoLocation", e, {
      "editor.gotoLocation.multiple": {
        deprecationMessage: h(
          304,
          "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."
        )
      },
      "editor.gotoLocation.multipleDefinitions": {
        description: h(
          305,
          "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."
        ),
        ...t
      },
      "editor.gotoLocation.multipleTypeDefinitions": {
        description: h(
          306,
          "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."
        ),
        ...t
      },
      "editor.gotoLocation.multipleDeclarations": {
        description: h(
          307,
          "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."
        ),
        ...t
      },
      "editor.gotoLocation.multipleImplementations": {
        description: h(
          308,
          "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."
        ),
        ...t
      },
      "editor.gotoLocation.multipleReferences": {
        description: h(
          309,
          "Controls the behavior the 'Go to References'-command when multiple target locations exist."
        ),
        ...t
      },
      "editor.gotoLocation.alternativeDefinitionCommand": {
        type: "string",
        default: e.alternativeDefinitionCommand,
        enum: n,
        description: h(
          310,
          "Alternative command id that is being executed when the result of 'Go to Definition' is the current location."
        )
      },
      "editor.gotoLocation.alternativeTypeDefinitionCommand": {
        type: "string",
        default: e.alternativeTypeDefinitionCommand,
        enum: n,
        description: h(
          311,
          "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location."
        )
      },
      "editor.gotoLocation.alternativeDeclarationCommand": {
        type: "string",
        default: e.alternativeDeclarationCommand,
        enum: n,
        description: h(
          312,
          "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location."
        )
      },
      "editor.gotoLocation.alternativeImplementationCommand": {
        type: "string",
        default: e.alternativeImplementationCommand,
        enum: n,
        description: h(
          313,
          "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location."
        )
      },
      "editor.gotoLocation.alternativeReferenceCommand": {
        type: "string",
        default: e.alternativeReferenceCommand,
        enum: n,
        description: h(
          314,
          "Alternative command id that is being executed when the result of 'Go to Reference' is the current location."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      multiple: yt(t.multiple, this.defaultValue.multiple, ["peek", "gotoAndPeek", "goto"]),
      multipleDefinitions: t.multipleDefinitions ?? yt(t.multipleDefinitions, "peek", ["peek", "gotoAndPeek", "goto"]),
      multipleTypeDefinitions: t.multipleTypeDefinitions ?? yt(t.multipleTypeDefinitions, "peek", ["peek", "gotoAndPeek", "goto"]),
      multipleDeclarations: t.multipleDeclarations ?? yt(t.multipleDeclarations, "peek", ["peek", "gotoAndPeek", "goto"]),
      multipleImplementations: t.multipleImplementations ?? yt(t.multipleImplementations, "peek", ["peek", "gotoAndPeek", "goto"]),
      multipleReferences: t.multipleReferences ?? yt(t.multipleReferences, "peek", ["peek", "gotoAndPeek", "goto"]),
      multipleTests: t.multipleTests ?? yt(t.multipleTests, "peek", ["peek", "gotoAndPeek", "goto"]),
      alternativeDefinitionCommand: Li.string(t.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),
      alternativeTypeDefinitionCommand: Li.string(t.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),
      alternativeDeclarationCommand: Li.string(t.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),
      alternativeImplementationCommand: Li.string(t.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),
      alternativeReferenceCommand: Li.string(t.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),
      alternativeTestsCommand: Li.string(t.alternativeTestsCommand, this.defaultValue.alternativeTestsCommand)
    };
  }
}
class R3 extends wt {
  constructor() {
    const e = {
      enabled: !0,
      delay: 300,
      hidingDelay: 300,
      sticky: !0,
      above: !0
    };
    super(R.hover, "hover", e, {
      "editor.hover.enabled": {
        type: "boolean",
        default: e.enabled,
        description: h(315, "Controls whether the hover is shown.")
      },
      "editor.hover.delay": {
        type: "number",
        default: e.delay,
        minimum: 0,
        maximum: 1e4,
        description: h(316, "Controls the delay in milliseconds after which the hover is shown.")
      },
      "editor.hover.sticky": {
        type: "boolean",
        default: e.sticky,
        description: h(
          317,
          "Controls whether the hover should remain visible when mouse is moved over it."
        )
      },
      "editor.hover.hidingDelay": {
        type: "integer",
        minimum: 0,
        default: e.hidingDelay,
        description: h(
          318,
          "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled."
        )
      },
      "editor.hover.above": {
        type: "boolean",
        default: e.above,
        description: h(319, "Prefer showing hovers above the line, if there's space.")
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      delay: Ze.clampedInt(t.delay, this.defaultValue.delay, 0, 1e4),
      sticky: oe(t.sticky, this.defaultValue.sticky),
      hidingDelay: Ze.clampedInt(t.hidingDelay, this.defaultValue.hidingDelay, 0, 6e5),
      above: oe(t.above, this.defaultValue.above)
    };
  }
}
var Dc;
(function(i) {
  i[i.None = 0] = "None", i[i.Text = 1] = "Text", i[i.Blocks = 2] = "Blocks";
})(Dc || (Dc = {}));
class ch extends ia {
  constructor() {
    super(R.layoutInfo);
  }
  compute(e, t, n) {
    return ch.computeLayout(t, {
      memory: e.memory,
      outerWidth: e.outerWidth,
      outerHeight: e.outerHeight,
      isDominatedByLongLines: e.isDominatedByLongLines,
      lineHeight: e.fontInfo.lineHeight,
      viewLineCount: e.viewLineCount,
      lineNumbersDigitCount: e.lineNumbersDigitCount,
      typicalHalfwidthCharacterWidth: e.fontInfo.typicalHalfwidthCharacterWidth,
      maxDigitWidth: e.fontInfo.maxDigitWidth,
      pixelRatio: e.pixelRatio,
      glyphMarginDecorationLaneCount: e.glyphMarginDecorationLaneCount
    });
  }
  static computeContainedMinimapLineCount(e) {
    const t = e.height / e.lineHeight, n = Math.floor(e.paddingTop / e.lineHeight);
    let r = Math.floor(e.paddingBottom / e.lineHeight);
    e.scrollBeyondLastLine && (r = Math.max(r, t - 1));
    const s = (n + e.viewLineCount + r) / (e.pixelRatio * e.height), o = Math.floor(e.viewLineCount / s);
    return { typicalViewportLineCount: t, extraLinesBeforeFirstLine: n, extraLinesBeyondLastLine: r, desiredRatio: s, minimapLineCount: o };
  }
  static _computeMinimapLayout(e, t) {
    const n = e.outerWidth, r = e.outerHeight, s = e.pixelRatio;
    if (!e.minimap.enabled)
      return {
        renderMinimap: Dc.None,
        minimapLeft: 0,
        minimapWidth: 0,
        minimapHeightIsEditorHeight: !1,
        minimapIsSampling: !1,
        minimapScale: 1,
        minimapLineHeight: 1,
        minimapCanvasInnerWidth: 0,
        minimapCanvasInnerHeight: Math.floor(s * r),
        minimapCanvasOuterWidth: 0,
        minimapCanvasOuterHeight: r
      };
    const o = t.stableMinimapLayoutInput, a = o && e.outerHeight === o.outerHeight && e.lineHeight === o.lineHeight && e.typicalHalfwidthCharacterWidth === o.typicalHalfwidthCharacterWidth && e.pixelRatio === o.pixelRatio && e.scrollBeyondLastLine === o.scrollBeyondLastLine && e.paddingTop === o.paddingTop && e.paddingBottom === o.paddingBottom && e.minimap.enabled === o.minimap.enabled && e.minimap.side === o.minimap.side && e.minimap.size === o.minimap.size && e.minimap.showSlider === o.minimap.showSlider && e.minimap.renderCharacters === o.minimap.renderCharacters && e.minimap.maxColumn === o.minimap.maxColumn && e.minimap.scale === o.minimap.scale && e.verticalScrollbarWidth === o.verticalScrollbarWidth && e.isViewportWrapping === o.isViewportWrapping, l = e.lineHeight, c = e.typicalHalfwidthCharacterWidth, u = e.scrollBeyondLastLine, d = e.minimap.renderCharacters;
    let f = s >= 2 ? Math.round(e.minimap.scale * 2) : e.minimap.scale;
    const p = e.minimap.maxColumn, v = e.minimap.size, _ = e.minimap.side, m = e.verticalScrollbarWidth, E = e.viewLineCount, S = e.remainingWidth, k = e.isViewportWrapping, q = d ? 2 : 3;
    let B = Math.floor(s * r);
    const te = B / s;
    let G = !1, ae = !1, K = q * f, Ee = f / s, He = 1;
    if (v === "fill" || v === "fit") {
      const { typicalViewportLineCount: Oe, extraLinesBeforeFirstLine: Ve, extraLinesBeyondLastLine: Qe, desiredRatio: It, minimapLineCount: Zt } = ch.computeContainedMinimapLineCount({
        viewLineCount: E,
        scrollBeyondLastLine: u,
        paddingTop: e.paddingTop,
        paddingBottom: e.paddingBottom,
        height: r,
        lineHeight: l,
        pixelRatio: s
      });
      if (E / Zt > 1)
        G = !0, ae = !0, f = 1, K = 1, Ee = f / s;
      else {
        let Mt = !1, fn = f + 1;
        if (v === "fit") {
          const vi = Math.ceil((Ve + E + Qe) * K);
          k && a && S <= t.stableFitRemainingWidth ? (Mt = !0, fn = t.stableFitMaxMinimapScale) : Mt = vi > B;
        }
        if (v === "fill" || Mt) {
          G = !0;
          const vi = f;
          K = Math.min(l * s, Math.max(1, Math.floor(1 / It))), k && a && S <= t.stableFitRemainingWidth && (fn = t.stableFitMaxMinimapScale), f = Math.min(fn, Math.max(1, Math.floor(K / q))), f > vi && (He = Math.min(2, f / vi)), Ee = f / s / He, B = Math.ceil(Math.max(Oe, Ve + E + Qe) * K), k ? (t.stableMinimapLayoutInput = e, t.stableFitRemainingWidth = S, t.stableFitMaxMinimapScale = f) : (t.stableMinimapLayoutInput = null, t.stableFitRemainingWidth = 0);
        }
      }
    }
    const Re = Math.floor(p * Ee), Z = Math.min(Re, Math.max(0, Math.floor((S - m - 2) * Ee / (c + Ee))) + m3);
    let Y = Math.floor(s * Z);
    const ee = Y / s;
    Y = Math.floor(Y * He);
    const re = d ? Dc.Text : Dc.Blocks, ce = _ === "left" ? 0 : n - Z - m;
    return {
      renderMinimap: re,
      minimapLeft: ce,
      minimapWidth: Z,
      minimapHeightIsEditorHeight: G,
      minimapIsSampling: ae,
      minimapScale: f,
      minimapLineHeight: K,
      minimapCanvasInnerWidth: Y,
      minimapCanvasInnerHeight: B,
      minimapCanvasOuterWidth: ee,
      minimapCanvasOuterHeight: te
    };
  }
  static computeLayout(e, t) {
    const n = t.outerWidth | 0, r = t.outerHeight | 0, s = t.lineHeight | 0, o = t.lineNumbersDigitCount | 0, a = t.typicalHalfwidthCharacterWidth, l = t.maxDigitWidth, c = t.pixelRatio, u = t.viewLineCount, d = e.get(R.wordWrapOverride2), f = d === "inherit" ? e.get(R.wordWrapOverride1) : d, p = f === "inherit" ? e.get(R.wordWrap) : f, v = e.get(R.wordWrapColumn), _ = t.isDominatedByLongLines, m = e.get(R.glyphMargin), E = e.get(R.lineNumbers).renderType !== Hi.Off, S = e.get(R.lineNumbersMinChars), k = e.get(R.scrollBeyondLastLine), q = e.get(R.padding), B = e.get(R.minimap), te = e.get(R.scrollbar), G = te.verticalScrollbarSize, ae = te.verticalHasArrows, K = te.arrowSize, Ee = te.horizontalScrollbarSize, He = e.get(R.folding), Re = e.get(R.showFoldingControls) !== "never";
    let Z = e.get(R.lineDecorationsWidth);
    He && Re && (Z += 16);
    let Y = 0;
    if (E) {
      const er = Math.max(o, S);
      Y = Math.round(er * l);
    }
    let ee = 0;
    m && (ee = s * t.glyphMarginDecorationLaneCount);
    let re = 0, ce = re + ee, Oe = ce + Y, Ve = Oe + Z;
    const Qe = n - ee - Y - Z;
    let It = !1, Zt = !1, ht = -1;
    e.get(R.accessibilitySupport) === br.Enabled && f === "inherit" && _ ? (It = !0, Zt = !0) : p === "on" || p === "bounded" ? Zt = !0 : p === "wordWrapColumn" && (ht = v);
    const Mt = ch._computeMinimapLayout({
      outerWidth: n,
      outerHeight: r,
      lineHeight: s,
      typicalHalfwidthCharacterWidth: a,
      pixelRatio: c,
      scrollBeyondLastLine: k,
      paddingTop: q.top,
      paddingBottom: q.bottom,
      minimap: B,
      verticalScrollbarWidth: G,
      viewLineCount: u,
      remainingWidth: Qe,
      isViewportWrapping: Zt
    }, t.memory || new _3());
    Mt.renderMinimap !== Dc.None && Mt.minimapLeft === 0 && (re += Mt.minimapWidth, ce += Mt.minimapWidth, Oe += Mt.minimapWidth, Ve += Mt.minimapWidth);
    const fn = Qe - Mt.minimapWidth, vi = Math.max(1, Math.floor((fn - G - 2) / a)), Ar = ae ? K : 0;
    return Zt && (ht = Math.max(1, vi), p === "bounded" && (ht = Math.min(ht, v))), {
      width: n,
      height: r,
      glyphMarginLeft: re,
      glyphMarginWidth: ee,
      glyphMarginDecorationLaneCount: t.glyphMarginDecorationLaneCount,
      lineNumbersLeft: ce,
      lineNumbersWidth: Y,
      decorationsLeft: Oe,
      decorationsWidth: Z,
      contentLeft: Ve,
      contentWidth: fn,
      minimap: Mt,
      viewportColumn: vi,
      isWordWrapMinified: It,
      isViewportWrapping: Zt,
      wrappingColumn: ht,
      verticalScrollbarWidth: G,
      horizontalScrollbarHeight: Ee,
      overviewRuler: {
        top: Ar,
        width: G,
        height: r - 2 * Ar,
        right: 0
      }
    };
  }
}
class L3 extends wt {
  constructor() {
    super(R.wrappingStrategy, "wrappingStrategy", "simple", {
      "editor.wrappingStrategy": {
        enumDescriptions: [
          h(
            320,
            "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."
          ),
          h(
            321,
            "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
          )
        ],
        type: "string",
        enum: ["simple", "advanced"],
        default: "simple",
        description: h(
          322,
          "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience."
        )
      }
    });
  }
  validate(e) {
    return yt(e, "simple", ["simple", "advanced"]);
  }
  compute(e, t, n) {
    return t.get(R.accessibilitySupport) === br.Enabled ? "advanced" : n;
  }
}
var ys;
(function(i) {
  i.Off = "off", i.OnCode = "onCode", i.On = "on";
})(ys || (ys = {}));
class N3 extends wt {
  constructor() {
    const e = { enabled: ys.OnCode };
    super(R.lightbulb, "lightbulb", e, {
      "editor.lightbulb.enabled": {
        type: "string",
        enum: [ys.Off, ys.OnCode, ys.On],
        default: e.enabled,
        enumDescriptions: [
          h(323, "Disable the code action menu."),
          h(324, "Show the code action menu when the cursor is on lines with code."),
          h(
            325,
            "Show the code action menu when the cursor is on lines with code or on empty lines."
          )
        ],
        description: h(326, "Enables the Code Action lightbulb in the editor.")
      }
    });
  }
  validate(e) {
    return !e || typeof e != "object" ? this.defaultValue : {
      enabled: yt(e.enabled, this.defaultValue.enabled, [ys.Off, ys.OnCode, ys.On])
    };
  }
}
class M3 extends wt {
  constructor() {
    const e = { enabled: !0, maxLineCount: 5, defaultModel: "outlineModel", scrollWithEditor: !0 };
    super(R.stickyScroll, "stickyScroll", e, {
      "editor.stickyScroll.enabled": {
        type: "boolean",
        default: e.enabled,
        description: h(
          327,
          "Shows the nested current scopes during the scroll at the top of the editor."
        )
      },
      "editor.stickyScroll.maxLineCount": {
        type: "number",
        default: e.maxLineCount,
        minimum: 1,
        maximum: 20,
        description: h(328, "Defines the maximum number of sticky lines to show.")
      },
      "editor.stickyScroll.defaultModel": {
        type: "string",
        enum: ["outlineModel", "foldingProviderModel", "indentationModel"],
        default: e.defaultModel,
        description: h(
          329,
          "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases."
        )
      },
      "editor.stickyScroll.scrollWithEditor": {
        type: "boolean",
        default: e.scrollWithEditor,
        description: h(
          330,
          "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      maxLineCount: Ze.clampedInt(t.maxLineCount, this.defaultValue.maxLineCount, 1, 20),
      defaultModel: yt(t.defaultModel, this.defaultValue.defaultModel, ["outlineModel", "foldingProviderModel", "indentationModel"]),
      scrollWithEditor: oe(t.scrollWithEditor, this.defaultValue.scrollWithEditor)
    };
  }
}
class O3 extends wt {
  constructor() {
    const e = { enabled: "on", fontSize: 0, fontFamily: "", padding: !1, maximumLength: 43 };
    super(R.inlayHints, "inlayHints", e, {
      "editor.inlayHints.enabled": {
        type: "string",
        default: e.enabled,
        description: h(331, "Enables the inlay hints in the editor."),
        enum: ["on", "onUnlessPressed", "offUnlessPressed", "off"],
        markdownEnumDescriptions: [
          h(332, "Inlay hints are enabled"),
          h(
            333,
            "Inlay hints are showing by default and hide when holding {0}",
            Un ? "Ctrl+Option" : "Ctrl+Alt"
          ),
          h(
            334,
            "Inlay hints are hidden by default and show when holding {0}",
            Un ? "Ctrl+Option" : "Ctrl+Alt"
          ),
          h(335, "Inlay hints are disabled")
        ]
      },
      "editor.inlayHints.fontSize": {
        type: "number",
        default: e.fontSize,
        markdownDescription: h(
          336,
          "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.",
          "`#editor.fontSize#`",
          "`5`"
        )
      },
      "editor.inlayHints.fontFamily": {
        type: "string",
        default: e.fontFamily,
        markdownDescription: h(
          337,
          "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.",
          "`#editor.fontFamily#`"
        )
      },
      "editor.inlayHints.padding": {
        type: "boolean",
        default: e.padding,
        description: h(338, "Enables the padding around the inlay hints in the editor.")
      },
      "editor.inlayHints.maximumLength": {
        type: "number",
        default: e.maximumLength,
        markdownDescription: h(
          339,
          "Maximum overall length of inlay hints, for a single line, before they get truncated by the editor. Set to `0` to never truncate"
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return typeof t.enabled == "boolean" && (t.enabled = t.enabled ? "on" : "off"), {
      enabled: yt(t.enabled, this.defaultValue.enabled, ["on", "off", "offUnlessPressed", "onUnlessPressed"]),
      fontSize: Ze.clampedInt(t.fontSize, this.defaultValue.fontSize, 0, 100),
      fontFamily: Li.string(t.fontFamily, this.defaultValue.fontFamily),
      padding: oe(t.padding, this.defaultValue.padding),
      maximumLength: Ze.clampedInt(t.maximumLength, this.defaultValue.maximumLength, 0, Number.MAX_SAFE_INTEGER)
    };
  }
}
class F3 extends wt {
  constructor() {
    super(R.lineDecorationsWidth, "lineDecorationsWidth", 10);
  }
  validate(e) {
    return typeof e == "string" && /^\d+(\.\d+)?ch$/.test(e) ? -parseFloat(e.substring(0, e.length - 2)) : Ze.clampedInt(e, this.defaultValue, 0, 1e3);
  }
  compute(e, t, n) {
    return n < 0 ? Ze.clampedInt(-n * e.fontInfo.typicalHalfwidthCharacterWidth, this.defaultValue, 0, 1e3) : n;
  }
}
class U3 extends Qn {
  constructor() {
    super(R.lineHeight, "lineHeight", Qs.lineHeight, (e) => Qn.clamp(e, 0, 150), { markdownDescription: h(
      340,
      `Controls the line height. 
 - Use 0 to automatically compute the line height from the font size.
 - Values between 0 and 8 will be used as a multiplier with the font size.
 - Values greater than or equal to 8 will be used as effective values.`
    ) }, 0, 150);
  }
  compute(e, t, n) {
    return e.fontInfo.lineHeight;
  }
}
class $3 extends wt {
  constructor() {
    const e = {
      enabled: !0,
      size: "proportional",
      side: "right",
      showSlider: "mouseover",
      autohide: "none",
      renderCharacters: !0,
      maxColumn: 120,
      scale: 1,
      showRegionSectionHeaders: !0,
      showMarkSectionHeaders: !0,
      markSectionHeaderRegex: "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",
      sectionHeaderFontSize: 9,
      sectionHeaderLetterSpacing: 1
    };
    super(R.minimap, "minimap", e, {
      "editor.minimap.enabled": {
        type: "boolean",
        default: e.enabled,
        description: h(341, "Controls whether the minimap is shown.")
      },
      "editor.minimap.autohide": {
        type: "string",
        enum: ["none", "mouseover", "scroll"],
        enumDescriptions: [
          h(342, "The minimap is always shown."),
          h(
            343,
            "The minimap is hidden when mouse is not over the minimap and shown when mouse is over the minimap."
          ),
          h(344, "The minimap is only shown when the editor is scrolled")
        ],
        default: e.autohide,
        description: h(345, "Controls whether the minimap is hidden automatically.")
      },
      "editor.minimap.size": {
        type: "string",
        enum: ["proportional", "fill", "fit"],
        enumDescriptions: [
          h(
            346,
            "The minimap has the same size as the editor contents (and might scroll)."
          ),
          h(
            347,
            "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."
          ),
          h(
            348,
            "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
          )
        ],
        default: e.size,
        description: h(349, "Controls the size of the minimap.")
      },
      "editor.minimap.side": {
        type: "string",
        enum: ["left", "right"],
        default: e.side,
        description: h(350, "Controls the side where to render the minimap.")
      },
      "editor.minimap.showSlider": {
        type: "string",
        enum: ["always", "mouseover"],
        default: e.showSlider,
        description: h(351, "Controls when the minimap slider is shown.")
      },
      "editor.minimap.scale": {
        type: "number",
        default: e.scale,
        minimum: 1,
        maximum: 3,
        enum: [1, 2, 3],
        description: h(352, "Scale of content drawn in the minimap: 1, 2 or 3.")
      },
      "editor.minimap.renderCharacters": {
        type: "boolean",
        default: e.renderCharacters,
        description: h(353, "Render the actual characters on a line as opposed to color blocks.")
      },
      "editor.minimap.maxColumn": {
        type: "number",
        default: e.maxColumn,
        description: h(
          354,
          "Limit the width of the minimap to render at most a certain number of columns."
        )
      },
      "editor.minimap.showRegionSectionHeaders": {
        type: "boolean",
        default: e.showRegionSectionHeaders,
        description: h(
          355,
          "Controls whether named regions are shown as section headers in the minimap."
        )
      },
      "editor.minimap.showMarkSectionHeaders": {
        type: "boolean",
        default: e.showMarkSectionHeaders,
        description: h(
          356,
          "Controls whether MARK: comments are shown as section headers in the minimap."
        )
      },
      "editor.minimap.markSectionHeaderRegex": {
        type: "string",
        default: e.markSectionHeaderRegex,
        description: h(
          357,
          "Defines the regular expression used to find section headers in comments. The regex must contain a named match group `label` (written as `(?<label>.+)`) that encapsulates the section header, otherwise it will not work. Optionally you can include another match group named `separator`. Use \\n in the pattern to match multi-line headers."
        )
      },
      "editor.minimap.sectionHeaderFontSize": {
        type: "number",
        default: e.sectionHeaderFontSize,
        description: h(358, "Controls the font size of section headers in the minimap.")
      },
      "editor.minimap.sectionHeaderLetterSpacing": {
        type: "number",
        default: e.sectionHeaderLetterSpacing,
        description: h(
          359,
          "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    let n = this.defaultValue.markSectionHeaderRegex;
    const r = e.markSectionHeaderRegex;
    if (typeof r == "string")
      try {
        new RegExp(r, "d"), n = r;
      } catch {
      }
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      autohide: yt(t.autohide, this.defaultValue.autohide, ["none", "mouseover", "scroll"]),
      size: yt(t.size, this.defaultValue.size, ["proportional", "fill", "fit"]),
      side: yt(t.side, this.defaultValue.side, ["right", "left"]),
      showSlider: yt(t.showSlider, this.defaultValue.showSlider, ["always", "mouseover"]),
      renderCharacters: oe(t.renderCharacters, this.defaultValue.renderCharacters),
      scale: Ze.clampedInt(t.scale, 1, 1, 3),
      maxColumn: Ze.clampedInt(t.maxColumn, this.defaultValue.maxColumn, 1, 1e4),
      showRegionSectionHeaders: oe(t.showRegionSectionHeaders, this.defaultValue.showRegionSectionHeaders),
      showMarkSectionHeaders: oe(t.showMarkSectionHeaders, this.defaultValue.showMarkSectionHeaders),
      markSectionHeaderRegex: n,
      sectionHeaderFontSize: Qn.clamp(t.sectionHeaderFontSize ?? this.defaultValue.sectionHeaderFontSize, 4, 32),
      sectionHeaderLetterSpacing: Qn.clamp(t.sectionHeaderLetterSpacing ?? this.defaultValue.sectionHeaderLetterSpacing, 0, 5)
    };
  }
}
function H3(i) {
  return i === "ctrlCmd" ? Un ? "metaKey" : "ctrlKey" : "altKey";
}
class B3 extends wt {
  constructor() {
    super(R.padding, "padding", { top: 0, bottom: 0 }, {
      "editor.padding.top": {
        type: "number",
        default: 0,
        minimum: 0,
        maximum: 1e3,
        description: h(
          360,
          "Controls the amount of space between the top edge of the editor and the first line."
        )
      },
      "editor.padding.bottom": {
        type: "number",
        default: 0,
        minimum: 0,
        maximum: 1e3,
        description: h(
          361,
          "Controls the amount of space between the bottom edge of the editor and the last line."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      top: Ze.clampedInt(t.top, 0, 0, 1e3),
      bottom: Ze.clampedInt(t.bottom, 0, 0, 1e3)
    };
  }
}
class W3 extends wt {
  constructor() {
    const e = {
      enabled: !0,
      cycle: !0
    };
    super(R.parameterHints, "parameterHints", e, {
      "editor.parameterHints.enabled": {
        type: "boolean",
        default: e.enabled,
        description: h(
          362,
          "Enables a pop-up that shows parameter documentation and type information as you type."
        )
      },
      "editor.parameterHints.cycle": {
        type: "boolean",
        default: e.cycle,
        description: h(
          363,
          "Controls whether the parameter hints menu cycles or closes when reaching the end of the list."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      cycle: oe(t.cycle, this.defaultValue.cycle)
    };
  }
}
class V3 extends ia {
  constructor() {
    super(R.pixelRatio);
  }
  compute(e, t, n) {
    return e.pixelRatio;
  }
}
class z3 extends wt {
  constructor() {
    super(R.placeholder, "placeholder", void 0);
  }
  validate(e) {
    return typeof e > "u" ? this.defaultValue : typeof e == "string" ? e : this.defaultValue;
  }
}
class q3 extends wt {
  constructor() {
    const e = {
      other: "on",
      comments: "off",
      strings: "off"
    }, t = [
      { type: "boolean" },
      {
        type: "string",
        enum: ["on", "inline", "off"],
        enumDescriptions: [h(364, "Quick suggestions show inside the suggest widget"), h(365, "Quick suggestions show as ghost text"), h(366, "Quick suggestions are disabled")]
      }
    ];
    super(R.quickSuggestions, "quickSuggestions", e, {
      type: "object",
      additionalProperties: !1,
      properties: {
        strings: {
          anyOf: t,
          default: e.strings,
          description: h(367, "Enable quick suggestions inside strings.")
        },
        comments: {
          anyOf: t,
          default: e.comments,
          description: h(368, "Enable quick suggestions inside comments.")
        },
        other: {
          anyOf: t,
          default: e.other,
          description: h(369, "Enable quick suggestions outside of strings and comments.")
        }
      },
      default: e,
      markdownDescription: h(
        370,
        "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.",
        "`#editor.suggestOnTriggerCharacters#`"
      )
    }), this.defaultValue = e;
  }
  validate(e) {
    if (typeof e == "boolean") {
      const c = e ? "on" : "off";
      return { comments: c, strings: c, other: c };
    }
    if (!e || typeof e != "object")
      return this.defaultValue;
    const { other: t, comments: n, strings: r } = e, s = ["on", "inline", "off"];
    let o, a, l;
    return typeof t == "boolean" ? o = t ? "on" : "off" : o = yt(t, this.defaultValue.other, s), typeof n == "boolean" ? a = n ? "on" : "off" : a = yt(n, this.defaultValue.comments, s), typeof r == "boolean" ? l = r ? "on" : "off" : l = yt(r, this.defaultValue.strings, s), {
      other: o,
      comments: a,
      strings: l
    };
  }
}
var Hi;
(function(i) {
  i[i.Off = 0] = "Off", i[i.On = 1] = "On", i[i.Relative = 2] = "Relative", i[i.Interval = 3] = "Interval", i[i.Custom = 4] = "Custom";
})(Hi || (Hi = {}));
class j3 extends wt {
  constructor() {
    super(R.lineNumbers, "lineNumbers", { renderType: Hi.On, renderFn: null }, {
      type: "string",
      enum: ["off", "on", "relative", "interval"],
      enumDescriptions: [
        h(371, "Line numbers are not rendered."),
        h(372, "Line numbers are rendered as absolute number."),
        h(373, "Line numbers are rendered as distance in lines to cursor position."),
        h(374, "Line numbers are rendered every 10 lines.")
      ],
      default: "on",
      description: h(375, "Controls the display of line numbers.")
    });
  }
  validate(e) {
    let t = this.defaultValue.renderType, n = this.defaultValue.renderFn;
    return typeof e < "u" && (typeof e == "function" ? (t = Hi.Custom, n = e) : e === "interval" ? t = Hi.Interval : e === "relative" ? t = Hi.Relative : e === "on" ? t = Hi.On : t = Hi.Off), {
      renderType: t,
      renderFn: n
    };
  }
}
class G3 extends wt {
  constructor() {
    const e = [], t = { type: "number", description: h(
      376,
      "Number of monospace characters at which this editor ruler will render."
    ) };
    super(R.rulers, "rulers", e, {
      type: "array",
      items: {
        anyOf: [
          t,
          {
            type: [
              "object"
            ],
            properties: {
              column: t,
              color: {
                type: "string",
                description: h(377, "Color of this editor ruler."),
                format: "color-hex"
              }
            }
          }
        ]
      },
      default: e,
      description: h(
        378,
        "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty."
      )
    });
  }
  validate(e) {
    if (Array.isArray(e)) {
      const t = [];
      for (const n of e)
        if (typeof n == "number")
          t.push({
            column: Ze.clampedInt(n, 0, 0, 1e4),
            color: null
          });
        else if (n && typeof n == "object") {
          const r = n;
          t.push({
            column: Ze.clampedInt(r.column, 0, 0, 1e4),
            color: r.color
          });
        }
      return t.sort((n, r) => n.column - r.column), t;
    }
    return this.defaultValue;
  }
}
class Q3 extends wt {
  constructor() {
    super(R.readOnlyMessage, "readOnlyMessage", void 0);
  }
  validate(e) {
    return !e || typeof e != "object" ? this.defaultValue : e;
  }
}
function lD(i, e) {
  if (typeof i != "string")
    return e;
  switch (i) {
    case "hidden":
      return ul.Hidden;
    case "visible":
      return ul.Visible;
    default:
      return ul.Auto;
  }
}
class K3 extends wt {
  constructor() {
    const e = {
      vertical: ul.Auto,
      horizontal: ul.Auto,
      arrowSize: 11,
      useShadows: !0,
      verticalHasArrows: !1,
      horizontalHasArrows: !1,
      horizontalScrollbarSize: 12,
      horizontalSliderSize: 12,
      verticalScrollbarSize: 14,
      verticalSliderSize: 14,
      handleMouseWheel: !0,
      alwaysConsumeMouseWheel: !0,
      scrollByPage: !1,
      ignoreHorizontalScrollbarInContentHeight: !1
    };
    super(R.scrollbar, "scrollbar", e, {
      "editor.scrollbar.vertical": {
        type: "string",
        enum: ["auto", "visible", "hidden"],
        enumDescriptions: [
          h(379, "The vertical scrollbar will be visible only when necessary."),
          h(380, "The vertical scrollbar will always be visible."),
          h(381, "The vertical scrollbar will always be hidden.")
        ],
        default: "auto",
        description: h(382, "Controls the visibility of the vertical scrollbar.")
      },
      "editor.scrollbar.horizontal": {
        type: "string",
        enum: ["auto", "visible", "hidden"],
        enumDescriptions: [
          h(383, "The horizontal scrollbar will be visible only when necessary."),
          h(384, "The horizontal scrollbar will always be visible."),
          h(385, "The horizontal scrollbar will always be hidden.")
        ],
        default: "auto",
        description: h(386, "Controls the visibility of the horizontal scrollbar.")
      },
      "editor.scrollbar.verticalScrollbarSize": {
        type: "number",
        default: e.verticalScrollbarSize,
        description: h(387, "The width of the vertical scrollbar.")
      },
      "editor.scrollbar.horizontalScrollbarSize": {
        type: "number",
        default: e.horizontalScrollbarSize,
        description: h(388, "The height of the horizontal scrollbar.")
      },
      "editor.scrollbar.scrollByPage": {
        type: "boolean",
        default: e.scrollByPage,
        description: h(389, "Controls whether clicks scroll by page or jump to click position.")
      },
      "editor.scrollbar.ignoreHorizontalScrollbarInContentHeight": {
        type: "boolean",
        default: e.ignoreHorizontalScrollbarInContentHeight,
        description: h(
          390,
          "When set, the horizontal scrollbar will not increase the size of the editor's content."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e, n = Ze.clampedInt(t.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1e3), r = Ze.clampedInt(t.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1e3);
    return {
      arrowSize: Ze.clampedInt(t.arrowSize, this.defaultValue.arrowSize, 0, 1e3),
      vertical: lD(t.vertical, this.defaultValue.vertical),
      horizontal: lD(t.horizontal, this.defaultValue.horizontal),
      useShadows: oe(t.useShadows, this.defaultValue.useShadows),
      verticalHasArrows: oe(t.verticalHasArrows, this.defaultValue.verticalHasArrows),
      horizontalHasArrows: oe(t.horizontalHasArrows, this.defaultValue.horizontalHasArrows),
      handleMouseWheel: oe(t.handleMouseWheel, this.defaultValue.handleMouseWheel),
      alwaysConsumeMouseWheel: oe(t.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),
      horizontalScrollbarSize: n,
      horizontalSliderSize: Ze.clampedInt(t.horizontalSliderSize, n, 0, 1e3),
      verticalScrollbarSize: r,
      verticalSliderSize: Ze.clampedInt(t.verticalSliderSize, r, 0, 1e3),
      scrollByPage: oe(t.scrollByPage, this.defaultValue.scrollByPage),
      ignoreHorizontalScrollbarInContentHeight: oe(t.ignoreHorizontalScrollbarInContentHeight, this.defaultValue.ignoreHorizontalScrollbarInContentHeight)
    };
  }
}
const ir = "inUntrustedWorkspace", la = {
  allowedCharacters: "editor.unicodeHighlight.allowedCharacters",
  invisibleCharacters: "editor.unicodeHighlight.invisibleCharacters",
  nonBasicASCII: "editor.unicodeHighlight.nonBasicASCII",
  ambiguousCharacters: "editor.unicodeHighlight.ambiguousCharacters",
  includeComments: "editor.unicodeHighlight.includeComments",
  includeStrings: "editor.unicodeHighlight.includeStrings",
  allowedLocales: "editor.unicodeHighlight.allowedLocales"
};
class J3 extends wt {
  constructor() {
    const e = {
      nonBasicASCII: ir,
      invisibleCharacters: !0,
      ambiguousCharacters: !0,
      includeComments: ir,
      includeStrings: !0,
      allowedCharacters: {},
      allowedLocales: { _os: !0, _vscode: !0 }
    };
    super(R.unicodeHighlighting, "unicodeHighlight", e, {
      [la.nonBasicASCII]: {
        restricted: !0,
        type: ["boolean", "string"],
        enum: [!0, !1, ir],
        default: e.nonBasicASCII,
        description: h(
          391,
          "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII."
        )
      },
      [la.invisibleCharacters]: {
        restricted: !0,
        type: "boolean",
        default: e.invisibleCharacters,
        description: h(
          392,
          "Controls whether characters that just reserve space or have no width at all are highlighted."
        )
      },
      [la.ambiguousCharacters]: {
        restricted: !0,
        type: "boolean",
        default: e.ambiguousCharacters,
        description: h(
          393,
          "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale."
        )
      },
      [la.includeComments]: {
        restricted: !0,
        type: ["boolean", "string"],
        enum: [!0, !1, ir],
        default: e.includeComments,
        description: h(
          394,
          "Controls whether characters in comments should also be subject to Unicode highlighting."
        )
      },
      [la.includeStrings]: {
        restricted: !0,
        type: ["boolean", "string"],
        enum: [!0, !1, ir],
        default: e.includeStrings,
        description: h(
          395,
          "Controls whether characters in strings should also be subject to Unicode highlighting."
        )
      },
      [la.allowedCharacters]: {
        restricted: !0,
        type: "object",
        default: e.allowedCharacters,
        description: h(396, "Defines allowed characters that are not being highlighted."),
        additionalProperties: {
          type: "boolean"
        }
      },
      [la.allowedLocales]: {
        restricted: !0,
        type: "object",
        additionalProperties: {
          type: "boolean"
        },
        default: e.allowedLocales,
        description: h(
          397,
          "Unicode characters that are common in allowed locales are not being highlighted."
        )
      }
    });
  }
  applyUpdate(e, t) {
    let n = !1;
    t.allowedCharacters && e && (un(e.allowedCharacters, t.allowedCharacters) || (e = { ...e, allowedCharacters: t.allowedCharacters }, n = !0)), t.allowedLocales && e && (un(e.allowedLocales, t.allowedLocales) || (e = { ...e, allowedLocales: t.allowedLocales }, n = !0));
    const r = super.applyUpdate(e, t);
    return n ? new gg(r.newValue, !0) : r;
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      nonBasicASCII: Jc(t.nonBasicASCII, ir, [!0, !1, ir]),
      invisibleCharacters: oe(t.invisibleCharacters, this.defaultValue.invisibleCharacters),
      ambiguousCharacters: oe(t.ambiguousCharacters, this.defaultValue.ambiguousCharacters),
      includeComments: Jc(t.includeComments, ir, [!0, !1, ir]),
      includeStrings: Jc(t.includeStrings, ir, [!0, !1, ir]),
      allowedCharacters: this.validateBooleanMap(e.allowedCharacters, this.defaultValue.allowedCharacters),
      allowedLocales: this.validateBooleanMap(e.allowedLocales, this.defaultValue.allowedLocales)
    };
  }
  validateBooleanMap(e, t) {
    if (typeof e != "object" || !e)
      return t;
    const n = {};
    for (const [r, s] of Object.entries(e))
      s === !0 && (n[r] = !0);
    return n;
  }
}
class Y3 extends wt {
  constructor() {
    const e = {
      enabled: !0,
      mode: "subwordSmart",
      showToolbar: "onHover",
      suppressSuggestions: !1,
      keepOnBlur: !1,
      fontFamily: "default",
      syntaxHighlightingEnabled: !0,
      edits: {
        enabled: !0,
        showCollapsed: !1,
        renderSideBySide: "auto",
        allowCodeShifting: "always"
      },
      experimental: {
        suppressInlineSuggestions: "",
        triggerCommandOnProviderChange: !1
      }
    };
    super(R.inlineSuggest, "inlineSuggest", e, {
      "editor.inlineSuggest.enabled": {
        type: "boolean",
        default: e.enabled,
        description: h(
          398,
          "Controls whether to automatically show inline suggestions in the editor."
        )
      },
      "editor.inlineSuggest.showToolbar": {
        type: "string",
        default: e.showToolbar,
        enum: ["always", "onHover", "never"],
        enumDescriptions: [
          h(
            399,
            "Show the inline suggestion toolbar whenever an inline suggestion is shown."
          ),
          h(
            400,
            "Show the inline suggestion toolbar when hovering over an inline suggestion."
          ),
          h(401, "Never show the inline suggestion toolbar.")
        ],
        description: h(402, "Controls when to show the inline suggestion toolbar.")
      },
      "editor.inlineSuggest.syntaxHighlightingEnabled": {
        type: "boolean",
        default: e.syntaxHighlightingEnabled,
        description: h(
          403,
          "Controls whether to show syntax highlighting for inline suggestions in the editor."
        )
      },
      "editor.inlineSuggest.suppressSuggestions": {
        type: "boolean",
        default: e.suppressSuggestions,
        description: h(
          404,
          "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available."
        )
      },
      "editor.inlineSuggest.experimental.suppressInlineSuggestions": {
        type: "string",
        default: e.experimental.suppressInlineSuggestions,
        tags: ["experimental"],
        description: h(
          405,
          "Suppresses inline completions for specified extension IDs -- comma separated."
        ),
        experiment: {
          mode: "startup"
        }
      },
      "editor.inlineSuggest.experimental.triggerCommandOnProviderChange": {
        type: "boolean",
        default: e.experimental.triggerCommandOnProviderChange,
        tags: ["experimental"],
        description: h(
          406,
          "Controls whether to trigger a command when the inline suggestion provider changes."
        ),
        experiment: {
          mode: "startup"
        }
      },
      "editor.inlineSuggest.fontFamily": {
        type: "string",
        default: e.fontFamily,
        description: h(407, "Controls the font family of the inline suggestions.")
      },
      "editor.inlineSuggest.edits.allowCodeShifting": {
        type: "string",
        default: e.edits.allowCodeShifting,
        description: h(
          408,
          "Controls whether showing a suggestion will shift the code to make space for the suggestion inline."
        ),
        enum: ["always", "horizontal", "never"],
        tags: ["nextEditSuggestions"]
      },
      "editor.inlineSuggest.edits.renderSideBySide": {
        type: "string",
        default: e.edits.renderSideBySide,
        description: h(409, "Controls whether larger suggestions can be shown side by side."),
        enum: ["auto", "never"],
        enumDescriptions: [
          h(
            410,
            "Larger suggestions will show side by side if there is enough space, otherwise they will be shown below."
          ),
          h(
            411,
            "Larger suggestions are never shown side by side and will always be shown below."
          )
        ],
        tags: ["nextEditSuggestions"]
      },
      "editor.inlineSuggest.edits.showCollapsed": {
        type: "boolean",
        default: e.edits.showCollapsed,
        description: h(
          412,
          "Controls whether the suggestion will show as collapsed until jumping to it."
        ),
        tags: ["nextEditSuggestions"]
      }
    });
  }
  validate(e) {
    var n, r, s, o, a, l;
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      mode: yt(t.mode, this.defaultValue.mode, ["prefix", "subword", "subwordSmart"]),
      showToolbar: yt(t.showToolbar, this.defaultValue.showToolbar, ["always", "onHover", "never"]),
      suppressSuggestions: oe(t.suppressSuggestions, this.defaultValue.suppressSuggestions),
      keepOnBlur: oe(t.keepOnBlur, this.defaultValue.keepOnBlur),
      fontFamily: Li.string(t.fontFamily, this.defaultValue.fontFamily),
      syntaxHighlightingEnabled: oe(t.syntaxHighlightingEnabled, this.defaultValue.syntaxHighlightingEnabled),
      edits: {
        enabled: oe((n = t.edits) == null ? void 0 : n.enabled, this.defaultValue.edits.enabled),
        showCollapsed: oe((r = t.edits) == null ? void 0 : r.showCollapsed, this.defaultValue.edits.showCollapsed),
        allowCodeShifting: yt((s = t.edits) == null ? void 0 : s.allowCodeShifting, this.defaultValue.edits.allowCodeShifting, ["always", "horizontal", "never"]),
        renderSideBySide: yt((o = t.edits) == null ? void 0 : o.renderSideBySide, this.defaultValue.edits.renderSideBySide, ["never", "auto"])
      },
      experimental: {
        suppressInlineSuggestions: Li.string((a = t.experimental) == null ? void 0 : a.suppressInlineSuggestions, this.defaultValue.experimental.suppressInlineSuggestions),
        triggerCommandOnProviderChange: oe((l = t.experimental) == null ? void 0 : l.triggerCommandOnProviderChange, this.defaultValue.experimental.triggerCommandOnProviderChange)
      }
    };
  }
}
class X3 extends wt {
  constructor() {
    const e = {
      enabled: rD.bracketPairColorizationOptions.enabled,
      independentColorPoolPerBracketType: rD.bracketPairColorizationOptions.independentColorPoolPerBracketType
    };
    super(R.bracketPairColorization, "bracketPairColorization", e, {
      "editor.bracketPairColorization.enabled": {
        type: "boolean",
        default: e.enabled,
        markdownDescription: h(
          413,
          "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.",
          "`#workbench.colorCustomizations#`"
        )
      },
      "editor.bracketPairColorization.independentColorPoolPerBracketType": {
        type: "boolean",
        default: e.independentColorPoolPerBracketType,
        description: h(
          414,
          "Controls whether each bracket type has its own independent color pool."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      independentColorPoolPerBracketType: oe(t.independentColorPoolPerBracketType, this.defaultValue.independentColorPoolPerBracketType)
    };
  }
}
class Z3 extends wt {
  constructor() {
    const e = {
      bracketPairs: !1,
      bracketPairsHorizontal: "active",
      highlightActiveBracketPair: !0,
      indentation: !0,
      highlightActiveIndentation: !0
    };
    super(R.guides, "guides", e, {
      "editor.guides.bracketPairs": {
        type: ["boolean", "string"],
        enum: [!0, "active", !1],
        enumDescriptions: [
          h(415, "Enables bracket pair guides."),
          h(416, "Enables bracket pair guides only for the active bracket pair."),
          h(417, "Disables bracket pair guides.")
        ],
        default: e.bracketPairs,
        description: h(418, "Controls whether bracket pair guides are enabled or not.")
      },
      "editor.guides.bracketPairsHorizontal": {
        type: ["boolean", "string"],
        enum: [!0, "active", !1],
        enumDescriptions: [
          h(
            419,
            "Enables horizontal guides as addition to vertical bracket pair guides."
          ),
          h(420, "Enables horizontal guides only for the active bracket pair."),
          h(421, "Disables horizontal bracket pair guides.")
        ],
        default: e.bracketPairsHorizontal,
        description: h(422, "Controls whether horizontal bracket pair guides are enabled or not.")
      },
      "editor.guides.highlightActiveBracketPair": {
        type: "boolean",
        default: e.highlightActiveBracketPair,
        description: h(
          423,
          "Controls whether the editor should highlight the active bracket pair."
        )
      },
      "editor.guides.indentation": {
        type: "boolean",
        default: e.indentation,
        description: h(424, "Controls whether the editor should render indent guides.")
      },
      "editor.guides.highlightActiveIndentation": {
        type: ["boolean", "string"],
        enum: [!0, "always", !1],
        enumDescriptions: [
          h(425, "Highlights the active indent guide."),
          h(
            426,
            "Highlights the active indent guide even if bracket guides are highlighted."
          ),
          h(427, "Do not highlight the active indent guide.")
        ],
        default: e.highlightActiveIndentation,
        description: h(
          428,
          "Controls whether the editor should highlight the active indent guide."
        )
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      bracketPairs: Jc(t.bracketPairs, this.defaultValue.bracketPairs, [!0, !1, "active"]),
      bracketPairsHorizontal: Jc(t.bracketPairsHorizontal, this.defaultValue.bracketPairsHorizontal, [!0, !1, "active"]),
      highlightActiveBracketPair: oe(t.highlightActiveBracketPair, this.defaultValue.highlightActiveBracketPair),
      indentation: oe(t.indentation, this.defaultValue.indentation),
      highlightActiveIndentation: Jc(t.highlightActiveIndentation, this.defaultValue.highlightActiveIndentation, [!0, !1, "always"])
    };
  }
}
function Jc(i, e, t) {
  const n = t.indexOf(i);
  return n === -1 ? e : t[n];
}
class e9 extends wt {
  constructor() {
    const e = {
      insertMode: "insert",
      filterGraceful: !0,
      snippetsPreventQuickSuggestions: !1,
      localityBonus: !1,
      shareSuggestSelections: !1,
      selectionMode: "always",
      showIcons: !0,
      showStatusBar: !1,
      preview: !1,
      previewMode: "subwordSmart",
      showInlineDetails: !0,
      showMethods: !0,
      showFunctions: !0,
      showConstructors: !0,
      showDeprecated: !0,
      matchOnWordStartOnly: !0,
      showFields: !0,
      showVariables: !0,
      showClasses: !0,
      showStructs: !0,
      showInterfaces: !0,
      showModules: !0,
      showProperties: !0,
      showEvents: !0,
      showOperators: !0,
      showUnits: !0,
      showValues: !0,
      showConstants: !0,
      showEnums: !0,
      showEnumMembers: !0,
      showKeywords: !0,
      showWords: !0,
      showColors: !0,
      showFiles: !0,
      showReferences: !0,
      showFolders: !0,
      showTypeParameters: !0,
      showSnippets: !0,
      showUsers: !0,
      showIssues: !0
    };
    super(R.suggest, "suggest", e, {
      "editor.suggest.insertMode": {
        type: "string",
        enum: ["insert", "replace"],
        enumDescriptions: [
          h(429, "Insert suggestion without overwriting text right of the cursor."),
          h(430, "Insert suggestion and overwrite text right of the cursor.")
        ],
        default: e.insertMode,
        description: h(
          431,
          "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature."
        )
      },
      "editor.suggest.filterGraceful": {
        type: "boolean",
        default: e.filterGraceful,
        description: h(
          432,
          "Controls whether filtering and sorting suggestions accounts for small typos."
        )
      },
      "editor.suggest.localityBonus": {
        type: "boolean",
        default: e.localityBonus,
        description: h(
          433,
          "Controls whether sorting favors words that appear close to the cursor."
        )
      },
      "editor.suggest.shareSuggestSelections": {
        type: "boolean",
        default: e.shareSuggestSelections,
        markdownDescription: h(
          434,
          "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`)."
        )
      },
      "editor.suggest.selectionMode": {
        type: "string",
        enum: ["always", "never", "whenTriggerCharacter", "whenQuickSuggestion"],
        enumDescriptions: [
          h(
            435,
            "Always select a suggestion when automatically triggering IntelliSense."
          ),
          h(
            436,
            "Never select a suggestion when automatically triggering IntelliSense."
          ),
          h(
            437,
            "Select a suggestion only when triggering IntelliSense from a trigger character."
          ),
          h(438, "Select a suggestion only when triggering IntelliSense as you type.")
        ],
        default: e.selectionMode,
        markdownDescription: h(
          439,
          "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions ({0} and {1}) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.",
          "`#editor.quickSuggestions#`",
          "`#editor.suggestOnTriggerCharacters#`"
        )
      },
      "editor.suggest.snippetsPreventQuickSuggestions": {
        type: "boolean",
        default: e.snippetsPreventQuickSuggestions,
        description: h(440, "Controls whether an active snippet prevents quick suggestions.")
      },
      "editor.suggest.showIcons": {
        type: "boolean",
        default: e.showIcons,
        description: h(441, "Controls whether to show or hide icons in suggestions.")
      },
      "editor.suggest.showStatusBar": {
        type: "boolean",
        default: e.showStatusBar,
        description: h(
          442,
          "Controls the visibility of the status bar at the bottom of the suggest widget."
        )
      },
      "editor.suggest.preview": {
        type: "boolean",
        default: e.preview,
        description: h(443, "Controls whether to preview the suggestion outcome in the editor.")
      },
      "editor.suggest.showInlineDetails": {
        type: "boolean",
        default: e.showInlineDetails,
        description: h(
          444,
          "Controls whether suggest details show inline with the label or only in the details widget."
        )
      },
      "editor.suggest.maxVisibleSuggestions": {
        type: "number",
        deprecationMessage: h(445, "This setting is deprecated. The suggest widget can now be resized.")
      },
      "editor.suggest.filteredTypes": {
        type: "object",
        deprecationMessage: h(
          446,
          "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead."
        )
      },
      "editor.suggest.showMethods": {
        type: "boolean",
        default: !0,
        markdownDescription: h(447, "When enabled IntelliSense shows `method`-suggestions.")
      },
      "editor.suggest.showFunctions": {
        type: "boolean",
        default: !0,
        markdownDescription: h(448, "When enabled IntelliSense shows `function`-suggestions.")
      },
      "editor.suggest.showConstructors": {
        type: "boolean",
        default: !0,
        markdownDescription: h(449, "When enabled IntelliSense shows `constructor`-suggestions.")
      },
      "editor.suggest.showDeprecated": {
        type: "boolean",
        default: !0,
        markdownDescription: h(450, "When enabled IntelliSense shows `deprecated`-suggestions.")
      },
      "editor.suggest.matchOnWordStartOnly": {
        type: "boolean",
        default: !0,
        markdownDescription: h(
          451,
          "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality."
        )
      },
      "editor.suggest.showFields": {
        type: "boolean",
        default: !0,
        markdownDescription: h(452, "When enabled IntelliSense shows `field`-suggestions.")
      },
      "editor.suggest.showVariables": {
        type: "boolean",
        default: !0,
        markdownDescription: h(453, "When enabled IntelliSense shows `variable`-suggestions.")
      },
      "editor.suggest.showClasses": {
        type: "boolean",
        default: !0,
        markdownDescription: h(454, "When enabled IntelliSense shows `class`-suggestions.")
      },
      "editor.suggest.showStructs": {
        type: "boolean",
        default: !0,
        markdownDescription: h(455, "When enabled IntelliSense shows `struct`-suggestions.")
      },
      "editor.suggest.showInterfaces": {
        type: "boolean",
        default: !0,
        markdownDescription: h(456, "When enabled IntelliSense shows `interface`-suggestions.")
      },
      "editor.suggest.showModules": {
        type: "boolean",
        default: !0,
        markdownDescription: h(457, "When enabled IntelliSense shows `module`-suggestions.")
      },
      "editor.suggest.showProperties": {
        type: "boolean",
        default: !0,
        markdownDescription: h(458, "When enabled IntelliSense shows `property`-suggestions.")
      },
      "editor.suggest.showEvents": {
        type: "boolean",
        default: !0,
        markdownDescription: h(459, "When enabled IntelliSense shows `event`-suggestions.")
      },
      "editor.suggest.showOperators": {
        type: "boolean",
        default: !0,
        markdownDescription: h(460, "When enabled IntelliSense shows `operator`-suggestions.")
      },
      "editor.suggest.showUnits": {
        type: "boolean",
        default: !0,
        markdownDescription: h(461, "When enabled IntelliSense shows `unit`-suggestions.")
      },
      "editor.suggest.showValues": {
        type: "boolean",
        default: !0,
        markdownDescription: h(462, "When enabled IntelliSense shows `value`-suggestions.")
      },
      "editor.suggest.showConstants": {
        type: "boolean",
        default: !0,
        markdownDescription: h(463, "When enabled IntelliSense shows `constant`-suggestions.")
      },
      "editor.suggest.showEnums": {
        type: "boolean",
        default: !0,
        markdownDescription: h(464, "When enabled IntelliSense shows `enum`-suggestions.")
      },
      "editor.suggest.showEnumMembers": {
        type: "boolean",
        default: !0,
        markdownDescription: h(465, "When enabled IntelliSense shows `enumMember`-suggestions.")
      },
      "editor.suggest.showKeywords": {
        type: "boolean",
        default: !0,
        markdownDescription: h(466, "When enabled IntelliSense shows `keyword`-suggestions.")
      },
      "editor.suggest.showWords": {
        type: "boolean",
        default: !0,
        markdownDescription: h(467, "When enabled IntelliSense shows `text`-suggestions.")
      },
      "editor.suggest.showColors": {
        type: "boolean",
        default: !0,
        markdownDescription: h(468, "When enabled IntelliSense shows `color`-suggestions.")
      },
      "editor.suggest.showFiles": {
        type: "boolean",
        default: !0,
        markdownDescription: h(469, "When enabled IntelliSense shows `file`-suggestions.")
      },
      "editor.suggest.showReferences": {
        type: "boolean",
        default: !0,
        markdownDescription: h(470, "When enabled IntelliSense shows `reference`-suggestions.")
      },
      "editor.suggest.showCustomcolors": {
        type: "boolean",
        default: !0,
        markdownDescription: h(471, "When enabled IntelliSense shows `customcolor`-suggestions.")
      },
      "editor.suggest.showFolders": {
        type: "boolean",
        default: !0,
        markdownDescription: h(472, "When enabled IntelliSense shows `folder`-suggestions.")
      },
      "editor.suggest.showTypeParameters": {
        type: "boolean",
        default: !0,
        markdownDescription: h(473, "When enabled IntelliSense shows `typeParameter`-suggestions.")
      },
      "editor.suggest.showSnippets": {
        type: "boolean",
        default: !0,
        markdownDescription: h(474, "When enabled IntelliSense shows `snippet`-suggestions.")
      },
      "editor.suggest.showUsers": {
        type: "boolean",
        default: !0,
        markdownDescription: h(475, "When enabled IntelliSense shows `user`-suggestions.")
      },
      "editor.suggest.showIssues": {
        type: "boolean",
        default: !0,
        markdownDescription: h(476, "When enabled IntelliSense shows `issues`-suggestions.")
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      insertMode: yt(t.insertMode, this.defaultValue.insertMode, ["insert", "replace"]),
      filterGraceful: oe(t.filterGraceful, this.defaultValue.filterGraceful),
      snippetsPreventQuickSuggestions: oe(t.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),
      localityBonus: oe(t.localityBonus, this.defaultValue.localityBonus),
      shareSuggestSelections: oe(t.shareSuggestSelections, this.defaultValue.shareSuggestSelections),
      selectionMode: yt(t.selectionMode, this.defaultValue.selectionMode, ["always", "never", "whenQuickSuggestion", "whenTriggerCharacter"]),
      showIcons: oe(t.showIcons, this.defaultValue.showIcons),
      showStatusBar: oe(t.showStatusBar, this.defaultValue.showStatusBar),
      preview: oe(t.preview, this.defaultValue.preview),
      previewMode: yt(t.previewMode, this.defaultValue.previewMode, ["prefix", "subword", "subwordSmart"]),
      showInlineDetails: oe(t.showInlineDetails, this.defaultValue.showInlineDetails),
      showMethods: oe(t.showMethods, this.defaultValue.showMethods),
      showFunctions: oe(t.showFunctions, this.defaultValue.showFunctions),
      showConstructors: oe(t.showConstructors, this.defaultValue.showConstructors),
      showDeprecated: oe(t.showDeprecated, this.defaultValue.showDeprecated),
      matchOnWordStartOnly: oe(t.matchOnWordStartOnly, this.defaultValue.matchOnWordStartOnly),
      showFields: oe(t.showFields, this.defaultValue.showFields),
      showVariables: oe(t.showVariables, this.defaultValue.showVariables),
      showClasses: oe(t.showClasses, this.defaultValue.showClasses),
      showStructs: oe(t.showStructs, this.defaultValue.showStructs),
      showInterfaces: oe(t.showInterfaces, this.defaultValue.showInterfaces),
      showModules: oe(t.showModules, this.defaultValue.showModules),
      showProperties: oe(t.showProperties, this.defaultValue.showProperties),
      showEvents: oe(t.showEvents, this.defaultValue.showEvents),
      showOperators: oe(t.showOperators, this.defaultValue.showOperators),
      showUnits: oe(t.showUnits, this.defaultValue.showUnits),
      showValues: oe(t.showValues, this.defaultValue.showValues),
      showConstants: oe(t.showConstants, this.defaultValue.showConstants),
      showEnums: oe(t.showEnums, this.defaultValue.showEnums),
      showEnumMembers: oe(t.showEnumMembers, this.defaultValue.showEnumMembers),
      showKeywords: oe(t.showKeywords, this.defaultValue.showKeywords),
      showWords: oe(t.showWords, this.defaultValue.showWords),
      showColors: oe(t.showColors, this.defaultValue.showColors),
      showFiles: oe(t.showFiles, this.defaultValue.showFiles),
      showReferences: oe(t.showReferences, this.defaultValue.showReferences),
      showFolders: oe(t.showFolders, this.defaultValue.showFolders),
      showTypeParameters: oe(t.showTypeParameters, this.defaultValue.showTypeParameters),
      showSnippets: oe(t.showSnippets, this.defaultValue.showSnippets),
      showUsers: oe(t.showUsers, this.defaultValue.showUsers),
      showIssues: oe(t.showIssues, this.defaultValue.showIssues)
    };
  }
}
class t9 extends wt {
  constructor() {
    super(R.smartSelect, "smartSelect", {
      selectLeadingAndTrailingWhitespace: !0,
      selectSubwords: !0
    }, {
      "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
        description: h(477, "Whether leading and trailing whitespace should always be selected."),
        default: !0,
        type: "boolean"
      },
      "editor.smartSelect.selectSubwords": {
        description: h(
          478,
          "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected."
        ),
        default: !0,
        type: "boolean"
      }
    });
  }
  validate(e) {
    return !e || typeof e != "object" ? this.defaultValue : {
      selectLeadingAndTrailingWhitespace: oe(e.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace),
      selectSubwords: oe(e.selectSubwords, this.defaultValue.selectSubwords)
    };
  }
}
class i9 extends wt {
  constructor() {
    const e = [];
    super(R.wordSegmenterLocales, "wordSegmenterLocales", e, {
      anyOf: [
        {
          type: "string"
        },
        {
          type: "array",
          items: {
            type: "string"
          }
        }
      ],
      description: h(
        479,
        "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."
      ),
      type: "array",
      items: {
        type: "string"
      },
      default: e
    });
  }
  validate(e) {
    if (typeof e == "string" && (e = [e]), Array.isArray(e)) {
      const t = [];
      for (const n of e)
        if (typeof n == "string")
          try {
            Intl.Segmenter.supportedLocalesOf(n).length > 0 && t.push(n);
          } catch {
          }
      return t;
    }
    return this.defaultValue;
  }
}
var xs;
(function(i) {
  i[i.None = 0] = "None", i[i.Same = 1] = "Same", i[i.Indent = 2] = "Indent", i[i.DeepIndent = 3] = "DeepIndent";
})(xs || (xs = {}));
class n9 extends wt {
  constructor() {
    super(R.wrappingIndent, "wrappingIndent", xs.Same, {
      "editor.wrappingIndent": {
        type: "string",
        enum: ["none", "same", "indent", "deepIndent"],
        enumDescriptions: [
          h(480, "No indentation. Wrapped lines begin at column 1."),
          h(481, "Wrapped lines get the same indentation as the parent."),
          h(482, "Wrapped lines get +1 indentation toward the parent."),
          h(483, "Wrapped lines get +2 indentation toward the parent.")
        ],
        description: h(484, "Controls the indentation of wrapped lines."),
        default: "same"
      }
    });
  }
  validate(e) {
    switch (e) {
      case "none":
        return xs.None;
      case "same":
        return xs.Same;
      case "indent":
        return xs.Indent;
      case "deepIndent":
        return xs.DeepIndent;
    }
    return xs.Same;
  }
  compute(e, t, n) {
    return t.get(R.accessibilitySupport) === br.Enabled ? xs.None : n;
  }
}
class r9 extends ia {
  constructor() {
    super(R.wrappingInfo);
  }
  compute(e, t, n) {
    const r = t.get(R.layoutInfo);
    return {
      isDominatedByLongLines: e.isDominatedByLongLines,
      isWordWrapMinified: r.isWordWrapMinified,
      isViewportWrapping: r.isViewportWrapping,
      wrappingColumn: r.wrappingColumn
    };
  }
}
class s9 extends wt {
  constructor() {
    const e = { enabled: !0, showDropSelector: "afterDrop" };
    super(R.dropIntoEditor, "dropIntoEditor", e, {
      "editor.dropIntoEditor.enabled": {
        type: "boolean",
        default: e.enabled,
        markdownDescription: h(
          485,
          "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor)."
        )
      },
      "editor.dropIntoEditor.showDropSelector": {
        type: "string",
        markdownDescription: h(
          486,
          "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped."
        ),
        enum: [
          "afterDrop",
          "never"
        ],
        enumDescriptions: [
          h(
            487,
            "Show the drop selector widget after a file is dropped into the editor."
          ),
          h(
            488,
            "Never show the drop selector widget. Instead the default drop provider is always used."
          )
        ],
        default: "afterDrop"
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      showDropSelector: yt(t.showDropSelector, this.defaultValue.showDropSelector, ["afterDrop", "never"])
    };
  }
}
class o9 extends wt {
  constructor() {
    const e = { enabled: !0, showPasteSelector: "afterPaste" };
    super(R.pasteAs, "pasteAs", e, {
      "editor.pasteAs.enabled": {
        type: "boolean",
        default: e.enabled,
        markdownDescription: h(489, "Controls whether you can paste content in different ways.")
      },
      "editor.pasteAs.showPasteSelector": {
        type: "string",
        markdownDescription: h(
          490,
          "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted."
        ),
        enum: [
          "afterPaste",
          "never"
        ],
        enumDescriptions: [
          h(
            491,
            "Show the paste selector widget after content is pasted into the editor."
          ),
          h(
            492,
            "Never show the paste selector widget. Instead the default pasting behavior is always used."
          )
        ],
        default: "afterPaste"
      }
    });
  }
  validate(e) {
    if (!e || typeof e != "object")
      return this.defaultValue;
    const t = e;
    return {
      enabled: oe(t.enabled, this.defaultValue.enabled),
      showPasteSelector: yt(t.showPasteSelector, this.defaultValue.showPasteSelector, ["afterPaste", "never"])
    };
  }
}
const a9 = "Consolas, 'Courier New', monospace", l9 = "Menlo, Monaco, 'Courier New', monospace", c9 = "'Droid Sans Mono', 'monospace', monospace", Qs = {
  fontFamily: Un ? l9 : Yi ? a9 : c9,
  fontWeight: "normal",
  fontSize: Un ? 12 : 14,
  lineHeight: 0,
  letterSpacing: 0
}, u9 = [];
function $(i) {
  return u9[i.id] = i, i;
}
var R;
(function(i) {
  i[i.acceptSuggestionOnCommitCharacter = 0] = "acceptSuggestionOnCommitCharacter", i[i.acceptSuggestionOnEnter = 1] = "acceptSuggestionOnEnter", i[i.accessibilitySupport = 2] = "accessibilitySupport", i[i.accessibilityPageSize = 3] = "accessibilityPageSize", i[i.allowOverflow = 4] = "allowOverflow", i[i.allowVariableLineHeights = 5] = "allowVariableLineHeights", i[i.allowVariableFonts = 6] = "allowVariableFonts", i[i.allowVariableFontsInAccessibilityMode = 7] = "allowVariableFontsInAccessibilityMode", i[i.ariaLabel = 8] = "ariaLabel", i[i.ariaRequired = 9] = "ariaRequired", i[i.autoClosingBrackets = 10] = "autoClosingBrackets", i[i.autoClosingComments = 11] = "autoClosingComments", i[i.screenReaderAnnounceInlineSuggestion = 12] = "screenReaderAnnounceInlineSuggestion", i[i.autoClosingDelete = 13] = "autoClosingDelete", i[i.autoClosingOvertype = 14] = "autoClosingOvertype", i[i.autoClosingQuotes = 15] = "autoClosingQuotes", i[i.autoIndent = 16] = "autoIndent", i[i.autoIndentOnPaste = 17] = "autoIndentOnPaste", i[i.autoIndentOnPasteWithinString = 18] = "autoIndentOnPasteWithinString", i[i.automaticLayout = 19] = "automaticLayout", i[i.autoSurround = 20] = "autoSurround", i[i.bracketPairColorization = 21] = "bracketPairColorization", i[i.guides = 22] = "guides", i[i.codeLens = 23] = "codeLens", i[i.codeLensFontFamily = 24] = "codeLensFontFamily", i[i.codeLensFontSize = 25] = "codeLensFontSize", i[i.colorDecorators = 26] = "colorDecorators", i[i.colorDecoratorsLimit = 27] = "colorDecoratorsLimit", i[i.columnSelection = 28] = "columnSelection", i[i.comments = 29] = "comments", i[i.contextmenu = 30] = "contextmenu", i[i.copyWithSyntaxHighlighting = 31] = "copyWithSyntaxHighlighting", i[i.cursorBlinking = 32] = "cursorBlinking", i[i.cursorSmoothCaretAnimation = 33] = "cursorSmoothCaretAnimation", i[i.cursorStyle = 34] = "cursorStyle", i[i.cursorSurroundingLines = 35] = "cursorSurroundingLines", i[i.cursorSurroundingLinesStyle = 36] = "cursorSurroundingLinesStyle", i[i.cursorWidth = 37] = "cursorWidth", i[i.cursorHeight = 38] = "cursorHeight", i[i.disableLayerHinting = 39] = "disableLayerHinting", i[i.disableMonospaceOptimizations = 40] = "disableMonospaceOptimizations", i[i.domReadOnly = 41] = "domReadOnly", i[i.dragAndDrop = 42] = "dragAndDrop", i[i.dropIntoEditor = 43] = "dropIntoEditor", i[i.editContext = 44] = "editContext", i[i.emptySelectionClipboard = 45] = "emptySelectionClipboard", i[i.experimentalGpuAcceleration = 46] = "experimentalGpuAcceleration", i[i.experimentalWhitespaceRendering = 47] = "experimentalWhitespaceRendering", i[i.extraEditorClassName = 48] = "extraEditorClassName", i[i.fastScrollSensitivity = 49] = "fastScrollSensitivity", i[i.find = 50] = "find", i[i.fixedOverflowWidgets = 51] = "fixedOverflowWidgets", i[i.folding = 52] = "folding", i[i.foldingStrategy = 53] = "foldingStrategy", i[i.foldingHighlight = 54] = "foldingHighlight", i[i.foldingImportsByDefault = 55] = "foldingImportsByDefault", i[i.foldingMaximumRegions = 56] = "foldingMaximumRegions", i[i.unfoldOnClickAfterEndOfLine = 57] = "unfoldOnClickAfterEndOfLine", i[i.fontFamily = 58] = "fontFamily", i[i.fontInfo = 59] = "fontInfo", i[i.fontLigatures = 60] = "fontLigatures", i[i.fontSize = 61] = "fontSize", i[i.fontWeight = 62] = "fontWeight", i[i.fontVariations = 63] = "fontVariations", i[i.formatOnPaste = 64] = "formatOnPaste", i[i.formatOnType = 65] = "formatOnType", i[i.glyphMargin = 66] = "glyphMargin", i[i.gotoLocation = 67] = "gotoLocation", i[i.hideCursorInOverviewRuler = 68] = "hideCursorInOverviewRuler", i[i.hover = 69] = "hover", i[i.inDiffEditor = 70] = "inDiffEditor", i[i.inlineSuggest = 71] = "inlineSuggest", i[i.letterSpacing = 72] = "letterSpacing", i[i.lightbulb = 73] = "lightbulb", i[i.lineDecorationsWidth = 74] = "lineDecorationsWidth", i[i.lineHeight = 75] = "lineHeight", i[i.lineNumbers = 76] = "lineNumbers", i[i.lineNumbersMinChars = 77] = "lineNumbersMinChars", i[i.linkedEditing = 78] = "linkedEditing", i[i.links = 79] = "links", i[i.matchBrackets = 80] = "matchBrackets", i[i.minimap = 81] = "minimap", i[i.mouseStyle = 82] = "mouseStyle", i[i.mouseWheelScrollSensitivity = 83] = "mouseWheelScrollSensitivity", i[i.mouseWheelZoom = 84] = "mouseWheelZoom", i[i.multiCursorMergeOverlapping = 85] = "multiCursorMergeOverlapping", i[i.multiCursorModifier = 86] = "multiCursorModifier", i[i.multiCursorPaste = 87] = "multiCursorPaste", i[i.multiCursorLimit = 88] = "multiCursorLimit", i[i.occurrencesHighlight = 89] = "occurrencesHighlight", i[i.occurrencesHighlightDelay = 90] = "occurrencesHighlightDelay", i[i.overtypeCursorStyle = 91] = "overtypeCursorStyle", i[i.overtypeOnPaste = 92] = "overtypeOnPaste", i[i.overviewRulerBorder = 93] = "overviewRulerBorder", i[i.overviewRulerLanes = 94] = "overviewRulerLanes", i[i.padding = 95] = "padding", i[i.pasteAs = 96] = "pasteAs", i[i.parameterHints = 97] = "parameterHints", i[i.peekWidgetDefaultFocus = 98] = "peekWidgetDefaultFocus", i[i.placeholder = 99] = "placeholder", i[i.definitionLinkOpensInPeek = 100] = "definitionLinkOpensInPeek", i[i.quickSuggestions = 101] = "quickSuggestions", i[i.quickSuggestionsDelay = 102] = "quickSuggestionsDelay", i[i.readOnly = 103] = "readOnly", i[i.readOnlyMessage = 104] = "readOnlyMessage", i[i.renameOnType = 105] = "renameOnType", i[i.renderRichScreenReaderContent = 106] = "renderRichScreenReaderContent", i[i.renderControlCharacters = 107] = "renderControlCharacters", i[i.renderFinalNewline = 108] = "renderFinalNewline", i[i.renderLineHighlight = 109] = "renderLineHighlight", i[i.renderLineHighlightOnlyWhenFocus = 110] = "renderLineHighlightOnlyWhenFocus", i[i.renderValidationDecorations = 111] = "renderValidationDecorations", i[i.renderWhitespace = 112] = "renderWhitespace", i[i.revealHorizontalRightPadding = 113] = "revealHorizontalRightPadding", i[i.roundedSelection = 114] = "roundedSelection", i[i.rulers = 115] = "rulers", i[i.scrollbar = 116] = "scrollbar", i[i.scrollBeyondLastColumn = 117] = "scrollBeyondLastColumn", i[i.scrollBeyondLastLine = 118] = "scrollBeyondLastLine", i[i.scrollPredominantAxis = 119] = "scrollPredominantAxis", i[i.selectionClipboard = 120] = "selectionClipboard", i[i.selectionHighlight = 121] = "selectionHighlight", i[i.selectionHighlightMaxLength = 122] = "selectionHighlightMaxLength", i[i.selectionHighlightMultiline = 123] = "selectionHighlightMultiline", i[i.selectOnLineNumbers = 124] = "selectOnLineNumbers", i[i.showFoldingControls = 125] = "showFoldingControls", i[i.showUnused = 126] = "showUnused", i[i.snippetSuggestions = 127] = "snippetSuggestions", i[i.smartSelect = 128] = "smartSelect", i[i.smoothScrolling = 129] = "smoothScrolling", i[i.stickyScroll = 130] = "stickyScroll", i[i.stickyTabStops = 131] = "stickyTabStops", i[i.stopRenderingLineAfter = 132] = "stopRenderingLineAfter", i[i.suggest = 133] = "suggest", i[i.suggestFontSize = 134] = "suggestFontSize", i[i.suggestLineHeight = 135] = "suggestLineHeight", i[i.suggestOnTriggerCharacters = 136] = "suggestOnTriggerCharacters", i[i.suggestSelection = 137] = "suggestSelection", i[i.tabCompletion = 138] = "tabCompletion", i[i.tabIndex = 139] = "tabIndex", i[i.trimWhitespaceOnDelete = 140] = "trimWhitespaceOnDelete", i[i.unicodeHighlighting = 141] = "unicodeHighlighting", i[i.unusualLineTerminators = 142] = "unusualLineTerminators", i[i.useShadowDOM = 143] = "useShadowDOM", i[i.useTabStops = 144] = "useTabStops", i[i.wordBreak = 145] = "wordBreak", i[i.wordSegmenterLocales = 146] = "wordSegmenterLocales", i[i.wordSeparators = 147] = "wordSeparators", i[i.wordWrap = 148] = "wordWrap", i[i.wordWrapBreakAfterCharacters = 149] = "wordWrapBreakAfterCharacters", i[i.wordWrapBreakBeforeCharacters = 150] = "wordWrapBreakBeforeCharacters", i[i.wordWrapColumn = 151] = "wordWrapColumn", i[i.wordWrapOverride1 = 152] = "wordWrapOverride1", i[i.wordWrapOverride2 = 153] = "wordWrapOverride2", i[i.wrappingIndent = 154] = "wrappingIndent", i[i.wrappingStrategy = 155] = "wrappingStrategy", i[i.showDeprecated = 156] = "showDeprecated", i[i.inertialScroll = 157] = "inertialScroll", i[i.inlayHints = 158] = "inlayHints", i[i.wrapOnEscapedLineFeeds = 159] = "wrapOnEscapedLineFeeds", i[i.effectiveCursorStyle = 160] = "effectiveCursorStyle", i[i.editorClassName = 161] = "editorClassName", i[i.pixelRatio = 162] = "pixelRatio", i[i.tabFocusMode = 163] = "tabFocusMode", i[i.layoutInfo = 164] = "layoutInfo", i[i.wrappingInfo = 165] = "wrappingInfo", i[i.defaultColorDecorators = 166] = "defaultColorDecorators", i[i.colorDecoratorsActivatedOn = 167] = "colorDecoratorsActivatedOn", i[i.inlineCompletionsAccessibilityVerbose = 168] = "inlineCompletionsAccessibilityVerbose", i[i.effectiveEditContext = 169] = "effectiveEditContext", i[i.scrollOnMiddleClick = 170] = "scrollOnMiddleClick", i[i.effectiveAllowVariableFonts = 171] = "effectiveAllowVariableFonts";
})(R || (R = {}));
$(new ke(
  R.acceptSuggestionOnCommitCharacter,
  "acceptSuggestionOnCommitCharacter",
  !0,
  { markdownDescription: h(
    493,
    "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."
  ) }
)), $(new bt(
  R.acceptSuggestionOnEnter,
  "acceptSuggestionOnEnter",
  "on",
  ["on", "smart", "off"],
  {
    markdownEnumDescriptions: [
      "",
      h(
        494,
        "Only accept a suggestion with `Enter` when it makes a textual change."
      ),
      ""
    ],
    markdownDescription: h(
      495,
      "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions."
    )
  }
)), $(new b3()), $(new Ze(
  R.accessibilityPageSize,
  "accessibilityPageSize",
  500,
  1,
  Ai.MAX_SAFE_SMALL_INTEGER,
  {
    description: h(
      496,
      "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."
    ),
    tags: ["accessibility"]
  }
)), $(new ke(R.allowOverflow, "allowOverflow", !0)), $(new ke(R.allowVariableLineHeights, "allowVariableLineHeights", !0, {
  description: h(
    497,
    "Controls whether to allow using variable line heights in the editor."
  )
})), $(new ke(R.allowVariableFonts, "allowVariableFonts", !0, {
  description: h(498, "Controls whether to allow using variable fonts in the editor.")
})), $(new ke(
  R.allowVariableFontsInAccessibilityMode,
  "allowVariableFontsInAccessibilityMode",
  !1,
  {
    description: h(
      499,
      "Controls whether to allow using variable fonts in the editor in the accessibility mode."
    ),
    tags: ["accessibility"]
  }
)), $(new Li(R.ariaLabel, "ariaLabel", h(500, "Editor content"))), $(new ke(R.ariaRequired, "ariaRequired", !1, void 0)), $(new ke(
  R.screenReaderAnnounceInlineSuggestion,
  "screenReaderAnnounceInlineSuggestion",
  !0,
  {
    description: h(
      501,
      "Control whether inline suggestions are announced by a screen reader."
    ),
    tags: ["accessibility"]
  }
)), $(new bt(
  R.autoClosingBrackets,
  "autoClosingBrackets",
  "languageDefined",
  ["always", "languageDefined", "beforeWhitespace", "never"],
  {
    enumDescriptions: [
      "",
      h(
        502,
        "Use language configurations to determine when to autoclose brackets."
      ),
      h(
        503,
        "Autoclose brackets only when the cursor is to the left of whitespace."
      ),
      ""
    ],
    description: h(
      504,
      "Controls whether the editor should automatically close brackets after the user adds an opening bracket."
    )
  }
)), $(new bt(
  R.autoClosingComments,
  "autoClosingComments",
  "languageDefined",
  ["always", "languageDefined", "beforeWhitespace", "never"],
  {
    enumDescriptions: [
      "",
      h(
        505,
        "Use language configurations to determine when to autoclose comments."
      ),
      h(
        506,
        "Autoclose comments only when the cursor is to the left of whitespace."
      ),
      ""
    ],
    description: h(
      507,
      "Controls whether the editor should automatically close comments after the user adds an opening comment."
    )
  }
)), $(new bt(
  R.autoClosingDelete,
  "autoClosingDelete",
  "auto",
  ["always", "auto", "never"],
  {
    enumDescriptions: [
      "",
      h(
        508,
        "Remove adjacent closing quotes or brackets only if they were automatically inserted."
      ),
      ""
    ],
    description: h(
      509,
      "Controls whether the editor should remove adjacent closing quotes or brackets when deleting."
    )
  }
)), $(new bt(
  R.autoClosingOvertype,
  "autoClosingOvertype",
  "auto",
  ["always", "auto", "never"],
  {
    enumDescriptions: [
      "",
      h(
        510,
        "Type over closing quotes or brackets only if they were automatically inserted."
      ),
      ""
    ],
    description: h(
      511,
      "Controls whether the editor should type over closing quotes or brackets."
    )
  }
)), $(new bt(
  R.autoClosingQuotes,
  "autoClosingQuotes",
  "languageDefined",
  ["always", "languageDefined", "beforeWhitespace", "never"],
  {
    enumDescriptions: [
      "",
      h(512, "Use language configurations to determine when to autoclose quotes."),
      h(513, "Autoclose quotes only when the cursor is to the left of whitespace."),
      ""
    ],
    description: h(
      514,
      "Controls whether the editor should automatically close quotes after the user adds an opening quote."
    )
  }
)), $(new Md(
  R.autoIndent,
  "autoIndent",
  xo.Full,
  "full",
  ["none", "keep", "brackets", "advanced", "full"],
  w3,
  {
    enumDescriptions: [
      h(515, "The editor will not insert indentation automatically."),
      h(516, "The editor will keep the current line's indentation."),
      h(
        517,
        "The editor will keep the current line's indentation and honor language defined brackets."
      ),
      h(
        518,
        "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."
      ),
      h(
        519,
        "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
      )
    ],
    description: h(
      520,
      "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines."
    )
  }
)), $(new ke(
  R.autoIndentOnPaste,
  "autoIndentOnPaste",
  !1,
  { description: h(
    521,
    "Controls whether the editor should automatically auto-indent the pasted content."
  ) }
)), $(new ke(
  R.autoIndentOnPasteWithinString,
  "autoIndentOnPasteWithinString",
  !0,
  { description: h(
    522,
    "Controls whether the editor should automatically auto-indent the pasted content when pasted within a string. This takes effect when autoIndentOnPaste is true."
  ) }
)), $(new ke(R.automaticLayout, "automaticLayout", !1)), $(new bt(
  R.autoSurround,
  "autoSurround",
  "languageDefined",
  ["languageDefined", "quotes", "brackets", "never"],
  {
    enumDescriptions: [
      h(
        523,
        "Use language configurations to determine when to automatically surround selections."
      ),
      h(524, "Surround with quotes but not brackets."),
      h(525, "Surround with brackets but not quotes."),
      ""
    ],
    description: h(
      526,
      "Controls whether the editor should automatically surround selections when typing quotes or brackets."
    )
  }
)), $(new X3()), $(new Z3()), $(new ke(
  R.stickyTabStops,
  "stickyTabStops",
  !1,
  { description: h(
    527,
    "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops."
  ) }
)), $(new ke(R.codeLens, "codeLens", !0, { description: h(528, "Controls whether the editor shows CodeLens.") })), $(new Li(
  R.codeLensFontFamily,
  "codeLensFontFamily",
  "",
  { description: h(529, "Controls the font family for CodeLens.") }
)), $(new Ze(R.codeLensFontSize, "codeLensFontSize", 0, 0, 100, {
  type: "number",
  default: 0,
  minimum: 0,
  maximum: 100,
  markdownDescription: h(
    530,
    "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used."
  )
})), $(new ke(
  R.colorDecorators,
  "colorDecorators",
  !0,
  { description: h(
    531,
    "Controls whether the editor should render the inline color decorators and color picker."
  ) }
)), $(new bt(
  R.colorDecoratorsActivatedOn,
  "colorDecoratorsActivatedOn",
  "clickAndHover",
  ["clickAndHover", "hover", "click"],
  {
    enumDescriptions: [
      h(
        532,
        "Make the color picker appear both on click and hover of the color decorator"
      ),
      h(533, "Make the color picker appear on hover of the color decorator"),
      h(534, "Make the color picker appear on click of the color decorator")
    ],
    description: h(
      535,
      "Controls the condition to make a color picker appear from a color decorator."
    )
  }
)), $(new Ze(
  R.colorDecoratorsLimit,
  "colorDecoratorsLimit",
  500,
  1,
  1e6,
  {
    markdownDescription: h(
      536,
      "Controls the max number of color decorators that can be rendered in an editor at once."
    )
  }
)), $(new ke(
  R.columnSelection,
  "columnSelection",
  !1,
  { description: h(
    537,
    "Enable that the selection with the mouse and keys is doing column selection."
  ) }
)), $(new y3()), $(new ke(R.contextmenu, "contextmenu", !0)), $(new ke(
  R.copyWithSyntaxHighlighting,
  "copyWithSyntaxHighlighting",
  !0,
  { description: h(
    538,
    "Controls whether syntax highlighting should be copied into the clipboard."
  ) }
)), $(new Md(
  R.cursorBlinking,
  "cursorBlinking",
  Eo.Blink,
  "blink",
  ["blink", "smooth", "phase", "expand", "solid"],
  x3,
  { description: h(539, "Control the cursor animation style.") }
)), $(new bt(
  R.cursorSmoothCaretAnimation,
  "cursorSmoothCaretAnimation",
  "off",
  ["off", "explicit", "on"],
  {
    enumDescriptions: [
      h(540, "Smooth caret animation is disabled."),
      h(
        541,
        "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture."
      ),
      h(542, "Smooth caret animation is always enabled.")
    ],
    description: h(543, "Controls whether the smooth caret animation should be enabled.")
  }
)), $(new Md(
  R.cursorStyle,
  "cursorStyle",
  wr.Line,
  "line",
  ["line", "block", "underline", "line-thin", "block-outline", "underline-thin"],
  aD,
  { description: h(544, "Controls the cursor style in insert input mode.") }
)), $(new Md(
  R.overtypeCursorStyle,
  "overtypeCursorStyle",
  wr.Block,
  "block",
  ["line", "block", "underline", "line-thin", "block-outline", "underline-thin"],
  aD,
  { description: h(545, "Controls the cursor style in overtype input mode.") }
)), $(new Ze(
  R.cursorSurroundingLines,
  "cursorSurroundingLines",
  0,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  { description: h(
    546,
    "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors."
  ) }
)), $(new bt(
  R.cursorSurroundingLinesStyle,
  "cursorSurroundingLinesStyle",
  "default",
  ["default", "all"],
  {
    enumDescriptions: [
      h(
        547,
        "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."
      ),
      h(548, "`cursorSurroundingLines` is enforced always.")
    ],
    markdownDescription: h(549, "Controls when `#editor.cursorSurroundingLines#` should be enforced.")
  }
)), $(new Ze(
  R.cursorWidth,
  "cursorWidth",
  0,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  { markdownDescription: h(
    550,
    "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`."
  ) }
)), $(new Ze(
  R.cursorHeight,
  "cursorHeight",
  0,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  { markdownDescription: h(
    551,
    "Controls the height of the cursor when `#editor.cursorStyle#` is set to `line`. Cursor's max height depends on line height."
  ) }
)), $(new ke(R.disableLayerHinting, "disableLayerHinting", !1)), $(new ke(
  R.disableMonospaceOptimizations,
  "disableMonospaceOptimizations",
  !1
)), $(new ke(R.domReadOnly, "domReadOnly", !1)), $(new ke(
  R.dragAndDrop,
  "dragAndDrop",
  !0,
  { description: h(
    552,
    "Controls whether the editor should allow moving selections via drag and drop."
  ) }
)), $(new S3()), $(new s9()), $(new ke(R.editContext, "editContext", !0, {
  description: h(
    553,
    "Sets whether the EditContext API should be used instead of the text area to power input in the editor."
  ),
  included: FE || BT || UT
})), $(new ke(
  R.renderRichScreenReaderContent,
  "renderRichScreenReaderContent",
  !1,
  {
    description: h(
      554,
      "Whether to render rich screen reader content when the `editor.editContext` is enabled."
    )
  }
)), $(new M3()), $(new bt(
  R.experimentalGpuAcceleration,
  "experimentalGpuAcceleration",
  "off",
  ["off", "on"],
  {
    tags: ["experimental"],
    enumDescriptions: [
      h(555, "Use regular DOM-based rendering."),
      h(556, "Use GPU acceleration.")
    ],
    description: h(
      557,
      "Controls whether to use the experimental GPU acceleration to render the editor."
    )
  }
)), $(new bt(
  R.experimentalWhitespaceRendering,
  "experimentalWhitespaceRendering",
  "svg",
  ["svg", "font", "off"],
  {
    enumDescriptions: [
      h(558, "Use a new rendering method with svgs."),
      h(559, "Use a new rendering method with font characters."),
      h(560, "Use the stable rendering method.")
    ],
    description: h(
      561,
      "Controls whether whitespace is rendered with a new, experimental method."
    )
  }
)), $(new Li(R.extraEditorClassName, "extraEditorClassName", "")), $(new Qn(
  R.fastScrollSensitivity,
  "fastScrollSensitivity",
  5,
  (i) => i <= 0 ? 5 : i,
  { markdownDescription: h(562, "Scrolling speed multiplier when pressing `Alt`.") }
)), $(new D3()), $(new ke(R.fixedOverflowWidgets, "fixedOverflowWidgets", !1)), $(new ke(R.folding, "folding", !0, { description: h(563, "Controls whether the editor has code folding enabled.") })), $(new bt(
  R.foldingStrategy,
  "foldingStrategy",
  "auto",
  ["auto", "indentation"],
  {
    enumDescriptions: [
      h(
        564,
        "Use a language-specific folding strategy if available, else the indentation-based one."
      ),
      h(565, "Use the indentation-based folding strategy.")
    ],
    description: h(566, "Controls the strategy for computing folding ranges.")
  }
)), $(new ke(
  R.foldingHighlight,
  "foldingHighlight",
  !0,
  { description: h(567, "Controls whether the editor should highlight folded ranges.") }
)), $(new ke(
  R.foldingImportsByDefault,
  "foldingImportsByDefault",
  !1,
  { description: h(568, "Controls whether the editor automatically collapses import ranges.") }
)), $(new Ze(
  R.foldingMaximumRegions,
  "foldingMaximumRegions",
  5e3,
  10,
  65e3,
  { description: h(
    569,
    "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions."
  ) }
)), $(new ke(
  R.unfoldOnClickAfterEndOfLine,
  "unfoldOnClickAfterEndOfLine",
  !1,
  { description: h(
    570,
    "Controls whether clicking on the empty content after a folded line will unfold the line."
  ) }
)), $(new Li(
  R.fontFamily,
  "fontFamily",
  Qs.fontFamily,
  { description: h(571, "Controls the font family.") }
)), $(new k3()), $(new rb()), $(new P3()), $(new ob()), $(new sb()), $(new ke(
  R.formatOnPaste,
  "formatOnPaste",
  !1,
  { description: h(
    572,
    "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."
  ) }
)), $(new ke(
  R.formatOnType,
  "formatOnType",
  !1,
  { description: h(
    573,
    "Controls whether the editor should automatically format the line after typing."
  ) }
)), $(new ke(
  R.glyphMargin,
  "glyphMargin",
  !0,
  { description: h(
    574,
    "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."
  ) }
)), $(new A3()), $(new ke(
  R.hideCursorInOverviewRuler,
  "hideCursorInOverviewRuler",
  !1,
  { description: h(575, "Controls whether the cursor should be hidden in the overview ruler.") }
)), $(new R3()), $(new ke(R.inDiffEditor, "inDiffEditor", !1)), $(new ke(
  R.inertialScroll,
  "inertialScroll",
  !1,
  { description: h(576, "Make scrolling inertial - mostly useful with touchpad on linux.") }
)), $(new Qn(
  R.letterSpacing,
  "letterSpacing",
  Qs.letterSpacing,
  (i) => Qn.clamp(i, -5, 20),
  { description: h(577, "Controls the letter spacing in pixels.") }
)), $(new N3()), $(new F3()), $(new U3()), $(new j3()), $(new Ze(R.lineNumbersMinChars, "lineNumbersMinChars", 5, 1, 300)), $(new ke(
  R.linkedEditing,
  "linkedEditing",
  !1,
  { description: h(
    578,
    "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing."
  ) }
)), $(new ke(R.links, "links", !0, { description: h(
  579,
  "Controls whether the editor should detect links and make them clickable."
) })), $(new bt(
  R.matchBrackets,
  "matchBrackets",
  "always",
  ["always", "near", "never"],
  { description: h(580, "Highlight matching brackets.") }
)), $(new $3()), $(new bt(R.mouseStyle, "mouseStyle", "text", ["text", "default", "copy"])), $(new Qn(
  R.mouseWheelScrollSensitivity,
  "mouseWheelScrollSensitivity",
  1,
  (i) => i === 0 ? 1 : i,
  { markdownDescription: h(
    581,
    "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."
  ) }
)), $(new ke(R.mouseWheelZoom, "mouseWheelZoom", !1, {
  markdownDescription: Un ? h(
    582,
    "Zoom the font of the editor when using mouse wheel and holding `Cmd`."
  ) : h(
    583,
    "Zoom the font of the editor when using mouse wheel and holding `Ctrl`."
  )
})), $(new ke(
  R.multiCursorMergeOverlapping,
  "multiCursorMergeOverlapping",
  !0,
  { description: h(584, "Merge multiple cursors when they are overlapping.") }
)), $(new Md(
  R.multiCursorModifier,
  "multiCursorModifier",
  "altKey",
  "alt",
  ["ctrlCmd", "alt"],
  H3,
  {
    markdownEnumDescriptions: [
      h(585, "Maps to `Control` on Windows and Linux and to `Command` on macOS."),
      h(586, "Maps to `Alt` on Windows and Linux and to `Option` on macOS.")
    ],
    markdownDescription: h(
      587,
      "The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)."
    )
  }
)), $(new bt(
  R.multiCursorPaste,
  "multiCursorPaste",
  "spread",
  ["spread", "full"],
  {
    markdownEnumDescriptions: [
      h(588, "Each cursor pastes a single line of the text."),
      h(589, "Each cursor pastes the full text.")
    ],
    markdownDescription: h(
      590,
      "Controls pasting when the line count of the pasted text matches the cursor count."
    )
  }
)), $(new Ze(R.multiCursorLimit, "multiCursorLimit", 1e4, 1, 1e5, {
  markdownDescription: h(
    591,
    "Controls the max number of cursors that can be in an active editor at once."
  )
})), $(new bt(
  R.occurrencesHighlight,
  "occurrencesHighlight",
  "singleFile",
  ["off", "singleFile", "multiFile"],
  {
    markdownEnumDescriptions: [
      h(592, "Does not highlight occurrences."),
      h(593, "Highlights occurrences only in the current file."),
      h(594, "Experimental: Highlights occurrences across all valid open files.")
    ],
    markdownDescription: h(
      595,
      "Controls whether occurrences should be highlighted across open files."
    )
  }
)), $(new Ze(
  R.occurrencesHighlightDelay,
  "occurrencesHighlightDelay",
  0,
  0,
  2e3,
  {
    description: h(
      596,
      "Controls the delay in milliseconds after which occurrences are highlighted."
    ),
    tags: ["preview"]
  }
)), $(new ke(
  R.overtypeOnPaste,
  "overtypeOnPaste",
  !0,
  { description: h(597, "Controls whether pasting should overtype.") }
)), $(new ke(
  R.overviewRulerBorder,
  "overviewRulerBorder",
  !0,
  { description: h(
    598,
    "Controls whether a border should be drawn around the overview ruler."
  ) }
)), $(new Ze(R.overviewRulerLanes, "overviewRulerLanes", 3, 0, 3)), $(new B3()), $(new o9()), $(new W3()), $(new bt(
  R.peekWidgetDefaultFocus,
  "peekWidgetDefaultFocus",
  "tree",
  ["tree", "editor"],
  {
    enumDescriptions: [
      h(599, "Focus the tree when opening peek"),
      h(600, "Focus the editor when opening peek")
    ],
    description: h(
      601,
      "Controls whether to focus the inline editor or the tree in the peek widget."
    )
  }
)), $(new z3()), $(new ke(
  R.definitionLinkOpensInPeek,
  "definitionLinkOpensInPeek",
  !1,
  { description: h(
    602,
    "Controls whether the Go to Definition mouse gesture always opens the peek widget."
  ) }
)), $(new q3()), $(new Ze(
  R.quickSuggestionsDelay,
  "quickSuggestionsDelay",
  10,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  {
    description: h(
      603,
      "Controls the delay in milliseconds after which quick suggestions will show up."
    ),
    experiment: {
      mode: "startup"
    }
  }
)), $(new ke(R.readOnly, "readOnly", !1)), $(new Q3()), $(new ke(
  R.renameOnType,
  "renameOnType",
  !1,
  { description: h(604, "Controls whether the editor auto renames on type."), markdownDeprecationMessage: h(605, "Deprecated, use `editor.linkedEditing` instead.") }
)), $(new ke(
  R.renderControlCharacters,
  "renderControlCharacters",
  !0,
  { description: h(606, "Controls whether the editor should render control characters."), restricted: !0 }
)), $(new bt(
  R.renderFinalNewline,
  "renderFinalNewline",
  jo ? "dimmed" : "on",
  ["off", "on", "dimmed"],
  { description: h(607, "Render last line number when the file ends with a newline.") }
)), $(new bt(
  R.renderLineHighlight,
  "renderLineHighlight",
  "line",
  ["none", "gutter", "line", "all"],
  {
    enumDescriptions: [
      "",
      "",
      "",
      h(608, "Highlights both the gutter and the current line.")
    ],
    description: h(609, "Controls how the editor should render the current line highlight.")
  }
)), $(new ke(
  R.renderLineHighlightOnlyWhenFocus,
  "renderLineHighlightOnlyWhenFocus",
  !1,
  { description: h(
    610,
    "Controls if the editor should render the current line highlight only when the editor is focused."
  ) }
)), $(new bt(
  R.renderValidationDecorations,
  "renderValidationDecorations",
  "editable",
  ["editable", "on", "off"]
)), $(new bt(
  R.renderWhitespace,
  "renderWhitespace",
  "selection",
  ["none", "boundary", "selection", "trailing", "all"],
  {
    enumDescriptions: [
      "",
      h(
        611,
        "Render whitespace characters except for single spaces between words."
      ),
      h(612, "Render whitespace characters only on selected text."),
      h(613, "Render only trailing whitespace characters."),
      ""
    ],
    description: h(614, "Controls how the editor should render whitespace characters.")
  }
)), $(new Ze(
  R.revealHorizontalRightPadding,
  "revealHorizontalRightPadding",
  15,
  0,
  1e3
)), $(new ke(
  R.roundedSelection,
  "roundedSelection",
  !0,
  { description: h(615, "Controls whether selections should have rounded corners.") }
)), $(new G3()), $(new K3()), $(new Ze(
  R.scrollBeyondLastColumn,
  "scrollBeyondLastColumn",
  4,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  { description: h(
    616,
    "Controls the number of extra characters beyond which the editor will scroll horizontally."
  ) }
)), $(new ke(
  R.scrollBeyondLastLine,
  "scrollBeyondLastLine",
  !0,
  { description: h(617, "Controls whether the editor will scroll beyond the last line.") }
)), $(new ke(
  R.scrollOnMiddleClick,
  "scrollOnMiddleClick",
  !1,
  { description: h(
    618,
    "Controls whether the editor will scroll when the middle button is pressed."
  ) }
)), $(new ke(
  R.scrollPredominantAxis,
  "scrollPredominantAxis",
  !0,
  { description: h(
    619,
    "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad."
  ) }
)), $(new ke(R.selectionClipboard, "selectionClipboard", !0, {
  description: h(620, "Controls whether the Linux primary clipboard should be supported."),
  included: jo
})), $(new ke(
  R.selectionHighlight,
  "selectionHighlight",
  !0,
  { description: h(
    621,
    "Controls whether the editor should highlight matches similar to the selection."
  ) }
)), $(new Ze(
  R.selectionHighlightMaxLength,
  "selectionHighlightMaxLength",
  200,
  0,
  Ai.MAX_SAFE_SMALL_INTEGER,
  { description: h(
    622,
    "Controls how many characters can be in the selection before similiar matches are not highlighted. Set to zero for unlimited."
  ) }
)), $(new ke(
  R.selectionHighlightMultiline,
  "selectionHighlightMultiline",
  !1,
  { description: h(
    623,
    "Controls whether the editor should highlight selection matches that span multiple lines."
  ) }
)), $(new ke(R.selectOnLineNumbers, "selectOnLineNumbers", !0)), $(new bt(
  R.showFoldingControls,
  "showFoldingControls",
  "mouseover",
  ["always", "never", "mouseover"],
  {
    enumDescriptions: [
      h(624, "Always show the folding controls."),
      h(625, "Never show the folding controls and reduce the gutter size."),
      h(626, "Only show the folding controls when the mouse is over the gutter.")
    ],
    description: h(627, "Controls when the folding controls on the gutter are shown.")
  }
)), $(new ke(R.showUnused, "showUnused", !0, { description: h(628, "Controls fading out of unused code.") })), $(new ke(
  R.showDeprecated,
  "showDeprecated",
  !0,
  { description: h(629, "Controls strikethrough deprecated variables.") }
)), $(new O3()), $(new bt(
  R.snippetSuggestions,
  "snippetSuggestions",
  "inline",
  ["top", "bottom", "inline", "none"],
  {
    enumDescriptions: [
      h(630, "Show snippet suggestions on top of other suggestions."),
      h(631, "Show snippet suggestions below other suggestions."),
      h(632, "Show snippets suggestions with other suggestions."),
      h(633, "Do not show snippet suggestions.")
    ],
    description: h(
      634,
      "Controls whether snippets are shown with other suggestions and how they are sorted."
    )
  }
)), $(new t9()), $(new ke(
  R.smoothScrolling,
  "smoothScrolling",
  !1,
  { description: h(635, "Controls whether the editor will scroll using an animation.") }
)), $(new Ze(
  R.stopRenderingLineAfter,
  "stopRenderingLineAfter",
  1e4,
  -1,
  Ai.MAX_SAFE_SMALL_INTEGER
)), $(new e9()), $(new Y3()), $(new ke(
  R.inlineCompletionsAccessibilityVerbose,
  "inlineCompletionsAccessibilityVerbose",
  !1,
  { description: h(
    636,
    "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown."
  ) }
)), $(new Ze(
  R.suggestFontSize,
  "suggestFontSize",
  0,
  0,
  1e3,
  { markdownDescription: h(
    637,
    "Font size for the suggest widget. When set to {0}, the value of {1} is used.",
    "`0`",
    "`#editor.fontSize#`"
  ) }
)), $(new Ze(
  R.suggestLineHeight,
  "suggestLineHeight",
  0,
  0,
  1e3,
  { markdownDescription: h(
    638,
    "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.",
    "`0`",
    "`#editor.lineHeight#`"
  ) }
)), $(new ke(
  R.suggestOnTriggerCharacters,
  "suggestOnTriggerCharacters",
  !0,
  { description: h(
    639,
    "Controls whether suggestions should automatically show up when typing trigger characters."
  ) }
)), $(new bt(
  R.suggestSelection,
  "suggestSelection",
  "first",
  ["first", "recentlyUsed", "recentlyUsedByPrefix"],
  {
    markdownEnumDescriptions: [
      h(640, "Always select the first suggestion."),
      h(
        641,
        "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."
      ),
      h(
        642,
        "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
      )
    ],
    description: h(
      643,
      "Controls how suggestions are pre-selected when showing the suggest list."
    )
  }
)), $(new bt(
  R.tabCompletion,
  "tabCompletion",
  "off",
  ["on", "off", "onlySnippets"],
  {
    enumDescriptions: [
      h(
        644,
        "Tab complete will insert the best matching suggestion when pressing tab."
      ),
      h(645, "Disable tab completions."),
      h(
        646,
        "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
      )
    ],
    description: h(647, "Enables tab completions.")
  }
)), $(new Ze(R.tabIndex, "tabIndex", 0, -1, Ai.MAX_SAFE_SMALL_INTEGER)), $(new ke(
  R.trimWhitespaceOnDelete,
  "trimWhitespaceOnDelete",
  !1,
  { description: h(
    648,
    "Controls whether the editor will also delete the next line's indentation whitespace when deleting a newline."
  ) }
)), $(new J3()), $(new bt(
  R.unusualLineTerminators,
  "unusualLineTerminators",
  "prompt",
  ["auto", "off", "prompt"],
  {
    enumDescriptions: [
      h(649, "Unusual line terminators are automatically removed."),
      h(650, "Unusual line terminators are ignored."),
      h(651, "Unusual line terminators prompt to be removed.")
    ],
    description: h(652, "Remove unusual line terminators that might cause problems.")
  }
)), $(new ke(R.useShadowDOM, "useShadowDOM", !0)), $(new ke(
  R.useTabStops,
  "useTabStops",
  !0,
  { description: h(
    653,
    "Spaces and tabs are inserted and deleted in alignment with tab stops."
  ) }
)), $(new bt(R.wordBreak, "wordBreak", "normal", ["normal", "keepAll"], {
  markdownEnumDescriptions: [
    h(654, "Use the default line break rule."),
    h(
      655,
      "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."
    )
  ],
  description: h(
    656,
    "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text."
  )
})), $(new i9()), $(new Li(
  R.wordSeparators,
  "wordSeparators",
  FP,
  { description: h(
    657,
    "Characters that will be used as word separators when doing word related navigations or operations."
  ) }
)), $(new bt(
  R.wordWrap,
  "wordWrap",
  "off",
  ["off", "on", "wordWrapColumn", "bounded"],
  {
    markdownEnumDescriptions: [
      h(658, "Lines will never wrap."),
      h(659, "Lines will wrap at the viewport width."),
      h(660, "Lines will wrap at `#editor.wordWrapColumn#`."),
      h(
        661,
        "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
      )
    ],
    description: h(662, "Controls how lines should wrap.")
  }
)), $(new Li(
  R.wordWrapBreakAfterCharacters,
  "wordWrapBreakAfterCharacters",
  " 	})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣"
)), $(new Li(
  R.wordWrapBreakBeforeCharacters,
  "wordWrapBreakBeforeCharacters",
  "([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋"
)), $(new Ze(
  R.wordWrapColumn,
  "wordWrapColumn",
  80,
  1,
  Ai.MAX_SAFE_SMALL_INTEGER,
  {
    markdownDescription: h(
      663,
      "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`."
    )
  }
)), $(new bt(
  R.wordWrapOverride1,
  "wordWrapOverride1",
  "inherit",
  ["off", "on", "inherit"]
)), $(new bt(
  R.wordWrapOverride2,
  "wordWrapOverride2",
  "inherit",
  ["off", "on", "inherit"]
)), $(new ke(
  R.wrapOnEscapedLineFeeds,
  "wrapOnEscapedLineFeeds",
  !1,
  { markdownDescription: h(
    664,
    'Controls whether literal `\\n` shall trigger a wordWrap when `#editor.wordWrap#` is enabled.\n\nFor example:\n```c\nchar* str="hello\\nworld"\n```\nwill be displayed as\n```c\nchar* str="hello\\n\n           world"\n```'
  ) }
)), $(new I3()), $(new E3()), $(new bt(
  R.defaultColorDecorators,
  "defaultColorDecorators",
  "auto",
  ["auto", "always", "never"],
  {
    enumDescriptions: [
      h(
        665,
        "Show default color decorators only when no extension provides colors decorators."
      ),
      h(666, "Always show default color decorators."),
      h(667, "Never show default color decorators.")
    ],
    description: h(
      668,
      "Controls whether inline color decorations should be shown using the default document color provider."
    )
  }
)), $(new V3()), $(new ke(
  R.tabFocusMode,
  "tabFocusMode",
  !1,
  { markdownDescription: h(
    669,
    "Controls whether the editor receives tabs or defers them to the workbench for navigation."
  ) }
)), $(new ch()), $(new r9()), $(new n9()), $(new L3()), $(new C3()), $(new T3());
let On = class da {
  constructor(e, t) {
    this.lineNumber = e, this.column = t;
  }
  with(e = this.lineNumber, t = this.column) {
    return e === this.lineNumber && t === this.column ? this : new da(e, t);
  }
  delta(e = 0, t = 0) {
    return this.with(Math.max(1, this.lineNumber + e), Math.max(1, this.column + t));
  }
  equals(e) {
    return da.equals(this, e);
  }
  static equals(e, t) {
    return !e && !t ? !0 : !!e && !!t && e.lineNumber === t.lineNumber && e.column === t.column;
  }
  isBefore(e) {
    return da.isBefore(this, e);
  }
  static isBefore(e, t) {
    return e.lineNumber < t.lineNumber ? !0 : t.lineNumber < e.lineNumber ? !1 : e.column < t.column;
  }
  isBeforeOrEqual(e) {
    return da.isBeforeOrEqual(this, e);
  }
  static isBeforeOrEqual(e, t) {
    return e.lineNumber < t.lineNumber ? !0 : t.lineNumber < e.lineNumber ? !1 : e.column <= t.column;
  }
  static compare(e, t) {
    const n = e.lineNumber | 0, r = t.lineNumber | 0;
    if (n === r) {
      const s = e.column | 0, o = t.column | 0;
      return s - o;
    }
    return n - r;
  }
  clone() {
    return new da(this.lineNumber, this.column);
  }
  toString() {
    return "(" + this.lineNumber + "," + this.column + ")";
  }
  static lift(e) {
    return new da(e.lineNumber, e.column);
  }
  static isIPosition(e) {
    return e && typeof e.lineNumber == "number" && typeof e.column == "number";
  }
  toJSON() {
    return {
      lineNumber: this.lineNumber,
      column: this.column
    };
  }
}, ft = class hi {
  constructor(e, t, n, r) {
    e > n || e === n && t > r ? (this.startLineNumber = n, this.startColumn = r, this.endLineNumber = e, this.endColumn = t) : (this.startLineNumber = e, this.startColumn = t, this.endLineNumber = n, this.endColumn = r);
  }
  isEmpty() {
    return hi.isEmpty(this);
  }
  static isEmpty(e) {
    return e.startLineNumber === e.endLineNumber && e.startColumn === e.endColumn;
  }
  containsPosition(e) {
    return hi.containsPosition(this, e);
  }
  static containsPosition(e, t) {
    return !(t.lineNumber < e.startLineNumber || t.lineNumber > e.endLineNumber || t.lineNumber === e.startLineNumber && t.column < e.startColumn || t.lineNumber === e.endLineNumber && t.column > e.endColumn);
  }
  static strictContainsPosition(e, t) {
    return !(t.lineNumber < e.startLineNumber || t.lineNumber > e.endLineNumber || t.lineNumber === e.startLineNumber && t.column <= e.startColumn || t.lineNumber === e.endLineNumber && t.column >= e.endColumn);
  }
  containsRange(e) {
    return hi.containsRange(this, e);
  }
  static containsRange(e, t) {
    return !(t.startLineNumber < e.startLineNumber || t.endLineNumber < e.startLineNumber || t.startLineNumber > e.endLineNumber || t.endLineNumber > e.endLineNumber || t.startLineNumber === e.startLineNumber && t.startColumn < e.startColumn || t.endLineNumber === e.endLineNumber && t.endColumn > e.endColumn);
  }
  strictContainsRange(e) {
    return hi.strictContainsRange(this, e);
  }
  static strictContainsRange(e, t) {
    return !(t.startLineNumber < e.startLineNumber || t.endLineNumber < e.startLineNumber || t.startLineNumber > e.endLineNumber || t.endLineNumber > e.endLineNumber || t.startLineNumber === e.startLineNumber && t.startColumn <= e.startColumn || t.endLineNumber === e.endLineNumber && t.endColumn >= e.endColumn);
  }
  plusRange(e) {
    return hi.plusRange(this, e);
  }
  static plusRange(e, t) {
    let n, r, s, o;
    return t.startLineNumber < e.startLineNumber ? (n = t.startLineNumber, r = t.startColumn) : t.startLineNumber === e.startLineNumber ? (n = t.startLineNumber, r = Math.min(t.startColumn, e.startColumn)) : (n = e.startLineNumber, r = e.startColumn), t.endLineNumber > e.endLineNumber ? (s = t.endLineNumber, o = t.endColumn) : t.endLineNumber === e.endLineNumber ? (s = t.endLineNumber, o = Math.max(t.endColumn, e.endColumn)) : (s = e.endLineNumber, o = e.endColumn), new hi(n, r, s, o);
  }
  intersectRanges(e) {
    return hi.intersectRanges(this, e);
  }
  static intersectRanges(e, t) {
    let n = e.startLineNumber, r = e.startColumn, s = e.endLineNumber, o = e.endColumn;
    const a = t.startLineNumber, l = t.startColumn, c = t.endLineNumber, u = t.endColumn;
    return n < a ? (n = a, r = l) : n === a && (r = Math.max(r, l)), s > c ? (s = c, o = u) : s === c && (o = Math.min(o, u)), n > s || n === s && r > o ? null : new hi(
      n,
      r,
      s,
      o
    );
  }
  equalsRange(e) {
    return hi.equalsRange(this, e);
  }
  static equalsRange(e, t) {
    return !e && !t ? !0 : !!e && !!t && e.startLineNumber === t.startLineNumber && e.startColumn === t.startColumn && e.endLineNumber === t.endLineNumber && e.endColumn === t.endColumn;
  }
  getEndPosition() {
    return hi.getEndPosition(this);
  }
  static getEndPosition(e) {
    return new On(e.endLineNumber, e.endColumn);
  }
  getStartPosition() {
    return hi.getStartPosition(this);
  }
  static getStartPosition(e) {
    return new On(e.startLineNumber, e.startColumn);
  }
  toString() {
    return "[" + this.startLineNumber + "," + this.startColumn + " -> " + this.endLineNumber + "," + this.endColumn + "]";
  }
  setEndPosition(e, t) {
    return new hi(this.startLineNumber, this.startColumn, e, t);
  }
  setStartPosition(e, t) {
    return new hi(e, t, this.endLineNumber, this.endColumn);
  }
  collapseToStart() {
    return hi.collapseToStart(this);
  }
  static collapseToStart(e) {
    return new hi(
      e.startLineNumber,
      e.startColumn,
      e.startLineNumber,
      e.startColumn
    );
  }
  collapseToEnd() {
    return hi.collapseToEnd(this);
  }
  static collapseToEnd(e) {
    return new hi(e.endLineNumber, e.endColumn, e.endLineNumber, e.endColumn);
  }
  delta(e) {
    return new hi(
      this.startLineNumber + e,
      this.startColumn,
      this.endLineNumber + e,
      this.endColumn
    );
  }
  isSingleLine() {
    return this.startLineNumber === this.endLineNumber;
  }
  static fromPositions(e, t = e) {
    return new hi(e.lineNumber, e.column, t.lineNumber, t.column);
  }
  static lift(e) {
    return e ? new hi(
      e.startLineNumber,
      e.startColumn,
      e.endLineNumber,
      e.endColumn
    ) : null;
  }
  static isIRange(e) {
    return e && typeof e.startLineNumber == "number" && typeof e.startColumn == "number" && typeof e.endLineNumber == "number" && typeof e.endColumn == "number";
  }
  static areIntersectingOrTouching(e, t) {
    return !(e.endLineNumber < t.startLineNumber || e.endLineNumber === t.startLineNumber && e.endColumn < t.startColumn || t.endLineNumber < e.startLineNumber || t.endLineNumber === e.startLineNumber && t.endColumn < e.startColumn);
  }
  static areIntersecting(e, t) {
    return !(e.endLineNumber < t.startLineNumber || e.endLineNumber === t.startLineNumber && e.endColumn <= t.startColumn || t.endLineNumber < e.startLineNumber || t.endLineNumber === e.startLineNumber && t.endColumn <= e.startColumn);
  }
  static areOnlyIntersecting(e, t) {
    return !(e.endLineNumber < t.startLineNumber - 1 || e.endLineNumber === t.startLineNumber && e.endColumn < t.startColumn - 1 || t.endLineNumber < e.startLineNumber - 1 || t.endLineNumber === e.startLineNumber && t.endColumn < e.startColumn - 1);
  }
  static compareRangesUsingStarts(e, t) {
    if (e && t) {
      const s = e.startLineNumber | 0, o = t.startLineNumber | 0;
      if (s === o) {
        const a = e.startColumn | 0, l = t.startColumn | 0;
        if (a === l) {
          const c = e.endLineNumber | 0, u = t.endLineNumber | 0;
          if (c === u) {
            const d = e.endColumn | 0, f = t.endColumn | 0;
            return d - f;
          }
          return c - u;
        }
        return a - l;
      }
      return s - o;
    }
    return (e ? 1 : 0) - (t ? 1 : 0);
  }
  static compareRangesUsingEnds(e, t) {
    return e.endLineNumber === t.endLineNumber ? e.endColumn === t.endColumn ? e.startLineNumber === t.startLineNumber ? e.startColumn - t.startColumn : e.startLineNumber - t.startLineNumber : e.endColumn - t.endColumn : e.endLineNumber - t.endLineNumber;
  }
  static spansMultipleLines(e) {
    return e.endLineNumber > e.startLineNumber;
  }
  toJSON() {
    return this;
  }
};
var cD;
(function(i) {
  i[i.Null = 0] = "Null", i[i.PlainText = 1] = "PlainText";
})(cD || (cD = {}));
var uD;
(function(i) {
  i[i.NotSet = -1] = "NotSet", i[i.None = 0] = "None", i[i.Italic = 1] = "Italic", i[i.Bold = 2] = "Bold", i[i.Underline = 4] = "Underline", i[i.Strikethrough = 8] = "Strikethrough";
})(uD || (uD = {}));
var lm;
(function(i) {
  i[i.None = 0] = "None", i[i.DefaultForeground = 1] = "DefaultForeground", i[i.DefaultBackground = 2] = "DefaultBackground";
})(lm || (lm = {}));
var kc;
(function(i) {
  i[i.Other = 0] = "Other", i[i.Comment = 1] = "Comment", i[i.String = 2] = "String", i[i.RegEx = 3] = "RegEx";
})(kc || (kc = {}));
var dD;
(function(i) {
  i[i.LANGUAGEID_MASK = 255] = "LANGUAGEID_MASK", i[i.TOKEN_TYPE_MASK = 768] = "TOKEN_TYPE_MASK", i[i.BALANCED_BRACKETS_MASK = 1024] = "BALANCED_BRACKETS_MASK", i[i.FONT_STYLE_MASK = 30720] = "FONT_STYLE_MASK", i[i.FOREGROUND_MASK = 16744448] = "FOREGROUND_MASK", i[i.BACKGROUND_MASK = 4278190080] = "BACKGROUND_MASK", i[i.ITALIC_MASK = 2048] = "ITALIC_MASK", i[i.BOLD_MASK = 4096] = "BOLD_MASK", i[i.UNDERLINE_MASK = 8192] = "UNDERLINE_MASK", i[i.STRIKETHROUGH_MASK = 16384] = "STRIKETHROUGH_MASK", i[i.SEMANTIC_USE_ITALIC = 1] = "SEMANTIC_USE_ITALIC", i[i.SEMANTIC_USE_BOLD = 2] = "SEMANTIC_USE_BOLD", i[i.SEMANTIC_USE_UNDERLINE = 4] = "SEMANTIC_USE_UNDERLINE", i[i.SEMANTIC_USE_STRIKETHROUGH = 8] = "SEMANTIC_USE_STRIKETHROUGH", i[i.SEMANTIC_USE_FOREGROUND = 16] = "SEMANTIC_USE_FOREGROUND", i[i.SEMANTIC_USE_BACKGROUND = 32] = "SEMANTIC_USE_BACKGROUND", i[i.LANGUAGEID_OFFSET = 0] = "LANGUAGEID_OFFSET", i[i.TOKEN_TYPE_OFFSET = 8] = "TOKEN_TYPE_OFFSET", i[i.BALANCED_BRACKETS_OFFSET = 10] = "BALANCED_BRACKETS_OFFSET", i[i.FONT_STYLE_OFFSET = 11] = "FONT_STYLE_OFFSET", i[i.FOREGROUND_OFFSET = 15] = "FOREGROUND_OFFSET", i[i.BACKGROUND_OFFSET = 24] = "BACKGROUND_OFFSET";
})(dD || (dD = {}));
class d9 {
  constructor() {
    this._tokenizationSupports = /* @__PURE__ */ new Map(), this._factories = /* @__PURE__ */ new Map(), this._onDidChange = new M(), this.onDidChange = this._onDidChange.event, this._colorMap = null;
  }
  handleChange(e) {
    this._onDidChange.fire({
      changedLanguages: e,
      changedColorMap: !1
    });
  }
  register(e, t) {
    return this._tokenizationSupports.set(e, t), this.handleChange([e]), Ie(() => {
      this._tokenizationSupports.get(e) === t && (this._tokenizationSupports.delete(e), this.handleChange([e]));
    });
  }
  get(e) {
    return this._tokenizationSupports.get(e) || null;
  }
  registerFactory(e, t) {
    var r;
    (r = this._factories.get(e)) == null || r.dispose();
    const n = new h9(this, e, t);
    return this._factories.set(e, n), Ie(() => {
      const s = this._factories.get(e);
      !s || s !== n || (this._factories.delete(e), s.dispose());
    });
  }
  async getOrCreate(e) {
    const t = this.get(e);
    if (t)
      return t;
    const n = this._factories.get(e);
    return !n || n.isResolved ? null : (await n.resolve(), this.get(e));
  }
  isResolved(e) {
    if (this.get(e))
      return !0;
    const n = this._factories.get(e);
    return !!(!n || n.isResolved);
  }
  setColorMap(e) {
    this._colorMap = e, this._onDidChange.fire({
      changedLanguages: Array.from(this._tokenizationSupports.keys()),
      changedColorMap: !0
    });
  }
  getColorMap() {
    return this._colorMap;
  }
  getDefaultBackground() {
    return this._colorMap && this._colorMap.length > lm.DefaultBackground ? this._colorMap[lm.DefaultBackground] : null;
  }
}
class h9 extends xe {
  get isResolved() {
    return this._isResolved;
  }
  constructor(e, t, n) {
    super(), this._registry = e, this._languageId = t, this._factory = n, this._isDisposed = !1, this._resolvePromise = null, this._isResolved = !1;
  }
  dispose() {
    this._isDisposed = !0, super.dispose();
  }
  async resolve() {
    return this._resolvePromise || (this._resolvePromise = this._create()), this._resolvePromise;
  }
  async _create() {
    const e = await this._factory.tokenizationSupport;
    this._isResolved = !0, e && !this._isDisposed && this._register(this._registry.register(this._languageId, e));
  }
}
var hD;
(function(i) {
  i[i.Increase = 0] = "Increase", i[i.Decrease = 1] = "Decrease";
})(hD || (hD = {}));
var F;
(function(i) {
  i[i.Method = 0] = "Method", i[i.Function = 1] = "Function", i[i.Constructor = 2] = "Constructor", i[i.Field = 3] = "Field", i[i.Variable = 4] = "Variable", i[i.Class = 5] = "Class", i[i.Struct = 6] = "Struct", i[i.Interface = 7] = "Interface", i[i.Module = 8] = "Module", i[i.Property = 9] = "Property", i[i.Event = 10] = "Event", i[i.Operator = 11] = "Operator", i[i.Unit = 12] = "Unit", i[i.Value = 13] = "Value", i[i.Constant = 14] = "Constant", i[i.Enum = 15] = "Enum", i[i.EnumMember = 16] = "EnumMember", i[i.Keyword = 17] = "Keyword", i[i.Text = 18] = "Text", i[i.Color = 19] = "Color", i[i.File = 20] = "File", i[i.Reference = 21] = "Reference", i[i.Customcolor = 22] = "Customcolor", i[i.Folder = 23] = "Folder", i[i.TypeParameter = 24] = "TypeParameter", i[i.User = 25] = "User", i[i.Issue = 26] = "Issue", i[i.Tool = 27] = "Tool", i[i.Snippet = 28] = "Snippet";
})(F || (F = {}));
var fD;
(function(i) {
  const e = /* @__PURE__ */ new Map();
  e.set(F.Method, _e.symbolMethod), e.set(F.Function, _e.symbolFunction), e.set(F.Constructor, _e.symbolConstructor), e.set(F.Field, _e.symbolField), e.set(F.Variable, _e.symbolVariable), e.set(F.Class, _e.symbolClass), e.set(F.Struct, _e.symbolStruct), e.set(F.Interface, _e.symbolInterface), e.set(F.Module, _e.symbolModule), e.set(F.Property, _e.symbolProperty), e.set(F.Event, _e.symbolEvent), e.set(F.Operator, _e.symbolOperator), e.set(F.Unit, _e.symbolUnit), e.set(F.Value, _e.symbolValue), e.set(F.Enum, _e.symbolEnum), e.set(F.Constant, _e.symbolConstant), e.set(F.Enum, _e.symbolEnum), e.set(F.EnumMember, _e.symbolEnumMember), e.set(F.Keyword, _e.symbolKeyword), e.set(F.Snippet, _e.symbolSnippet), e.set(F.Text, _e.symbolText), e.set(F.Color, _e.symbolColor), e.set(F.File, _e.symbolFile), e.set(F.Reference, _e.symbolReference), e.set(F.Customcolor, _e.symbolCustomColor), e.set(F.Folder, _e.symbolFolder), e.set(F.TypeParameter, _e.symbolTypeParameter), e.set(F.User, _e.account), e.set(F.Issue, _e.issues), e.set(F.Tool, _e.tools);
  function t(o) {
    let a = e.get(o);
    return a || (console.info("No codicon found for CompletionItemKind " + o), a = _e.symbolProperty), a;
  }
  i.toIcon = t;
  function n(o) {
    switch (o) {
      case F.Method:
        return h(786, "Method");
      case F.Function:
        return h(787, "Function");
      case F.Constructor:
        return h(788, "Constructor");
      case F.Field:
        return h(789, "Field");
      case F.Variable:
        return h(790, "Variable");
      case F.Class:
        return h(791, "Class");
      case F.Struct:
        return h(792, "Struct");
      case F.Interface:
        return h(793, "Interface");
      case F.Module:
        return h(794, "Module");
      case F.Property:
        return h(795, "Property");
      case F.Event:
        return h(796, "Event");
      case F.Operator:
        return h(797, "Operator");
      case F.Unit:
        return h(798, "Unit");
      case F.Value:
        return h(799, "Value");
      case F.Constant:
        return h(800, "Constant");
      case F.Enum:
        return h(801, "Enum");
      case F.EnumMember:
        return h(802, "Enum Member");
      case F.Keyword:
        return h(803, "Keyword");
      case F.Text:
        return h(804, "Text");
      case F.Color:
        return h(805, "Color");
      case F.File:
        return h(806, "File");
      case F.Reference:
        return h(807, "Reference");
      case F.Customcolor:
        return h(808, "Custom Color");
      case F.Folder:
        return h(809, "Folder");
      case F.TypeParameter:
        return h(810, "Type Parameter");
      case F.User:
        return h(811, "User");
      case F.Issue:
        return h(812, "Issue");
      case F.Tool:
        return h(813, "Tool");
      case F.Snippet:
        return h(814, "Snippet");
      default:
        return "";
    }
  }
  i.toLabel = n;
  const r = /* @__PURE__ */ new Map();
  r.set("method", F.Method), r.set("function", F.Function), r.set("constructor", F.Constructor), r.set("field", F.Field), r.set("variable", F.Variable), r.set("class", F.Class), r.set("struct", F.Struct), r.set("interface", F.Interface), r.set("module", F.Module), r.set("property", F.Property), r.set("event", F.Event), r.set("operator", F.Operator), r.set("unit", F.Unit), r.set("value", F.Value), r.set("constant", F.Constant), r.set("enum", F.Enum), r.set("enum-member", F.EnumMember), r.set("enumMember", F.EnumMember), r.set("keyword", F.Keyword), r.set("snippet", F.Snippet), r.set("text", F.Text), r.set("color", F.Color), r.set("file", F.File), r.set("reference", F.Reference), r.set("customcolor", F.Customcolor), r.set("folder", F.Folder), r.set("type-parameter", F.TypeParameter), r.set("typeParameter", F.TypeParameter), r.set("account", F.User), r.set("issue", F.Issue), r.set("tool", F.Tool);
  function s(o, a) {
    let l = r.get(o);
    return typeof l > "u" && !a && (l = F.Property), l;
  }
  i.fromString = s;
})(fD || (fD = {}));
var cm;
(function(i) {
  i[i.Deprecated = 1] = "Deprecated";
})(cm || (cm = {}));
var dl;
(function(i) {
  i[i.None = 0] = "None", i[i.KeepWhitespace = 1] = "KeepWhitespace", i[i.InsertAsSnippet = 4] = "InsertAsSnippet";
})(dl || (dl = {}));
var uh;
(function(i) {
  i[i.Word = 0] = "Word", i[i.Line = 1] = "Line", i[i.Suggest = 2] = "Suggest";
})(uh || (uh = {}));
var dh;
(function(i) {
  i[i.Invoke = 0] = "Invoke", i[i.TriggerCharacter = 1] = "TriggerCharacter", i[i.TriggerForIncompleteCompletions = 2] = "TriggerForIncompleteCompletions";
})(dh || (dh = {}));
var um;
(function(i) {
  i[i.Automatic = 0] = "Automatic", i[i.Explicit = 1] = "Explicit";
})(um || (um = {}));
var dm;
(function(i) {
  i[i.Accepted = 0] = "Accepted", i[i.Rejected = 1] = "Rejected", i[i.Ignored = 2] = "Ignored";
})(dm || (dm = {}));
var hm;
(function(i) {
  i[i.Invoke = 1] = "Invoke", i[i.Auto = 2] = "Auto";
})(hm || (hm = {}));
var pD;
(function(i) {
  i[i.Automatic = 0] = "Automatic", i[i.PasteAs = 1] = "PasteAs";
})(pD || (pD = {}));
var gD;
(function(i) {
  i[i.Invoke = 1] = "Invoke", i[i.TriggerCharacter = 2] = "TriggerCharacter", i[i.ContentChange = 3] = "ContentChange";
})(gD || (gD = {}));
var mD;
(function(i) {
  i[i.Text = 0] = "Text", i[i.Read = 1] = "Read", i[i.Write = 2] = "Write";
})(mD || (mD = {}));
function f9(i) {
  return i && x.isUri(i.uri) && ft.isIRange(i.range) && (ft.isIRange(i.originSelectionRange) || ft.isIRange(i.targetSelectionRange));
}
function p9(i) {
  return i && x.isUri(i.uri) && ft.isIRange(i.range);
}
var J;
(function(i) {
  i[i.File = 0] = "File", i[i.Module = 1] = "Module", i[i.Namespace = 2] = "Namespace", i[i.Package = 3] = "Package", i[i.Class = 4] = "Class", i[i.Method = 5] = "Method", i[i.Property = 6] = "Property", i[i.Field = 7] = "Field", i[i.Constructor = 8] = "Constructor", i[i.Enum = 9] = "Enum", i[i.Interface = 10] = "Interface", i[i.Function = 11] = "Function", i[i.Variable = 12] = "Variable", i[i.Constant = 13] = "Constant", i[i.String = 14] = "String", i[i.Number = 15] = "Number", i[i.Boolean = 16] = "Boolean", i[i.Array = 17] = "Array", i[i.Object = 18] = "Object", i[i.Key = 19] = "Key", i[i.Null = 20] = "Null", i[i.EnumMember = 21] = "EnumMember", i[i.Struct = 22] = "Struct", i[i.Event = 23] = "Event", i[i.Operator = 24] = "Operator", i[i.TypeParameter = 25] = "TypeParameter";
})(J || (J = {}));
J.Array + "", h(815, "array"), J.Boolean + "", h(816, "boolean"), J.Class + "", h(817, "class"), J.Constant + "", h(818, "constant"), J.Constructor + "", h(819, "constructor"), J.Enum + "", h(820, "enumeration"), J.EnumMember + "", h(821, "enumeration member"), J.Event + "", h(822, "event"), J.Field + "", h(823, "field"), J.File + "", h(824, "file"), J.Function + "", h(825, "function"), J.Interface + "", h(826, "interface"), J.Key + "", h(827, "key"), J.Method + "", h(828, "method"), J.Module + "", h(829, "module"), J.Namespace + "", h(830, "namespace"), J.Null + "", h(831, "null"), J.Number + "", h(832, "number"), J.Object + "", h(833, "object"), J.Operator + "", h(834, "operator"), J.Package + "", h(835, "package"), J.Property + "", h(836, "property"), J.String + "", h(837, "string"), J.Struct + "", h(838, "struct"), J.TypeParameter + "", h(839, "type parameter"), J.Variable + "", h(840, "variable");
var fm;
(function(i) {
  i[i.Deprecated = 1] = "Deprecated";
})(fm || (fm = {}));
var _D;
(function(i) {
  const e = /* @__PURE__ */ new Map();
  e.set(J.File, _e.symbolFile), e.set(J.Module, _e.symbolModule), e.set(J.Namespace, _e.symbolNamespace), e.set(J.Package, _e.symbolPackage), e.set(J.Class, _e.symbolClass), e.set(J.Method, _e.symbolMethod), e.set(J.Property, _e.symbolProperty), e.set(J.Field, _e.symbolField), e.set(J.Constructor, _e.symbolConstructor), e.set(J.Enum, _e.symbolEnum), e.set(J.Interface, _e.symbolInterface), e.set(J.Function, _e.symbolFunction), e.set(J.Variable, _e.symbolVariable), e.set(J.Constant, _e.symbolConstant), e.set(J.String, _e.symbolString), e.set(J.Number, _e.symbolNumber), e.set(J.Boolean, _e.symbolBoolean), e.set(J.Array, _e.symbolArray), e.set(J.Object, _e.symbolObject), e.set(J.Key, _e.symbolKey), e.set(J.Null, _e.symbolNull), e.set(J.EnumMember, _e.symbolEnumMember), e.set(J.Struct, _e.symbolStruct), e.set(J.Event, _e.symbolEvent), e.set(J.Operator, _e.symbolOperator), e.set(J.TypeParameter, _e.symbolTypeParameter);
  function t(s) {
    let o = e.get(s);
    return o || (console.info("No codicon found for SymbolKind " + s), o = _e.symbolProperty), o;
  }
  i.toIcon = t;
  const n = /* @__PURE__ */ new Map();
  n.set(J.File, F.File), n.set(J.Module, F.Module), n.set(J.Namespace, F.Module), n.set(J.Package, F.Module), n.set(J.Class, F.Class), n.set(J.Method, F.Method), n.set(J.Property, F.Property), n.set(J.Field, F.Field), n.set(J.Constructor, F.Constructor), n.set(J.Enum, F.Enum), n.set(J.Interface, F.Interface), n.set(J.Function, F.Function), n.set(J.Variable, F.Variable), n.set(J.Constant, F.Constant), n.set(J.String, F.Text), n.set(J.Number, F.Value), n.set(J.Boolean, F.Value), n.set(J.Array, F.Value), n.set(J.Object, F.Value), n.set(J.Key, F.Keyword), n.set(J.Null, F.Value), n.set(J.EnumMember, F.EnumMember), n.set(J.Struct, F.Struct), n.set(J.Event, F.Event), n.set(J.Operator, F.Operator), n.set(J.TypeParameter, F.TypeParameter);
  function r(s) {
    let o = n.get(s);
    return o === void 0 && (console.info("No completion kind found for SymbolKind " + s), o = F.File), o;
  }
  i.toCompletionKind = r;
})(_D || (_D = {}));
var rn;
let dc = (rn = class {
  static fromValue(e) {
    switch (e) {
      case "comment":
        return rn.Comment;
      case "imports":
        return rn.Imports;
      case "region":
        return rn.Region;
    }
    return new rn(e);
  }
  constructor(e) {
    this.value = e;
  }
}, rn.Comment = new rn("comment"), rn.Imports = new rn("imports"), rn.Region = new rn("region"), rn);
var vD;
(function(i) {
  i[i.AIGenerated = 1] = "AIGenerated";
})(vD || (vD = {}));
var pm;
(function(i) {
  i[i.Invoke = 0] = "Invoke", i[i.Automatic = 1] = "Automatic";
})(pm || (pm = {}));
var ab;
(function(i) {
  function e(t) {
    return !t || typeof t != "object" ? !1 : typeof t.id == "string" && typeof t.title == "string";
  }
  i.is = e;
})(ab || (ab = {}));
var Ic;
(function(i) {
  i[i.Collapsed = 0] = "Collapsed", i[i.Expanded = 1] = "Expanded";
})(Ic || (Ic = {}));
var hh;
(function(i) {
  i[i.Unresolved = 0] = "Unresolved", i[i.Resolved = 1] = "Resolved";
})(hh || (hh = {}));
var fh;
(function(i) {
  i[i.Current = 0] = "Current", i[i.Outdated = 1] = "Outdated";
})(fh || (fh = {}));
var wD;
(function(i) {
  i[i.Editing = 0] = "Editing", i[i.Preview = 1] = "Preview";
})(wD || (wD = {}));
var bD;
(function(i) {
  i[i.Published = 0] = "Published", i[i.Draft = 1] = "Draft";
})(bD || (bD = {}));
var yD;
(function(i) {
  i[i.Type = 1] = "Type", i[i.Parameter = 2] = "Parameter";
})(yD || (yD = {}));
new d9();
var xD;
(function(i) {
  i[i.None = 0] = "None", i[i.Option = 1] = "Option", i[i.Default = 2] = "Default", i[i.Preferred = 3] = "Preferred";
})(xD || (xD = {}));
var lb;
(function(i) {
  i[i.Left = 1] = "Left", i[i.Center = 2] = "Center", i[i.Right = 4] = "Right", i[i.Full = 7] = "Full";
})(lb || (lb = {}));
var ED;
(function(i) {
  i[i.Left = 1] = "Left", i[i.Center = 2] = "Center", i[i.Right = 3] = "Right";
})(ED || (ED = {}));
var SD;
(function(i) {
  i[i.Inline = 1] = "Inline", i[i.Gutter = 2] = "Gutter";
})(SD || (SD = {}));
var DD;
(function(i) {
  i[i.Normal = 1] = "Normal", i[i.Underlined = 2] = "Underlined";
})(DD || (DD = {}));
var kD;
(function(i) {
  i[i.LTR = 0] = "LTR", i[i.RTL = 1] = "RTL";
})(kD || (kD = {}));
var ID;
(function(i) {
  i[i.Both = 0] = "Both", i[i.Right = 1] = "Right", i[i.Left = 2] = "Left", i[i.None = 3] = "None";
})(ID || (ID = {}));
var Es;
(function(i) {
  i[i.TextDefined = 0] = "TextDefined", i[i.LF = 1] = "LF", i[i.CRLF = 2] = "CRLF";
})(Es || (Es = {}));
var Kh;
(function(i) {
  i[i.LF = 1] = "LF", i[i.CRLF = 2] = "CRLF";
})(Kh || (Kh = {}));
var Cc;
(function(i) {
  i[i.LF = 0] = "LF", i[i.CRLF = 1] = "CRLF";
})(Cc || (Cc = {}));
class cb {
  constructor(e, t) {
    this._findMatchBrand = void 0, this.range = e, this.matches = t;
  }
}
var Tc;
(function(i) {
  i[i.AlwaysGrowsWhenTypingAtEdges = 0] = "AlwaysGrowsWhenTypingAtEdges", i[i.NeverGrowsWhenTypingAtEdges = 1] = "NeverGrowsWhenTypingAtEdges", i[i.GrowsOnlyWhenTypingBefore = 2] = "GrowsOnlyWhenTypingBefore", i[i.GrowsOnlyWhenTypingAfter = 3] = "GrowsOnlyWhenTypingAfter";
})(Tc || (Tc = {}));
var CD;
(function(i) {
  i[i.Left = 0] = "Left", i[i.Right = 1] = "Right", i[i.None = 2] = "None", i[i.LeftOfInjectedText = 3] = "LeftOfInjectedText", i[i.RightOfInjectedText = 4] = "RightOfInjectedText";
})(CD || (CD = {}));
var gm;
(function(i) {
  i[i.FIRST_LINE_DETECTION_LENGTH_LIMIT = 1e3] = "FIRST_LINE_DETECTION_LENGTH_LIMIT";
})(gm || (gm = {}));
class g9 {
  constructor(e, t, n) {
    this.regex = e, this.wordSeparators = t, this.simpleSearch = n;
  }
}
class m9 {
  constructor(e, t, n) {
    this.reverseEdits = e, this.changes = t, this.trimAutoWhitespaceLineNumbers = n;
  }
}
var Pc;
(function(i) {
  i[i.Unnecessary = 1] = "Unnecessary", i[i.Deprecated = 2] = "Deprecated";
})(Pc || (Pc = {}));
var on;
(function(i) {
  i[i.Hint = 1] = "Hint", i[i.Info = 2] = "Info", i[i.Warning = 4] = "Warning", i[i.Error = 8] = "Error";
})(on || (on = {}));
(function(i) {
  function e(l, c) {
    return c - l;
  }
  i.compare = e;
  const t = /* @__PURE__ */ Object.create(null);
  t[i.Error] = h(1960, "Error"), t[i.Warning] = h(1961, "Warning"), t[i.Info] = h(1962, "Info");
  function n(l) {
    return t[l] || "";
  }
  i.toString = n;
  const r = /* @__PURE__ */ Object.create(null);
  r[i.Error] = h(1963, "Errors"), r[i.Warning] = h(1964, "Warnings"), r[i.Info] = h(1965, "Infos");
  function s(l) {
    return r[l] || "";
  }
  i.toStringPlural = s;
  function o(l) {
    switch (l) {
      case Yt.Error:
        return i.Error;
      case Yt.Warning:
        return i.Warning;
      case Yt.Info:
        return i.Info;
      case Yt.Ignore:
        return i.Hint;
    }
  }
  i.fromSeverity = o;
  function a(l) {
    switch (l) {
      case i.Error:
        return Yt.Error;
      case i.Warning:
        return Yt.Warning;
      case i.Info:
        return Yt.Info;
      case i.Hint:
        return Yt.Ignore;
    }
  }
  i.toSeverity = a;
})(on || (on = {}));
var TD;
(function(i) {
  function t(r) {
    return n(r, !0);
  }
  i.makeKey = t;
  function n(r, s) {
    const o = [""];
    return r.source ? o.push(r.source.replace("¦", "\\¦")) : o.push(""), r.code ? typeof r.code == "string" ? o.push(r.code.replace("¦", "\\¦")) : o.push(r.code.value.replace("¦", "\\¦")) : o.push(""), r.severity !== void 0 && r.severity !== null ? o.push(on.toString(r.severity)) : o.push(""), r.message && s ? o.push(r.message.replace("¦", "\\¦")) : o.push(""), r.startLineNumber !== void 0 && r.startLineNumber !== null ? o.push(r.startLineNumber.toString()) : o.push(""), r.startColumn !== void 0 && r.startColumn !== null ? o.push(r.startColumn.toString()) : o.push(""), r.endLineNumber !== void 0 && r.endLineNumber !== null ? o.push(r.endLineNumber.toString()) : o.push(""), r.endColumn !== void 0 && r.endColumn !== null ? o.push(r.endColumn.toString()) : o.push(""), o.push(""), o.join("¦");
  }
  i.makeKeyOptionalMessage = n;
})(TD || (TD = {}));
const _9 = me("progressService");
me("editorProgressService");
var ph;
(function(i) {
  i[i.Explorer = 1] = "Explorer", i[i.Scm = 3] = "Scm", i[i.Extensions = 5] = "Extensions", i[i.Window = 10] = "Window", i[i.Notification = 15] = "Notification", i[i.Dialog = 20] = "Dialog";
})(ph || (ph = {}));
const YS = class YS {
  get value() {
    return this._value;
  }
  constructor(e) {
    this.callback = e;
  }
  report(e) {
    this._value = e, this.callback(this._value);
  }
};
YS.None = Object.freeze({ report() {
} });
let Jh = YS, PD = class extends xe {
  constructor(e, t) {
    super(), this.deferred = new Qo(), t.withProgress(e, (n) => (this.reporter = n, this.lastStep && n.report(this.lastStep), this.deferred.p)), this._register(Ie(() => this.deferred.complete()));
  }
  report(e) {
    this.reporter ? this.reporter.report(e) : this.lastStep = e;
  }
};
PD = z([
  O(1, _9)
], PD);
class v9 {
  constructor() {
    this.data = /* @__PURE__ */ new Map();
  }
  add(e, t) {
    Gi(st(e)), Gi(ai(t)), Gi(!this.data.has(e), "There is already an extension with this id"), this.data.set(e, t);
  }
  knows(e) {
    return this.data.has(e);
  }
  as(e) {
    return this.data.get(e) || null;
  }
  dispose() {
    this.data.forEach((e) => {
      kT(e.dispose) && e.dispose();
    }), this.data.clear();
  }
}
const ui = new v9();
function iw(i, e) {
  return e && (i.stack || i.stacktrace) ? h(
    105,
    "{0}: {1}",
    RD(i),
    AD(i.stack) || AD(i.stacktrace)
  ) : RD(i);
}
function AD(i) {
  return Array.isArray(i) ? i.join(`
`) : i;
}
function RD(i) {
  return i.code === "ERR_UNC_HOST_NOT_ALLOWED" ? `${i.message}. Please update the 'security.allowedUNCHosts' setting if you want to allow this host.` : typeof i.code == "string" && typeof i.errno == "number" && typeof i.syscall == "string" ? h(106, "A system error occurred ({0})", i.message) : i.message || h(107, "An unknown error occurred. Please consult the log for more details.");
}
function wd(i = null, e = !1) {
  if (!i)
    return h(107, "An unknown error occurred. Please consult the log for more details.");
  if (Array.isArray(i)) {
    const t = Xt(i), n = wd(t[0], e);
    return t.length > 1 ? h(108, "{0} ({1} errors in total)", n, t.length) : n;
  }
  if (st(i))
    return i;
  if (i.detail) {
    const t = i.detail;
    if (t.error)
      return iw(t.error, e);
    if (t.exception)
      return iw(t.exception, e);
  }
  return i.stack ? iw(i, e) : i.message ? i.message : h(107, "An unknown error occurred. Please consult the log for more details.");
}
class w9 extends xe {
  constructor(e, t = "", n = "", r = !0, s) {
    super(), this._onDidChange = this._register(new M()), this.onDidChange = this._onDidChange.event, this._enabled = !0, this._id = e, this._label = t, this._cssClass = n, this._enabled = r, this._actionCallback = s;
  }
  get id() {
    return this._id;
  }
  get label() {
    return this._label;
  }
  set label(e) {
    this._setLabel(e);
  }
  _setLabel(e) {
    this._label !== e && (this._label = e, this._onDidChange.fire({ label: e }));
  }
  get tooltip() {
    return this._tooltip || "";
  }
  set tooltip(e) {
    this._setTooltip(e);
  }
  _setTooltip(e) {
    this._tooltip !== e && (this._tooltip = e, this._onDidChange.fire({ tooltip: e }));
  }
  get class() {
    return this._cssClass;
  }
  set class(e) {
    this._setClass(e);
  }
  _setClass(e) {
    this._cssClass !== e && (this._cssClass = e, this._onDidChange.fire({ class: e }));
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(e) {
    this._setEnabled(e);
  }
  _setEnabled(e) {
    this._enabled !== e && (this._enabled = e, this._onDidChange.fire({ enabled: e }));
  }
  get checked() {
    return this._checked;
  }
  set checked(e) {
    this._setChecked(e);
  }
  _setChecked(e) {
    this._checked !== e && (this._checked = e, this._onDidChange.fire({ checked: e }));
  }
  async run(e, t) {
    this._actionCallback && await this._actionCallback(e);
  }
}
const C1 = class C1 extends w9 {
  constructor() {
    super(C1.ID, h(43, "(empty)"), void 0, !1);
  }
};
C1.ID = "vs.actions.empty";
let LD = C1;
const b9 = {
  EditorFactory: "workbench.contributions.editor.inputFactories"
}, y9 = {
  id: "default",
  displayName: h(3938, "Text Editor"),
  providerDisplayName: h(3939, "Built-in")
}, x9 = "workbench.editors.textDiffEditor", E9 = "workbench.editors.binaryResourceDiffEditor";
var ND;
(function(i) {
  i[i.PROGRAMMATIC = 1] = "PROGRAMMATIC", i[i.USER = 2] = "USER", i[i.EDIT = 3] = "EDIT", i[i.NAVIGATION = 4] = "NAVIGATION", i[i.JUMP = 5] = "JUMP";
})(ND || (ND = {}));
var MD;
(function(i) {
  i[i.IDENTICAL = 1] = "IDENTICAL", i[i.SIMILAR = 2] = "SIMILAR", i[i.DIFFERENT = 3] = "DIFFERENT";
})(MD || (MD = {}));
function nw(i, e, t) {
  for (const n of t.visibleEditorPanes)
    if (n.group.id === e && i.matches(n.input))
      return n.getViewState();
}
function S9(i) {
  if (Ir(i))
    return !1;
  const e = i;
  return x.isUri(e == null ? void 0 : e.resource);
}
function Bs(i) {
  if (Ir(i))
    return !1;
  const e = i;
  return (e == null ? void 0 : e.original) !== void 0 && e.modified !== void 0;
}
function gh(i) {
  if (Ir(i))
    return !1;
  const e = i;
  return !e || e.resources && !Array.isArray(e.resources) ? !1 : !!e.resources || !!e.multiDiffSource;
}
function Ra(i) {
  if (Ir(i) || Bs(i))
    return !1;
  const e = i;
  return (e == null ? void 0 : e.primary) !== void 0 && e.secondary !== void 0;
}
function La(i) {
  var t, n, r, s;
  if (Ir(i))
    return !1;
  const e = i;
  return x.isUri((t = e == null ? void 0 : e.base) == null ? void 0 : t.resource) && x.isUri((n = e == null ? void 0 : e.input1) == null ? void 0 : n.resource) && x.isUri((r = e == null ? void 0 : e.input2) == null ? void 0 : r.resource) && x.isUri((s = e == null ? void 0 : e.result) == null ? void 0 : s.resource);
}
var ti;
(function(i) {
  i[i.SHORT = 0] = "SHORT", i[i.MEDIUM = 1] = "MEDIUM", i[i.LONG = 2] = "LONG";
})(ti || (ti = {}));
var Ac;
(function(i) {
  i[i.EXPLICIT = 1] = "EXPLICIT", i[i.AUTO = 2] = "AUTO", i[i.FOCUS_CHANGE = 3] = "FOCUS_CHANGE", i[i.WINDOW_CHANGE = 4] = "WINDOW_CHANGE";
})(Ac || (Ac = {}));
var Ln;
(function(i) {
  i[i.None = 0] = "None", i[i.Readonly = 2] = "Readonly", i[i.Untitled = 4] = "Untitled", i[i.Singleton = 8] = "Singleton", i[i.RequiresTrust = 16] = "RequiresTrust", i[i.CanSplitInGroup = 32] = "CanSplitInGroup", i[i.ForceDescription = 64] = "ForceDescription", i[i.CanDropIntoEditor = 128] = "CanDropIntoEditor", i[i.MultipleEditors = 256] = "MultipleEditors", i[i.Scratchpad = 512] = "Scratchpad";
})(Ln || (Ln = {}));
class VP extends xe {
}
function Ir(i) {
  return i instanceof VP;
}
function D9(i) {
  const e = i;
  return x.isUri(e == null ? void 0 : e.preferredResource);
}
function k9(i) {
  const e = i;
  return Ir(e == null ? void 0 : e.primary) && Ir(e == null ? void 0 : e.secondary);
}
function zP(i) {
  const e = i;
  return Ir(e == null ? void 0 : e.modified) && Ir(e == null ? void 0 : e.original);
}
var OD;
(function(i) {
  i[i.UNKNOWN = 0] = "UNKNOWN", i[i.REPLACE = 1] = "REPLACE", i[i.MOVE = 2] = "MOVE", i[i.UNPIN = 3] = "UNPIN";
})(OD || (OD = {}));
var FD;
(function(i) {
  i[i.GROUP_ACTIVE = 0] = "GROUP_ACTIVE", i[i.GROUP_INDEX = 1] = "GROUP_INDEX", i[i.GROUP_LABEL = 2] = "GROUP_LABEL", i[i.GROUP_LOCKED = 3] = "GROUP_LOCKED", i[i.EDITORS_SELECTION = 4] = "EDITORS_SELECTION", i[i.EDITOR_OPEN = 5] = "EDITOR_OPEN", i[i.EDITOR_CLOSE = 6] = "EDITOR_CLOSE", i[i.EDITOR_MOVE = 7] = "EDITOR_MOVE", i[i.EDITOR_ACTIVE = 8] = "EDITOR_ACTIVE", i[i.EDITOR_LABEL = 9] = "EDITOR_LABEL", i[i.EDITOR_CAPABILITIES = 10] = "EDITOR_CAPABILITIES", i[i.EDITOR_PIN = 11] = "EDITOR_PIN", i[i.EDITOR_TRANSIENT = 12] = "EDITOR_TRANSIENT", i[i.EDITOR_STICKY = 13] = "EDITOR_STICKY", i[i.EDITOR_DIRTY = 14] = "EDITOR_DIRTY", i[i.EDITOR_WILL_DISPOSE = 15] = "EDITOR_WILL_DISPOSE";
})(FD || (FD = {}));
var fo;
(function(i) {
  i[i.PRIMARY = 1] = "PRIMARY", i[i.SECONDARY = 2] = "SECONDARY", i[i.BOTH = 3] = "BOTH", i[i.ANY = 4] = "ANY";
})(fo || (fo = {}));
class I9 {
  getOriginalUri(e, t) {
    if (!e)
      return;
    if (La(e))
      return ub.getOriginalUri(e.result, t);
    if (t != null && t.supportSideBySide) {
      const { primary: r, secondary: s } = this.getSideEditors(e);
      if (r && s) {
        if ((t == null ? void 0 : t.supportSideBySide) === fo.BOTH)
          return {
            primary: this.getOriginalUri(r, { filterByScheme: t.filterByScheme }),
            secondary: this.getOriginalUri(s, { filterByScheme: t.filterByScheme })
          };
        if ((t == null ? void 0 : t.supportSideBySide) === fo.ANY)
          return this.getOriginalUri(r, { filterByScheme: t.filterByScheme }) ?? this.getOriginalUri(s, { filterByScheme: t.filterByScheme });
        e = t.supportSideBySide === fo.PRIMARY ? r : s;
      }
    }
    if (Bs(e) || gh(e) || Ra(e) || La(e))
      return;
    const n = D9(e) ? e.preferredResource : e.resource;
    return !n || !t || !t.filterByScheme ? n : this.filterUri(n, t.filterByScheme);
  }
  getSideEditors(e) {
    return k9(e) || Ra(e) ? { primary: e.primary, secondary: e.secondary } : zP(e) || Bs(e) ? { primary: e.modified, secondary: e.original } : { primary: void 0, secondary: void 0 };
  }
  getCanonicalUri(e, t) {
    if (!e)
      return;
    if (La(e))
      return ub.getCanonicalUri(e.result, t);
    if (t != null && t.supportSideBySide) {
      const { primary: r, secondary: s } = this.getSideEditors(e);
      if (r && s) {
        if ((t == null ? void 0 : t.supportSideBySide) === fo.BOTH)
          return {
            primary: this.getCanonicalUri(r, { filterByScheme: t.filterByScheme }),
            secondary: this.getCanonicalUri(s, { filterByScheme: t.filterByScheme })
          };
        if ((t == null ? void 0 : t.supportSideBySide) === fo.ANY)
          return this.getCanonicalUri(r, { filterByScheme: t.filterByScheme }) ?? this.getCanonicalUri(s, { filterByScheme: t.filterByScheme });
        e = t.supportSideBySide === fo.PRIMARY ? r : s;
      }
    }
    if (Bs(e) || gh(e) || Ra(e) || La(e))
      return;
    const n = e.resource;
    return !n || !t || !t.filterByScheme ? n : this.filterUri(n, t.filterByScheme);
  }
  filterUri(e, t) {
    if (Array.isArray(t)) {
      if (t.some((n) => e.scheme === n))
        return e;
    } else if (t === e.scheme)
      return e;
  }
}
var UD;
(function(i) {
  i[i.UNKNOWN = 0] = "UNKNOWN", i[i.KEYBOARD = 1] = "KEYBOARD", i[i.MOUSE = 2] = "MOUSE";
})(UD || (UD = {}));
const ub = new I9();
var $D;
(function(i) {
  i[i.LEFT = 0] = "LEFT", i[i.RIGHT = 1] = "RIGHT";
})($D || ($D = {}));
class C9 {
  constructor() {
    this.editorSerializerConstructors = /* @__PURE__ */ new Map(), this.editorSerializerInstances = /* @__PURE__ */ new Map();
  }
  start(e) {
    const t = this.instantiationService = e.get(Dp);
    for (const [n, r] of this.editorSerializerConstructors)
      this.createEditorSerializer(n, r, t);
    this.editorSerializerConstructors.clear();
  }
  createEditorSerializer(e, t, n) {
    const r = n.createInstance(t);
    this.editorSerializerInstances.set(e, r);
  }
  registerFileEditorFactory(e) {
    if (this.fileEditorFactory)
      throw new Error("Can only register one file editor factory.");
    this.fileEditorFactory = e;
  }
  getFileEditorFactory() {
    return Nu(this.fileEditorFactory);
  }
  registerEditorSerializer(e, t) {
    if (this.editorSerializerConstructors.has(e) || this.editorSerializerInstances.has(e))
      throw new Error(
        `A editor serializer with type ID '${e}' was already registered.`
      );
    return this.instantiationService ? this.createEditorSerializer(e, t, this.instantiationService) : this.editorSerializerConstructors.set(e, t), Ie(() => {
      this.editorSerializerConstructors.delete(e), this.editorSerializerInstances.delete(e);
    });
  }
  getEditorSerializer(e) {
    return this.editorSerializerInstances.get(typeof e == "string" ? e : e.typeId);
  }
}
ui.add(b9.EditorFactory, new C9());
var HD;
(function(i) {
  i[i.MOST_RECENTLY_ACTIVE = 0] = "MOST_RECENTLY_ACTIVE", i[i.SEQUENTIAL = 1] = "SEQUENTIAL";
})(HD || (HD = {}));
var BD;
(function(i) {
  i[i.NotOmitted = 0] = "NotOmitted", i[i.Partial = 1] = "Partial", i[i.Full = 2] = "Full";
})(BD || (BD = {}));
var WD;
(function(i) {
  i.icon = _e.error;
  function e(s) {
    return {
      filterUri: s.resource,
      owner: s.owner,
      problemMessage: s.message,
      filterRange: { startLineNumber: s.startLineNumber, endLineNumber: s.endLineNumber, startColumn: s.startColumn, endColumn: s.endColumn }
    };
  }
  i.fromMarker = e;
  function t(s) {
    return {
      id: n(s),
      name: r(s),
      icon: i.icon,
      value: s,
      kind: "diagnostic",
      ...s
    };
  }
  i.toEntry = t;
  function n(s) {
    var o;
    return [s.filterUri, s.owner, s.filterSeverity, (o = s.filterRange) == null ? void 0 : o.startLineNumber].join(":");
  }
  i.id = n;
  function r(s) {
    let o;
    if ((function(l) {
      l[l.MaxChars = 30] = "MaxChars", l[l.MaxSpaceLookback = 10] = "MaxSpaceLookback";
    })(o || (o = {})), s.problemMessage) {
      if (s.problemMessage.length < o.MaxChars)
        return s.problemMessage;
      const l = s.problemMessage.lastIndexOf(" ", o.MaxChars);
      return l === -1 || l + o.MaxSpaceLookback < o.MaxChars ? s.problemMessage.substring(0, o.MaxChars) + "…" : s.problemMessage.substring(0, l) + "…";
    }
    let a = h(5420, "All Problems");
    return s.filterUri && (a = h(5421, "Problems in {0}", Xs(s.filterUri))), a;
  }
  i.label = r;
})(WD || (WD = {}));
var VD;
(function(i) {
  function e(t) {
    return x.isUri(t.value) ? t.value : p9(t.value) ? t.value.uri : void 0;
  }
  i.toUri = e;
})(VD || (VD = {}));
function T9(i) {
  return i.kind === "image";
}
var zD;
(function(i) {
  i.Instruction = "vscode.prompt.instructions.root", i.InstructionReference = "vscode.prompt.instructions", i.PromptFile = "vscode.prompt.file";
})(zD || (zD = {}));
const iS = me("contextKeyService");
var mh;
(function(i) {
  i[i.STORAGE_DOES_NOT_EXIST = 0] = "STORAGE_DOES_NOT_EXIST", i[i.STORAGE_IN_MEMORY = 1] = "STORAGE_IN_MEMORY";
})(mh || (mh = {}));
var lr;
(function(i) {
  i[i.None = 0] = "None", i[i.Initialized = 1] = "Initialized", i[i.Closed = 2] = "Closed";
})(lr || (lr = {}));
const T1 = class T1 extends xe {
  constructor(e, t = /* @__PURE__ */ Object.create(null)) {
    super(), this.database = e, this.options = t, this._onDidChangeStorage = this._register(new zg()), this.onDidChangeStorage = this._onDidChangeStorage.event, this.state = lr.None, this.cache = /* @__PURE__ */ new Map(), this.flushDelayer = this._register(new sP(T1.DEFAULT_FLUSH_DELAY)), this.pendingDeletes = /* @__PURE__ */ new Set(), this.pendingInserts = /* @__PURE__ */ new Map(), this.pendingClose = void 0, this.whenFlushedCallbacks = [], this.registerListeners();
  }
  registerListeners() {
    this._register(this.database.onDidChangeItemsExternal((e) => this.onDidChangeItemsExternal(e)));
  }
  onDidChangeItemsExternal(e) {
    var t, n;
    this._onDidChangeStorage.pause();
    try {
      (t = e.changed) == null || t.forEach((r, s) => this.acceptExternal(s, r)), (n = e.deleted) == null || n.forEach((r) => this.acceptExternal(r, void 0));
    } finally {
      this._onDidChangeStorage.resume();
    }
  }
  acceptExternal(e, t) {
    if (this.state === lr.Closed)
      return;
    let n = !1;
    oi(t) ? n = this.cache.delete(e) : this.cache.get(e) !== t && (this.cache.set(e, t), n = !0), n && this._onDidChangeStorage.fire({ key: e, external: !0 });
  }
  get items() {
    return this.cache;
  }
  get size() {
    return this.cache.size;
  }
  async init() {
    this.state === lr.None && (this.state = lr.Initialized, this.options.hint !== mh.STORAGE_DOES_NOT_EXIST && (this.cache = await this.database.getItems()));
  }
  get(e, t) {
    const n = this.cache.get(e);
    return oi(n) ? t : n;
  }
  getBoolean(e, t) {
    const n = this.get(e);
    return oi(n) ? t : n === "true";
  }
  getNumber(e, t) {
    const n = this.get(e);
    return oi(n) ? t : parseInt(n, 10);
  }
  getObject(e, t) {
    const n = this.get(e);
    return oi(n) ? t : MP(n);
  }
  async set(e, t, n = !1) {
    if (this.state === lr.Closed)
      return;
    if (oi(t))
      return this.delete(e, n);
    const r = ai(t) || Array.isArray(t) ? Y7(t) : String(t);
    if (this.cache.get(e) !== r)
      return this.cache.set(e, r), this.pendingInserts.set(e, r), this.pendingDeletes.delete(e), this._onDidChangeStorage.fire({ key: e, external: n }), this.doFlush();
  }
  async delete(e, t = !1) {
    if (!(this.state === lr.Closed || !this.cache.delete(e)))
      return this.pendingDeletes.has(e) || this.pendingDeletes.add(e), this.pendingInserts.delete(e), this._onDidChangeStorage.fire({ key: e, external: t }), this.doFlush();
  }
  async optimize() {
    if (this.state !== lr.Closed)
      return await this.flush(0), this.database.optimize();
  }
  async close() {
    return this.pendingClose || (this.pendingClose = this.doClose()), this.pendingClose;
  }
  async doClose() {
    this.state = lr.Closed;
    try {
      await this.doFlush(0);
    } catch {
    }
    await this.database.close(() => this.cache);
  }
  get hasPending() {
    return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;
  }
  async flushPending() {
    if (!this.hasPending)
      return;
    const e = { insert: this.pendingInserts, delete: this.pendingDeletes };
    return this.pendingDeletes = /* @__PURE__ */ new Set(), this.pendingInserts = /* @__PURE__ */ new Map(), this.database.updateItems(e).finally(() => {
      var t;
      if (!this.hasPending)
        for (; this.whenFlushedCallbacks.length; )
          (t = this.whenFlushedCallbacks.pop()) == null || t();
    });
  }
  async flush(e) {
    if (!(this.state === lr.Closed || this.pendingClose))
      return this.doFlush(e);
  }
  async doFlush(e) {
    return this.options.hint === mh.STORAGE_IN_MEMORY ? this.flushPending() : this.flushDelayer.trigger(() => this.flushPending(), e);
  }
  async whenFlushed() {
    if (this.hasPending)
      return new Promise((e) => this.whenFlushedCallbacks.push(e));
  }
  isInMemory() {
    return this.options.hint === mh.STORAGE_IN_MEMORY;
  }
};
T1.DEFAULT_FLUSH_DELAY = 100;
let qD = T1;
function Yh(i) {
  return nS(i, 0);
}
function nS(i, e) {
  switch (typeof i) {
    case "object":
      return i === null ? Ws(349, e) : Array.isArray(i) ? A9(i, e) : R9(i, e);
    case "string":
      return rS(i, e);
    case "boolean":
      return P9(i, e);
    case "number":
      return Ws(i, e);
    case "undefined":
      return Ws(937, e);
    default:
      return Ws(617, e);
  }
}
function Ws(i, e) {
  return (e << 5) - e + i | 0;
}
function P9(i, e) {
  return Ws(i ? 433 : 863, e);
}
function rS(i, e) {
  e = Ws(149417, e);
  for (let t = 0, n = i.length; t < n; t++)
    e = Ws(i.charCodeAt(t), e);
  return e;
}
function A9(i, e) {
  return e = Ws(104579, e), i.reduce((t, n) => nS(n, t), e);
}
function R9(i, e) {
  return e = Ws(181387, e), Object.keys(i).sort().reduce((t, n) => (t = rS(n, t), nS(i[n], t)), e);
}
var jD;
(function(i) {
  i[i.BLOCK_SIZE = 64] = "BLOCK_SIZE", i[i.UNICODE_REPLACEMENT = 65533] = "UNICODE_REPLACEMENT";
})(jD || (jD = {}));
const L9 = me("environmentService"), qP = me("fileService"), jP = me("IUriIdentityService");
var GD;
(function(i) {
  i.Settings = "settings", i.Keybindings = "keybindings", i.Snippets = "snippets", i.Prompts = "prompts", i.Tasks = "tasks", i.Extensions = "extensions", i.GlobalState = "globalState", i.Mcp = "mcp";
})(GD || (GD = {}));
function N9(i) {
  const e = i;
  return !!(e && typeof e == "object" && typeof e.id == "string" && typeof e.isDefault == "boolean" && typeof e.name == "string" && x.isUri(e.location) && x.isUri(e.globalStorageHome) && x.isUri(e.settingsResource) && x.isUri(e.keybindingsResource) && x.isUri(e.tasksResource) && x.isUri(e.snippetsHome) && x.isUri(e.promptsHome) && x.isUri(e.extensionsResource) && x.isUri(e.mcpResource));
}
function Qp(i, e, t, n, r, s) {
  var o, a, l, c, u, d, f, p;
  return {
    id: i,
    name: e,
    location: t,
    isDefault: !1,
    icon: r == null ? void 0 : r.icon,
    globalStorageHome: s && ((o = r == null ? void 0 : r.useDefaultFlags) != null && o.globalState) ? s.globalStorageHome : Ei(t, "globalStorage"),
    settingsResource: s && ((a = r == null ? void 0 : r.useDefaultFlags) != null && a.settings) ? s.settingsResource : Ei(t, "settings.json"),
    keybindingsResource: s && ((l = r == null ? void 0 : r.useDefaultFlags) != null && l.keybindings) ? s.keybindingsResource : Ei(t, "keybindings.json"),
    tasksResource: s && ((c = r == null ? void 0 : r.useDefaultFlags) != null && c.tasks) ? s.tasksResource : Ei(t, "tasks.json"),
    snippetsHome: s && ((u = r == null ? void 0 : r.useDefaultFlags) != null && u.snippets) ? s.snippetsHome : Ei(t, "snippets"),
    promptsHome: s && ((d = r == null ? void 0 : r.useDefaultFlags) != null && d.prompts) ? s.promptsHome : Ei(t, "prompts"),
    extensionsResource: s && ((f = r == null ? void 0 : r.useDefaultFlags) != null && f.extensions) ? s.extensionsResource : Ei(t, "extensions.json"),
    mcpResource: s && ((p = r == null ? void 0 : r.useDefaultFlags) != null && p.mcp) ? s.mcpResource : Ei(t, "mcp.json"),
    cacheHome: Ei(n, i),
    useDefaultFlags: r == null ? void 0 : r.useDefaultFlags,
    isTransient: r == null ? void 0 : r.transient,
    workspaces: r == null ? void 0 : r.workspaces
  };
}
var Sl;
let QD = (Sl = class extends xe {
  get defaultProfile() {
    return this.profiles[0];
  }
  get profiles() {
    return [...this.profilesObject.profiles, ...this.transientProfilesObject.profiles];
  }
  constructor(e, t, n, r) {
    super(), this.environmentService = e, this.fileService = t, this.uriIdentityService = n, this.logService = r, this._onDidChangeProfiles = this._register(new M()), this.onDidChangeProfiles = this._onDidChangeProfiles.event, this._onWillCreateProfile = this._register(new M()), this.onWillCreateProfile = this._onWillCreateProfile.event, this._onWillRemoveProfile = this._register(new M()), this.onWillRemoveProfile = this._onWillRemoveProfile.event, this._onDidResetWorkspaces = this._register(new M()), this.onDidResetWorkspaces = this._onDidResetWorkspaces.event, this.profileCreationPromises = /* @__PURE__ */ new Map(), this.transientProfilesObject = {
      profiles: [],
      emptyWindows: /* @__PURE__ */ new Map()
    }, this.profilesHome = Ei(this.environmentService.userRoamingDataHome, "profiles"), this.profilesCacheHome = Ei(this.environmentService.cacheHome, "CachedProfilesData");
  }
  init() {
    this._profilesObject = void 0;
  }
  get profilesObject() {
    if (!this._profilesObject) {
      const e = this.createDefaultProfile(), t = [e];
      try {
        for (const r of this.getStoredProfiles()) {
          if (!r.name || !st(r.name) || !r.location) {
            this.logService.warn("Skipping the invalid stored profile", r.location || r.name);
            continue;
          }
          t.push(Qp(Xs(r.location), r.name, r.location, this.profilesCacheHome, { icon: r.icon, useDefaultFlags: r.useDefaultFlags }, e));
        }
      } catch (r) {
        this.logService.error(r);
      }
      const n = /* @__PURE__ */ new Map();
      if (t.length)
        try {
          const r = this.getStoredProfileAssociations();
          if (r.workspaces)
            for (const [s, o] of Object.entries(r.workspaces)) {
              const a = x.parse(s), l = t.find((c) => c.id === o);
              if (l) {
                const c = l.workspaces ? l.workspaces.slice(0) : [];
                c.push(a), l.workspaces = c;
              }
            }
          if (r.emptyWindows)
            for (const [s, o] of Object.entries(r.emptyWindows)) {
              const a = t.find((l) => l.id === o);
              a && n.set(s, a);
            }
        } catch (r) {
          this.logService.error(r);
        }
      this._profilesObject = { profiles: t, emptyWindows: n };
    }
    return this._profilesObject;
  }
  createDefaultProfile() {
    const e = Qp("__default__profile__", h(2401, "Default"), this.environmentService.userRoamingDataHome, this.profilesCacheHome);
    return { ...e, extensionsResource: this.getDefaultProfileExtensionsLocation() ?? e.extensionsResource, isDefault: !0 };
  }
  async createTransientProfile(e) {
    const t = "Temp", n = new RegExp(`${Nl(t)}\\s(\\d+)`);
    let r = 0;
    for (const o of this.profiles) {
      const a = n.exec(o.name), l = a ? parseInt(a[1]) : 0;
      r = l > r ? l : r;
    }
    const s = `${t} ${r + 1}`;
    return this.createProfile(Yh(dn()).toString(16), s, { transient: !0 }, e);
  }
  async createNamedProfile(e, t, n) {
    return this.createProfile(Yh(dn()).toString(16), e, t, n);
  }
  async createProfile(e, t, n, r) {
    return await this.doCreateProfile(e, t, n, r);
  }
  async doCreateProfile(e, t, n, r) {
    if (!st(t) || !t)
      throw new Error("Name of the profile is mandatory and must be of type `string`");
    let s = this.profileCreationPromises.get(t);
    return s || (s = (async () => {
      try {
        if (this.profiles.find((u) => u.id === e || !u.isTransient && !(n != null && n.transient) && u.name === t))
          throw new Error(`Profile with ${t} name already exists`);
        const a = r ? this.getWorkspace(r) : void 0;
        x.isUri(a) && (n = { ...n, workspaces: [a] });
        const l = Qp(e, t, Ei(this.profilesHome, e), this.profilesCacheHome, n, this.defaultProfile);
        await this.fileService.createFolder(l.location);
        const c = [];
        return this._onWillCreateProfile.fire({
          profile: l,
          join(u) {
            c.push(u);
          }
        }), await Uu.settled(c), a && !x.isUri(a) && this.updateEmptyWindowAssociation(a, l, !!l.isTransient), this.updateProfiles([l], [], []), l;
      } finally {
        this.profileCreationPromises.delete(t);
      }
    })(), this.profileCreationPromises.set(t, s)), s;
  }
  async updateProfile(e, t) {
    var s, o;
    const n = [];
    for (const a of this.profiles) {
      let l;
      if (e.id === a.id)
        a.isDefault ? t.workspaces && (l = a, l.workspaces = t.workspaces) : l = Qp(a.id, t.name ?? a.name, a.location, this.profilesCacheHome, {
          icon: t.icon === null ? void 0 : t.icon ?? a.icon,
          transient: t.transient ?? a.isTransient,
          useDefaultFlags: t.useDefaultFlags ?? a.useDefaultFlags,
          workspaces: t.workspaces ?? a.workspaces
        }, this.defaultProfile);
      else if (t.workspaces) {
        const c = (s = a.workspaces) == null ? void 0 : s.filter((u) => {
          var d;
          return !((d = t.workspaces) != null && d.some((f) => this.uriIdentityService.extUri.isEqual(u, f)));
        });
        ((o = a.workspaces) == null ? void 0 : o.length) !== (c == null ? void 0 : c.length) && (l = a, l.workspaces = c);
      }
      l && n.push(l);
    }
    if (!n.length)
      throw e.isDefault ? new Error("Cannot update default profile") : new Error(`Profile '${e.name}' does not exist`);
    this.updateProfiles([], [], n);
    const r = this.profiles.find((a) => a.id === e.id);
    if (!r)
      throw new Error(`Profile '${e.name}' was not updated`);
    return r;
  }
  async removeProfile(e) {
    if (e.isDefault)
      throw new Error("Cannot remove default profile");
    const t = this.profiles.find((r) => r.id === e.id);
    if (!t)
      throw new Error(`Profile '${e.name}' does not exist`);
    const n = [];
    this._onWillRemoveProfile.fire({
      profile: t,
      join(r) {
        n.push(r);
      }
    });
    try {
      await Promise.allSettled(n);
    } catch (r) {
      this.logService.error(r);
    }
    this.updateProfiles([], [t], []);
    try {
      await this.fileService.del(t.cacheHome, { recursive: !0 });
    } catch (r) {
      KL(r) !== An.FILE_NOT_FOUND && this.logService.error(r);
    }
  }
  async setProfileForWorkspace(e, t) {
    const n = this.profiles.find((s) => s.id === t.id);
    if (!n)
      throw new Error(`Profile '${t.name}' does not exist`);
    const r = this.getWorkspace(e);
    if (x.isUri(r)) {
      const s = n.workspaces ? [...n.workspaces] : [];
      s.some((o) => this.uriIdentityService.extUri.isEqual(o, r)) || (s.push(r), await this.updateProfile(n, { workspaces: s }));
    } else
      this.updateEmptyWindowAssociation(r, n, !1), this.updateStoredProfiles(this.profiles);
  }
  unsetWorkspace(e, t = !1) {
    var r;
    const n = this.getWorkspace(e);
    if (x.isUri(n)) {
      const s = this.getProfileForWorkspace(e);
      s && this.updateProfile(s, { workspaces: (r = s.workspaces) == null ? void 0 : r.filter((o) => !this.uriIdentityService.extUri.isEqual(o, n)) });
    } else
      this.updateEmptyWindowAssociation(n, void 0, t), this.updateStoredProfiles(this.profiles);
  }
  async resetWorkspaces() {
    this.transientProfilesObject.emptyWindows.clear(), this.profilesObject.emptyWindows.clear();
    for (const e of this.profiles)
      e.workspaces = void 0;
    this.updateProfiles([], [], this.profiles), this._onDidResetWorkspaces.fire();
  }
  async cleanUp() {
    if (await this.fileService.exists(this.profilesHome)) {
      const e = await this.fileService.resolve(this.profilesHome);
      await Promise.all((e.children || []).filter((t) => t.isDirectory && this.profiles.every((n) => !this.uriIdentityService.extUri.isEqual(n.location, t.resource))).map((t) => this.fileService.del(t.resource, { recursive: !0 })));
    }
  }
  async cleanUpTransientProfiles() {
    const e = this.transientProfilesObject.profiles.filter((t) => !this.isProfileAssociatedToWorkspace(t));
    await Promise.allSettled(e.map((t) => this.removeProfile(t)));
  }
  getProfileForWorkspace(e) {
    const t = this.getWorkspace(e);
    return x.isUri(t) ? this.profiles.find((n) => {
      var r;
      return (r = n.workspaces) == null ? void 0 : r.some((s) => this.uriIdentityService.extUri.isEqual(s, t));
    }) : this.profilesObject.emptyWindows.get(t) ?? this.transientProfilesObject.emptyWindows.get(t);
  }
  getWorkspace(e) {
    return YL(e) ? e.uri : XL(e) ? e.configPath : e.id;
  }
  isProfileAssociatedToWorkspace(e) {
    var t;
    return !!((t = e.workspaces) != null && t.length || [...this.profilesObject.emptyWindows.values()].some(
      (n) => this.uriIdentityService.extUri.isEqual(n.location, e.location)
    ) || [...this.transientProfilesObject.emptyWindows.values()].some(
      (n) => this.uriIdentityService.extUri.isEqual(n.location, e.location)
    ));
  }
  updateProfiles(e, t, n) {
    var a, l;
    const r = [...this.profiles, ...e], s = this.transientProfilesObject.profiles;
    this.transientProfilesObject.profiles = [];
    const o = [];
    for (let c of r) {
      if (t.some((u) => c.id === u.id)) {
        for (const u of [...this.profilesObject.emptyWindows.keys()])
          c.id === ((a = this.profilesObject.emptyWindows.get(u)) == null ? void 0 : a.id) && this.profilesObject.emptyWindows.delete(u);
        continue;
      }
      if (!c.isDefault) {
        c = n.find((d) => c.id === d.id) ?? c;
        const u = s.find((d) => c.id === d.id);
        if (c.isTransient)
          this.transientProfilesObject.profiles.push(c);
        else if (u) {
          for (const [d, f] of this.transientProfilesObject.emptyWindows.entries())
            if (c.id === f.id) {
              this.transientProfilesObject.emptyWindows.delete(d), this.profilesObject.emptyWindows.set(d, c);
              break;
            }
        }
      }
      ((l = c.workspaces) == null ? void 0 : l.length) === 0 && (c.workspaces = void 0), o.push(c);
    }
    this.updateStoredProfiles(o), this.triggerProfilesChanges(e, t, n);
  }
  triggerProfilesChanges(e, t, n) {
    this._onDidChangeProfiles.fire({ added: e, removed: t, updated: n, all: this.profiles });
  }
  updateEmptyWindowAssociation(e, t, n) {
    n = t != null && t.isTransient ? !0 : n, n ? t ? this.transientProfilesObject.emptyWindows.set(e, t) : this.transientProfilesObject.emptyWindows.delete(e) : (this.transientProfilesObject.emptyWindows.delete(e), t ? this.profilesObject.emptyWindows.set(e, t) : this.profilesObject.emptyWindows.delete(e));
  }
  updateStoredProfiles(e) {
    const t = [], n = {}, r = {};
    for (const s of e)
      if (!s.isTransient && (s.isDefault || t.push({ location: s.location, name: s.name, icon: s.icon, useDefaultFlags: s.useDefaultFlags }), s.workspaces))
        for (const o of s.workspaces)
          n[o.toString()] = s.id;
    for (const [s, o] of this.profilesObject.emptyWindows.entries())
      r[s.toString()] = o.id;
    this.saveStoredProfileAssociations({ workspaces: n, emptyWindows: r }), this.saveStoredProfiles(t), this._profilesObject = void 0;
  }
  getStoredProfiles() {
    return [];
  }
  saveStoredProfiles(e) {
    throw new Error("not implemented");
  }
  getStoredProfileAssociations() {
    return {};
  }
  saveStoredProfileAssociations(e) {
    throw new Error("not implemented");
  }
  getDefaultProfileExtensionsLocation() {
  }
}, Sl.PROFILES_KEY = "userDataProfiles", Sl.PROFILE_ASSOCIATIONS_KEY = "profileAssociations", Sl);
QD = z([
  O(0, L9),
  O(1, qP),
  O(2, jP),
  O(3, ot)
], QD);
const M9 = "__$__isNewStorageMarker", mg = "__$__targetStorageMarker";
var Rc;
(function(i) {
  i[i.NONE = 0] = "NONE", i[i.SHUTDOWN = 1] = "SHUTDOWN";
})(Rc || (Rc = {}));
var Kt;
(function(i) {
  i[i.APPLICATION = -1] = "APPLICATION", i[i.PROFILE = 0] = "PROFILE", i[i.WORKSPACE = 1] = "WORKSPACE";
})(Kt || (Kt = {}));
var mm;
(function(i) {
  i[i.USER = 0] = "USER", i[i.MACHINE = 1] = "MACHINE";
})(mm || (mm = {}));
function O9(i) {
  const e = i.get(mg);
  if (e)
    try {
      return JSON.parse(e);
    } catch {
    }
  return /* @__PURE__ */ Object.create(null);
}
const P1 = class P1 extends xe {
  constructor(e = { flushInterval: P1.DEFAULT_FLUSH_INTERVAL }) {
    super(), this._onDidChangeValue = this._register(new zg()), this._onDidChangeTarget = this._register(new zg()), this.onDidChangeTarget = this._onDidChangeTarget.event, this._onWillSaveState = this._register(new M()), this.onWillSaveState = this._onWillSaveState.event, this.runFlushWhenIdle = this._register(new $s()), this._workspaceKeyTargets = void 0, this._profileKeyTargets = void 0, this._applicationKeyTargets = void 0, this.flushWhenIdleScheduler = this._register(new Gl(() => this.doFlushWhenIdle(), e.flushInterval));
  }
  onDidChangeValue(e, t, n) {
    return Pt.filter(this._onDidChangeValue.event, (r) => r.scope === e && (t === void 0 || r.key === t), n);
  }
  doFlushWhenIdle() {
    this.runFlushWhenIdle.value = oP(() => {
      this.shouldFlushWhenIdle() && this.flush(), this.flushWhenIdleScheduler.schedule();
    });
  }
  shouldFlushWhenIdle() {
    return !0;
  }
  stopFlushWhenIdle() {
    Kn([this.runFlushWhenIdle, this.flushWhenIdleScheduler]);
  }
  initialize() {
    return this.initializationPromise || (this.initializationPromise = (async () => {
      an("code/willInitStorage");
      try {
        await this.doInitialize();
      } finally {
        an("code/didInitStorage");
      }
      this.flushWhenIdleScheduler.schedule();
    })()), this.initializationPromise;
  }
  emitDidChangeValue(e, t) {
    const { key: n, external: r } = t;
    if (n === mg) {
      switch (e) {
        case Kt.APPLICATION:
          this._applicationKeyTargets = void 0;
          break;
        case Kt.PROFILE:
          this._profileKeyTargets = void 0;
          break;
        case Kt.WORKSPACE:
          this._workspaceKeyTargets = void 0;
          break;
      }
      this._onDidChangeTarget.fire({ scope: e });
    } else
      this._onDidChangeValue.fire({ scope: e, key: n, target: this.getKeyTargets(e)[n], external: r });
  }
  emitWillSaveState(e) {
    this._onWillSaveState.fire({ reason: e });
  }
  get(e, t, n) {
    var r;
    return (r = this.getStorage(t)) == null ? void 0 : r.get(e, n);
  }
  getBoolean(e, t, n) {
    var r;
    return (r = this.getStorage(t)) == null ? void 0 : r.getBoolean(e, n);
  }
  getNumber(e, t, n) {
    var r;
    return (r = this.getStorage(t)) == null ? void 0 : r.getNumber(e, n);
  }
  getObject(e, t, n) {
    var r;
    return (r = this.getStorage(t)) == null ? void 0 : r.getObject(e, n);
  }
  storeAll(e, t) {
    this.withPausedEmitters(() => {
      for (const n of e)
        this.store(n.key, n.value, n.scope, n.target, t);
    });
  }
  store(e, t, n, r, s = !1) {
    if (oi(t)) {
      this.remove(e, n, s);
      return;
    }
    this.withPausedEmitters(() => {
      var o;
      this.updateKeyTarget(e, n, r), (o = this.getStorage(n)) == null || o.set(e, t, s);
    });
  }
  remove(e, t, n = !1) {
    this.withPausedEmitters(() => {
      var r;
      this.updateKeyTarget(e, t, void 0), (r = this.getStorage(t)) == null || r.delete(e, n);
    });
  }
  withPausedEmitters(e) {
    this._onDidChangeValue.pause(), this._onDidChangeTarget.pause();
    try {
      e();
    } finally {
      this._onDidChangeValue.resume(), this._onDidChangeTarget.resume();
    }
  }
  keys(e, t) {
    const n = [], r = this.getKeyTargets(e);
    for (const s of Object.keys(r))
      r[s] === t && n.push(s);
    return n;
  }
  updateKeyTarget(e, t, n, r = !1) {
    var o, a;
    const s = this.getKeyTargets(t);
    typeof n == "number" ? s[e] !== n && (s[e] = n, (o = this.getStorage(t)) == null || o.set(mg, JSON.stringify(s), r)) : typeof s[e] == "number" && (delete s[e], (a = this.getStorage(t)) == null || a.set(mg, JSON.stringify(s), r));
  }
  get workspaceKeyTargets() {
    return this._workspaceKeyTargets || (this._workspaceKeyTargets = this.loadKeyTargets(Kt.WORKSPACE)), this._workspaceKeyTargets;
  }
  get profileKeyTargets() {
    return this._profileKeyTargets || (this._profileKeyTargets = this.loadKeyTargets(Kt.PROFILE)), this._profileKeyTargets;
  }
  get applicationKeyTargets() {
    return this._applicationKeyTargets || (this._applicationKeyTargets = this.loadKeyTargets(Kt.APPLICATION)), this._applicationKeyTargets;
  }
  getKeyTargets(e) {
    switch (e) {
      case Kt.APPLICATION:
        return this.applicationKeyTargets;
      case Kt.PROFILE:
        return this.profileKeyTargets;
      default:
        return this.workspaceKeyTargets;
    }
  }
  loadKeyTargets(e) {
    const t = this.getStorage(e);
    return t ? O9(t) : /* @__PURE__ */ Object.create(null);
  }
  isNew(e) {
    return this.getBoolean(M9, e) === !0;
  }
  async flush(e = Rc.NONE) {
    this._onWillSaveState.fire({ reason: e });
    const t = this.getStorage(Kt.APPLICATION), n = this.getStorage(Kt.PROFILE), r = this.getStorage(Kt.WORKSPACE);
    switch (e) {
      case Rc.NONE:
        await Uu.settled([
          (t == null ? void 0 : t.whenFlushed()) ?? Promise.resolve(),
          (n == null ? void 0 : n.whenFlushed()) ?? Promise.resolve(),
          (r == null ? void 0 : r.whenFlushed()) ?? Promise.resolve()
        ]);
        break;
      case Rc.SHUTDOWN:
        await Uu.settled([
          (t == null ? void 0 : t.flush(0)) ?? Promise.resolve(),
          (n == null ? void 0 : n.flush(0)) ?? Promise.resolve(),
          (r == null ? void 0 : r.flush(0)) ?? Promise.resolve()
        ]);
        break;
    }
  }
  async log() {
    var r, s, o;
    const e = ((r = this.getStorage(Kt.APPLICATION)) == null ? void 0 : r.items) ?? /* @__PURE__ */ new Map(), t = ((s = this.getStorage(Kt.PROFILE)) == null ? void 0 : s.items) ?? /* @__PURE__ */ new Map(), n = ((o = this.getStorage(Kt.WORKSPACE)) == null ? void 0 : o.items) ?? /* @__PURE__ */ new Map();
    return F9(e, t, n, this.getLogDetails(Kt.APPLICATION) ?? "", this.getLogDetails(Kt.PROFILE) ?? "", this.getLogDetails(Kt.WORKSPACE) ?? "");
  }
  async optimize(e) {
    var t;
    return await this.flush(), (t = this.getStorage(e)) == null ? void 0 : t.optimize();
  }
  async switch(e, t) {
    return this.emitWillSaveState(Rc.NONE), N9(e) ? this.switchToProfile(e, t) : this.switchToWorkspace(e, t);
  }
  canSwitchProfile(e, t) {
    return !(e.id === t.id || JD(t) && JD(e));
  }
  switchData(e, t, n) {
    this.withPausedEmitters(() => {
      const r = /* @__PURE__ */ new Set();
      for (const [s, o] of e)
        r.add(s), t.get(s) !== o && this.emitDidChangeValue(n, { key: s, external: !0 });
      for (const [s] of t.items)
        r.has(s) || this.emitDidChangeValue(n, { key: s, external: !0 });
    });
  }
};
P1.DEFAULT_FLUSH_INTERVAL = 60 * 1e3;
let KD = P1;
function JD(i) {
  var e;
  return i.isDefault || !!((e = i.useDefaultFlags) != null && e.globalState);
}
async function F9(i, e, t, n, r, s) {
  const o = (_) => {
    try {
      return JSON.parse(_);
    } catch {
      return _;
    }
  }, a = /* @__PURE__ */ new Map(), l = /* @__PURE__ */ new Map();
  i.forEach((_, m) => {
    a.set(m, _), l.set(m, o(_));
  });
  const c = /* @__PURE__ */ new Map(), u = /* @__PURE__ */ new Map();
  e.forEach((_, m) => {
    c.set(m, _), u.set(m, o(_));
  });
  const d = /* @__PURE__ */ new Map(), f = /* @__PURE__ */ new Map();
  t.forEach((_, m) => {
    d.set(m, _), f.set(m, o(_));
  }), console.group(n !== r ? `Storage: Application (path: ${n})` : `Storage: Application & Profile (path: ${n}, default profile)`);
  const p = [];
  if (a.forEach((_, m) => {
    p.push({ key: m, value: _ });
  }), console.table(p), console.groupEnd(), console.log(l), n !== r) {
    console.group(`Storage: Profile (path: ${r}, profile specific)`);
    const _ = [];
    c.forEach((m, E) => {
      _.push({ key: E, value: m });
    }), console.table(_), console.groupEnd(), console.log(u);
  }
  console.group(`Storage: Workspace (path: ${s})`);
  const v = [];
  d.forEach((_, m) => {
    v.push({ key: m, value: _ });
  }), console.table(v), console.groupEnd(), console.log(f);
}
const U9 = me("storageService");
var ri;
(function(i) {
  i[i.APPLICATION = 1] = "APPLICATION", i[i.USER = 2] = "USER", i[i.USER_LOCAL = 3] = "USER_LOCAL", i[i.USER_REMOTE = 4] = "USER_REMOTE", i[i.WORKSPACE = 5] = "WORKSPACE", i[i.WORKSPACE_FOLDER = 6] = "WORKSPACE_FOLDER", i[i.DEFAULT = 7] = "DEFAULT", i[i.MEMORY = 8] = "MEMORY";
})(ri || (ri = {}));
function db(i, e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const n in i)
    GP(t, n, i[n], e);
  return t;
}
function GP(i, e, t, n) {
  const r = e.split("."), s = r.pop();
  let o = i;
  for (let a = 0; a < r.length; a++) {
    const l = r[a];
    let c = o[l];
    switch (typeof c) {
      case "undefined":
        c = o[l] = /* @__PURE__ */ Object.create(null);
        break;
      case "object":
        if (c === null) {
          n(`Ignoring ${e} as ${r.slice(0, a + 1).join(".")} is null`);
          return;
        }
        break;
      default:
        n(`Ignoring ${e} as ${r.slice(0, a + 1).join(".")} is ${JSON.stringify(c)}`);
        return;
    }
    o = c;
  }
  if (typeof o == "object" && o !== null)
    try {
      o[s] = t;
    } catch {
      n(`Ignoring ${e} as ${r.join(".")} is ${JSON.stringify(o)}`);
    }
  else
    n(`Ignoring ${e} as ${r.join(".")} is ${JSON.stringify(o)}`);
}
function $9(i, e) {
  const t = e.split(".");
  QP(i, t);
}
function QP(i, e) {
  if (!i)
    return;
  const t = e.shift();
  if (e.length === 0) {
    delete i[t];
    return;
  }
  if (Object.keys(i).indexOf(t) !== -1) {
    const n = i[t];
    typeof n == "object" && !Array.isArray(n) && (QP(n, e), Object.keys(n).length === 0 && delete i[t]);
  }
}
function _m(i, e, t) {
  function n(o, a) {
    let l = o;
    for (const c of a) {
      if (typeof l != "object" || l === null)
        return;
      l = l[c];
    }
    return l;
  }
  const r = e.split("."), s = n(i, r);
  return typeof s > "u" ? t : s;
}
function H9(i) {
  return i.replace(/^\[/, "").replace(/]$/g, "").replace(/\]\[/g, ", ");
}
function B9(i) {
  let e = !1;
  const t = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map();
  if (W9(i, (u) => {
    if (i === u)
      return !0;
    const d = JSON.stringify(u);
    if (d.length < 30)
      return !0;
    const f = t.get(d);
    if (!f) {
      const p = { schemas: [u] };
      return t.set(d, p), n.set(u, p), !0;
    }
    return f.schemas.push(u), n.set(u, f), e = !0, !1;
  }), t.clear(), !e)
    return JSON.stringify(i);
  let s = "$defs";
  for (; i.hasOwnProperty(s); )
    s += "_";
  const o = [];
  function a(u) {
    return JSON.stringify(u, (d, f) => {
      if (f !== u) {
        const p = n.get(f);
        if (p && p.schemas.length > 1)
          return p.id || (p.id = `_${o.length}`, o.push(p.schemas[0])), { $ref: `#/${s}/${p.id}` };
      }
      return f;
    });
  }
  const l = a(i), c = [];
  for (let u = 0; u < o.length; u++)
    c.push(`"_${u}":${a(o[u])}`);
  return c.length ? `${l.substring(0, l.length - 1)},"${s}":{${c.join(",")}}}` : l;
}
function hc(i) {
  return typeof i == "object" && i !== null;
}
function W9(i, e) {
  if (!i || typeof i != "object")
    return;
  const t = (...l) => {
    for (const c of l)
      hc(c) && o.push(c);
  }, n = (...l) => {
    for (const c of l)
      if (hc(c))
        for (const u in c) {
          const d = c[u];
          hc(d) && o.push(d);
        }
  }, r = (...l) => {
    for (const c of l)
      if (Array.isArray(c))
        for (const u of c)
          hc(u) && o.push(u);
  }, s = (l) => {
    if (Array.isArray(l))
      for (const c of l)
        hc(c) && o.push(c);
    else hc(l) && o.push(l);
  }, o = [i];
  let a = o.pop();
  for (; a; )
    e(a) && (t(a.additionalItems, a.additionalProperties, a.not, a.contains, a.propertyNames, a.if, a.then, a.else, a.unevaluatedItems, a.unevaluatedProperties), n(a.definitions, a.$defs, a.properties, a.patternProperties, a.dependencies, a.dependentSchemas), r(a.anyOf, a.allOf, a.oneOf, a.prefixItems), s(a.items)), a = o.pop();
}
const lv = {
  JSONContribution: "base.contributions.json"
};
function YD(i) {
  return i.length > 0 && i.charAt(i.length - 1) === "#" ? i.substring(0, i.length - 1) : i;
}
class V9 extends xe {
  constructor() {
    super(...arguments), this.schemasById = {}, this.schemaAssociations = {}, this._onDidChangeSchema = this._register(new M()), this.onDidChangeSchema = this._onDidChangeSchema.event, this._onDidChangeSchemaAssociations = this._register(new M()), this.onDidChangeSchemaAssociations = this._onDidChangeSchemaAssociations.event;
  }
  registerSchema(e, t, n) {
    const r = YD(e);
    this.schemasById[r] = t, this._onDidChangeSchema.fire(e), n && n.add(Ie(() => {
      delete this.schemasById[r], this._onDidChangeSchema.fire(e);
    }));
  }
  registerSchemaAssociation(e, t) {
    const n = YD(e);
    return this.schemaAssociations[n] || (this.schemaAssociations[n] = []), this.schemaAssociations[n].includes(t) || (this.schemaAssociations[n].push(t), this._onDidChangeSchemaAssociations.fire()), Ie(() => {
      const r = this.schemaAssociations[n];
      if (r) {
        const s = r.indexOf(t);
        s !== -1 && (r.splice(s, 1), r.length === 0 && delete this.schemaAssociations[n], this._onDidChangeSchemaAssociations.fire());
      }
    });
  }
  notifySchemaChanged(e) {
    this._onDidChangeSchema.fire(e);
  }
  getSchemaContributions() {
    return {
      schemas: this.schemasById
    };
  }
  getSchemaContent(e) {
    const t = this.schemasById[e];
    return t ? B9(t) : void 0;
  }
  hasSchemaContent(e) {
    return !!this.schemasById[e];
  }
  getSchemaAssociations() {
    return this.schemaAssociations;
  }
}
const z9 = new V9();
ui.add(lv.JSONContribution, z9);
var XD;
(function(i) {
  i.Multiline = "multilineText", i.Singleline = "singlelineText";
})(XD || (XD = {}));
const ec = {
  Configuration: "base.contributions.configuration"
};
var Ut;
(function(i) {
  i[i.APPLICATION = 1] = "APPLICATION", i[i.MACHINE = 2] = "MACHINE", i[i.APPLICATION_MACHINE = 3] = "APPLICATION_MACHINE", i[i.WINDOW = 4] = "WINDOW", i[i.RESOURCE = 5] = "RESOURCE", i[i.LANGUAGE_OVERRIDABLE = 6] = "LANGUAGE_OVERRIDABLE", i[i.MACHINE_OVERRIDABLE = 7] = "MACHINE_OVERRIDABLE";
})(Ut || (Ut = {}));
const fc = "vscode://schemas/settings/resourceLanguage", Kp = ui.as(lv.JSONContribution);
class q9 extends xe {
  constructor() {
    super(), this.registeredConfigurationDefaults = [], this.overrideIdentifiers = /* @__PURE__ */ new Set(), this._onDidSchemaChange = this._register(new M()), this.onDidSchemaChange = this._onDidSchemaChange.event, this._onDidUpdateConfiguration = this._register(new M()), this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event, this.configurationDefaultsOverrides = /* @__PURE__ */ new Map(), this.defaultLanguageConfigurationOverridesNode = {
      id: "defaultOverrides",
      title: h(1737, "Default Language Configuration Overrides"),
      properties: {}
    }, this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode], this.resourceLanguageSettingsSchema = {
      properties: {},
      patternProperties: {},
      additionalProperties: !0,
      allowTrailingCommas: !0,
      allowComments: !0
    }, this.configurationProperties = {}, this.policyConfigurations = /* @__PURE__ */ new Map(), this.excludedConfigurationProperties = {}, Kp.registerSchema(fc, this.resourceLanguageSettingsSchema), this.registerOverridePropertyPatternKey();
  }
  registerConfiguration(e, t = !0) {
    return this.registerConfigurations([e], t), e;
  }
  registerConfigurations(e, t = !0) {
    const n = /* @__PURE__ */ new Set();
    this.doRegisterConfigurations(e, t, n), Kp.registerSchema(fc, this.resourceLanguageSettingsSchema), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: n });
  }
  deregisterConfigurations(e) {
    const t = /* @__PURE__ */ new Set();
    this.doDeregisterConfigurations(e, t), Kp.registerSchema(fc, this.resourceLanguageSettingsSchema), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: t });
  }
  updateConfigurations({ add: e, remove: t }) {
    const n = /* @__PURE__ */ new Set();
    this.doDeregisterConfigurations(t, n), this.doRegisterConfigurations(e, !1, n), Kp.registerSchema(fc, this.resourceLanguageSettingsSchema), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: n });
  }
  registerDefaultConfigurations(e) {
    const t = /* @__PURE__ */ new Set();
    this.doRegisterDefaultConfigurations(e, t), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: t, defaultsOverrides: !0 });
  }
  doRegisterDefaultConfigurations(e, t) {
    this.registeredConfigurationDefaults.push(...e);
    const n = [];
    for (const { overrides: r, source: s } of e)
      for (const o in r) {
        t.add(o);
        const a = this.configurationDefaultsOverrides.get(o) ?? this.configurationDefaultsOverrides.set(o, { configurationDefaultOverrides: [] }).get(o), l = r[o];
        if (a.configurationDefaultOverrides.push({ value: l, source: s }), rs.test(o)) {
          const c = this.mergeDefaultConfigurationsForOverrideIdentifier(o, l, s, a.configurationDefaultOverrideValue);
          if (!c)
            continue;
          a.configurationDefaultOverrideValue = c, this.updateDefaultOverrideProperty(o, c, s), n.push(...Xh(o));
        } else {
          const c = this.mergeDefaultConfigurationsForConfigurationProperty(o, l, s, a.configurationDefaultOverrideValue);
          if (!c)
            continue;
          a.configurationDefaultOverrideValue = c;
          const u = this.configurationProperties[o];
          u && (this.updatePropertyDefaultValue(o, u), this.updateSchema(o, u));
        }
      }
    this.doRegisterOverrideIdentifiers(n);
  }
  deregisterDefaultConfigurations(e) {
    const t = /* @__PURE__ */ new Set();
    this.doDeregisterDefaultConfigurations(e, t), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: t, defaultsOverrides: !0 });
  }
  doDeregisterDefaultConfigurations(e, t) {
    for (const n of e) {
      const r = this.registeredConfigurationDefaults.indexOf(n);
      r !== -1 && this.registeredConfigurationDefaults.splice(r, 1);
    }
    for (const { overrides: n, source: r } of e)
      for (const s in n) {
        const o = this.configurationDefaultsOverrides.get(s);
        if (!o)
          continue;
        const a = o.configurationDefaultOverrides.findIndex((l) => {
          var c;
          return r ? ((c = l.source) == null ? void 0 : c.id) === r.id : l.value === n[s];
        });
        if (a !== -1) {
          if (o.configurationDefaultOverrides.splice(a, 1), o.configurationDefaultOverrides.length === 0 && this.configurationDefaultsOverrides.delete(s), rs.test(s)) {
            let l;
            for (const c of o.configurationDefaultOverrides)
              l = this.mergeDefaultConfigurationsForOverrideIdentifier(s, c.value, c.source, l);
            l && !DT(l.value) ? (o.configurationDefaultOverrideValue = l, this.updateDefaultOverrideProperty(s, l, r)) : (this.configurationDefaultsOverrides.delete(s), delete this.configurationProperties[s], delete this.defaultLanguageConfigurationOverridesNode.properties[s]);
          } else {
            let l;
            for (const u of o.configurationDefaultOverrides)
              l = this.mergeDefaultConfigurationsForConfigurationProperty(s, u.value, u.source, l);
            o.configurationDefaultOverrideValue = l;
            const c = this.configurationProperties[s];
            c && (this.updatePropertyDefaultValue(s, c), this.updateSchema(s, c));
          }
          t.add(s);
        }
      }
    this.updateOverridePropertyPatternKey();
  }
  updateDefaultOverrideProperty(e, t, n) {
    const r = {
      type: "object",
      default: t.value,
      description: h(
        1738,
        "Configure settings to be overridden for {0}.",
        H9(e)
      ),
      $ref: fc,
      defaultDefaultValue: t.value,
      source: n,
      defaultValueSource: n
    };
    this.configurationProperties[e] = r, this.defaultLanguageConfigurationOverridesNode.properties[e] = r;
  }
  mergeDefaultConfigurationsForOverrideIdentifier(e, t, n, r) {
    const s = (r == null ? void 0 : r.value) || {}, o = (r == null ? void 0 : r.source) ?? /* @__PURE__ */ new Map();
    if (!(o instanceof Map)) {
      console.error("objectConfigurationSources is not a Map");
      return;
    }
    for (const a of Object.keys(t)) {
      const l = t[a];
      if (ai(l) && (Gd(s[a]) || ai(s[a]))) {
        if (s[a] = { ...s[a] ?? {}, ...l }, n)
          for (const u in l)
            o.set(`${a}.${u}`, n);
      } else
        s[a] = l, n ? o.set(a, n) : o.delete(a);
    }
    return { value: s, source: o };
  }
  mergeDefaultConfigurationsForConfigurationProperty(e, t, n, r) {
    const s = this.configurationProperties[e], o = (r == null ? void 0 : r.value) ?? (s == null ? void 0 : s.defaultDefaultValue);
    let a = n;
    if (ai(t) && (s !== void 0 && s.type === "object" || s === void 0 && (Gd(o) || ai(o)))) {
      if (a = (r == null ? void 0 : r.source) ?? /* @__PURE__ */ new Map(), !(a instanceof Map)) {
        console.error("defaultValueSource is not a Map");
        return;
      }
      for (const c in t)
        n && a.set(`${e}.${c}`, n);
      t = { ...ai(o) ? o : {}, ...t };
    }
    return { value: t, source: a };
  }
  deltaConfiguration(e) {
    let t = !1;
    const n = /* @__PURE__ */ new Set();
    e.removedDefaults && (this.doDeregisterDefaultConfigurations(e.removedDefaults, n), t = !0), e.addedDefaults && (this.doRegisterDefaultConfigurations(e.addedDefaults, n), t = !0), e.removedConfigurations && this.doDeregisterConfigurations(e.removedConfigurations, n), e.addedConfigurations && this.doRegisterConfigurations(e.addedConfigurations, !1, n), this._onDidSchemaChange.fire(), this._onDidUpdateConfiguration.fire({ properties: n, defaultsOverrides: t });
  }
  notifyConfigurationSchemaUpdated(...e) {
    this._onDidSchemaChange.fire();
  }
  registerOverrideIdentifiers(e) {
    this.doRegisterOverrideIdentifiers(e), this._onDidSchemaChange.fire();
  }
  doRegisterOverrideIdentifiers(e) {
    for (const t of e)
      this.overrideIdentifiers.add(t);
    this.updateOverridePropertyPatternKey();
  }
  doRegisterConfigurations(e, t, n) {
    e.forEach((r) => {
      this.validateAndRegisterProperties(r, t, r.extensionInfo, r.restrictedProperties, void 0, n), this.configurationContributors.push(r), this.registerJSONConfiguration(r);
    });
  }
  doDeregisterConfigurations(e, t) {
    const n = (r) => {
      var s, o;
      if (r.properties)
        for (const a in r.properties) {
          t.add(a);
          const l = this.configurationProperties[a];
          (s = l == null ? void 0 : l.policy) != null && s.name && this.policyConfigurations.delete(l.policy.name), delete this.configurationProperties[a], this.removeFromSchema(a, r.properties[a]);
        }
      (o = r.allOf) == null || o.forEach((a) => n(a));
    };
    for (const r of e) {
      n(r);
      const s = this.configurationContributors.indexOf(r);
      s !== -1 && this.configurationContributors.splice(s, 1);
    }
  }
  validateAndRegisterProperties(e, t = !0, n, r, s = Ut.WINDOW, o) {
    var c, u, d;
    s = oi(e.scope) ? s : e.scope;
    const a = e.properties;
    if (a)
      for (const f in a) {
        const p = a[f];
        if (t && Q9(f, p)) {
          delete a[f];
          continue;
        }
        p.source = n, p.defaultDefaultValue = a[f].default, this.updatePropertyDefaultValue(f, p), rs.test(f) ? p.scope = void 0 : (p.scope = oi(p.scope) ? s : p.scope, p.restricted = oi(p.restricted) ? !!(r != null && r.includes(f)) : p.restricted), p.experiment ? (c = p.tags) != null && c.some((m) => m.toLowerCase() === "onexp") || (p.tags = p.tags ?? [], p.tags.push("onExP")) : (u = p.tags) != null && u.some((m) => m.toLowerCase() === "onexp") && (console.error(`Invalid tag 'onExP' found for property '${f}'. Please use 'experiment' property instead.`), p.experiment = { mode: "startup" });
        const v = a[f].hasOwnProperty("included") && !a[f].included, _ = (d = a[f].policy) == null ? void 0 : d.name;
        v ? (this.excludedConfigurationProperties[f] = a[f], _ && (this.policyConfigurations.set(_, f), o.add(f)), delete a[f]) : (o.add(f), _ && this.policyConfigurations.set(_, f), this.configurationProperties[f] = a[f], !a[f].deprecationMessage && a[f].markdownDeprecationMessage && (a[f].deprecationMessage = a[f].markdownDeprecationMessage));
      }
    const l = e.allOf;
    if (l)
      for (const f of l)
        this.validateAndRegisterProperties(f, t, n, r, s, o);
  }
  getConfigurations() {
    return this.configurationContributors;
  }
  getConfigurationProperties() {
    return this.configurationProperties;
  }
  getPolicyConfigurations() {
    return this.policyConfigurations;
  }
  getExcludedConfigurationProperties() {
    return this.excludedConfigurationProperties;
  }
  getRegisteredDefaultConfigurations() {
    return [...this.registeredConfigurationDefaults];
  }
  getConfigurationDefaultsOverrides() {
    const e = /* @__PURE__ */ new Map();
    for (const [t, n] of this.configurationDefaultsOverrides)
      n.configurationDefaultOverrideValue && e.set(t, n.configurationDefaultOverrideValue);
    return e;
  }
  registerJSONConfiguration(e) {
    const t = (n) => {
      const r = n.properties;
      if (r)
        for (const o in r)
          this.updateSchema(o, r[o]);
      const s = n.allOf;
      s == null || s.forEach(t);
    };
    t(e);
  }
  updateSchema(e, t) {
    switch (t.scope) {
      case Ut.APPLICATION:
        break;
      case Ut.MACHINE:
        break;
      case Ut.APPLICATION_MACHINE:
        break;
      case Ut.MACHINE_OVERRIDABLE:
        break;
      case Ut.WINDOW:
        break;
      case Ut.RESOURCE:
        break;
      case Ut.LANGUAGE_OVERRIDABLE:
        this.resourceLanguageSettingsSchema.properties[e] = t;
        break;
    }
  }
  removeFromSchema(e, t) {
    switch (t.scope) {
      case Ut.APPLICATION:
        break;
      case Ut.MACHINE:
        break;
      case Ut.APPLICATION_MACHINE:
        break;
      case Ut.MACHINE_OVERRIDABLE:
        break;
      case Ut.WINDOW:
        break;
      case Ut.RESOURCE:
      case Ut.LANGUAGE_OVERRIDABLE:
        delete this.resourceLanguageSettingsSchema.properties[e];
        break;
    }
  }
  updateOverridePropertyPatternKey() {
    for (const e of this.overrideIdentifiers.values()) {
      const t = `[${e}]`, n = {
        type: "object",
        description: h(1739, "Configure editor settings to be overridden for a language."),
        errorMessage: h(1740, "This setting does not support per-language configuration."),
        $ref: fc
      };
      this.updatePropertyDefaultValue(t, n);
    }
  }
  registerOverridePropertyPatternKey() {
    h(1739, "Configure editor settings to be overridden for a language."), h(1740, "This setting does not support per-language configuration."), this._onDidSchemaChange.fire();
  }
  updatePropertyDefaultValue(e, t) {
    var o;
    const n = (o = this.configurationDefaultsOverrides.get(e)) == null ? void 0 : o.configurationDefaultOverrideValue;
    let r, s;
    n && (!t.disallowConfigurationDefault || !n.source) && (r = n.value, s = n.source), Gd(r) && (r = t.defaultDefaultValue, s = void 0), Gd(r) && (r = G9(t.type)), t.default = r, t.defaultValueSource = s;
  }
}
const KP = "\\[([^\\]]+)\\]", ZD = new RegExp(KP, "g"), j9 = `^(${KP})+$`, rs = new RegExp(j9);
function Xh(i) {
  const e = [];
  if (rs.test(i)) {
    let t = ZD.exec(i);
    for (; t != null && t.length; ) {
      const n = t[1].trim();
      n && e.push(n), t = ZD.exec(i);
    }
  }
  return xc(e);
}
function G9(i) {
  switch (Array.isArray(i) ? i[0] : i) {
    case "boolean":
      return !1;
    case "integer":
    case "number":
      return 0;
    case "string":
      return "";
    case "array":
      return [];
    case "object":
      return {};
    default:
      return null;
  }
}
const _g = new q9();
ui.add(ec.Configuration, _g);
function Q9(i, e) {
  var t, n, r, s;
  return i.trim() ? rs.test(i) ? h(
    1742,
    "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",
    i
  ) : _g.getConfigurationProperties()[i] !== void 0 ? h(
    1743,
    "Cannot register '{0}'. This property is already registered.",
    i
  ) : (t = e.policy) != null && t.name && _g.getPolicyConfigurations().get((n = e.policy) == null ? void 0 : n.name) !== void 0 ? h(
    1744,
    "Cannot register '{0}'. The associated policy {1} is already registered with {2}.",
    i,
    (r = e.policy) == null ? void 0 : r.name,
    _g.getPolicyConfigurations().get((s = e.policy) == null ? void 0 : s.name)
  ) : null : h(1741, "Cannot register an empty property");
}
const ek = "^([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$";
var tk;
(function(i) {
  i.COMMAND = "command", i.SETTINGS_SYNC = "settingsSync";
})(tk || (tk = {}));
var hb;
(function(i) {
  i.NoneOrRelevance = "NoneOrRelevance", i.LastUpdatedDate = "LastUpdatedDate", i.Title = "Title", i.PublisherName = "PublisherName", i.InstallCount = "InstallCount", i.PublishedDate = "PublishedDate", i.AverageRating = "AverageRating", i.WeightedRating = "WeightedRating";
})(hb || (hb = {}));
var ik;
(function(i) {
  i[i.Default = 0] = "Default", i[i.Ascending = 1] = "Ascending", i[i.Descending = 2] = "Descending";
})(ik || (ik = {}));
var nk;
(function(i) {
  i.Category = "Category", i.ExtensionId = "ExtensionId", i.ExtensionName = "ExtensionName", i.ExcludeWithFlags = "ExcludeWithFlags", i.Featured = "Featured", i.SearchText = "SearchText", i.Tag = "Tag", i.Target = "Target";
})(nk || (nk = {}));
var rk;
(function(i) {
  i.Install = "install", i.Uninstall = "uninstall";
})(rk || (rk = {}));
var sk;
(function(i) {
  i[i.None = 1] = "None", i[i.Install = 2] = "Install", i[i.Update = 3] = "Update", i[i.Migrate = 4] = "Migrate";
})(sk || (sk = {}));
var ok;
(function(i) {
  i.Timeout = "Timeout", i.Cancelled = "Cancelled", i.Failed = "Failed", i.DownloadFailedWriting = "DownloadFailedWriting", i.Offline = "Offline";
})(ok || (ok = {}));
var ak;
(function(i) {
  i.NotFound = "NotFound", i.Unsupported = "Unsupported", i.Deprecated = "Deprecated", i.Malicious = "Malicious", i.Incompatible = "Incompatible", i.IncompatibleApi = "IncompatibleApi", i.IncompatibleTargetPlatform = "IncompatibleTargetPlatform", i.ReleaseVersionNotFound = "ReleaseVersionNotFound", i.Invalid = "Invalid", i.Download = "Download", i.DownloadSignature = "DownloadSignature", i.DownloadFailedWriting = "DownloadFailedWriting", i.UpdateMetadata = "UpdateMetadata", i.Extract = "Extract", i.Scanning = "Scanning", i.ScanningExtension = "ScanningExtension", i.ReadRemoved = "ReadRemoved", i.UnsetRemoved = "UnsetRemoved", i.Delete = "Delete", i.Rename = "Rename", i.IntializeDefaultProfile = "IntializeDefaultProfile", i.AddToProfile = "AddToProfile", i.InstalledExtensionNotFound = "InstalledExtensionNotFound", i.PostInstall = "PostInstall", i.CorruptZip = "CorruptZip", i.IncompleteZip = "IncompleteZip", i.PackageNotSigned = "PackageNotSigned", i.SignatureVerificationInternal = "SignatureVerificationInternal", i.SignatureVerificationFailed = "SignatureVerificationFailed", i.NotAllowed = "NotAllowed", i.Gallery = "Gallery", i.Cancelled = "Cancelled", i.Unknown = "Unknown", i.Internal = "Internal";
})(ak || (ak = {}));
var lk;
(function(i) {
  i.NotSigned = "NotSigned", i.Success = "Success", i.RequiredArgumentMissing = "RequiredArgumentMissing", i.InvalidArgument = "InvalidArgument", i.PackageIsUnreadable = "PackageIsUnreadable", i.UnhandledException = "UnhandledException", i.SignatureManifestIsMissing = "SignatureManifestIsMissing", i.SignatureManifestIsUnreadable = "SignatureManifestIsUnreadable", i.SignatureIsMissing = "SignatureIsMissing", i.SignatureIsUnreadable = "SignatureIsUnreadable", i.CertificateIsUnreadable = "CertificateIsUnreadable", i.SignatureArchiveIsUnreadable = "SignatureArchiveIsUnreadable", i.FileAlreadyExists = "FileAlreadyExists", i.SignatureArchiveIsInvalidZip = "SignatureArchiveIsInvalidZip", i.SignatureArchiveHasSameSignatureFile = "SignatureArchiveHasSameSignatureFile", i.PackageIntegrityCheckFailed = "PackageIntegrityCheckFailed", i.SignatureIsInvalid = "SignatureIsInvalid", i.SignatureManifestIsInvalid = "SignatureManifestIsInvalid", i.SignatureIntegrityCheckFailed = "SignatureIntegrityCheckFailed", i.EntryIsMissing = "EntryIsMissing", i.EntryIsTampered = "EntryIsTampered", i.Untrusted = "Untrusted", i.CertificateRevoked = "CertificateRevoked", i.SignatureIsNotValid = "SignatureIsNotValid", i.UnknownError = "UnknownError", i.PackageIsInvalidZip = "PackageIsInvalidZip", i.SignatureArchiveHasTooManyEntries = "SignatureArchiveHasTooManyEntries";
})(lk || (lk = {}));
X1(1797, "Extensions");
X1(1798, "Preferences");
const K9 = "extensions.allowed";
ui.as(ec.Configuration).registerConfiguration({
  id: "extensions",
  order: 30,
  title: h(1799, "Extensions"),
  type: "object",
  properties: {
    [K9]: {
      type: "object",
      markdownDescription: h(
        1800,
        "Specify a list of extensions that are allowed to use. This helps maintain a secure and consistent development environment by restricting the use of unauthorized extensions. For more information on how to configure this setting, please visit the [Configure Allowed Extensions](https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions) section."
      ),
      default: "*",
      defaultSnippets: [{
        body: {},
        description: h(1801, "No extensions are allowed.")
      }, {
        body: {
          "*": !0
        },
        description: h(1802, "All extensions are allowed.")
      }],
      scope: Ut.APPLICATION,
      policy: {
        name: "AllowedExtensions",
        minimumVersion: "1.96",
        description: h(
          1803,
          "Specify a list of extensions that are allowed to use. This helps maintain a secure and consistent development environment by restricting the use of unauthorized extensions. More information: https://code.visualstudio.com/docs/setup/enterprise#_configure-allowed-extensions"
        )
      },
      additionalProperties: !1,
      patternProperties: {
        "([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          anyOf: [
            {
              type: ["boolean", "string"],
              enum: [!0, !1, "stable"],
              description: h(1804, "Allow or disallow the extension."),
              enumDescriptions: [
                h(1805, "Extension is allowed."),
                h(1806, "Extension is not allowed."),
                h(1807, "Allow only stable versions of the extension.")
              ]
            },
            {
              type: "array",
              items: {
                type: "string"
              },
              description: h(
                1808,
                "Allow or disallow specific versions of the extension. To specifcy a platform specific version, use the format `platform@1.2.3`, e.g. `win32-x64@1.2.3`. Supported platforms are `win32-x64`, `win32-arm64`, `linux-x64`, `linux-arm64`, `linux-armhf`, `alpine-x64`, `alpine-arm64`, `darwin-x64`, `darwin-arm64`"
              )
            }
          ]
        },
        "([a-z0-9A-Z][a-z0-9-A-Z]*)$": {
          type: ["boolean", "string"],
          enum: [!0, !1, "stable"],
          description: h(1809, "Allow or disallow all extensions from the publisher."),
          enumDescriptions: [
            h(1810, "All extensions from the publisher are allowed."),
            h(1811, "All extensions from the publisher are not allowed."),
            h(1812, "Allow only stable versions of the extensions from the publisher.")
          ]
        },
        "\\*": {
          type: "boolean",
          enum: [!0, !1],
          description: h(1813, "Allow or disallow all extensions."),
          enumDescriptions: [
            h(1814, "Allow all extensions."),
            h(1815, "Disallow all extensions.")
          ]
        }
      }
    }
  }
});
var So;
(function(i) {
  i[i.NONE = 0] = "NONE", i[i.CRASH = 1] = "CRASH", i[i.ERROR = 2] = "ERROR", i[i.USAGE = 3] = "USAGE";
})(So || (So = {}));
var ck;
(function(i) {
  i.OFF = "off", i.CRASH = "crash", i.ERROR = "error", i.ON = "all";
})(ck || (ck = {}));
class sS {
  constructor(e) {
    this.value = e, this.isTrustedTelemetryValue = !0;
  }
}
class J9 {
  constructor() {
    this.telemetryLevel = So.NONE, this.sessionId = "someValue.sessionId", this.machineId = "someValue.machineId", this.sqmId = "someValue.sqmId", this.devDeviceId = "someValue.devDeviceId", this.firstSessionDate = "someValue.firstSessionDate", this.sendErrorTelemetry = !1;
  }
  publicLog() {
  }
  publicLog2() {
  }
  publicLogError() {
  }
  publicLogError2() {
  }
  setExperimentProperty() {
  }
}
new J9();
const Y9 = "telemetry", X9 = { id: Y9, name: h(2043, "Telemetry") }, Z9 = /* @__PURE__ */ new Set(
  ["ssh-remote", "dev-container", "attached-container", "wsl", "tunnel", "codespaces", "amlext"]
);
function e6(i) {
  if (!i)
    return "none";
  const e = VE(i);
  return Z9.has(e) ? e : "other";
}
function t6(i, e) {
  if (!i || !i.includes("/") && !i.includes("\\"))
    return i;
  let t = i;
  const n = [];
  for (const a of e)
    for (; ; ) {
      const l = a.exec(i);
      if (!l)
        break;
      n.push([l.index, a.lastIndex]);
    }
  const r = /^[\\\/]?(node_modules|node_modules\.asar)[\\\/]/, s = /(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-\._]+(\\\\|\\|\/))+[\w-\._]*/g;
  let o = 0;
  for (t = ""; ; ) {
    const a = s.exec(i);
    if (!a)
      break;
    const l = n.some(([c, u]) => a.index < u && c < s.lastIndex);
    !r.test(a[0]) && !l && (t += i.substring(o, a.index) + "<REDACTED: user-file-path>", o = s.lastIndex);
  }
  return o < i.length && (t += i.substr(o)), t;
}
function i6(i) {
  if (!i)
    return i;
  const e = [
    { label: "Google API Key", regex: /AIza[A-Za-z0-9_\\\-]{35}/ },
    { label: "JWT", regex: /eyJ[0eXAiOiJKV1Qi|hbGci|a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+/ },
    { label: "Slack Token", regex: /xox[pbar]\-[A-Za-z0-9]/ },
    { label: "GitHub Token", regex: /(gh[psuro]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})/ },
    { label: "Generic Secret", regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },
    { label: "CLI Credentials", regex: /((login|psexec|(certutil|psexec)\.exe).{1,50}(\s-u(ser(name)?)?\s+.{3,100})?\s-(admin|user|vm|root)?p(ass(word)?)?\s+["']?[^$\-\/\s]|(^|[\s\r\n\\])net(\.exe)?.{1,5}(user\s+|share\s+\/user:| user -? secrets ? set) \s + [^ $\s \/])/ },
    { label: "Microsoft Entra ID", regex: /eyJ(?:0eXAiOiJKV1Qi|hbGci|[a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+\.)/ },
    { label: "Email", regex: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/ }
  ];
  for (const t of e)
    if (t.regex.test(i))
      return `<REDACTED: ${t.label}>`;
  return i;
}
function uk(i, e) {
  return $u(i, (t) => {
    if (t instanceof sS || Object.hasOwnProperty.call(t, "isTrustedTelemetryValue"))
      return t.value;
    if (typeof t == "string") {
      let n = t.replaceAll("%20", " ");
      n = t6(n, e);
      for (const r of e)
        n = n.replace(r, "");
      return n = i6(n), n;
    }
  });
}
function n6(i, e) {
  return i.uuid && e.uuid ? i.uuid === e.uuid : i.id === e.id ? !0 : Ww(i.id, e.id) === 0;
}
new gt("pprice.better-merge");
class r6 {
  constructor() {
    this._generators = /* @__PURE__ */ new Map(), this._cache = /* @__PURE__ */ new WeakMap();
  }
  register(e, t) {
    this._generators.set(e, t);
  }
  readActivationEvents(e) {
    return this._cache.has(e) || this._cache.set(e, this._readActivationEvents(e)), this._cache.get(e);
  }
  createActivationEventsMap(e) {
    const t = /* @__PURE__ */ Object.create(null);
    for (const n of e) {
      const r = this.readActivationEvents(n);
      r.length > 0 && (t[gt.toKey(n.identifier)] = r);
    }
    return t;
  }
  _readActivationEvents(e) {
    if (typeof e.main > "u" && typeof e.browser > "u")
      return [];
    const t = Array.isArray(e.activationEvents) ? e.activationEvents.slice(0) : [];
    for (let n = 0; n < t.length; n++)
      t[n] === "onUri" && (t[n] = `onUri:${gt.toKey(e.identifier)}`);
    if (!e.contributes)
      return t;
    for (const n in e.contributes) {
      const r = this._generators.get(n);
      if (!r)
        continue;
      const s = e.contributes[n], o = Array.isArray(s) ? s : [s];
      try {
        r(o, t);
      } catch (a) {
        Fi(a);
      }
    }
    return t;
  }
}
const s6 = new r6(), o6 = Object.freeze({
  identifier: new gt("nullExtensionDescription"),
  name: "Null Extension Description",
  version: "0.0.0",
  publisher: "vscode",
  engines: { vscode: "" },
  extensionLocation: x.parse("void:location"),
  isBuiltin: !1,
  targetPlatform: Kw.UNDEFINED,
  isUserBuiltin: !1,
  isUnderDevelopment: !1,
  preRelease: !1
});
class dk {
  constructor(e) {
    this.dependency = e;
  }
}
var hk;
(function(i) {
  i[i.EagerAutoStart = 1] = "EagerAutoStart", i[i.EagerManualStart = 2] = "EagerManualStart", i[i.LazyAutoStart = 3] = "LazyAutoStart";
})(hk || (hk = {}));
function dt(i, e) {
  return i.enabledApiProposals ? i.enabledApiProposals.includes(e) : !1;
}
function H(i, e) {
  var t;
  if (!dt(i, e))
    throw new Error(
      `Extension '${i.identifier.value}' CANNOT use API proposal: ${e}.
Its package.json#enabledApiProposals-property declares: ${((t = i.enabledApiProposals) == null ? void 0 : t.join(", ")) ?? "[]"} but NOT ${e}.
 The missing proposal MUST be added and you must start in extension development mode or use the following command line switch: --enable-proposed-api ${i.identifier.value}`
    );
}
var fb;
(function(i) {
  i[i.Normal = 0] = "Normal", i[i.Immediate = 1] = "Immediate";
})(fb || (fb = {}));
const a6 = me("extensionService"), l6 = "vscode://schemas/vscode-product", c6 = {
  activeComment: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.activeComment.d.ts"
  },
  aiRelatedInformation: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.aiRelatedInformation.d.ts"
  },
  aiSettingsSearch: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.aiSettingsSearch.d.ts"
  },
  aiTextSearchProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.aiTextSearchProvider.d.ts",
    version: 2
  },
  authIssuers: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authIssuers.d.ts"
  },
  authLearnMore: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authLearnMore.d.ts"
  },
  authProviderSpecific: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authProviderSpecific.d.ts"
  },
  authSession: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authSession.d.ts"
  },
  canonicalUriProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.canonicalUriProvider.d.ts"
  },
  chatEditing: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatEditing.d.ts"
  },
  chatOutputRenderer: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatOutputRenderer.d.ts"
  },
  chatParticipantAdditions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatParticipantAdditions.d.ts"
  },
  chatParticipantPrivate: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatParticipantPrivate.d.ts",
    version: 9
  },
  chatProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatProvider.d.ts"
  },
  chatReferenceBinaryData: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatReferenceBinaryData.d.ts"
  },
  chatReferenceDiagnostic: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatReferenceDiagnostic.d.ts"
  },
  chatSessionsProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatSessionsProvider.d.ts"
  },
  chatStatusItem: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatStatusItem.d.ts"
  },
  chatTab: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatTab.d.ts"
  },
  codeActionAI: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codeActionAI.d.ts"
  },
  codeActionRanges: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codeActionRanges.d.ts"
  },
  codiconDecoration: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codiconDecoration.d.ts"
  },
  commentReactor: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentReactor.d.ts"
  },
  commentReveal: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentReveal.d.ts"
  },
  commentThreadApplicability: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentThreadApplicability.d.ts"
  },
  commentingRangeHint: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentingRangeHint.d.ts"
  },
  commentsDraftState: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentsDraftState.d.ts"
  },
  contribAccessibilityHelpContent: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribAccessibilityHelpContent.d.ts"
  },
  contribCommentEditorActionsMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentEditorActionsMenu.d.ts"
  },
  contribCommentPeekContext: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentPeekContext.d.ts"
  },
  contribCommentThreadAdditionalMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentThreadAdditionalMenu.d.ts"
  },
  contribCommentsViewThreadMenus: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentsViewThreadMenus.d.ts"
  },
  contribDebugCreateConfiguration: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribDebugCreateConfiguration.d.ts"
  },
  contribDiffEditorGutterToolBarMenus: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribDiffEditorGutterToolBarMenus.d.ts"
  },
  contribEditSessions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribEditSessions.d.ts"
  },
  contribEditorContentMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribEditorContentMenu.d.ts"
  },
  contribLabelFormatterWorkspaceTooltip: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribLabelFormatterWorkspaceTooltip.d.ts"
  },
  contribLanguageModelToolSets: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribLanguageModelToolSets.d.ts"
  },
  contribMenuBarHome: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMenuBarHome.d.ts"
  },
  contribMergeEditorMenus: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMergeEditorMenus.d.ts"
  },
  contribMultiDiffEditorMenus: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMultiDiffEditorMenus.d.ts"
  },
  contribNotebookStaticPreloads: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribNotebookStaticPreloads.d.ts"
  },
  contribRemoteHelp: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribRemoteHelp.d.ts"
  },
  contribShareMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribShareMenu.d.ts"
  },
  contribSourceControlHistoryItemMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlHistoryItemMenu.d.ts"
  },
  contribSourceControlHistoryTitleMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlHistoryTitleMenu.d.ts"
  },
  contribSourceControlInputBoxMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlInputBoxMenu.d.ts"
  },
  contribSourceControlTitleMenu: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlTitleMenu.d.ts"
  },
  contribStatusBarItems: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribStatusBarItems.d.ts"
  },
  contribViewContainerTitle: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribViewContainerTitle.d.ts"
  },
  contribViewsRemote: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribViewsRemote.d.ts"
  },
  contribViewsWelcome: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribViewsWelcome.d.ts"
  },
  customEditorMove: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.customEditorMove.d.ts"
  },
  dataChannels: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.dataChannels.d.ts"
  },
  debugVisualization: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.debugVisualization.d.ts"
  },
  defaultChatParticipant: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.defaultChatParticipant.d.ts",
    version: 4
  },
  diffCommand: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.diffCommand.d.ts"
  },
  diffContentOptions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.diffContentOptions.d.ts"
  },
  documentFiltersExclusive: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.documentFiltersExclusive.d.ts"
  },
  editSessionIdentityProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editSessionIdentityProvider.d.ts"
  },
  editorHoverVerbosityLevel: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editorHoverVerbosityLevel.d.ts"
  },
  editorInsets: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editorInsets.d.ts"
  },
  embeddings: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.embeddings.d.ts"
  },
  extensionRuntime: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.extensionRuntime.d.ts"
  },
  extensionsAny: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.extensionsAny.d.ts"
  },
  externalUriOpener: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.externalUriOpener.d.ts"
  },
  fileSearchProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fileSearchProvider.d.ts"
  },
  fileSearchProvider2: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fileSearchProvider2.d.ts"
  },
  findFiles2: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.findFiles2.d.ts",
    version: 2
  },
  findTextInFiles: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.findTextInFiles.d.ts"
  },
  findTextInFiles2: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.findTextInFiles2.d.ts"
  },
  fsChunks: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fsChunks.d.ts"
  },
  idToken: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.idToken.d.ts"
  },
  inlineCompletionsAdditions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.inlineCompletionsAdditions.d.ts"
  },
  interactive: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.interactive.d.ts"
  },
  interactiveWindow: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.interactiveWindow.d.ts"
  },
  ipc: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.ipc.d.ts"
  },
  languageModelCapabilities: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageModelCapabilities.d.ts"
  },
  languageModelDataPart: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageModelDataPart.d.ts",
    version: 3
  },
  languageModelSystem: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageModelSystem.d.ts"
  },
  languageModelToolResultAudience: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageModelToolResultAudience.d.ts"
  },
  languageStatusText: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageStatusText.d.ts"
  },
  mappedEditsProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.mappedEditsProvider.d.ts"
  },
  multiDocumentHighlightProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.multiDocumentHighlightProvider.d.ts"
  },
  nativeWindowHandle: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.nativeWindowHandle.d.ts"
  },
  newSymbolNamesProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.newSymbolNamesProvider.d.ts"
  },
  notebookCellExecution: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookCellExecution.d.ts"
  },
  notebookControllerAffinityHidden: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookControllerAffinityHidden.d.ts"
  },
  notebookDeprecated: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookDeprecated.d.ts"
  },
  notebookExecution: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookExecution.d.ts"
  },
  notebookKernelSource: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookKernelSource.d.ts"
  },
  notebookLiveShare: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookLiveShare.d.ts"
  },
  notebookMessaging: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookMessaging.d.ts"
  },
  notebookMime: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookMime.d.ts"
  },
  notebookReplDocument: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookReplDocument.d.ts"
  },
  notebookVariableProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookVariableProvider.d.ts"
  },
  portsAttributes: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.portsAttributes.d.ts"
  },
  profileContentHandlers: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.profileContentHandlers.d.ts"
  },
  quickDiffProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickDiffProvider.d.ts"
  },
  quickInputButtonLocation: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickInputButtonLocation.d.ts"
  },
  quickPickItemTooltip: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickPickItemTooltip.d.ts"
  },
  quickPickSortByLabel: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickPickSortByLabel.d.ts"
  },
  remoteCodingAgents: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.remoteCodingAgents.d.ts"
  },
  resolvers: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.resolvers.d.ts"
  },
  scmActionButton: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmActionButton.d.ts"
  },
  scmHistoryProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmHistoryProvider.d.ts"
  },
  scmMultiDiffEditor: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmMultiDiffEditor.d.ts"
  },
  scmProviderOptions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmProviderOptions.d.ts"
  },
  scmSelectedProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmSelectedProvider.d.ts"
  },
  scmTextDocument: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmTextDocument.d.ts"
  },
  scmValidation: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmValidation.d.ts"
  },
  secretStorageKeys: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.secretStorageKeys.d.ts"
  },
  shareProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.shareProvider.d.ts"
  },
  speech: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.speech.d.ts"
  },
  statusBarItemTooltip: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.statusBarItemTooltip.d.ts"
  },
  tabInputMultiDiff: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tabInputMultiDiff.d.ts"
  },
  tabInputTextMerge: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tabInputTextMerge.d.ts"
  },
  taskExecutionTerminal: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.taskExecutionTerminal.d.ts"
  },
  taskPresentationGroup: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.taskPresentationGroup.d.ts"
  },
  taskProblemMatcherStatus: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.taskProblemMatcherStatus.d.ts"
  },
  telemetry: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.telemetry.d.ts"
  },
  terminalCompletionProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalCompletionProvider.d.ts"
  },
  terminalDataWriteEvent: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalDataWriteEvent.d.ts"
  },
  terminalDimensions: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalDimensions.d.ts"
  },
  terminalExecuteCommandEvent: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalExecuteCommandEvent.d.ts"
  },
  terminalQuickFixProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalQuickFixProvider.d.ts"
  },
  terminalSelection: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalSelection.d.ts"
  },
  terminalShellEnv: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalShellEnv.d.ts"
  },
  testObserver: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.testObserver.d.ts"
  },
  testRelatedCode: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.testRelatedCode.d.ts"
  },
  textDocumentChangeReason: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textDocumentChangeReason.d.ts"
  },
  textEditorDiffInformation: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textEditorDiffInformation.d.ts"
  },
  textSearchComplete2: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textSearchComplete2.d.ts"
  },
  textSearchProvider: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textSearchProvider.d.ts"
  },
  textSearchProvider2: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textSearchProvider2.d.ts"
  },
  timeline: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.timeline.d.ts"
  },
  tokenInformation: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tokenInformation.d.ts"
  },
  toolProgress: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.toolProgress.d.ts"
  },
  treeViewActiveItem: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewActiveItem.d.ts"
  },
  treeViewMarkdownMessage: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewMarkdownMessage.d.ts"
  },
  treeViewReveal: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewReveal.d.ts"
  },
  tunnelFactory: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tunnelFactory.d.ts"
  },
  tunnels: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tunnels.d.ts"
  },
  valueSelectionInQuickPick: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.valueSelectionInQuickPick.d.ts"
  },
  workspaceTrust: {
    proposal: "https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.workspaceTrust.d.ts"
  }
}, vm = Object.freeze(c6), oS = ui.as(lv.JSONContribution);
class _h {
  static _toSet(e) {
    const t = new Ql();
    for (let n = 0, r = e.length; n < r; n++)
      t.add(e[n].description.identifier);
    return t;
  }
  static compute(e, t) {
    if (!e || !e.length)
      return new _h(t, []);
    if (!t || !t.length)
      return new _h([], e);
    const n = this._toSet(e), r = this._toSet(t), s = t.filter((a) => !n.has(a.description.identifier)), o = e.filter((a) => !r.has(a.description.identifier));
    return new _h(s, o);
  }
  constructor(e, t) {
    this.added = e, this.removed = t;
  }
}
class u6 {
  constructor(e, t, n) {
    this.name = e, this.defaultExtensionKind = t, this.canHandleResolver = n, this._handler = null, this._users = null, this._delta = null;
  }
  setHandler(e) {
    if (this._handler !== null)
      throw new Error("Handler already set!");
    return this._handler = e, this._handle(), {
      dispose: () => {
        this._handler = null;
      }
    };
  }
  acceptUsers(e) {
    this._delta = _h.compute(this._users, e), this._users = e, this._handle();
  }
  _handle() {
    if (!(this._handler === null || this._users === null || this._delta === null))
      try {
        this._handler(this._users, this._delta);
      } catch (e) {
        Fi(e);
      }
  }
}
const d6 = {
  type: "string",
  enum: [
    "ui",
    "workspace"
  ],
  enumDescriptions: [
    h(
      13131,
      "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."
    ),
    h(
      13132,
      "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
    )
  ]
}, JP = "vscode://schemas/vscode-extensions", pb = {
  properties: {
    engines: {
      type: "object",
      description: h(13133, "Engine compatibility."),
      properties: {
        vscode: {
          type: "string",
          description: h(
            13134,
            "For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5."
          ),
          default: "^1.22.0"
        }
      }
    },
    publisher: {
      description: h(13135, "The publisher of the VS Code extension."),
      type: "string"
    },
    displayName: {
      description: h(13136, "The display name for the extension used in the VS Code gallery."),
      type: "string"
    },
    categories: {
      description: h(
        13137,
        "The categories used by the VS Code gallery to categorize the extension."
      ),
      type: "array",
      uniqueItems: !0,
      items: {
        oneOf: [
          {
            type: "string",
            enum: UL
          },
          {
            type: "string",
            const: "Languages",
            deprecationMessage: h(13138, "Use 'Programming  Languages' instead")
          }
        ]
      }
    },
    galleryBanner: {
      type: "object",
      description: h(13139, "Banner used in the VS Code marketplace."),
      properties: {
        color: {
          description: h(13140, "The banner color on the VS Code marketplace page header."),
          type: "string"
        },
        theme: {
          description: h(13141, "The color theme for the font used in the banner."),
          type: "string",
          enum: ["dark", "light"]
        }
      }
    },
    contributes: {
      description: h(
        13142,
        "All contributions of the VS Code extension represented by this package."
      ),
      type: "object",
      properties: {},
      default: {}
    },
    preview: {
      type: "boolean",
      description: h(13143, "Sets the extension to be flagged as a Preview in the Marketplace.")
    },
    enableProposedApi: {
      type: "boolean",
      deprecationMessage: h(13144, "Use `enabledApiProposals` instead.")
    },
    enabledApiProposals: {
      markdownDescription: h(
        13145,
        "Enable API proposals to try them out. Only valid **during development**. Extensions **cannot be published** with this property. For more details visit: https://code.visualstudio.com/api/advanced-topics/using-proposed-api"
      ),
      type: "array",
      uniqueItems: !0,
      items: {
        type: "string",
        enum: Object.keys(vm).map((i) => i),
        markdownEnumDescriptions: Object.values(vm).map((i) => i.proposal)
      }
    },
    api: {
      markdownDescription: h(
        13146,
        "Describe the API provided by this extension. For more details visit: https://code.visualstudio.com/api/advanced-topics/remote-extensions#handling-dependencies-with-remote-extensions"
      ),
      type: "string",
      enum: ["none"],
      enumDescriptions: [
        h(
          13147,
          "Give up entirely the ability to export any APIs. This allows other extensions that depend on this extension to run in a separate extension host process or in a remote machine."
        )
      ]
    },
    activationEvents: {
      description: h(13148, "Activation events for the VS Code extension."),
      type: "array",
      items: {
        type: "string",
        defaultSnippets: [
          {
            label: "onWebviewPanel",
            description: h(
              13149,
              "An activation event emmited when a webview is loaded of a certain viewType"
            ),
            body: "onWebviewPanel:viewType"
          },
          {
            label: "onLanguage",
            description: h(
              13150,
              "An activation event emitted whenever a file that resolves to the specified language gets opened."
            ),
            body: "onLanguage:${1:languageId}"
          },
          {
            label: "onCommand",
            description: h(
              13151,
              "An activation event emitted whenever the specified command gets invoked."
            ),
            body: "onCommand:${2:commandId}"
          },
          {
            label: "onDebug",
            description: h(
              13152,
              "An activation event emitted whenever a user is about to start debugging or about to setup debug configurations."
            ),
            body: "onDebug"
          },
          {
            label: "onDebugInitialConfigurations",
            description: h(
              13153,
              'An activation event emitted whenever a "launch.json" needs to be created (and all provideDebugConfigurations methods need to be called).'
            ),
            body: "onDebugInitialConfigurations"
          },
          {
            label: "onDebugDynamicConfigurations",
            description: h(
              13154,
              'An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the "dynamic" scope need to be called).'
            ),
            body: "onDebugDynamicConfigurations"
          },
          {
            label: "onDebugResolve",
            description: h(
              13155,
              "An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called)."
            ),
            body: "onDebugResolve:${6:type}"
          },
          {
            label: "onDebugAdapterProtocolTracker",
            description: h(
              13156,
              "An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed."
            ),
            body: "onDebugAdapterProtocolTracker:${6:type}"
          },
          {
            label: "workspaceContains",
            description: h(
              13157,
              "An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern."
            ),
            body: "workspaceContains:${4:filePattern}"
          },
          {
            label: "onStartupFinished",
            description: h(
              13158,
              "An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating)."
            ),
            body: "onStartupFinished"
          },
          {
            label: "onTaskType",
            description: h(
              13159,
              "An activation event emitted whenever tasks of a certain type need to be listed or resolved."
            ),
            body: "onTaskType:${1:taskType}"
          },
          {
            label: "onFileSystem",
            description: h(
              13160,
              "An activation event emitted whenever a file or folder is accessed with the given scheme."
            ),
            body: "onFileSystem:${1:scheme}"
          },
          {
            label: "onEditSession",
            description: h(
              13161,
              "An activation event emitted whenever an edit session is accessed with the given scheme."
            ),
            body: "onEditSession:${1:scheme}"
          },
          {
            label: "onSearch",
            description: h(
              13162,
              "An activation event emitted whenever a search is started in the folder with the given scheme."
            ),
            body: "onSearch:${7:scheme}"
          },
          {
            label: "onView",
            body: "onView:${5:viewId}",
            description: h(
              13163,
              "An activation event emitted whenever the specified view is expanded."
            )
          },
          {
            label: "onUri",
            body: "onUri",
            description: h(
              13164,
              "An activation event emitted whenever a system-wide Uri directed towards this extension is open."
            )
          },
          {
            label: "onOpenExternalUri",
            body: "onOpenExternalUri",
            description: h(
              13165,
              "An activation event emitted whenever a external uri (such as an http or https link) is being opened."
            )
          },
          {
            label: "onCustomEditor",
            body: "onCustomEditor:${9:viewType}",
            description: h(
              13166,
              "An activation event emitted whenever the specified custom editor becomes visible."
            )
          },
          {
            label: "onNotebook",
            body: "onNotebook:${1:type}",
            description: h(
              13167,
              "An activation event emitted whenever the specified notebook document is opened."
            )
          },
          {
            label: "onAuthenticationRequest",
            body: "onAuthenticationRequest:${11:authenticationProviderId}",
            description: h(
              13168,
              "An activation event emitted whenever sessions are requested from the specified authentication provider."
            )
          },
          {
            label: "onRenderer",
            description: h(
              13169,
              "An activation event emitted whenever a notebook output renderer is used."
            ),
            body: "onRenderer:${11:rendererId}"
          },
          {
            label: "onTerminalProfile",
            body: "onTerminalProfile:${1:terminalId}",
            description: h(
              13170,
              "An activation event emitted when a specific terminal profile is launched."
            )
          },
          {
            label: "onTerminalQuickFixRequest",
            body: "onTerminalQuickFixRequest:${1:quickFixId}",
            description: h(
              13171,
              "An activation event emitted when a command matches the selector associated with this ID"
            )
          },
          {
            label: "onWalkthrough",
            body: "onWalkthrough:${1:walkthroughID}",
            description: h(
              13172,
              "An activation event emitted when a specified walkthrough is opened."
            )
          },
          {
            label: "onIssueReporterOpened",
            body: "onIssueReporterOpened",
            description: h(13173, "An activation event emitted when the issue reporter is opened.")
          },
          {
            label: "onChatParticipant",
            body: "onChatParticipant:${1:participantId}",
            description: h(
              13174,
              "An activation event emitted when the specified chat participant is invoked."
            )
          },
          {
            label: "onLanguageModelTool",
            body: "onLanguageModelTool:${1:toolId}",
            description: h(
              13175,
              "An activation event emitted when the specified language model tool is invoked."
            )
          },
          {
            label: "onTerminal",
            body: "onTerminal:{1:shellType}",
            description: h(
              13176,
              "An activation event emitted when a terminal of the given shell type is opened."
            )
          },
          {
            label: "onTerminalCompletionsRequested",
            body: "onTerminalCompletionsRequested",
            description: h(
              13177,
              "An activation event emitted when terminal completions are requested."
            )
          },
          {
            label: "onTerminalShellIntegration",
            body: "onTerminalShellIntegration:${1:shellType}",
            description: h(
              13178,
              "An activation event emitted when terminal shell integration is activated for the given shell type."
            )
          },
          {
            label: "onMcpCollection",
            description: h(
              13179,
              "An activation event emitted whenver a tool from the MCP server is requested."
            ),
            body: "onMcpCollection:${2:collectionId}"
          },
          {
            label: "*",
            description: h(
              13180,
              "An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case."
            ),
            body: "*"
          }
        ]
      }
    },
    badges: {
      type: "array",
      description: h(
        13181,
        "Array of badges to display in the sidebar of the Marketplace's extension page."
      ),
      items: {
        type: "object",
        required: ["url", "href", "description"],
        properties: {
          url: {
            type: "string",
            description: h(13182, "Badge image URL.")
          },
          href: {
            type: "string",
            description: h(13183, "Badge link.")
          },
          description: {
            type: "string",
            description: h(13184, "Badge description.")
          }
        }
      }
    },
    markdown: {
      type: "string",
      description: h(
        13185,
        "Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard."
      ),
      enum: ["github", "standard"],
      default: "github"
    },
    qna: {
      default: "marketplace",
      description: h(
        13186,
        "Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether."
      ),
      anyOf: [
        {
          type: ["string", "boolean"],
          enum: ["marketplace", !1]
        },
        {
          type: "string"
        }
      ]
    },
    extensionDependencies: {
      description: h(
        13187,
        "Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp."
      ),
      type: "array",
      uniqueItems: !0,
      items: {
        type: "string",
        pattern: ek
      }
    },
    extensionPack: {
      description: h(
        13188,
        "A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp."
      ),
      type: "array",
      uniqueItems: !0,
      items: {
        type: "string",
        pattern: ek
      }
    },
    extensionKind: {
      description: h(
        13189,
        "Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote."
      ),
      type: "array",
      items: d6,
      default: ["workspace"],
      defaultSnippets: [
        {
          body: ["ui"],
          description: h(
            13190,
            "Define an extension which can run only on the local machine when connected to remote window."
          )
        },
        {
          body: ["workspace"],
          description: h(
            13191,
            "Define an extension which can run only on the remote machine when connected remote window."
          )
        },
        {
          body: ["ui", "workspace"],
          description: h(
            13192,
            "Define an extension which can run on either side, with a preference towards running on the local machine."
          )
        },
        {
          body: ["workspace", "ui"],
          description: h(
            13193,
            "Define an extension which can run on either side, with a preference towards running on the remote machine."
          )
        },
        {
          body: [],
          description: h(
            13194,
            "Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine."
          )
        }
      ]
    },
    capabilities: {
      description: h(13195, "Declare the set of supported capabilities by the extension."),
      type: "object",
      properties: {
        virtualWorkspaces: {
          description: h(
            13196,
            "Declares whether the extension should be enabled in virtual workspaces. A virtual workspace is a workspace which is not backed by any on-disk resources. When false, this extension will be automatically disabled in virtual workspaces. Default is true."
          ),
          type: ["boolean", "object"],
          defaultSnippets: [
            { label: "limited", body: { supported: "${1:limited}", description: "${2}" } },
            { label: "false", body: { supported: !1, description: "${2}" } }
          ],
          default: (!0).valueOf,
          properties: {
            supported: {
              markdownDescription: h(
                13197,
                "Declares the level of support for virtual workspaces by the extension."
              ),
              type: ["string", "boolean"],
              enum: ["limited", !0, !1],
              enumDescriptions: [
                h(
                  13198,
                  "The extension will be enabled in virtual workspaces with some functionality disabled."
                ),
                h(
                  13199,
                  "The extension will be enabled in virtual workspaces with all functionality enabled."
                ),
                h(13200, "The extension will not be enabled in virtual workspaces.")
              ]
            },
            description: {
              type: "string",
              markdownDescription: h(
                13201,
                "A description of how virtual workspaces affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
              )
            }
          }
        },
        untrustedWorkspaces: {
          description: h(
            13202,
            "Declares how the extension should be handled in untrusted workspaces."
          ),
          type: "object",
          required: ["supported"],
          defaultSnippets: [
            { body: { supported: "${1:limited}", description: "${2}" } }
          ],
          properties: {
            supported: {
              markdownDescription: h(
                13203,
                "Declares the level of support for untrusted workspaces by the extension."
              ),
              type: ["string", "boolean"],
              enum: ["limited", !0, !1],
              enumDescriptions: [
                h(
                  13204,
                  "The extension will be enabled in untrusted workspaces with some functionality disabled."
                ),
                h(
                  13205,
                  "The extension will be enabled in untrusted workspaces with all functionality enabled."
                ),
                h(13206, "The extension will not be enabled in untrusted workspaces.")
              ]
            },
            restrictedConfigurations: {
              description: h(
                13207,
                "A list of configuration keys contributed by the extension that should not use workspace values in untrusted workspaces."
              ),
              type: "array",
              items: {
                type: "string"
              }
            },
            description: {
              type: "string",
              markdownDescription: h(
                13208,
                "A description of how workspace trust affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
              )
            }
          }
        }
      }
    },
    sponsor: {
      description: h(13209, "Specify the location from where users can sponsor your extension."),
      type: "object",
      defaultSnippets: [
        { body: { url: "${1:https:}" } }
      ],
      properties: {
        url: {
          description: h(
            13210,
            "URL from where users can sponsor your extension. It must be a valid URL with a HTTP or HTTPS protocol. Example value: https://github.com/sponsors/nvaccess"
          ),
          type: "string"
        }
      }
    },
    scripts: {
      type: "object",
      properties: {
        "vscode:prepublish": {
          description: h(
            13211,
            "Script executed before the package is published as a VS Code extension."
          ),
          type: "string"
        },
        "vscode:uninstall": {
          description: h(
            13212,
            "Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported."
          ),
          type: "string"
        }
      }
    },
    icon: {
      type: "string",
      description: h(13213, "The path to a 128x128 pixel icon.")
    },
    l10n: {
      type: "string",
      description: h(
        13214,
        "The relative path to a folder containing localization (bundle.l10n.*.json) files. Must be specified if you are using the vscode.l10n API."
      )
    },
    pricing: {
      type: "string",
      markdownDescription: h(
        13215,
        "The pricing information for the extension. Can be Free (default) or Trial. For more details visit: https://code.visualstudio.com/api/working-with-extensions/publishing-extension#extension-pricing-label"
      ),
      enum: ["Free", "Trial"],
      default: "Free"
    }
  }
};
class h6 {
  constructor() {
    this._extensionPoints = /* @__PURE__ */ new Map();
  }
  registerExtensionPoint(e) {
    if (this._extensionPoints.has(e.extensionPoint))
      throw new Error("Duplicate extension point: " + e.extensionPoint);
    const t = new u6(e.extensionPoint, e.defaultExtensionKind, e.canHandleResolver);
    return this._extensionPoints.set(e.extensionPoint, t), e.activationEventsGenerator && s6.register(e.extensionPoint, e.activationEventsGenerator), pb.properties.contributes.properties[e.extensionPoint] = e.jsonSchema, oS.registerSchema(JP, pb), t;
  }
  getExtensionPoints() {
    return Array.from(this._extensionPoints.values());
  }
}
const YP = {
  ExtensionsRegistry: "ExtensionsRegistry"
};
ui.add(YP.ExtensionsRegistry, new h6());
const XP = ui.as(YP.ExtensionsRegistry);
oS.registerSchema(JP, pb);
oS.registerSchema(l6, {
  properties: {
    extensionEnabledApiProposals: {
      description: h(13216, "API proposals that the respective extensions can freely use."),
      type: "object",
      properties: {},
      additionalProperties: {
        anyOf: [{
          type: "array",
          uniqueItems: !0,
          items: {
            type: "string",
            enum: Object.keys(vm),
            markdownEnumDescriptions: Object.values(vm).map((i) => i.proposal)
          }
        }]
      }
    }
  }
});
new P("isMac", Un, h(1757, "Whether the operating system is macOS"));
new P("isLinux", jo, h(1758, "Whether the operating system is Linux"));
new P("isWindows", Yi, h(1759, "Whether the operating system is Windows"));
const f6 = new P("isWeb", xp, h(1760, "Whether the platform is a web browser"));
new P("isMacNative", Un && !xp, h(1761, "Whether the operating system is macOS on a non-browser platform"));
new P("isIOS", p8, h(1762, "Whether the operating system is iOS"));
new P("isMobile", g8, h(1763, "Whether the platform is a mobile web browser"));
new P("isDevelopment", !1, !0);
new P("productQualityType", "", h(1764, "Quality type of VS Code"));
const p6 = "inputFocus";
new P(p6, !1, h(1765, "Whether keyboard focus is inside an input box"));
const ZP = me("languageService"), e5 = me("modelService");
class fk extends VP {
  constructor() {
    super(...arguments), this._onDidChangeDirty = this._register(new M()), this._onDidChangeLabel = this._register(new M()), this._onDidChangeCapabilities = this._register(new M()), this._onWillDispose = this._register(new M()), this.onDidChangeDirty = this._onDidChangeDirty.event, this.onDidChangeLabel = this._onDidChangeLabel.event, this.onDidChangeCapabilities = this._onDidChangeCapabilities.event, this.onWillDispose = this._onWillDispose.event;
  }
  get editorId() {
  }
  get capabilities() {
    return Ln.Readonly;
  }
  hasCapability(e) {
    return e === Ln.None ? this.capabilities === Ln.None : (this.capabilities & e) !== 0;
  }
  isReadonly() {
    return this.hasCapability(Ln.Readonly);
  }
  getName() {
    return `Editor ${this.typeId}`;
  }
  getDescription(e) {
  }
  getTitle(e) {
    return this.getName();
  }
  getLabelExtraClasses() {
    return [];
  }
  getAriaLabel() {
    return this.getTitle(ti.SHORT);
  }
  getIcon() {
  }
  getTelemetryDescriptor() {
    return { typeId: this.typeId };
  }
  isDirty() {
    return !1;
  }
  isModified() {
    return this.isDirty();
  }
  isSaving() {
    return !1;
  }
  async resolve() {
    return null;
  }
  async save(e, t) {
    return this;
  }
  async saveAs(e, t) {
    return this;
  }
  async revert(e, t) {
  }
  async rename(e, t) {
  }
  copy() {
    return this;
  }
  canMove(e, t) {
    return !0;
  }
  matches(e) {
    var n;
    if (Ir(e))
      return this === e;
    const t = (n = e.options) == null ? void 0 : n.override;
    return this.editorId !== t && t !== void 0 && this.editorId !== void 0 ? !1 : Kc(this.resource, ub.getCanonicalUri(e));
  }
  prefersEditorPane(e) {
    return e.at(0);
  }
  toUntyped(e) {
  }
  isDisposed() {
    return this._store.isDisposed;
  }
  dispose() {
    this.isDisposed() || this._onWillDispose.fire(), super.dispose();
  }
}
const t5 = me("editorService");
var yc, Dl;
let gb = (Dl = class extends fk {
  get typeId() {
    return yc.ID;
  }
  get capabilities() {
    let e = this.primary.capabilities;
    return e &= ~Ln.CanSplitInGroup, this.secondary.hasCapability(Ln.RequiresTrust) && (e |= Ln.RequiresTrust), this.secondary.hasCapability(Ln.Singleton) && (e |= Ln.Singleton), e |= Ln.MultipleEditors, e;
  }
  get resource() {
    if (this.hasIdenticalSides)
      return this.primary.resource;
  }
  constructor(e, t, n, r, s) {
    super(), this.preferredName = e, this.preferredDescription = t, this.secondary = n, this.primary = r, this.editorService = s, this.hasIdenticalSides = this.primary.matches(this.secondary), this.registerListeners();
  }
  registerListeners() {
    this._register(Pt.once(Pt.any(this.primary.onWillDispose, this.secondary.onWillDispose))(() => {
      this.isDisposed() || this.dispose();
    })), this._register(this.primary.onDidChangeDirty(() => this._onDidChangeDirty.fire())), this._register(this.primary.onDidChangeCapabilities(() => this._onDidChangeCapabilities.fire())), this._register(this.secondary.onDidChangeCapabilities(() => this._onDidChangeCapabilities.fire())), this._register(this.primary.onDidChangeLabel(() => this._onDidChangeLabel.fire())), this._register(this.secondary.onDidChangeLabel(() => this._onDidChangeLabel.fire()));
  }
  getName() {
    const e = this.getPreferredName();
    return e || (this.hasIdenticalSides ? this.primary.getName() : h(3943, "{0} - {1}", this.secondary.getName(), this.primary.getName()));
  }
  getPreferredName() {
    return this.preferredName;
  }
  getDescription(e) {
    const t = this.getPreferredDescription();
    return t || (this.hasIdenticalSides ? this.primary.getDescription(e) : super.getDescription(e));
  }
  getPreferredDescription() {
    return this.preferredDescription;
  }
  getTitle(e) {
    let t;
    this.hasIdenticalSides ? t = this.primary.getTitle(e) ?? this.getName() : t = super.getTitle(e);
    const n = this.getPreferredTitle();
    return n && (t = `${n} (${t})`), t;
  }
  getPreferredTitle() {
    if (this.preferredName && this.preferredDescription)
      return `${this.preferredName} ${this.preferredDescription}`;
    if (this.preferredName || this.preferredDescription)
      return this.preferredName ?? this.preferredDescription;
  }
  getLabelExtraClasses() {
    return this.hasIdenticalSides ? this.primary.getLabelExtraClasses() : super.getLabelExtraClasses();
  }
  getAriaLabel() {
    return this.hasIdenticalSides ? this.primary.getAriaLabel() : super.getAriaLabel();
  }
  getTelemetryDescriptor() {
    return { ...this.primary.getTelemetryDescriptor(), ...super.getTelemetryDescriptor() };
  }
  isDirty() {
    return this.primary.isDirty();
  }
  isSaving() {
    return this.primary.isSaving();
  }
  async save(e, t) {
    const n = await this.primary.save(e, t);
    return this.saveResultToEditor(n);
  }
  async saveAs(e, t) {
    const n = await this.primary.saveAs(e, t);
    return this.saveResultToEditor(n);
  }
  saveResultToEditor(e) {
    if (!e || !this.hasIdenticalSides)
      return e;
    if (this.primary.matches(e))
      return this;
    if (e instanceof fk)
      return new yc(
        this.preferredName,
        this.preferredDescription,
        e,
        e,
        this.editorService
      );
    if (!Bs(e) && !gh(e) && !Ra(e) && !La(e))
      return {
        primary: e,
        secondary: e,
        label: this.preferredName,
        description: this.preferredDescription
      };
  }
  revert(e, t) {
    return this.primary.revert(e, t);
  }
  async rename(e, t) {
    if (!this.hasIdenticalSides)
      return;
    const n = await this.primary.rename(e, t);
    if (n) {
      if (Ir(n.editor))
        return {
          editor: new yc(
            this.preferredName,
            this.preferredDescription,
            n.editor,
            n.editor,
            this.editorService
          ),
          options: {
            ...n.options,
            viewState: nw(this, e, this.editorService)
          }
        };
      if (S9(n.editor))
        return {
          editor: {
            label: this.preferredName,
            description: this.preferredDescription,
            primary: n.editor,
            secondary: n.editor,
            options: {
              ...n.options,
              viewState: nw(this, e, this.editorService)
            }
          }
        };
    }
  }
  isReadonly() {
    return this.primary.isReadonly();
  }
  toUntyped(e) {
    const t = this.primary.toUntyped(e), n = this.secondary.toUntyped(e);
    if (t && n && !Bs(t) && !Bs(n) && !gh(t) && !gh(n) && !Ra(t) && !Ra(n) && !La(t) && !La(n)) {
      const r = {
        label: this.preferredName,
        description: this.preferredDescription,
        primary: t,
        secondary: n
      };
      return typeof (e == null ? void 0 : e.preserveViewState) == "number" && (r.options = {
        viewState: nw(this, e.preserveViewState, this.editorService)
      }), r;
    }
  }
  matches(e) {
    return this === e ? !0 : zP(e) || Bs(e) ? !1 : e instanceof yc ? this.primary.matches(e.primary) && this.secondary.matches(e.secondary) : Ra(e) ? this.primary.matches(e.primary) && this.secondary.matches(e.secondary) : !1;
  }
}, yc = Dl, Dl.ID = "workbench.editorinputs.sidebysideEditorInput", Dl);
gb = yc = z([
  O(4, t5)
], gb);
class i5 extends xe {
  constructor() {
    super(...arguments), this._onWillDispose = this._register(new M()), this.onWillDispose = this._onWillDispose.event, this.resolved = !1;
  }
  async resolve() {
    this.resolved = !0;
  }
  isResolved() {
    return this.resolved;
  }
  isDisposed() {
    return this._store.isDisposed;
  }
  dispose() {
    this._onWillDispose.fire(), super.dispose();
  }
}
const g6 = {
  ModesRegistry: "editor.modesRegistry"
};
class m6 extends xe {
  constructor() {
    super(), this._onDidChangeLanguages = this._register(new M()), this.onDidChangeLanguages = this._onDidChangeLanguages.event, this._languages = [];
  }
  registerLanguage(e) {
    return this._languages.push(e), this._onDidChangeLanguages.fire(void 0), {
      dispose: () => {
        for (let t = 0, n = this._languages.length; t < n; t++)
          if (this._languages[t] === e) {
            this._languages.splice(t, 1);
            return;
          }
      }
    };
  }
  getLanguages() {
    return this._languages;
  }
}
const n5 = new m6();
ui.add(g6.ModesRegistry, n5);
const vg = "plaintext", _6 = ".txt";
n5.registerLanguage({
  id: vg,
  extensions: [_6],
  aliases: [h(842, "Plain Text"), "text"],
  mimetypes: [Dr.text]
});
ui.as(ec.Configuration).registerDefaultConfigurations([{
  overrides: {
    "[plaintext]": {
      "editor.unicodeHighlight.ambiguousCharacters": !1,
      "editor.unicodeHighlight.invisibleCharacters": !1
    },
    "[go]": {
      "editor.insertSpaces": !1
    },
    "[makefile]": {
      "editor.insertSpaces": !1
    },
    "[shellscript]": {
      "files.eol": `
`
    },
    "[yaml]": {
      "editor.insertSpaces": !0,
      "editor.tabSize": 2
    }
  }
}]);
const pk = "languageDetection", v6 = me("ILanguageDetectionService"), w6 = me("accessibilityService");
var mb, kl;
let wm = (kl = class extends i5 {
  constructor(e, t, n, r, s) {
    super(), this.modelService = e, this.languageService = t, this.languageDetectionService = n, this.accessibilityService = r, this.textEditorModelHandle = void 0, this.modelDisposeListener = this._register(new $s()), this.autoDetectLanguageThrottler = this._register(new sP(mb.AUTO_DETECT_LANGUAGE_THROTTLE_DELAY)), this._blockLanguageChangeListener = !1, this._languageChangeSource = void 0, s && this.handleExistingModel(s);
  }
  handleExistingModel(e) {
    const t = this.modelService.getModel(e);
    if (!t)
      throw new Error(`Document with resource ${e.toString(!0)} does not exist`);
    this.textEditorModelHandle = e, this.registerModelDisposeListener(t);
  }
  registerModelDisposeListener(e) {
    this.modelDisposeListener.value = e.onWillDispose(() => {
      this.textEditorModelHandle = void 0, this.dispose();
    });
  }
  get textEditorModel() {
    return this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;
  }
  isReadonly() {
    return !0;
  }
  get languageChangeSource() {
    return this._languageChangeSource;
  }
  get hasLanguageSetExplicitly() {
    return typeof this._languageChangeSource == "string";
  }
  setLanguageId(e, t) {
    this._languageChangeSource = "user", this.setLanguageIdInternal(e, t);
  }
  setLanguageIdInternal(e, t) {
    if (this.isResolved() && !(!e || e === this.textEditorModel.getLanguageId())) {
      this._blockLanguageChangeListener = !0;
      try {
        this.textEditorModel.setLanguage(this.languageService.createById(e), t);
      } finally {
        this._blockLanguageChangeListener = !1;
      }
    }
  }
  installModelListeners(e) {
    const t = this._register(e.onDidChangeLanguage((n) => {
      n.source === pk || this._blockLanguageChangeListener || (this._languageChangeSource = "api", t.dispose());
    }));
  }
  getLanguageId() {
    var e;
    return (e = this.textEditorModel) == null ? void 0 : e.getLanguageId();
  }
  autoDetectLanguage() {
    return this.autoDetectLanguageThrottler.trigger(() => this.doAutoDetectLanguage());
  }
  async doAutoDetectLanguage() {
    if (this.hasLanguageSetExplicitly || !this.textEditorModelHandle || !this.languageDetectionService.isEnabledForLanguage(this.getLanguageId() ?? vg))
      return;
    const e = await this.languageDetectionService.detectLanguage(this.textEditorModelHandle), t = this.getLanguageId();
    if (e && e !== t && !this.isDisposed()) {
      this.setLanguageIdInternal(e, pk);
      const n = this.languageService.getLanguageName(e);
      this.accessibilityService.alert(h(
        3944,
        "Language {0} was automatically detected and set as the language mode.",
        n ?? e
      ));
    }
  }
  createTextEditorModel(e, t, n) {
    const r = this.getFirstLineText(e), s = this.getOrCreateLanguage(t, this.languageService, n, r);
    return this.doCreateTextEditorModel(e, s, t);
  }
  doCreateTextEditorModel(e, t, n) {
    let r = n && this.modelService.getModel(n);
    return r ? this.updateTextEditorModel(e, t.languageId) : (r = this.modelService.createModel(e, t, n), this.createdEditorModel = !0, this.registerModelDisposeListener(r)), this.textEditorModelHandle = r.uri, r;
  }
  getFirstLineText(e) {
    const t = e;
    return typeof t.getFirstLineText == "function" ? t.getFirstLineText(gm.FIRST_LINE_DETECTION_LENGTH_LIMIT) : e.getLineContent(1).substr(0, gm.FIRST_LINE_DETECTION_LENGTH_LIMIT);
  }
  getOrCreateLanguage(e, t, n, r) {
    return !n || n === vg ? t.createByFilepathOrFirstLine(e ?? null, r) : t.createById(n);
  }
  updateTextEditorModel(e, t, n) {
    this.isResolved() && (e && this.modelService.updateModel(this.textEditorModel, e, n), t && t !== vg && this.textEditorModel.getLanguageId() !== t && this.textEditorModel.setLanguage(this.languageService.createById(t)));
  }
  createSnapshot() {
    return this.textEditorModel ? this.textEditorModel.createSnapshot(!0) : null;
  }
  isResolved() {
    return !!this.textEditorModelHandle;
  }
  dispose() {
    this.modelDisposeListener.dispose(), this.textEditorModelHandle && this.createdEditorModel && this.modelService.destroyModel(this.textEditorModelHandle), this.textEditorModelHandle = void 0, this.createdEditorModel = !1, super.dispose();
  }
}, mb = kl, kl.AUTO_DETECT_LANGUAGE_THROTTLE_DELAY = 600, kl);
wm = mb = z([
  O(0, e5),
  O(1, ZP),
  O(2, v6),
  O(3, w6)
], wm);
class r5 extends i5 {
  get originalModel() {
    return this._originalModel;
  }
  get modifiedModel() {
    return this._modifiedModel;
  }
  constructor(e, t) {
    super(), this._originalModel = e, this._modifiedModel = t;
  }
  async resolve() {
    var e, t;
    await Promise.all([
      (e = this._originalModel) == null ? void 0 : e.resolve(),
      (t = this._modifiedModel) == null ? void 0 : t.resolve()
    ]);
  }
  isResolved() {
    var e, t;
    return !!((e = this._originalModel) != null && e.isResolved() && ((t = this._modifiedModel) != null && t.isResolved()));
  }
  dispose() {
    super.dispose();
  }
}
class b6 extends r5 {
  get originalModel() {
    return this._originalModel;
  }
  get modifiedModel() {
    return this._modifiedModel;
  }
  get textDiffEditorModel() {
    return this._textDiffEditorModel;
  }
  constructor(e, t) {
    super(e, t), this._textDiffEditorModel = void 0, this._originalModel = e, this._modifiedModel = t, this.updateTextDiffEditorModel();
  }
  async resolve() {
    await super.resolve(), this.updateTextDiffEditorModel();
  }
  updateTextDiffEditorModel() {
    var e, t;
    (e = this.originalModel) != null && e.isResolved() && ((t = this.modifiedModel) != null && t.isResolved()) && (this._textDiffEditorModel ? (this._textDiffEditorModel.original = this.originalModel.textEditorModel, this._textDiffEditorModel.modified = this.modifiedModel.textEditorModel) : this._textDiffEditorModel = {
      original: this.originalModel.textEditorModel,
      modified: this.modifiedModel.textEditorModel
    });
  }
  isResolved() {
    return !!this._textDiffEditorModel;
  }
  isReadonly() {
    return !!this.modifiedModel && this.modifiedModel.isReadonly();
  }
  dispose() {
    this._textDiffEditorModel = void 0, super.dispose();
  }
}
function Od(i, e = Yi) {
  return nL(i, e) ? i.charAt(0).toUpperCase() + i.slice(1) : i;
}
function y6(i, e) {
  return i.replace(/^~($|\/|\\)/, `${e}$1`);
}
const gk = "…", Fd = "\\\\", Ud = "~";
function x6(i, e = Jn) {
  const t = new Array(i.length);
  let n = !1;
  for (let r = 0; r < i.length; r++) {
    const s = i[r];
    if (s === "") {
      t[r] = `.${e}`;
      continue;
    }
    if (!s) {
      t[r] = s;
      continue;
    }
    n = !0;
    let o = "", a = s;
    a.indexOf(Fd) === 0 ? (o = a.substr(0, a.indexOf(Fd) + Fd.length), a = a.substr(a.indexOf(Fd) + Fd.length)) : a.indexOf(e) === 0 ? (o = a.substr(0, a.indexOf(e) + e.length), a = a.substr(a.indexOf(e) + e.length)) : a.indexOf(Ud) === 0 && (o = a.substr(0, a.indexOf(Ud) + Ud.length), a = a.substr(a.indexOf(Ud) + Ud.length));
    const l = a.split(e);
    for (let c = 1; n && c <= l.length; c++)
      for (let u = l.length - c; n && u >= 0; u--) {
        n = !1;
        let d = l.slice(u, u + c).join(e);
        for (let f = 0; !n && f < i.length; f++)
          if (f !== r && i[f] && i[f].indexOf(d) > -1) {
            const p = u + c === l.length, v = u > 0 && i[f].indexOf(e) > -1 ? e + d : d, _ = i[f].endsWith(v);
            n = !p || _;
          }
        if (!n) {
          let f = "";
          (l[0].endsWith(":") || o !== "") && (u === 1 && (u = 0, c++, d = l[0] + e + d), u > 0 && (f = l[0] + e), f = o + f), u > 0 && (f = f + gk + e), f = f + d, u + c < l.length && (f = f + e + gk), t[r] = f;
        }
      }
    n && (t[r] = s);
  }
  return t;
}
var mk;
(function(i) {
  i[i.TEXT = 0] = "TEXT", i[i.VARIABLE = 1] = "VARIABLE", i[i.SEPARATOR = 2] = "SEPARATOR";
})(mk || (mk = {}));
function _k(i) {
  const e = i;
  return typeof (e == null ? void 0 : e.resolve) == "function" && typeof (e == null ? void 0 : e.isResolved) == "function";
}
var vk;
(function(i) {
  i[i.ACTIVATE = 1] = "ACTIVATE", i[i.RESTORE = 2] = "RESTORE", i[i.PRESERVE = 3] = "PRESERVE";
})(vk || (vk = {}));
var wk;
(function(i) {
  i[i.PICK = 0] = "PICK", i[i.EXCLUSIVE_ONLY = 1] = "EXCLUSIVE_ONLY";
})(wk || (wk = {}));
var bk;
(function(i) {
  i[i.API = 0] = "API", i[i.USER = 1] = "USER";
})(bk || (bk = {}));
var yk;
(function(i) {
  i[i.Center = 0] = "Center", i[i.CenterIfOutsideViewport = 1] = "CenterIfOutsideViewport", i[i.NearTop = 2] = "NearTop", i[i.NearTopIfOutsideViewport = 3] = "NearTopIfOutsideViewport";
})(yk || (yk = {}));
var vh;
(function(i) {
  i.PROGRAMMATIC = "api", i.NAVIGATION = "code.navigation", i.JUMP = "code.jump";
})(vh || (vh = {}));
var wg, Il;
let xk = (Il = class extends gb {
  get typeId() {
    return wg.ID;
  }
  get editorId() {
    return this.modified.editorId === this.original.editorId ? this.modified.editorId : void 0;
  }
  get capabilities() {
    let e = super.capabilities;
    return this.labels.forceDescription && (e |= Ln.ForceDescription), e;
  }
  constructor(e, t, n, r, s, o) {
    super(e, t, n, r, o), this.original = n, this.modified = r, this.forceOpenAsBinary = s, this.cachedModel = void 0, this.labels = this.computeLabels();
  }
  computeLabels() {
    let e, t = !1;
    if (this.preferredName)
      e = this.preferredName;
    else {
      const u = this.original.getName(), d = this.modified.getName();
      e = h(3942, "{0} ↔ {1}", u, d), t = u === d;
    }
    let n, r, s;
    if (this.preferredDescription)
      n = this.preferredDescription, r = this.preferredDescription, s = this.preferredDescription;
    else {
      n = this.computeLabel(this.original.getDescription(ti.SHORT), this.modified.getDescription(ti.SHORT)), s = this.computeLabel(this.original.getDescription(ti.LONG), this.modified.getDescription(ti.LONG));
      const u = this.original.getDescription(ti.MEDIUM), d = this.modified.getDescription(ti.MEDIUM);
      if (typeof u == "string" && typeof d == "string" && (u || d)) {
        const [f, p] = x6([u, d]);
        r = this.computeLabel(f, p);
      }
    }
    let o = this.computeLabel(this.original.getTitle(ti.SHORT) ?? this.original.getName(), this.modified.getTitle(ti.SHORT) ?? this.modified.getName(), " ↔ "), a = this.computeLabel(this.original.getTitle(ti.MEDIUM) ?? this.original.getName(), this.modified.getTitle(ti.MEDIUM) ?? this.modified.getName(), " ↔ "), l = this.computeLabel(this.original.getTitle(ti.LONG) ?? this.original.getName(), this.modified.getTitle(ti.LONG) ?? this.modified.getName(), " ↔ ");
    const c = this.getPreferredTitle();
    return c && (o = `${c} (${o})`, a = `${c} (${a})`, l = `${c} (${l})`), { name: e, shortDescription: n, mediumDescription: r, longDescription: s, forceDescription: t, shortTitle: o, mediumTitle: a, longTitle: l };
  }
  computeLabel(e, t, n = " - ") {
    if (!(!e || !t))
      return e === t ? t : `${e}${n}${t}`;
  }
  getName() {
    return this.labels.name;
  }
  getDescription(e = ti.MEDIUM) {
    switch (e) {
      case ti.SHORT:
        return this.labels.shortDescription;
      case ti.LONG:
        return this.labels.longDescription;
      case ti.MEDIUM:
      default:
        return this.labels.mediumDescription;
    }
  }
  getTitle(e) {
    switch (e) {
      case ti.SHORT:
        return this.labels.shortTitle;
      case ti.LONG:
        return this.labels.longTitle;
      default:
      case ti.MEDIUM:
        return this.labels.mediumTitle;
    }
  }
  async resolve() {
    var t;
    const e = await this.createModel();
    return (t = this.cachedModel) == null || t.dispose(), this.cachedModel = e, this.cachedModel;
  }
  prefersEditorPane(e) {
    return this.forceOpenAsBinary ? e.find((t) => t.typeId === E9) : e.find((t) => t.typeId === x9);
  }
  async createModel() {
    const [e, t] = await Promise.all([
      this.original.resolve(),
      this.modified.resolve()
    ]);
    return t instanceof wm && e instanceof wm ? new b6(e, t) : new r5(
      _k(e) ? e : void 0,
      _k(t) ? t : void 0
    );
  }
  toUntyped(e) {
    const t = super.toUntyped(e);
    if (t)
      return {
        ...t,
        modified: t.primary,
        original: t.secondary
      };
  }
  matches(e) {
    return this === e ? !0 : e instanceof wg ? this.modified.matches(e.modified) && this.original.matches(e.original) && e.forceOpenAsBinary === this.forceOpenAsBinary : Bs(e) ? this.modified.matches(e.modified) && this.original.matches(e.original) : !1;
  }
  dispose() {
    this.cachedModel && (this.cachedModel.dispose(), this.cachedModel = void 0), super.dispose();
  }
}, wg = Il, Il.ID = "workbench.editors.diffEditorInput", Il);
xk = wg = z([
  O(5, t5)
], xk);
var sr;
new P("workbenchState", void 0, { type: "string", description: h(
  3866,
  "The kind of workspace opened in the window, either 'empty' (no workspace), 'folder' (single folder) or 'workspace' (multi-root workspace)"
) });
new P("workspaceFolderCount", 0, h(3867, "The number of root folders in the workspace"));
new P("openFolderWorkspaceSupport", !0, !0);
new P("enterMultiRootWorkspaceSupport", !0, !0);
new P("emptyWorkspaceSupport", !0, !0);
new P("dirtyWorkingCopies", !1, h(3868, "Whether there are any working copies with unsaved changes"));
const E6 = new P("remoteName", "", h(
  3869,
  "The name of the remote the window is connected to or an empty string if not connected to any remote"
));
new P("virtualWorkspace", "", h(
  3870,
  "The scheme of the current workspace is from a virtual file system or an empty string."
));
new P("temporaryWorkspace", !1, h(
  3871,
  "The scheme of the current workspace is from a temporary file system."
));
new P("hasWebFileSystemAccess", !1, !0);
new P("embedderIdentifier", void 0, h(
  3872,
  "The identifier of the embedder according to the product service, if one is defined"
));
new P("isSandboxWorkspace", !1, !0);
new P("isFullscreen", !1, h(3873, "Whether the main window is in fullscreen mode"));
new P("isAuxiliaryWindowFocusedContext", !1, h(3874, "Whether an auxiliary window is focused"));
new P("isAuxiliaryWindow", !1, h(3875, "Window is an auxiliary window"));
new P("activeEditorIsDirty", !1, h(3876, "Whether the active editor has unsaved changes"));
new P("activeEditorIsNotPreview", !1, h(3877, "Whether the active editor is not in preview mode"));
new P("activeEditorIsFirstInGroup", !1, h(3878, "Whether the active editor is the first one in its group"));
new P("activeEditorIsLastInGroup", !1, h(3879, "Whether the active editor is the last one in its group"));
new P("activeEditorIsPinned", !1, h(3880, "Whether the active editor is pinned"));
new P("activeEditorIsReadonly", !1, h(3881, "Whether the active editor is read-only"));
new P("activeCompareEditorCanSwap", !1, h(3882, "Whether the active compare editor can swap sides"));
new P("activeEditorCanToggleReadonly", !0, h(
  3883,
  "Whether the active editor can toggle between being read-only or writeable"
));
new P("activeEditorCanRevert", !1, h(3884, "Whether the active editor can revert"));
new P("activeEditorCanSplitInGroup", !0);
new P("activeEditor", null, { type: "string", description: h(3885, "The identifier of the active editor") });
new P("activeEditorAvailableEditorIds", "", h(
  3886,
  "The available editor identifiers that are usable for the active editor"
));
new P("textCompareEditorVisible", !1, h(3887, "Whether a text compare editor is visible"));
new P("textCompareEditorActive", !1, h(3888, "Whether a text compare editor is active"));
new P("sideBySideEditorActive", !1, h(3889, "Whether a side by side editor is active"));
new P("groupEditorsCount", 0, h(3890, "The number of opened editor groups"));
new P("activeEditorGroupEmpty", !1, h(3891, "Whether the active editor group is empty"));
new P("activeEditorGroupIndex", 0, h(3892, "The index of the active editor group"));
new P("activeEditorGroupLast", !1, h(3893, "Whether the active editor group is the last group"));
new P("activeEditorGroupLocked", !1, h(3894, "Whether the active editor group is locked"));
new P("multipleEditorGroups", !1, h(3895, "Whether there are multiple editor groups opened"));
new P("multipleEditorsSelectedInGroup", !1, h(3896, "Whether multiple editors have been selected in an editor group"));
new P("twoEditorsSelectedInGroup", !1, h(3897, "Whether exactly two editors have been selected in an editor group"));
new P(
  "SelectedEditorsInGroupFileOrUntitledResourceContextKey",
  !0,
  h(
    3898,
    "Whether all selected editors in a group have a file or untitled resource associated"
  )
);
new P("editorPartMultipleEditorGroups", !1, h(3899, "Whether there are multiple editor groups opened in an editor part"));
new P("editorPartMaximizedEditorGroup", !1, h(3900, "Editor Part has a maximized group"));
new P("editorIsOpen", !1, h(3901, "Whether an editor is open"));
new P("inZenMode", !1, h(3902, "Whether Zen mode is enabled"));
new P("isCenteredLayout", !1, h(3903, "Whether centered layout is enabled for the main editor"));
new P("splitEditorsVertically", !1, h(3904, "Whether editors split vertically"));
new P("mainEditorAreaVisible", !0, h(3905, "Whether the editor area in the main window is visible"));
new P("editorTabsVisible", !0, h(3906, "Whether editor tabs are visible"));
new P("sideBarVisible", !1, h(3907, "Whether the sidebar is visible"));
new P("sideBarFocus", !1, h(3908, "Whether the sidebar has keyboard focus"));
new P("activeViewlet", "", h(3909, "The identifier of the active viewlet"));
new P("statusBarFocused", !1, h(3910, "Whether the status bar has keyboard focus"));
new P("titleBarStyle", "custom", h(3911, "Style of the window title bar"));
new P("titleBarVisible", !1, h(3912, "Whether the title bar is visible"));
new P("isCompactTitleBar", !1, h(3913, "Title bar is in compact mode"));
new P("bannerFocused", !1, h(3914, "Whether the banner has keyboard focus"));
new P("notificationFocus", !0, h(3915, "Whether a notification has keyboard focus"));
new P("notificationCenterVisible", !1, h(3916, "Whether the notifications center is visible"));
new P("notificationToastsVisible", !1, h(3917, "Whether a notification toast is visible"));
new P("activeAuxiliary", "", h(3918, "The identifier of the active auxiliary panel"));
new P("auxiliaryBarFocus", !1, h(3919, "Whether the auxiliary bar has keyboard focus"));
new P("auxiliaryBarVisible", !1, h(3920, "Whether the auxiliary bar is visible"));
new P("auxiliaryBarMaximized", !1, h(3921, "Whether the auxiliary bar is maximized"));
new P("activePanel", "", h(3922, "The identifier of the active panel"));
new P("panelFocus", !1, h(3923, "Whether the panel has keyboard focus"));
new P("panelPosition", "bottom", h(3924, "The position of the panel, always 'bottom'"));
new P("panelAlignment", "center", h(
  3925,
  "The alignment of the panel, either 'center', 'left', 'right' or 'justify'"
));
new P("panelVisible", !1, h(3926, "Whether the panel is visible"));
new P("panelMaximized", !1, h(3927, "Whether the panel is maximized"));
new P("focusedView", "", h(3928, "The identifier of the view that has keyboard focus"));
var sn;
let Ek = (sn = class {
  constructor(e, t, n, r) {
    this._contextKeyService = e, this._fileService = t, this._languageService = n, this._modelService = r, this._disposables = new Te(), this._schemeKey = sr.Scheme.bindTo(this._contextKeyService), this._filenameKey = sr.Filename.bindTo(this._contextKeyService), this._dirnameKey = sr.Dirname.bindTo(this._contextKeyService), this._pathKey = sr.Path.bindTo(this._contextKeyService), this._langIdKey = sr.LangId.bindTo(this._contextKeyService), this._resourceKey = sr.Resource.bindTo(this._contextKeyService), this._extensionKey = sr.Extension.bindTo(this._contextKeyService), this._hasResource = sr.HasResource.bindTo(this._contextKeyService), this._isFileSystemResource = sr.IsFileSystemResource.bindTo(this._contextKeyService), this._disposables.add(t.onDidChangeFileSystemProviderRegistrations(() => {
      const s = this.get();
      this._isFileSystemResource.set(!!(s && t.hasProvider(s)));
    })), this._disposables.add(r.onModelAdded((s) => {
      Kc(s.uri, this.get()) && this._setLangId();
    })), this._disposables.add(r.onModelLanguageChanged((s) => {
      Kc(s.model.uri, this.get()) && this._setLangId();
    }));
  }
  dispose() {
    this._disposables.dispose();
  }
  _setLangId() {
    var n;
    const e = this.get();
    if (!e) {
      this._langIdKey.set(null);
      return;
    }
    const t = ((n = this._modelService.getModel(e)) == null ? void 0 : n.getLanguageId()) ?? this._languageService.guessLanguageIdByFilepathOrFirstLine(e);
    this._langIdKey.set(t);
  }
  set(e) {
    e = e ?? void 0, !Kc(this._value, e) && (this._value = e, this._contextKeyService.bufferChangeEvents(() => {
      this._resourceKey.set(e ? e.toString() : null), this._schemeKey.set(e ? e.scheme : null), this._filenameKey.set(e ? Xs(e) : null), this._dirnameKey.set(e ? this.uriToPath(Z1(e)) : null), this._pathKey.set(e ? this.uriToPath(e) : null), this._setLangId(), this._extensionKey.set(e ? hL(e) : null), this._hasResource.set(!!e), this._isFileSystemResource.set(e ? this._fileService.hasProvider(e) : !1);
    }));
  }
  uriToPath(e) {
    return e.scheme === fe.file ? e.fsPath : e.path;
  }
  reset() {
    this._value = void 0, this._contextKeyService.bufferChangeEvents(() => {
      this._resourceKey.reset(), this._schemeKey.reset(), this._filenameKey.reset(), this._dirnameKey.reset(), this._pathKey.reset(), this._langIdKey.reset(), this._extensionKey.reset(), this._hasResource.reset(), this._isFileSystemResource.reset();
    });
  }
  get() {
    return this._value;
  }
}, sr = sn, sn.Scheme = new P("resourceScheme", void 0, { type: "string", description: h(3929, "The scheme of the resource") }), sn.Filename = new P(
  "resourceFilename",
  void 0,
  { type: "string", description: h(3930, "The file name of the resource") }
), sn.Dirname = new P(
  "resourceDirname",
  void 0,
  { type: "string", description: h(3931, "The folder name the resource is contained in") }
), sn.Path = new P("resourcePath", void 0, { type: "string", description: h(3932, "The full path of the resource") }), sn.LangId = new P("resourceLangId", void 0, { type: "string", description: h(3933, "The language identifier of the resource") }), sn.Resource = new P("resource", void 0, { type: "URI", description: h(3934, "The full value of the resource including scheme and path") }), sn.Extension = new P(
  "resourceExtname",
  void 0,
  { type: "string", description: h(3935, "The extension name of the resource") }
), sn.HasResource = new P("resourceSet", void 0, { type: "boolean", description: h(3936, "Whether a resource is present or not") }), sn.IsFileSystemResource = new P(
  "isFileSystemResource",
  void 0,
  { type: "boolean", description: h(3937, "Whether the resource is backed by a file system provider") }
), sn);
Ek = sr = z([
  O(0, iS),
  O(1, qP),
  O(2, ZP),
  O(3, e5)
], Ek);
var Sk;
(function(i) {
  i.UseFileStorage = "chat.useFileStorage", i.AgentEnabled = "chat.agent.enabled", i.Edits2Enabled = "chat.edits2.enabled", i.ExtensionToolsEnabled = "chat.extensionTools.enabled", i.EditRequests = "chat.editRequests", i.EnableMath = "chat.math.enabled", i.CheckpointsEnabled = "chat.checkpoints.enabled", i.AgentSessionsViewLocation = "chat.agentSessionsViewLocation";
})(Sk || (Sk = {}));
var Zh;
(function(i) {
  i.Ask = "ask", i.Edit = "edit", i.Agent = "agent";
})(Zh || (Zh = {}));
var ln;
(function(i) {
  i.Panel = "panel", i.Terminal = "terminal", i.Notebook = "notebook", i.Editor = "editor";
})(ln || (ln = {}));
(function(i) {
  function e(t) {
    switch (t) {
      case "panel":
        return i.Panel;
      case "terminal":
        return i.Terminal;
      case "notebook":
        return i.Notebook;
      case "editor":
        return i.Editor;
    }
    return i.Panel;
  }
  i.fromRaw = e;
})(ln || (ln = {}));
var ef;
(function(i) {
  i.responseVote = new P(
    "chatSessionResponseVote",
    "",
    { type: "string", description: h(
      5354,
      "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string."
    ) }
  ), i.responseDetectedAgentCommand = new P(
    "chatSessionResponseDetectedAgentOrCommand",
    !1,
    { type: "boolean", description: h(5355, "When the agent or command was automatically detected") }
  ), i.responseSupportsIssueReporting = new P(
    "chatResponseSupportsIssueReporting",
    !1,
    { type: "boolean", description: h(5356, "True when the current chat response supports issue reporting.") }
  ), i.responseIsFiltered = new P(
    "chatSessionResponseFiltered",
    !1,
    { type: "boolean", description: h(5357, "True when the chat response was filtered out by the server.") }
  ), i.responseHasError = new P(
    "chatSessionResponseError",
    !1,
    { type: "boolean", description: h(5358, "True when the chat response resulted in an error.") }
  ), i.requestInProgress = new P(
    "chatSessionRequestInProgress",
    !1,
    { type: "boolean", description: h(5359, "True when the current request is still in progress.") }
  ), i.currentlyEditing = new P(
    "chatSessionCurrentlyEditing",
    !1,
    { type: "boolean", description: h(5360, "True when the current request is being edited.") }
  ), i.currentlyEditingInput = new P(
    "chatSessionCurrentlyEditingInput",
    !1,
    { type: "boolean", description: h(5361, "True when the current request input at the bottom is being edited.") }
  ), i.isRequestPaused = new P(
    "chatRequestIsPaused",
    !1,
    { type: "boolean", description: h(5362, "True when the current request is paused.") }
  ), i.canRequestBePaused = new P(
    "chatCanRequestBePaused",
    !1,
    { type: "boolean", description: h(5363, "True when the current request can be paused.") }
  ), i.isResponse = new P("chatResponse", !1, { type: "boolean", description: h(5364, "The chat item is a response.") }), i.isRequest = new P("chatRequest", !1, { type: "boolean", description: h(5365, "The chat item is a request") }), i.itemId = new P("chatItemId", "", { type: "string", description: h(5366, "The id of the chat item.") }), i.lastItemId = new P("chatLastItemId", [], { type: "string", description: h(5367, "The id of the last chat item.") }), i.editApplied = new P("chatEditApplied", !1, { type: "boolean", description: h(5368, "True when the chat text edits have been applied.") }), i.inputHasText = new P("chatInputHasText", !1, { type: "boolean", description: h(5369, "True when the chat input has text.") }), i.inputHasFocus = new P("chatInputHasFocus", !1, { type: "boolean", description: h(5370, "True when the chat input has focus.") }), i.inChatInput = new P("inChatInput", !1, { type: "boolean", description: h(5371, "True when focus is in the chat input, false otherwise.") }), i.inChatSession = new P("inChat", !1, { type: "boolean", description: h(5372, "True when focus is in the chat widget, false otherwise.") }), i.inChatEditor = new P("inChatEditor", !1, { type: "boolean", description: h(5373, "Whether focus is in a chat editor.") }), i.hasPromptFile = new P(
    "chatPromptFileAttached",
    !1,
    { type: "boolean", description: h(5374, "True when the chat has a prompt file attached.") }
  ), i.chatModeKind = new P(
    "chatMode",
    Zh.Ask,
    { type: "string", description: h(5375, "The 'kind' of the current chat mode- Agent for custom modes.") }
  ), i.chatToolCount = new P("chatToolCount", 0, { type: "number", description: h(5376, "The number of tools available in the current chat mode.") }), i.chatToolGroupingThreshold = new P(
    "chat.toolGroupingThreshold",
    0,
    { type: "number", description: h(5377, "The number of tools at which we start doing virtual grouping.") }
  ), i.supported = Jt.or(f6.negate(), E6.notEqualsTo(""), Jt.has("config.chat.experimental.serverlessWebEnabled")), i.enabled = new P("chatIsEnabled", !1, { type: "boolean", description: h(
    5378,
    "True when chat is enabled because a default chat participant is activated with an implementation."
  ) }), i.lockedToCodingAgent = new P(
    "lockedToCodingAgent",
    !1,
    { type: "boolean", description: h(5379, "True when the chat widget is locked to the coding agent session.") }
  ), i.extensionParticipantRegistered = new P(
    "chatPanelExtensionParticipantRegistered",
    !1,
    { type: "boolean", description: h(
      5380,
      "True when a default chat participant is registered for the panel from an extension."
    ) }
  ), i.panelParticipantRegistered = new P(
    "chatPanelParticipantRegistered",
    !1,
    { type: "boolean", description: h(5381, "True when a default chat participant is registered for the panel.") }
  ), i.chatEditingCanUndo = new P(
    "chatEditingCanUndo",
    !1,
    { type: "boolean", description: h(
      5382,
      "True when it is possible to undo an interaction in the editing panel."
    ) }
  ), i.chatEditingCanRedo = new P(
    "chatEditingCanRedo",
    !1,
    { type: "boolean", description: h(
      5383,
      "True when it is possible to redo an interaction in the editing panel."
    ) }
  ), i.languageModelsAreUserSelectable = new P(
    "chatModelsAreUserSelectable",
    !1,
    { type: "boolean", description: h(5384, "True when the chat model can be selected manually by the user.") }
  ), i.extensionInvalid = new P(
    "chatExtensionInvalid",
    !1,
    { type: "boolean", description: h(
      5385,
      "True when the installed chat extension is invalid and needs to be updated."
    ) }
  ), i.inputCursorAtTop = new P("chatCursorAtTop", !1), i.inputHasAgent = new P("chatInputHasAgent", !1), i.location = new P("chatLocation", void 0), i.inQuickChat = new P("quickChatHasFocus", !1, { type: "boolean", description: h(5386, "True when the quick chat UI has focus, false otherwise.") }), i.hasFileAttachments = new P(
    "chatHasFileAttachments",
    !1,
    { type: "boolean", description: h(5387, "True when the chat has file attachments.") }
  ), i.remoteJobCreating = new P(
    "chatRemoteJobCreating",
    !1,
    { type: "boolean", description: h(5388, "True when a remote coding agent job is being created.") }
  ), i.hasRemoteCodingAgent = new P("hasRemoteCodingAgent", !1, h(5389, "Whether any remote coding agent is available")), i.enableRemoteCodingAgentPromptFileOverlay = new P("enableRemoteCodingAgentPromptFileOverlay", !1, h(
    5390,
    "Whether the remote coding agent prompt file overlay feature is enabled"
  )), i.skipChatRequestInProgressMessage = new P(
    "chatSkipRequestInProgressMessage",
    !1,
    { type: "boolean", description: h(5391, "True when the chat request in progress message should be skipped.") }
  ), i.Setup = {
    hidden: new P("chatSetupHidden", !1, !0),
    installed: new P("chatSetupInstalled", !1, !0),
    disabled: new P("chatSetupDisabled", !1, !0),
    untrusted: new P("chatSetupUntrusted", !1, !0),
    later: new P("chatSetupLater", !1, !0)
  }, i.Entitlement = {
    signedOut: new P("chatEntitlementSignedOut", !1, !0),
    canSignUp: new P("chatPlanCanSignUp", !1, !0),
    free: new P("chatPlanFree", !1, !0),
    pro: new P("chatPlanPro", !1, !0),
    proPlus: new P("chatPlanProPlus", !1, !0),
    business: new P("chatPlanBusiness", !1, !0),
    enterprise: new P("chatPlanEnterprise", !1, !0)
  }, i.chatQuotaExceeded = new P("chatQuotaExceeded", !1, !0), i.completionsQuotaExceeded = new P("completionsQuotaExceeded", !1, !0), i.Editing = {
    hasToolConfirmation: new P(
      "chatHasToolConfirmation",
      !1,
      { type: "boolean", description: h(5392, "True when a tool confirmation is present.") }
    )
  }, i.Tools = {
    toolsCount: new P("toolsCount", 0, { type: "number", description: h(5393, "The count of tools available in the chat.") })
  }, i.Modes = {
    hasCustomChatModes: new P(
      "chatHasCustomChatModes",
      !1,
      { type: "boolean", description: h(5394, "True when the chat has custom chat modes available.") }
    )
  }, i.panelLocation = new P(
    "chatPanelLocation",
    void 0,
    { type: "number", description: h(5395, "The location of the chat panel.") }
  );
})(ef || (ef = {}));
var Dk;
(function(i) {
  i.inEditingMode = Jt.or(ef.chatModeKind.isEqualTo(Zh.Edit), ef.chatModeKind.isEqualTo(Zh.Agent));
})(Dk || (Dk = {}));
var Ss;
(function(i) {
  i[i.System = 0] = "System", i[i.User = 1] = "User", i[i.Assistant = 2] = "Assistant";
})(Ss || (Ss = {}));
var kk;
(function(i) {
  i[i.Assistant = 0] = "Assistant", i[i.User = 1] = "User";
})(kk || (kk = {}));
var Ik;
(function(i) {
  i.PNG = "image/png", i.JPEG = "image/jpeg", i.GIF = "image/gif", i.WEBP = "image/webp", i.BMP = "image/bmp";
})(Ik || (Ik = {}));
var Ck;
(function(i) {
  i.Low = "low", i.High = "high";
})(Ck || (Ck = {}));
var Tk;
(function(i) {
  function e(n) {
    var s, o;
    return (typeof ((s = n.capabilities) == null ? void 0 : s.agentMode) > "u" || n.capabilities.agentMode) && !!((o = n.capabilities) != null && o.toolCalling);
  }
  i.suitableForAgentMode = e;
  function t(n) {
    return n.modelPickerCategory === void 0 ? `${n.name} (${n.family})` : n.name;
  }
  i.asQualifiedName = t;
})(Tk || (Tk = {}));
const Pk = {
  type: "object",
  properties: {
    vendor: {
      type: "string",
      description: h(5429, "A globally unique vendor of language models.")
    },
    displayName: {
      type: "string",
      description: h(5430, "The display name of the language model vendor.")
    },
    managementCommand: {
      type: "string",
      description: h(
        5431,
        "A command to manage the language model vendor, e.g. 'Manage Copilot models'. This is used in the chat model picker. If not provided, a gear icon is not rendered during vendor selection."
      )
    }
  }
}, S6 = XP.registerExtensionPoint({
  extensionPoint: "languageModels",
  jsonSchema: {
    description: h(5432, "Contribute language models of a specific vendor."),
    oneOf: [
      Pk,
      {
        type: "array",
        items: Pk
      }
    ]
  },
  activationEventsGenerator: (i, e) => {
    for (const t of i)
      e.push(`onLanguageModelChat:${t.vendor}`);
  }
});
let Ak = class {
  constructor(e, t, n, r) {
    this._extensionService = e, this._logService = t, this._storageService = n, this._store = new Te(), this._providers = /* @__PURE__ */ new Map(), this._modelCache = /* @__PURE__ */ new Map(), this._vendors = /* @__PURE__ */ new Map(), this._modelPickerUserPreferences = {}, this._onLanguageModelChange = this._store.add(new M()), this.onDidChangeLanguageModels = this._onLanguageModelChange.event, this._hasUserSelectableModels = ef.languageModelsAreUserSelectable.bindTo(r), this._modelPickerUserPreferences = this._storageService.getObject("chatModelPickerPreferences", Kt.PROFILE, this._modelPickerUserPreferences), this._store.add(this.onDidChangeLanguageModels(() => {
      this._hasUserSelectableModels.set(this._modelCache.size > 0 && Array.from(this._modelCache.values()).some((s) => s.isUserSelectable));
    })), this._store.add(S6.setHandler((s) => {
      this._vendors.clear();
      for (const o of s) {
        if (!dt(o.description, "chatProvider")) {
          o.collector.error(h(5433, "This contribution point requires the 'chatProvider' proposal."));
          continue;
        }
        for (const a of Bi.wrap(o.value)) {
          if (this._vendors.has(a.vendor)) {
            o.collector.error(h(
              5434,
              "The vendor '{0}' is already registered and cannot be registered twice",
              a.vendor
            ));
            continue;
          }
          if (qh(a.vendor)) {
            o.collector.error(h(5435, "The vendor field cannot be empty."));
            continue;
          }
          if (a.vendor.trim() !== a.vendor) {
            o.collector.error(h(5436, "The vendor field cannot start or end with whitespace."));
            continue;
          }
          this._vendors.set(a.vendor, a);
        }
      }
      for (const [o, a] of this._providers)
        this._vendors.has(o) || this._providers.delete(o);
    }));
  }
  dispose() {
    this._store.dispose(), this._providers.clear();
  }
  updateModelPickerPreference(e, t) {
    const n = this._modelCache.get(e);
    if (!n) {
      this._logService.warn(`[LM] Cannot update model picker preference for unknown model ${e}`);
      return;
    }
    this._modelPickerUserPreferences[e] = t, t === n.isUserSelectable ? (delete this._modelPickerUserPreferences[e], this._storageService.store("chatModelPickerPreferences", this._modelPickerUserPreferences, Kt.PROFILE, mm.USER)) : n.isUserSelectable !== t && this._storageService.store("chatModelPickerPreferences", this._modelPickerUserPreferences, Kt.PROFILE, mm.USER), this._onLanguageModelChange.fire(), this._logService.trace(`[LM] Updated model picker preference for ${e} to ${t}`);
  }
  getVendors() {
    return Array.from(this._vendors.values());
  }
  getLanguageModelIds() {
    return Array.from(this._modelCache.keys());
  }
  lookupLanguageModel(e) {
    const t = this._modelCache.get(e);
    return t && this._modelPickerUserPreferences[e] !== void 0 ? { ...t, isUserSelectable: this._modelPickerUserPreferences[e] } : t;
  }
  _clearModelCache(e) {
    typeof e == "string" && (e = [e]);
    for (const t of e)
      for (const [n, r] of this._modelCache.entries())
        r.vendor === t && this._modelCache.delete(n);
  }
  async resolveLanguageModels(e, t) {
    typeof e == "string" && (e = [e]), this._clearModelCache(e);
    for (const n of e) {
      const r = this._providers.get(n);
      if (!r) {
        this._logService.warn(`[LM] No provider registered for vendor ${n}`);
        continue;
      }
      try {
        const s = await r.prepareLanguageModelChat({ silent: t }, Dt.None);
        for (const o of s) {
          if (this._modelCache.has(o.identifier)) {
            this._logService.warn(`[LM] Model ${o.identifier} is already registered. Skipping.`);
            continue;
          }
          this._modelCache.set(o.identifier, o.metadata);
        }
        this._logService.trace(`[LM] Resolved language models for vendor ${n}`, s);
      } catch (s) {
        this._logService.error(`[LM] Error resolving language models for vendor ${n}:`, s);
      }
    }
    this._onLanguageModelChange.fire();
  }
  async selectLanguageModels(e, t) {
    if (e.vendor)
      await this._extensionService.activateByEvent(`onLanguageModelChat:${e.vendor}}`), await this.resolveLanguageModels([e.vendor], !t);
    else {
      const r = Array.from(this._vendors.keys()), s = r.map(
        (o) => this._extensionService.activateByEvent(`onLanguageModelChat:${o}`)
      );
      await Promise.all(s), await this.resolveLanguageModels(r, !t);
    }
    const n = [];
    for (const [r, s] of this._modelCache)
      (e.vendor === void 0 || s.vendor === e.vendor) && (e.family === void 0 || s.family === e.family) && (e.version === void 0 || s.version === e.version) && (e.id === void 0 || s.id === e.id) && n.push(r);
    return this._logService.trace("[LM] selected language models", e, n), n;
  }
  registerLanguageModelProvider(e, t) {
    if (this._logService.trace("[LM] registering language model provider", e, t), !this._vendors.has(e))
      throw new Error(`Chat model provider uses UNKNOWN vendor ${e}.`);
    if (this._providers.has(e))
      throw new Error(`Chat model provider for vendor ${e} is already registered.`);
    return this._providers.set(e, t), this.resolveLanguageModels(e, !0).then(() => {
      this._onLanguageModelChange.fire();
    }), Ie(() => {
      this._logService.trace("[LM] UNregistered language model provider", e), this._clearModelCache(e), this._providers.delete(e);
    });
  }
  async sendChatRequest(e, t, n, r, s) {
    var a;
    const o = this._providers.get(((a = this._modelCache.get(e)) == null ? void 0 : a.vendor) || "");
    if (!o)
      throw new Error(`Chat provider for model ${e} is not registered.`);
    return o.sendChatRequest(e, n, t, r, s);
  }
  computeTokenLength(e, t, n) {
    const r = this._modelCache.get(e);
    if (!r)
      throw new Error(`Chat model ${e} could not be found.`);
    const s = this._providers.get(r.vendor);
    if (!s)
      throw new Error(`Chat provider for model ${e} is not registered.`);
    return s.provideTokenCount(e, t, n);
  }
};
Ak = z([
  O(0, a6),
  O(1, ot),
  O(2, U9),
  O(3, iS)
], Ak);
new P("debugType", void 0, { type: "string", description: h(6392, "Debug type of the active debug session. For example 'python'.") });
new P(
  "debugConfigurationType",
  void 0,
  { type: "string", description: h(
    6393,
    "Debug type of the selected launch configuration. For example 'python'."
  ) }
);
new P("debugState", "inactive", { type: "string", description: h(
  6394,
  "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'."
) });
const D6 = "debugUx";
new P(
  D6,
  "default",
  { type: "string", description: h(
    6395,
    "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet."
  ) }
);
new P("hasDebugged", !1, { type: "boolean", description: h(
  6396,
  "True when a debug session has been started at least once, false otherwise."
) });
new P("inDebugMode", !1, { type: "boolean", description: h(6397, "True when debugging, false otherwise.") });
new P("inDebugRepl", !1, { type: "boolean", description: h(6398, "True when focus is in the debug console, false otherwise.") });
new P(
  "breakpointWidgetVisible",
  !1,
  { type: "boolean", description: h(
    6399,
    "True when breakpoint editor zone widget is visible, false otherwise."
  ) }
);
new P(
  "inBreakpointWidget",
  !1,
  { type: "boolean", description: h(
    6400,
    "True when focus is in the breakpoint editor zone widget, false otherwise."
  ) }
);
new P("breakpointsFocused", !0, { type: "boolean", description: h(6401, "True when the BREAKPOINTS view is focused, false otherwise.") });
new P(
  "watchExpressionsFocused",
  !0,
  { type: "boolean", description: h(6402, "True when the WATCH view is focused, false otherwise.") }
);
new P(
  "watchExpressionsExist",
  !1,
  { type: "boolean", description: h(6403, "True when at least one watch expression exists, false otherwise.") }
);
new P("variablesFocused", !0, { type: "boolean", description: h(6404, "True when the VARIABLES views is focused, false otherwise") });
new P(
  "expressionSelected",
  !1,
  { type: "boolean", description: h(
    6405,
    "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise."
  ) }
);
new P(
  "breakpointInputFocused",
  !1,
  { type: "boolean", description: h(6406, "True when the input box has focus in the BREAKPOINTS view.") }
);
new P(
  "callStackItemType",
  void 0,
  { type: "string", description: h(
    6407,
    "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'"
  ) }
);
new P(
  "callStackSessionIsAttach",
  !1,
  { type: "boolean", description: h(
    6408,
    "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view."
  ) }
);
new P(
  "callStackItemStopped",
  !1,
  { type: "boolean", description: h(
    6409,
    "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view."
  ) }
);
new P(
  "callStackSessionHasOneThread",
  !1,
  { type: "boolean", description: h(
    6410,
    "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view."
  ) }
);
new P("callStackFocused", !0, { type: "boolean", description: h(6411, "True when the CALLSTACK view is focused, false otherwise.") });
new P("watchItemType", void 0, { type: "string", description: h(
  6412,
  "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'"
) });
new P("canViewMemory", void 0, { type: "boolean", description: h(
  6413,
  "Indicates whether the item in the view has an associated memory refrence."
) });
new P(
  "breakpointItemType",
  void 0,
  { type: "string", description: h(
    6414,
    "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'"
  ) }
);
new P(
  "breakpointItemBytes",
  void 0,
  { type: "boolean", description: h(6415, "Whether the breakpoint item is a data breakpoint on a byte range.") }
);
new P(
  "breakpointHasModes",
  !1,
  { type: "boolean", description: h(6416, "Whether the breakpoint has multiple modes it can switch to.") }
);
new P(
  "breakpointSupportsCondition",
  !1,
  { type: "boolean", description: h(6417, "True when the focused breakpoint supports conditions.") }
);
new P(
  "loadedScriptsSupported",
  !1,
  { type: "boolean", description: h(6418, "True when the focused sessions supports the LOADED SCRIPTS view") }
);
new P(
  "loadedScriptsItemType",
  void 0,
  { type: "string", description: h(
    6419,
    "Represents the item type of the focused element in the LOADED SCRIPTS view."
  ) }
);
new P(
  "focusedSessionIsAttach",
  !1,
  { type: "boolean", description: h(6420, "True when the focused session is 'attach'.") }
);
new P(
  "focusedSessionIsNoDebug",
  !1,
  { type: "boolean", description: h(6421, "True when the focused session is run without debugging.") }
);
new P("stepBackSupported", !1, { type: "boolean", description: h(6422, "True when the focused session supports 'stepBack' requests.") });
new P(
  "restartFrameSupported",
  !1,
  { type: "boolean", description: h(6423, "True when the focused session supports 'restartFrame' requests.") }
);
new P(
  "stackFrameSupportsRestart",
  !1,
  { type: "boolean", description: h(6424, "True when the focused stack frame supports 'restartFrame'.") }
);
new P(
  "jumpToCursorSupported",
  !1,
  { type: "boolean", description: h(6425, "True when the focused session supports 'jumpToCursor' request.") }
);
new P(
  "stepIntoTargetsSupported",
  !1,
  { type: "boolean", description: h(6426, "True when the focused session supports 'stepIntoTargets' request.") }
);
new P("breakpointsExist", !1, { type: "boolean", description: h(6427, "True when at least one breakpoint exists.") });
new P(
  "debuggersAvailable",
  !1,
  { type: "boolean", description: h(6428, "True when there is at least one debug extensions active.") }
);
new P(
  "debugExtensionAvailable",
  !0,
  { type: "boolean", description: h(
    6429,
    "True when there is at least one debug extension installed and enabled."
  ) }
);
new P(
  "debugProtocolVariableMenuContext",
  void 0,
  { type: "string", description: h(
    6430,
    "Represents the context the debug adapter sets on the focused variable in the VARIABLES view."
  ) }
);
new P(
  "debugSetVariableSupported",
  !1,
  { type: "boolean", description: h(6431, "True when the focused session supports 'setVariable' request.") }
);
new P(
  "debugSetDataBreakpointAddressSupported",
  !1,
  { type: "boolean", description: h(
    6432,
    "True when the focused session supports 'getBreakpointInfo' request on an address."
  ) }
);
new P(
  "debugSetExpressionSupported",
  !1,
  { type: "boolean", description: h(6433, "True when the focused session supports 'setExpression' request.") }
);
new P(
  "breakWhenValueChangesSupported",
  !1,
  { type: "boolean", description: h(
    6434,
    "True when the focused session supports to break when value changes."
  ) }
);
new P(
  "breakWhenValueIsAccessedSupported",
  !1,
  { type: "boolean", description: h(
    6435,
    "True when the focused breakpoint supports to break when value is accessed."
  ) }
);
new P(
  "breakWhenValueIsReadSupported",
  !1,
  { type: "boolean", description: h(
    6436,
    "True when the focused breakpoint supports to break when value is read."
  ) }
);
new P(
  "terminateDebuggeeSupported",
  !1,
  { type: "boolean", description: h(
    6437,
    "True when the focused session supports the terminate debuggee capability."
  ) }
);
new P(
  "suspendDebuggeeSupported",
  !1,
  { type: "boolean", description: h(
    6438,
    "True when the focused session supports the suspend debuggee capability."
  ) }
);
new P(
  "terminateThreadsSupported",
  !1,
  { type: "boolean", description: h(
    6439,
    "True when the focused session supports the terminate threads capability."
  ) }
);
new P(
  "variableEvaluateNamePresent",
  !1,
  { type: "boolean", description: h(6440, "True when the focused variable has an 'evalauteName' field set.") }
);
new P(
  "variableIsReadonly",
  !1,
  { type: "boolean", description: h(6441, "True when the focused variable is read-only.") }
);
new P("variableValue", !1, { type: "string", description: h(6442, "Value of the variable, present for debug visualization clauses.") });
new P("variableType", !1, { type: "string", description: h(6443, "Type of the variable, present for debug visualization clauses.") });
new P("variableInterfaces", !1, { type: "array", description: h(
  6444,
  "Any interfaces or contracts that the variable satisfies, present for debug visualization clauses."
) });
new P("variableName", !1, { type: "string", description: h(6445, "Name of the variable, present for debug visualization clauses.") });
new P("variableLanguage", !1, { type: "string", description: h(
  6446,
  "Language of the variable source, present for debug visualization clauses."
) });
new P(
  "variableExtensionId",
  !1,
  { type: "string", description: h(
    6447,
    "Extension ID of the variable source, present for debug visualization clauses."
  ) }
);
new P(
  "exceptionWidgetVisible",
  !1,
  { type: "boolean", description: h(6448, "True when the exception widget is visible.") }
);
new P("multiSessionRepl", !1, { type: "boolean", description: h(6449, "True when there is more than 1 debug console.") });
new P("multiSessionDebug", !1, { type: "boolean", description: h(6450, "True when there is more than 1 active debug session.") });
new P(
  "disassembleRequestSupported",
  !1,
  { type: "boolean", description: h(6451, "True when the focused sessions supports disassemble request.") }
);
new P(
  "disassemblyViewFocus",
  !1,
  { type: "boolean", description: h(6452, "True when the Disassembly View is focused.") }
);
new P(
  "languageSupportsDisassembleRequest",
  !1,
  { type: "boolean", description: h(
    6453,
    "True when the language in the current editor supports disassemble request."
  ) }
);
new P(
  "focusedStackFrameHasInstructionReference",
  !1,
  { type: "boolean", description: h(
    6454,
    "True when the focused stack frame has instruction pointer reference."
  ) }
);
h(6456, "Controls when the internal Debug Console should open.");
var Rk;
(function(i) {
  i[i.Inactive = 0] = "Inactive", i[i.Initializing = 1] = "Initializing", i[i.Stopped = 2] = "Stopped", i[i.Running = 3] = "Running";
})(Rk || (Rk = {}));
var Lk;
(function(i) {
  i[i.Valid = 0] = "Valid", i[i.Unreadable = 1] = "Unreadable", i[i.Error = 2] = "Error";
})(Lk || (Lk = {}));
var Nk;
(function(i) {
  i[i.Variable = 0] = "Variable", i[i.Address = 1] = "Address";
})(Nk || (Nk = {}));
var bm;
(function(i) {
  i[i.Initial = 1] = "Initial", i[i.Dynamic = 2] = "Dynamic";
})(bm || (bm = {}));
var Mk;
(function(i) {
  i.UnverifiedBreakpoints = "unverifiedBreakpoints";
})(Mk || (Mk = {}));
var Ok;
(function(i) {
  i[i.CONDITION = 0] = "CONDITION", i[i.HIT_COUNT = 1] = "HIT_COUNT", i[i.LOG_MESSAGE = 2] = "LOG_MESSAGE", i[i.TRIGGER_POINT = 3] = "TRIGGER_POINT";
})(Ok || (Ok = {}));
var ym;
(function(i) {
  i[i.Command = 0] = "Command", i[i.Tree = 1] = "Tree";
})(ym || (ym = {}));
var _b;
(function(i) {
  i[i.None = 0] = "None", i[i.Collapsed = 1] = "Collapsed", i[i.Expanded = 2] = "Expanded";
})(_b || (_b = {}));
var Fk;
(function(i) {
  i.deserialize = (e) => e, i.serialize = (e) => e;
})(Fk || (Fk = {}));
var Uk;
(function(i) {
  i.deserialize = (e) => ({
    id: e.id,
    name: e.name,
    iconPath: e.iconPath && { light: x.revive(e.iconPath.light), dark: x.revive(e.iconPath.dark) },
    iconClass: e.iconClass,
    visualization: e.visualization
  }), i.serialize = (e) => e;
})(Uk || (Uk = {}));
const Na = "**", vb = "/", bg = "[/\\\\]", yg = "[^/\\\\]", k6 = /\//g;
function $k(i, e) {
  switch (i) {
    case 0:
      return "";
    case 1:
      return `${yg}*?`;
    default:
      return `(?:${bg}|${yg}+${bg}${e ? `|${bg}${yg}+` : ""})*?`;
  }
}
function wb(i, e) {
  if (!i)
    return [];
  const t = [];
  let n = !1, r = !1, s = "";
  for (const o of i) {
    switch (o) {
      case e:
        if (!n && !r) {
          t.push(s), s = "";
          continue;
        }
        break;
      case "{":
        n = !0;
        break;
      case "}":
        n = !1;
        break;
      case "[":
        r = !0;
        break;
      case "]":
        r = !1;
        break;
    }
    s += o;
  }
  return s && t.push(s), t;
}
function s5(i) {
  if (!i)
    return "";
  let e = "";
  const t = wb(i, vb);
  if (t.every((n) => n === Na))
    e = ".*";
  else {
    let n = !1;
    t.forEach((r, s) => {
      if (r === Na) {
        if (n)
          return;
        e += $k(2, s === t.length - 1);
      } else {
        let o = !1, a = "", l = !1, c = "";
        for (const u of r) {
          if (u !== "}" && o) {
            a += u;
            continue;
          }
          if (l && (u !== "]" || !c)) {
            let d;
            u === "-" ? d = u : (u === "^" || u === "!") && !c ? d = "^" : u === vb ? d = "" : d = Nl(u), c += d;
            continue;
          }
          switch (u) {
            case "{":
              o = !0;
              continue;
            case "[":
              l = !0;
              continue;
            case "}": {
              const f = `(?:${wb(a, ",").map((p) => s5(p)).join("|")})`;
              e += f, o = !1, a = "";
              break;
            }
            case "]": {
              e += "[" + c + "]", l = !1, c = "";
              break;
            }
            case "?":
              e += yg;
              continue;
            case "*":
              e += $k(1);
              continue;
            default:
              e += Nl(u);
          }
        }
        s < t.length - 1 && (t[s + 1] !== Na || s + 2 < t.length) && (e += bg);
      }
      n = r === Na;
    });
  }
  return e;
}
const I6 = /^\*\*\/\*\.[\w\.-]+$/, C6 = /^\*\*\/([\w\.-]+)\/?$/, T6 = /^{\*\*\/\*?[\w\.-]+\/?(,\*\*\/\*?[\w\.-]+\/?)*}$/, P6 = /^{\*\*\/\*?[\w\.-]+(\/(\*\*)?)?(,\*\*\/\*?[\w\.-]+(\/(\*\*)?)?)*}$/, A6 = /^\*\*((\/[\w\.-]+)+)\/?$/, R6 = /^([\w\.-]+(\/[\w\.-]+)*)\/?$/, Hk = new AE(1e4), Bk = function() {
  return !1;
}, ss = function() {
  return null;
};
function aS(i, e) {
  if (!i)
    return ss;
  let t;
  typeof i != "string" ? t = i.pattern : t = i, t = t.trim();
  const n = `${t}_${!!e.trimForExclusions}`;
  let r = Hk.get(n);
  if (r)
    return Wk(r, i);
  let s;
  return I6.test(t) ? r = L6(t.substr(4), t) : (s = C6.exec(rw(t, e))) ? r = N6(s[1], t) : (e.trimForExclusions ? P6 : T6).test(t) ? r = M6(t, e) : (s = A6.exec(rw(t, e))) ? r = Vk(s[1].substr(1), t, !0) : (s = R6.exec(rw(t, e))) ? r = Vk(s[1], t, !1) : r = O6(t), Hk.set(n, r), Wk(r, i);
}
function Wk(i, e) {
  if (typeof e == "string")
    return i;
  const t = function(n, r) {
    return Xg(n, e.base, !jo) ? i(B8(n.substr(e.base.length), Jn), r) : null;
  };
  return t.allBasenames = i.allBasenames, t.allPaths = i.allPaths, t.basenames = i.basenames, t.patterns = i.patterns, t;
}
function rw(i, e) {
  return e.trimForExclusions && i.endsWith("/**") ? i.substr(0, i.length - 2) : i;
}
function L6(i, e) {
  return function(t, n) {
    return typeof t == "string" && t.endsWith(i) ? e : null;
  };
}
function N6(i, e) {
  const t = `/${i}`, n = `\\${i}`, r = function(o, a) {
    return typeof o != "string" ? null : a ? a === i ? e : null : o === i || o.endsWith(t) || o.endsWith(n) ? e : null;
  }, s = [i];
  return r.basenames = s, r.patterns = [e], r.allBasenames = s, r;
}
function M6(i, e) {
  const t = o5(i.slice(1, -1).split(",").map((a) => aS(a, e)).filter((a) => a !== ss), i), n = t.length;
  if (!n)
    return ss;
  if (n === 1)
    return t[0];
  const r = function(a, l) {
    for (let c = 0, u = t.length; c < u; c++)
      if (t[c](a, l))
        return i;
    return null;
  }, s = t.find((a) => !!a.allBasenames);
  s && (r.allBasenames = s.allBasenames);
  const o = t.reduce((a, l) => l.allPaths ? a.concat(l.allPaths) : a, []);
  return o.length && (r.allPaths = o), r;
}
function Vk(i, e, t) {
  const n = Jn === pt.sep, r = n ? i : i.replace(k6, Jn), s = Jn + r, o = pt.sep + i;
  let a;
  return t ? a = function(l, c) {
    return typeof l == "string" && (l === r || l.endsWith(s) || !n && (l === i || l.endsWith(o))) ? e : null;
  } : a = function(l, c) {
    return typeof l == "string" && (l === r || !n && l === i) ? e : null;
  }, a.allPaths = [(t ? "*/" : "./") + i], a;
}
function O6(i) {
  try {
    const e = new RegExp(`^${s5(i)}$`);
    return function(t) {
      return e.lastIndex = 0, typeof t == "string" && e.test(t) ? i : null;
    };
  } catch {
    return ss;
  }
}
function wh(i, e, t) {
  return !i || typeof e != "string" ? !1 : Wu(i)(e, void 0, t);
}
function Wu(i, e = {}) {
  if (!i)
    return Bk;
  if (typeof i == "string" || F6(i)) {
    const t = aS(i, e);
    if (t === ss)
      return Bk;
    const n = function(r, s) {
      return !!t(r, s);
    };
    return t.allBasenames && (n.allBasenames = t.allBasenames), t.allPaths && (n.allPaths = t.allPaths), n;
  }
  return U6(i, e);
}
function F6(i) {
  const e = i;
  return e ? typeof e.base == "string" && typeof e.pattern == "string" : !1;
}
function U6(i, e) {
  const t = o5(Object.getOwnPropertyNames(i).map((a) => $6(a, i[a], e)).filter((a) => a !== ss)), n = t.length;
  if (!n)
    return ss;
  if (!t.some((a) => !!a.requiresSiblings)) {
    if (n === 1)
      return t[0];
    const a = function(u, d) {
      let f;
      for (let p = 0, v = t.length; p < v; p++) {
        const _ = t[p](u, d);
        if (typeof _ == "string")
          return _;
        Go(_) && (f || (f = []), f.push(_));
      }
      return f ? (async () => {
        for (const p of f) {
          const v = await p;
          if (typeof v == "string")
            return v;
        }
        return null;
      })() : null;
    }, l = t.find((u) => !!u.allBasenames);
    l && (a.allBasenames = l.allBasenames);
    const c = t.reduce((u, d) => d.allPaths ? u.concat(d.allPaths) : u, []);
    return c.length && (a.allPaths = c), a;
  }
  const r = function(a, l, c) {
    let u, d;
    for (let f = 0, p = t.length; f < p; f++) {
      const v = t[f];
      v.requiresSiblings && c && (l || (l = yn(a)), u || (u = l.substr(0, l.length - Qg(a).length)));
      const _ = v(a, l, u, c);
      if (typeof _ == "string")
        return _;
      Go(_) && (d || (d = []), d.push(_));
    }
    return d ? (async () => {
      for (const f of d) {
        const p = await f;
        if (typeof p == "string")
          return p;
      }
      return null;
    })() : null;
  }, s = t.find((a) => !!a.allBasenames);
  s && (r.allBasenames = s.allBasenames);
  const o = t.reduce((a, l) => l.allPaths ? a.concat(l.allPaths) : a, []);
  return o.length && (r.allPaths = o), r;
}
function $6(i, e, t) {
  if (e === !1)
    return ss;
  const n = aS(i, t);
  if (n === ss)
    return ss;
  if (typeof e == "boolean")
    return n;
  if (e) {
    const r = e.when;
    if (typeof r == "string") {
      const s = (o, a, l, c) => {
        if (!c || !n(o, a))
          return null;
        const u = r.replace("$(basename)", () => l), d = c(u);
        return Go(d) ? d.then((f) => f ? i : null) : d ? i : null;
      };
      return s.requiresSiblings = !0, s;
    }
  }
  return n;
}
function o5(i, e) {
  const t = i.filter((a) => !!a.basenames);
  if (t.length < 2)
    return i;
  const n = t.reduce((a, l) => {
    const c = l.basenames;
    return c ? a.concat(c) : a;
  }, []);
  let r;
  if (e) {
    r = [];
    for (let a = 0, l = n.length; a < l; a++)
      r.push(e);
  } else
    r = t.reduce((a, l) => {
      const c = l.patterns;
      return c ? a.concat(c) : a;
    }, []);
  const s = function(a, l) {
    if (typeof a != "string")
      return null;
    if (!l) {
      let u;
      for (u = a.length; u > 0; u--) {
        const d = a.charCodeAt(u - 1);
        if (d === L.Slash || d === L.Backslash)
          break;
      }
      l = a.substr(u);
    }
    const c = n.indexOf(l);
    return c !== -1 ? r[c] : null;
  };
  s.basenames = n, s.patterns = r, s.allBasenames = n;
  const o = i.filter((a) => !a.basenames);
  return o.push(s), o;
}
const bb = ["W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f"], H6 = new RegExp(`^[${bb.join("")}]+`), a5 = 7;
function l5(i) {
  if (i.scheme !== fe.vscodeNotebookCell)
    return;
  const e = i.fragment.indexOf("s");
  if (e < 0)
    return;
  const t = parseInt(i.fragment.substring(0, e).replace(H6, ""), a5), n = Mu(i.fragment.substring(e + 1)).toString();
  if (!isNaN(t))
    return {
      handle: t,
      notebook: i.with({ scheme: n, fragment: null })
    };
}
function B6(i, e) {
  const t = e.toString(a5), r = `${t.length < bb.length ? bb[t.length - 1] : "z"}${t}s${Y1(he.fromString(i.scheme), !0, !0)}`;
  return i.with({ scheme: fe.vscodeNotebookCell, fragment: r });
}
function W6(i) {
  if (i.scheme !== fe.vscodeNotebookMetadata)
    return;
  const e = Mu(i.fragment).toString();
  return i.with({ scheme: e, fragment: null });
}
function V6(i) {
  const e = `${Y1(he.fromString(i.scheme), !0, !0)}`;
  return i.with({ scheme: fe.vscodeNotebookMetadata, fragment: e });
}
function z6(i) {
  if (i.scheme !== fe.vscodeNotebookCellOutput)
    return;
  const e = new URLSearchParams(i.query), t = e.get("openIn");
  if (!t)
    return;
  const n = e.get("outputId") ?? void 0, r = l5(i.with({ scheme: fe.vscodeNotebookCell, query: null })), s = e.get("outputIndex") ? parseInt(e.get("outputIndex") || "", 10) : void 0, o = r ? r.notebook : i.with({
    scheme: e.get("notebookScheme") || fe.file,
    fragment: null,
    query: null
  }), a = e.get("cellIndex") ? parseInt(e.get("cellIndex") || "", 10) : void 0;
  return {
    notebook: o,
    openIn: t,
    outputId: n,
    outputIndex: s,
    cellHandle: r == null ? void 0 : r.handle,
    cellFragment: i.fragment,
    cellIndex: a
  };
}
var Lc;
(function(i) {
  i[i.Markup = 1] = "Markup", i[i.Code = 2] = "Code";
})(Lc || (Lc = {}));
Dr.latex, Dr.markdown, Dr.text;
Dr.latex, Dr.markdown, Dr.text;
var zk;
(function(i) {
  i[i.Running = 1] = "Running", i[i.Idle = 2] = "Idle";
})(zk || (zk = {}));
var qk;
(function(i) {
  i[i.Unconfirmed = 1] = "Unconfirmed", i[i.Pending = 2] = "Pending", i[i.Executing = 3] = "Executing";
})(qk || (qk = {}));
var jk;
(function(i) {
  i[i.Unconfirmed = 1] = "Unconfirmed", i[i.Pending = 2] = "Pending", i[i.Executing = 3] = "Executing";
})(jk || (jk = {}));
var Gk;
(function(i) {
  i[i.WithHardKernelDependency = 0] = "WithHardKernelDependency", i[i.WithOptionalKernelDependency = 1] = "WithOptionalKernelDependency", i[i.Pure = 2] = "Pure", i[i.Never = 3] = "Never";
})(Gk || (Gk = {}));
var Qk;
(function(i) {
  i.Always = "always", i.Never = "never", i.Optional = "optional";
})(Qk || (Qk = {}));
var cr;
(function(i) {
  i[i.ModelChange = 1] = "ModelChange", i[i.Move = 2] = "Move", i[i.ChangeCellLanguage = 5] = "ChangeCellLanguage", i[i.Initialize = 6] = "Initialize", i[i.ChangeCellMetadata = 7] = "ChangeCellMetadata", i[i.Output = 8] = "Output", i[i.OutputItem = 9] = "OutputItem", i[i.ChangeCellContent = 10] = "ChangeCellContent", i[i.ChangeDocumentMetadata = 11] = "ChangeDocumentMetadata", i[i.ChangeCellInternalMetadata = 12] = "ChangeCellInternalMetadata", i[i.ChangeCellMime = 13] = "ChangeCellMime", i[i.Unknown = 100] = "Unknown";
})(cr || (cr = {}));
var Kk;
(function(i) {
  i[i.Handle = 0] = "Handle", i[i.Index = 1] = "Index";
})(Kk || (Kk = {}));
var Wo;
(function(i) {
  i[i.Replace = 1] = "Replace", i[i.Output = 2] = "Output", i[i.Metadata = 3] = "Metadata", i[i.CellLanguage = 4] = "CellLanguage", i[i.DocumentMetadata = 5] = "DocumentMetadata", i[i.Move = 6] = "Move", i[i.OutputItems = 7] = "OutputItems", i[i.PartialMetadata = 8] = "PartialMetadata", i[i.PartialInternalMetadata = 9] = "PartialInternalMetadata";
})(Wo || (Wo = {}));
var Jk;
(function(i) {
  i.scheme = fe.vscodeNotebookMetadata;
  function e(n) {
    return V6(n);
  }
  i.generate = e;
  function t(n) {
    return W6(n);
  }
  i.parse = t;
})(Jk || (Jk = {}));
var yb;
(function(i) {
  i.scheme = fe.vscodeNotebookCell;
  function e(c, u) {
    return B6(c, u);
  }
  i.generate = e;
  function t(c) {
    return l5(c);
  }
  i.parse = t;
  function n(c, u) {
    return c.with({
      scheme: fe.vscodeNotebookCellOutput,
      query: new URLSearchParams({
        openIn: "editor",
        outputId: u ?? "",
        notebookScheme: c.scheme !== fe.file ? c.scheme : ""
      }).toString()
    });
  }
  i.generateCellOutputUriWithId = n;
  function r(c, u, d) {
    return c.with({
      scheme: fe.vscodeNotebookCellOutput,
      fragment: u.fragment,
      query: new URLSearchParams({
        openIn: "notebook",
        outputIndex: String(d)
      }).toString()
    });
  }
  i.generateCellOutputUriWithIndex = r;
  function s(c, u, d, f, p) {
    return c.with({
      scheme: fe.vscodeNotebookCellOutput,
      query: new URLSearchParams({
        openIn: "notebookOutputEditor",
        notebook: c.toString(),
        cellIndex: String(d),
        outputId: f,
        outputIndex: String(p)
      }).toString()
    });
  }
  i.generateOutputEditorUri = s;
  function o(c) {
    return z6(c);
  }
  i.parseCellOutputUri = o;
  function a(c, u, d) {
    return i.generate(c, u).with({ scheme: d });
  }
  i.generateCellPropertyUri = a;
  function l(c, u) {
    if (c.scheme === u)
      return i.parse(c.with({ scheme: i.scheme }));
  }
  i.parseCellPropertyUri = l;
})(yb || (yb = {}));
new P("notebookEditorCursorAtBoundary", "none");
new P("notebookEditorCursorAtLineBoundary", "none");
var Yk;
(function(i) {
  i.default = "default", i.option = "option";
})(Yk || (Yk = {}));
var Xk;
(function(i) {
  i.Cells = "cells", i.Text = "text", i.None = "none";
})(Xk || (Xk = {}));
var xm;
(function(i) {
  i[i.Left = 1] = "Left", i[i.Right = 2] = "Right";
})(xm || (xm = {}));
function c5(i) {
  return ["application/vnd.code.notebook.stdout", "application/vnd.code.notebook.stderr"].includes(i);
}
const q6 = new TextDecoder();
function j6(i) {
  const e = [];
  let t = !1;
  for (const o of i)
    (e.length === 0 || t) && (e.push(o), t = !0);
  let n = Q6(e);
  const r = he.concat(e.map((o) => he.wrap(o))), s = Z6(r);
  return n = n || s.byteLength !== r.byteLength, { data: s, didCompression: n };
}
const xg = "\x1B[A", sw = xg.split("").map((i) => i.charCodeAt(0)), G6 = 10;
function Q6(i) {
  let e = !1;
  return i.forEach((t, n) => {
    if (n === 0 || t.length < xg.length)
      return;
    const r = i[n - 1], s = t.subarray(0, xg.length);
    if (s[0] === sw[0] && s[1] === sw[1] && s[2] === sw[2]) {
      const o = r.lastIndexOf(G6);
      if (o === -1)
        return;
      e = !0, i[n - 1] = r.subarray(0, o), i[n] = t.subarray(xg.length);
    }
  }), e;
}
function K6(i) {
  let e = i;
  do
    i = e, e = i.replace(/[^\n]\x08/gm, "");
  while (e.length < i.length);
  return i;
}
function J6(i) {
  for (i = i.replace(/\r+\n/gm, `
`); i.search(/\r[^$]/g) > -1; ) {
    const e = i.match(/^(.*)\r+/m)[1];
    let t = i.match(/\r+(.*)$/m)[1];
    t = t + e.slice(t.length, e.length), i = i.replace(/\r+.*$/m, "\r").replace(/^.*\r/m, t);
  }
  return i;
}
const Y6 = 8, X6 = 13;
function Z6(i) {
  return !i.buffer.includes(Y6) && !i.buffer.includes(X6) ? i : he.fromString(J6(K6(q6.decode(i.buffer))));
}
var Tn;
(function(i) {
  i.Delimiter = "\0";
})(Tn || (Tn = {}));
var dr;
(function(i) {
  i[i.IsSame = 0] = "IsSame", i[i.Disconnected = 1] = "Disconnected", i[i.IsChild = 2] = "IsChild", i[i.IsParent = 3] = "IsParent";
})(dr || (dr = {}));
class Fe {
  static fromExtHostTestItem(e, t, n = e.parent) {
    if (e._isRoot)
      return new Fe([t]);
    const r = [e.id];
    for (let s = n; s && s.id !== t; s = s.parent)
      r.push(s.id);
    return r.push(t), new Fe(r.reverse());
  }
  static isRoot(e) {
    return !e.includes(Tn.Delimiter);
  }
  static root(e) {
    const t = e.indexOf(Tn.Delimiter);
    return t === -1 ? e : e.slice(0, t);
  }
  static fromString(e) {
    return new Fe(e.split(Tn.Delimiter));
  }
  static join(e, t) {
    return new Fe([...e.path, t]);
  }
  static split(e) {
    return e.split(Tn.Delimiter);
  }
  static joinToString(e, t) {
    return e.toString() + Tn.Delimiter + t;
  }
  static parentId(e) {
    const t = e.lastIndexOf(Tn.Delimiter);
    return t === -1 ? void 0 : e.slice(0, t);
  }
  static localId(e) {
    const t = e.lastIndexOf(Tn.Delimiter);
    return t === -1 ? e : e.slice(t + Tn.Delimiter.length);
  }
  static isChild(e, t) {
    return t[e.length] === Tn.Delimiter && t.startsWith(e);
  }
  static compare(e, t) {
    return e === t ? dr.IsSame : Fe.isChild(e, t) ? dr.IsChild : Fe.isChild(t, e) ? dr.IsParent : dr.Disconnected;
  }
  static getLengthOfCommonPrefix(e, t) {
    if (e === 0)
      return 0;
    let n = 0;
    for (; n < e - 1; ) {
      for (let r = 1; r < e; r++) {
        const s = t(r - 1), o = t(r);
        if (s.path[n] !== o.path[n])
          return n;
      }
      n++;
    }
    return n;
  }
  constructor(e, t = e.length) {
    if (this.path = e, this.viewEnd = t, e.length === 0 || t < 1)
      throw new Error("cannot create test with empty path");
  }
  get rootId() {
    return new Fe(this.path, 1);
  }
  get parentId() {
    return this.viewEnd > 1 ? new Fe(this.path, this.viewEnd - 1) : void 0;
  }
  get localId() {
    return this.path[this.viewEnd - 1];
  }
  get controllerId() {
    return this.path[0];
  }
  get isRoot() {
    return this.viewEnd === 1;
  }
  *idsFromRoot() {
    for (let e = 1; e <= this.viewEnd; e++)
      yield new Fe(this.path, e);
  }
  *idsToRoot() {
    for (let e = this.viewEnd; e > 0; e--)
      yield new Fe(this.path, e);
  }
  compare(e) {
    if (typeof e == "string")
      return Fe.compare(this.toString(), e);
    for (let t = 0; t < e.viewEnd && t < this.viewEnd; t++)
      if (e.path[t] !== this.path[t])
        return dr.Disconnected;
    return e.viewEnd > this.viewEnd ? dr.IsChild : e.viewEnd < this.viewEnd ? dr.IsParent : dr.IsSame;
  }
  toJSON() {
    return this.toString();
  }
  toString() {
    if (!this.stringifed) {
      this.stringifed = this.path[0];
      for (let e = 1; e < this.viewEnd; e++)
        this.stringifed += Tn.Delimiter, this.stringifed += this.path[e];
    }
    return this.stringifed;
  }
}
var si;
(function(i) {
  i[i.Unset = 0] = "Unset", i[i.Queued = 1] = "Queued", i[i.Running = 2] = "Running", i[i.Passed = 3] = "Passed", i[i.Failed = 4] = "Failed", i[i.Skipped = 5] = "Skipped", i[i.Errored = 6] = "Errored";
})(si || (si = {}));
si.Unset + "", si.Queued + "", si.Running + "", si.Passed + "", si.Failed + "", si.Skipped + "", si.Errored + "";
var Zk;
(function(i) {
  i[i.Run = 1] = "Run", i[i.Debug = 2] = "Debug", i[i.Coverage = 3] = "Coverage";
})(Zk || (Zk = {}));
var bh;
(function(i) {
  i[i.Refresh = 2] = "Refresh", i[i.CodeRelatedToTest = 4] = "CodeRelatedToTest", i[i.TestRelatedToCode = 8] = "TestRelatedToCode";
})(bh || (bh = {}));
var Ni;
(function(i) {
  i[i.Run = 2] = "Run", i[i.Debug = 4] = "Debug", i[i.Coverage = 8] = "Coverage", i[i.HasNonDefaultProfile = 16] = "HasNonDefaultProfile", i[i.HasConfigurable = 32] = "HasConfigurable", i[i.SupportsContinuousRun = 64] = "SupportsContinuousRun";
})(Ni || (Ni = {}));
Ni.Run + "", h(11849, "Run"), Ni.Debug + "", h(11850, "Debug"), Ni.Coverage + "", h(11851, "Coverage");
Ni.Run, Ni.Debug, Ni.Coverage, Ni.HasNonDefaultProfile, Ni.HasConfigurable, Ni.SupportsContinuousRun;
const eN = (i) => "runId" in i;
var Vu;
(function(i) {
  i.serialize = (e) => ({
    range: e.range.toJSON(),
    uri: e.uri.toJSON()
  }), i.deserialize = (e, t) => ({
    range: ft.lift(t.range),
    uri: e.asCanonicalUri(x.revive(t.uri))
  });
})(Vu || (Vu = {}));
var kr;
(function(i) {
  i[i.Error = 0] = "Error", i[i.Output = 1] = "Output";
})(kr || (kr = {}));
var Em;
(function(i) {
  i.serialize = (e) => {
    var t, n;
    return {
      label: e.label,
      uri: (t = e.uri) == null ? void 0 : t.toJSON(),
      position: (n = e.position) == null ? void 0 : n.toJSON()
    };
  }, i.deserialize = (e, t) => ({
    label: t.label,
    uri: t.uri ? e.asCanonicalUri(x.revive(t.uri)) : void 0,
    position: t.position ? On.lift(t.position) : void 0
  });
})(Em || (Em = {}));
var Sm;
(function(i) {
  i.serialize = (e) => {
    var t;
    return {
      message: e.message,
      type: kr.Error,
      expected: e.expected,
      actual: e.actual,
      contextValue: e.contextValue,
      location: e.location && Vu.serialize(e.location),
      stackTrace: (t = e.stackTrace) == null ? void 0 : t.map(Em.serialize)
    };
  }, i.deserialize = (e, t) => ({
    message: t.message,
    type: kr.Error,
    expected: t.expected,
    actual: t.actual,
    contextValue: t.contextValue,
    location: t.location && Vu.deserialize(e, t.location),
    stackTrace: t.stackTrace && t.stackTrace.map((n) => Em.deserialize(e, n))
  });
})(Sm || (Sm = {}));
var Dm;
(function(i) {
  i.serialize = (e) => ({
    message: e.message,
    type: kr.Output,
    offset: e.offset,
    length: e.length,
    location: e.location && Vu.serialize(e.location)
  }), i.deserialize = (e, t) => ({
    message: t.message,
    type: kr.Output,
    offset: t.offset,
    length: t.length,
    location: t.location && Vu.deserialize(e, t.location)
  });
})(Dm || (Dm = {}));
var km;
(function(i) {
  i.serialize = (e) => e.type === kr.Error ? Sm.serialize(e) : Dm.serialize(e), i.deserialize = (e, t) => t.type === kr.Error ? Sm.deserialize(e, t) : Dm.deserialize(e, t), i.isDiffable = (e) => e.type === kr.Error && e.actual !== void 0 && e.expected !== void 0;
})(km || (km = {}));
var yh;
(function(i) {
  i.serializeWithoutMessages = (e) => ({
    state: e.state,
    duration: e.duration,
    messages: []
  }), i.serialize = (e) => ({
    state: e.state,
    duration: e.duration,
    messages: e.messages.map(km.serialize)
  }), i.deserialize = (e, t) => ({
    state: t.state,
    duration: t.duration,
    messages: t.messages.map((n) => km.deserialize(e, n))
  });
})(yh || (yh = {}));
const u5 = "\0", Eg = (i, e) => i + u5 + e, d5 = (i) => {
  const e = i.indexOf(u5);
  return { ctrlId: i.slice(0, e), tagId: i.slice(e + 1) };
};
var Im;
(function(i) {
  i.serialize = (e) => {
    var t, n;
    return {
      extId: e.extId,
      label: e.label,
      tags: e.tags,
      busy: e.busy,
      children: void 0,
      uri: (t = e.uri) == null ? void 0 : t.toJSON(),
      range: ((n = e.range) == null ? void 0 : n.toJSON()) || null,
      description: e.description,
      error: e.error,
      sortText: e.sortText
    };
  }, i.deserialize = (e, t) => ({
    extId: t.extId,
    label: t.label,
    tags: t.tags,
    busy: t.busy,
    children: void 0,
    uri: t.uri ? e.asCanonicalUri(x.revive(t.uri)) : void 0,
    range: t.range ? ft.lift(t.range) : null,
    description: t.description,
    error: t.error,
    sortText: t.sortText
  });
})(Im || (Im = {}));
var Ti;
(function(i) {
  i[i.NotExpandable = 0] = "NotExpandable", i[i.Expandable = 1] = "Expandable", i[i.BusyExpanding = 2] = "BusyExpanding", i[i.Expanded = 3] = "Expanded";
})(Ti || (Ti = {}));
var Vo;
(function(i) {
  i.serialize = (e) => ({
    expand: e.expand,
    item: Im.serialize(e.item)
  }), i.deserialize = (e, t) => ({
    controllerId: Fe.root(t.item.extId),
    expand: t.expand,
    item: Im.deserialize(e, t.item)
  });
})(Vo || (Vo = {}));
var tf;
(function(i) {
  i.serialize = (e) => {
    var n, r;
    let t;
    return e.item && (t = {}, e.item.label !== void 0 && (t.label = e.item.label), e.item.tags !== void 0 && (t.tags = e.item.tags), e.item.busy !== void 0 && (t.busy = e.item.busy), e.item.uri !== void 0 && (t.uri = (n = e.item.uri) == null ? void 0 : n.toJSON()), e.item.range !== void 0 && (t.range = (r = e.item.range) == null ? void 0 : r.toJSON()), e.item.description !== void 0 && (t.description = e.item.description), e.item.error !== void 0 && (t.error = e.item.error), e.item.sortText !== void 0 && (t.sortText = e.item.sortText)), { extId: e.extId, expand: e.expand, item: t };
  }, i.deserialize = (e) => {
    let t;
    return e.item && (t = {}, e.item.label !== void 0 && (t.label = e.item.label), e.item.tags !== void 0 && (t.tags = e.item.tags), e.item.busy !== void 0 && (t.busy = e.item.busy), e.item.range !== void 0 && (t.range = e.item.range ? ft.lift(e.item.range) : null), e.item.description !== void 0 && (t.description = e.item.description), e.item.error !== void 0 && (t.error = e.item.error), e.item.sortText !== void 0 && (t.sortText = e.item.sortText)), { extId: e.extId, expand: e.expand, item: t };
  };
})(tf || (tf = {}));
const xb = (i, e) => {
  e.expand !== void 0 && (i.expand = e.expand), e.item !== void 0 && (i.item = i.item ? Object.assign(i.item, e.item) : e.item);
};
var eI;
(function(i) {
  i.serializeWithoutMessages = (e) => ({
    ...Vo.serialize(e),
    ownComputedState: e.ownComputedState,
    computedState: e.computedState,
    tasks: e.tasks.map(yh.serializeWithoutMessages)
  }), i.serialize = (e) => ({
    ...Vo.serialize(e),
    ownComputedState: e.ownComputedState,
    computedState: e.computedState,
    tasks: e.tasks.map(yh.serialize)
  }), i.deserialize = (e, t) => ({
    ...Vo.deserialize(e, t),
    ownComputedState: t.ownComputedState,
    computedState: t.computedState,
    tasks: t.tasks.map((n) => yh.deserialize(e, n)),
    retired: !0
  });
})(eI || (eI = {}));
var Eb;
(function(i) {
  i.empty = () => ({ covered: 0, total: 0 }), i.sum = (e, t) => {
    e.covered += t.covered, e.total += t.total;
  };
})(Eb || (Eb = {}));
var tI;
(function(i) {
  i.serialize = (e) => ({
    id: e.id,
    statement: e.statement,
    branch: e.branch,
    declaration: e.declaration,
    testIds: e.testIds,
    uri: e.uri.toJSON()
  }), i.deserialize = (e, t) => ({
    id: t.id,
    statement: t.statement,
    branch: t.branch,
    declaration: t.declaration,
    testIds: t.testIds,
    uri: e.asCanonicalUri(x.revive(t.uri))
  }), i.empty = (e, t) => ({
    id: e,
    uri: t,
    statement: Eb.empty()
  });
})(tI || (tI = {}));
function lS(i) {
  var e;
  return {
    ...i,
    location: (e = i.location) == null ? void 0 : e.toJSON()
  };
}
function cS(i) {
  return i.location = i.location ? On.isIPosition(i.location) ? On.lift(i.location) : ft.lift(i.location) : void 0, i;
}
var hl;
(function(i) {
  i[i.Declaration = 0] = "Declaration", i[i.Statement = 1] = "Statement", i[i.Branch = 2] = "Branch";
})(hl || (hl = {}));
var iI;
(function(i) {
  i.serialize = (e) => e.type === hl.Declaration ? Tm.serialize(e) : Pm.serialize(e), i.deserialize = (e) => e.type === hl.Declaration ? Tm.deserialize(e) : Pm.deserialize(e);
})(iI || (iI = {}));
var Cm;
(function(i) {
  i.serialize = lS, i.deserialize = cS;
})(Cm || (Cm = {}));
var Tm;
(function(i) {
  i.serialize = lS, i.deserialize = cS;
})(Tm || (Tm = {}));
var Pm;
(function(i) {
  i.serialize = (e) => {
    var t;
    return {
      ...lS(e),
      branches: (t = e.branches) == null ? void 0 : t.map(Cm.serialize)
    };
  }, i.deserialize = (e) => {
    var t;
    return {
      ...cS(e),
      branches: (t = e.branches) == null ? void 0 : t.map(Cm.deserialize)
    };
  };
})(Pm || (Pm = {}));
var Tt;
(function(i) {
  i[i.Add = 0] = "Add", i[i.Update = 1] = "Update", i[i.DocumentSynced = 2] = "DocumentSynced", i[i.Remove = 3] = "Remove", i[i.IncrementPendingExtHosts = 4] = "IncrementPendingExtHosts", i[i.Retire = 5] = "Retire", i[i.AddTag = 6] = "AddTag", i[i.RemoveTag = 7] = "RemoveTag";
})(Tt || (Tt = {}));
var Am;
(function(i) {
  i.deserialize = (e, t) => t.op === Tt.Add ? { op: t.op, item: Vo.deserialize(e, t.item) } : t.op === Tt.Update ? { op: t.op, item: tf.deserialize(t.item) } : t.op === Tt.DocumentSynced ? { op: t.op, uri: e.asCanonicalUri(x.revive(t.uri)), docv: t.docv } : t, i.serialize = (e) => e.op === Tt.Add ? { op: e.op, item: Vo.serialize(e.item) } : e.op === Tt.Update ? { op: e.op, item: tf.serialize(e.item) } : e;
})(Am || (Am = {}));
class tN {
  constructor(e) {
    this.uriIdentity = e, this._tags = /* @__PURE__ */ new Map(), this.items = /* @__PURE__ */ new Map(), this.roots = /* @__PURE__ */ new Set(), this.busyControllerCount = 0, this.pendingRootCount = 0, this.tags = this._tags;
  }
  apply(e) {
    var n;
    const t = this.createChangeCollector();
    for (const r of e)
      switch (r.op) {
        case Tt.Add:
          this.add(Vo.deserialize(this.uriIdentity, r.item), t);
          break;
        case Tt.Update:
          this.update(tf.deserialize(r.item), t);
          break;
        case Tt.Remove:
          this.remove(r.itemId, t);
          break;
        case Tt.Retire:
          this.retireTest(r.itemId);
          break;
        case Tt.IncrementPendingExtHosts:
          this.updatePendingRoots(r.amount);
          break;
        case Tt.AddTag:
          this._tags.set(r.tag.id, r.tag);
          break;
        case Tt.RemoveTag:
          this._tags.delete(r.id);
          break;
      }
    (n = t.complete) == null || n.call(t);
  }
  add(e, t) {
    var s, o;
    const n = (s = Fe.parentId(e.item.extId)) == null ? void 0 : s.toString();
    let r;
    if (!n)
      r = this.createItem(e), this.roots.add(r), this.items.set(e.item.extId, r);
    else if (this.items.has(n)) {
      const a = this.items.get(n);
      a.children.add(e.item.extId), r = this.createItem(e, a), this.items.set(e.item.extId, r);
    } else {
      console.error(`Test with unknown parent ID: ${JSON.stringify(e)}`);
      return;
    }
    return (o = t.add) == null || o.call(t, r), e.expand === Ti.BusyExpanding && this.busyControllerCount++, r;
  }
  update(e, t) {
    var r;
    const n = this.items.get(e.extId);
    if (n)
      return e.expand !== void 0 && (n.expand === Ti.BusyExpanding && this.busyControllerCount--, e.expand === Ti.BusyExpanding && this.busyControllerCount++), xb(n, e), (r = t.update) == null || r.call(t, n), n;
  }
  remove(e, t) {
    var o, a;
    const n = this.items.get(e);
    if (!n)
      return;
    const r = (o = Fe.parentId(n.item.extId)) == null ? void 0 : o.toString();
    r ? this.items.get(r).children.delete(n.item.extId) : this.roots.delete(n);
    const s = [[e]];
    for (; s.length; )
      for (const l of s.pop()) {
        const c = this.items.get(l);
        c && (s.push(c.children), this.items.delete(l), (a = t.remove) == null || a.call(t, c, c !== n), c.expand === Ti.BusyExpanding && this.busyControllerCount--);
      }
  }
  retireTest(e) {
  }
  updatePendingRoots(e) {
    this.pendingRootCount += e;
  }
  createChangeCollector() {
    return {};
  }
}
var nI;
(function(i) {
  i[i.UP = 0] = "UP", i[i.DOWN = 1] = "DOWN", i[i.LEFT = 2] = "LEFT", i[i.RIGHT = 3] = "RIGHT";
})(nI || (nI = {}));
var rI;
(function(i) {
  i[i.HORIZONTAL = 0] = "HORIZONTAL", i[i.VERTICAL = 1] = "VERTICAL";
})(rI || (rI = {}));
var sI;
(function(i) {
  i[i.FIRST = 0] = "FIRST", i[i.LAST = 1] = "LAST", i[i.NEXT = 2] = "NEXT", i[i.PREVIOUS = 3] = "PREVIOUS";
})(sI || (sI = {}));
var oI;
(function(i) {
  i[i.MAXIMIZE = 0] = "MAXIMIZE", i[i.EXPAND = 1] = "EXPAND", i[i.EVEN = 2] = "EVEN";
})(oI || (oI = {}));
var aI;
(function(i) {
  i[i.COPY_EDITORS = 0] = "COPY_EDITORS", i[i.MOVE_EDITORS = 1] = "MOVE_EDITORS";
})(aI || (aI = {}));
var lI;
(function(i) {
  i[i.CREATION_TIME = 0] = "CREATION_TIME", i[i.MOST_RECENTLY_ACTIVE = 1] = "MOST_RECENTLY_ACTIVE", i[i.GRID_APPEARANCE = 2] = "GRID_APPEARANCE";
})(lI || (lI = {}));
var cI;
(function(i) {
  i[i.NEW_EDITOR = 1] = "NEW_EDITOR", i[i.MOVE_EDITOR = 2] = "MOVE_EDITOR", i[i.COPY_EDITOR = 3] = "COPY_EDITOR";
})(cI || (cI = {}));
const iN = -1, nN = -2;
var Si;
(function(i) {
  i[i.Upsert = 0] = "Upsert", i[i.SetTags = 1] = "SetTags", i[i.UpdateCanResolveChildren = 2] = "UpdateCanResolveChildren", i[i.RemoveChild = 3] = "RemoveChild", i[i.SetProp = 4] = "SetProp", i[i.Bulk = 5] = "Bulk", i[i.DocumentSynced = 6] = "DocumentSynced";
})(Si || (Si = {}));
const $d = (i, e) => i === e, rN = {
  range: (i, e) => i === e ? !0 : !i || !e ? !1 : i.equalsRange(e),
  busy: $d,
  label: $d,
  description: $d,
  error: $d,
  sortText: $d,
  tags: (i, e) => !(i.length !== e.length || i.some((t) => !e.includes(t)))
}, sN = Object.entries(rN), oN = (i, e) => {
  let t;
  for (const [n, r] of sN)
    r(i[n], e[n]) || (t ? t[n] = e[n] : t = { [n]: e[n] });
  return t;
};
class aN extends xe {
  get root() {
    return this.options.root;
  }
  constructor(e) {
    super(), this.options = e, this.debounceSendDiff = this._register(new Gl(() => this.flushDiff(), 200)), this.diffOpEmitter = this._register(new M()), this.tree = /* @__PURE__ */ new Map(), this.tags = /* @__PURE__ */ new Map(), this.diff = [], this.onDidGenerateDiff = this.diffOpEmitter.event, this.root.canResolveChildren = !0, this.upsertItem(this.root, void 0);
  }
  set resolveHandler(e) {
    this._resolveHandler = e;
    for (const t of this.tree.values())
      this.updateExpandability(t);
  }
  get resolveHandler() {
    return this._resolveHandler;
  }
  collectDiff() {
    const e = this.diff;
    return this.diff = [], e;
  }
  pushDiff(e) {
    switch (e.op) {
      case Tt.DocumentSynced: {
        for (const t of this.diff)
          if (t.op === Tt.DocumentSynced && t.uri === e.uri) {
            t.docv = e.docv;
            return;
          }
        break;
      }
      case Tt.Update: {
        const t = this.diff[this.diff.length - 1];
        if (t) {
          if (t.op === Tt.Update && t.item.extId === e.item.extId) {
            xb(t.item, e.item);
            return;
          }
          if (t.op === Tt.Add && t.item.item.extId === e.item.extId) {
            xb(t.item, e.item);
            return;
          }
        }
        break;
      }
    }
    this.diff.push(e), this.debounceSendDiff.isScheduled() || this.debounceSendDiff.schedule();
  }
  expand(e, t) {
    var r;
    const n = this.tree.get(e);
    if (n) {
      if ((n.expandLevels === void 0 || t > n.expandLevels) && (n.expandLevels = t), n.expand === Ti.Expandable) {
        const s = this.resolveChildren(n);
        return s.isOpen() ? this.expandChildren(n, t - 1) : s.wait().then(() => this.expandChildren(n, t - 1));
      } else if (n.expand === Ti.Expanded)
        return ((r = n.resolveBarrier) == null ? void 0 : r.isOpen()) === !1 ? n.resolveBarrier.wait().then(() => this.expandChildren(n, t - 1)) : this.expandChildren(n, t - 1);
    }
  }
  dispose() {
    for (const e of this.tree.values())
      this.options.getApiFor(e.actual).listener = void 0;
    this.tree.clear(), this.diff = [], super.dispose();
  }
  onTestItemEvent(e, t) {
    switch (t.op) {
      case Si.RemoveChild:
        this.removeItem(Fe.joinToString(e.fullId, t.id));
        break;
      case Si.Upsert:
        this.upsertItem(t.item, e);
        break;
      case Si.Bulk:
        for (const n of t.ops)
          this.onTestItemEvent(e, n);
        break;
      case Si.SetTags:
        this.diffTagRefs(t.new, t.old, e.fullId.toString());
        break;
      case Si.UpdateCanResolveChildren:
        this.updateExpandability(e);
        break;
      case Si.SetProp:
        this.pushDiff({
          op: Tt.Update,
          item: {
            extId: e.fullId.toString(),
            item: t.update
          }
        });
        break;
      case Si.DocumentSynced:
        this.documentSynced(e.actual.uri);
        break;
      default:
        Rw();
    }
  }
  documentSynced(e) {
    e && this.pushDiff({
      op: Tt.DocumentSynced,
      uri: e,
      docv: this.options.getDocumentVersion(e)
    });
  }
  upsertItem(e, t) {
    var u, d;
    const n = Fe.fromExtHostTestItem(e, this.root.id, t == null ? void 0 : t.actual), r = this.options.getApiFor(e);
    r.parent && r.parent !== (t == null ? void 0 : t.actual) && this.options.getChildren(r.parent).delete(e.id);
    let s = this.tree.get(n.toString());
    if (!s) {
      s = {
        fullId: n,
        actual: e,
        expandLevels: t != null && t.expandLevels ? t.expandLevels - 1 : void 0,
        expand: Ti.NotExpandable
      }, e.tags.forEach(this.incrementTagRefs, this), this.tree.set(s.fullId.toString(), s), this.setItemParent(e, t), this.pushDiff({
        op: Tt.Add,
        item: {
          controllerId: this.options.controllerId,
          expand: s.expand,
          item: this.options.toITestItem(e)
        }
      }), this.connectItemAndChildren(e, s, t);
      return;
    }
    if (s.actual === e) {
      this.connectItem(e, s, t);
      return;
    }
    if (((u = s.actual.uri) == null ? void 0 : u.toString()) !== ((d = e.uri) == null ? void 0 : d.toString()))
      return this.removeItem(n.toString()), this.upsertItem(e, t);
    const o = this.options.getChildren(s.actual), a = s.actual, l = oN(this.options.toITestItem(a), this.options.toITestItem(e));
    this.options.getApiFor(a).listener = void 0, s.actual = e, s.resolveBarrier = void 0, s.expand = Ti.NotExpandable, l && (l.hasOwnProperty("tags") && (this.diffTagRefs(e.tags, a.tags, n.toString()), delete l.tags), this.onTestItemEvent(s, { op: Si.SetProp, update: l })), this.connectItemAndChildren(e, s, t);
    for (const [f, p] of o)
      this.options.getChildren(e).get(p.id) || this.removeItem(Fe.joinToString(n, p.id));
    const c = s.expandLevels;
    c !== void 0 && queueMicrotask(() => {
      s.expand === Ti.Expandable && (s.expandLevels = void 0, this.expand(n.toString(), c));
    }), this.documentSynced(s.actual.uri);
  }
  diffTagRefs(e, t, n) {
    const r = new Set(t.map((s) => s.id));
    for (const s of e)
      r.delete(s.id) || this.incrementTagRefs(s);
    this.pushDiff({
      op: Tt.Update,
      item: { extId: n, item: { tags: e.map((s) => Eg(this.options.controllerId, s.id)) } }
    }), r.forEach(this.decrementTagRefs, this);
  }
  incrementTagRefs(e) {
    const t = this.tags.get(e.id);
    t ? t.refCount++ : (this.tags.set(e.id, { refCount: 1 }), this.pushDiff({
      op: Tt.AddTag,
      tag: {
        id: Eg(this.options.controllerId, e.id)
      }
    }));
  }
  decrementTagRefs(e) {
    const t = this.tags.get(e);
    t && !--t.refCount && (this.tags.delete(e), this.pushDiff({ op: Tt.RemoveTag, id: Eg(this.options.controllerId, e) }));
  }
  setItemParent(e, t) {
    this.options.getApiFor(e).parent = t && t.actual !== this.root ? t.actual : void 0;
  }
  connectItem(e, t, n) {
    this.setItemParent(e, n);
    const r = this.options.getApiFor(e);
    r.parent = n == null ? void 0 : n.actual, r.listener = (s) => this.onTestItemEvent(t, s), this.updateExpandability(t);
  }
  connectItemAndChildren(e, t, n) {
    this.connectItem(e, t, n);
    for (const [r, s] of this.options.getChildren(e))
      this.upsertItem(s, t);
  }
  updateExpandability(e) {
    let t;
    this._resolveHandler ? e.resolveBarrier ? t = e.resolveBarrier.isOpen() ? Ti.Expanded : Ti.BusyExpanding : t = e.actual.canResolveChildren ? Ti.Expandable : Ti.NotExpandable : t = Ti.NotExpandable, t !== e.expand && (e.expand = t, this.pushDiff({ op: Tt.Update, item: { extId: e.fullId.toString(), expand: t } }), t === Ti.Expandable && e.expandLevels !== void 0 && this.resolveChildren(e));
  }
  expandChildren(e, t) {
    if (t < 0)
      return;
    const n = [];
    for (const [r, s] of this.options.getChildren(e.actual)) {
      const o = this.expand(Fe.joinToString(e.fullId, s.id), t);
      Go(o) && n.push(o);
    }
    if (n.length)
      return Promise.all(n).then(() => {
      });
  }
  resolveChildren(e) {
    if (e.resolveBarrier)
      return e.resolveBarrier;
    if (!this._resolveHandler) {
      const s = new Jr();
      return s.open(), s;
    }
    e.expand = Ti.BusyExpanding, this.pushExpandStateUpdate(e);
    const t = e.resolveBarrier = new Jr(), n = (s) => {
      console.error(`Unhandled error in resolveHandler of test controller "${this.options.controllerId}"`, s);
    };
    let r;
    try {
      r = this._resolveHandler(e.actual === this.root ? void 0 : e.actual);
    } catch (s) {
      n(s);
    }
    return Go(r) ? r.catch(n).then(() => {
      t.open(), this.updateExpandability(e);
    }) : (t.open(), this.updateExpandability(e)), e.resolveBarrier;
  }
  pushExpandStateUpdate(e) {
    this.pushDiff({ op: Tt.Update, item: { extId: e.fullId.toString(), expand: e.expand } });
  }
  removeItem(e) {
    const t = this.tree.get(e);
    if (!t)
      throw new Error("attempting to remove non-existent child");
    this.pushDiff({ op: Tt.Remove, itemId: e });
    const n = [t];
    for (; n.length; ) {
      const r = n.pop();
      if (r) {
        this.options.getApiFor(r.actual).listener = void 0;
        for (const s of r.actual.tags)
          this.decrementTagRefs(s.id);
        this.tree.delete(r.fullId.toString());
        for (const [s, o] of this.options.getChildren(r.actual))
          n.push(this.tree.get(Fe.joinToString(r.fullId, o.id)));
      }
    }
  }
  flushDiff() {
    const e = this.collectDiff();
    e.length && this.diffOpEmitter.fire(e);
  }
}
class lN extends Error {
  constructor(e) {
    super(`Attempted to insert a duplicate test item ID ${e}`);
  }
}
class Rm extends Error {
  constructor(e) {
    super(`TestItem with ID "${e}" is invalid. Make sure to create it from the createTestItem method.`);
  }
}
class cN extends Error {
  constructor(e, t, n) {
    super(`TestItem with ID "${e}" is from controller "${t}" and cannot be added as a child of an item from controller "${n}".`);
  }
}
const uN = (i, e, t) => {
  let n = /* @__PURE__ */ new Map();
  return {
    get size() {
      return n.size;
    },
    forEach(r, s) {
      for (const o of n.values())
        r.call(s, o, this);
    },
    [Symbol.iterator]() {
      return n.entries();
    },
    replace(r) {
      var l;
      const s = /* @__PURE__ */ new Map(), o = new Set(n.keys()), a = { op: Si.Bulk, ops: [] };
      for (const c of r) {
        if (!(c instanceof t))
          throw new Rm(c.id);
        const u = e(c).controllerId;
        if (u !== i.controllerId)
          throw new cN(c.id, u, i.controllerId);
        if (s.has(c.id))
          throw new lN(c.id);
        s.set(c.id, c), o.delete(c.id), a.ops.push({ op: Si.Upsert, item: c });
      }
      for (const c of o.keys())
        a.ops.push({ op: Si.RemoveChild, id: c });
      (l = i.listener) == null || l.call(i, a), n = s;
    },
    add(r) {
      var s;
      if (!(r instanceof t))
        throw new Rm(r.id);
      n.set(r.id, r), (s = i.listener) == null || s.call(i, { op: Si.Upsert, item: r });
    },
    delete(r) {
      var s;
      n.delete(r) && ((s = i.listener) == null || s.call(i, { op: Si.RemoveChild, id: r }));
    },
    get(r) {
      return n.get(r);
    },
    toJSON() {
      return Array.from(n.values());
    }
  };
}, h5 = /* @__PURE__ */ new WeakMap(), dN = (i, e) => {
  const t = { controllerId: e };
  return h5.set(i, t), t;
}, cv = (i) => {
  const e = h5.get(i);
  if (!e)
    throw new Rm((i == null ? void 0 : i.id) || "<unknown>");
  return e;
};
var Lm;
(function(i) {
  i[i.WebSocket = 0] = "WebSocket", i[i.Managed = 1] = "Managed";
})(Lm || (Lm = {}));
class hN {
  constructor(e) {
    this.id = e, this.type = Lm.Managed;
  }
  toString() {
    return `Managed(${this.id})`;
  }
}
class fN {
  constructor(e, t) {
    this.host = e, this.port = t, this.type = Lm.WebSocket;
  }
  toString() {
    return `WebSocket(${this.host}:${this.port})`;
  }
}
var Vs;
(function(i) {
  i.Unknown = "Unknown", i.NotAvailable = "NotAvailable", i.TemporarilyNotAvailable = "TemporarilyNotAvailable", i.NoResolverFound = "NoResolverFound", i.InvalidAuthority = "InvalidAuthority";
})(Vs || (Vs = {}));
function uI(i) {
  const e = i.indexOf("+");
  return e === -1 ? i : i.substring(0, e);
}
var Sb, ha, vs, Db, fa, uo, pa, kb, Ib, Sg, Qd, Cb, Lr, Nr, Tb, tn, Pb;
function be(i) {
  return Object.assign(i, {
    apply: function(...t) {
      if (t.length === 0)
        return Reflect.construct(i, []);
      {
        const n = t.length === 1 ? [] : t[1];
        return Reflect.construct(i, n, t[0].constructor);
      }
    },
    call: function(...t) {
      if (t.length === 0)
        return Reflect.construct(i, []);
      {
        const [n, ...r] = t;
        return Reflect.construct(i, r, n.constructor);
      }
    }
  });
}
var Ab;
(function(i) {
  i[i.Top = 0] = "Top", i[i.Bottom = 1] = "Bottom";
})(Ab || (Ab = {}));
var dI;
(function(i) {
  i[i.TerminalCommand = 0] = "TerminalCommand", i[i.Opener = 1] = "Opener", i[i.Command = 3] = "Command";
})(dI || (dI = {}));
var za, mT;
let je = Sb = (mT = class {
  constructor(e) {
    ye(this, za);
    le(this, za, e);
  }
  static from(...e) {
    let t = e;
    return new Sb(function() {
      if (t) {
        for (const n of t)
          n && typeof n.dispose == "function" && n.dispose();
        t = void 0;
      }
    });
  }
  dispose() {
    typeof N(this, za) == "function" && (N(this, za).call(this), le(this, za, void 0));
  }
}, za = new WeakMap(), mT);
je = Sb = z([
  be
], je);
let Ke = ha = class {
  static Min(...e) {
    if (e.length === 0)
      throw new TypeError();
    let t = e[0];
    for (let n = 1; n < e.length; n++) {
      const r = e[n];
      r.isBefore(t) && (t = r);
    }
    return t;
  }
  static Max(...e) {
    if (e.length === 0)
      throw new TypeError();
    let t = e[0];
    for (let n = 1; n < e.length; n++) {
      const r = e[n];
      r.isAfter(t) && (t = r);
    }
    return t;
  }
  static isPosition(e) {
    if (!e)
      return !1;
    if (e instanceof ha)
      return !0;
    const { line: t, character: n } = e;
    return typeof t == "number" && typeof n == "number";
  }
  static of(e) {
    if (e instanceof ha)
      return e;
    if (this.isPosition(e))
      return new ha(e.line, e.character);
    throw new Error("Invalid argument, is NOT a position-like object");
  }
  get line() {
    return this._line;
  }
  get character() {
    return this._character;
  }
  constructor(e, t) {
    if (e < 0)
      throw Ge("line must be non-negative");
    if (t < 0)
      throw Ge("character must be non-negative");
    this._line = e, this._character = t;
  }
  isBefore(e) {
    return this._line < e._line ? !0 : e._line < this._line ? !1 : this._character < e._character;
  }
  isBeforeOrEqual(e) {
    return this._line < e._line ? !0 : e._line < this._line ? !1 : this._character <= e._character;
  }
  isAfter(e) {
    return !this.isBeforeOrEqual(e);
  }
  isAfterOrEqual(e) {
    return !this.isBefore(e);
  }
  isEqual(e) {
    return this._line === e._line && this._character === e._character;
  }
  compareTo(e) {
    return this._line < e._line ? -1 : this._line > e.line ? 1 : this._character < e._character ? -1 : this._character > e._character ? 1 : 0;
  }
  translate(e, t = 0) {
    if (e === null || t === null)
      throw Ge();
    let n;
    return typeof e > "u" ? n = 0 : typeof e == "number" ? n = e : (n = typeof e.lineDelta == "number" ? e.lineDelta : 0, t = typeof e.characterDelta == "number" ? e.characterDelta : 0), n === 0 && t === 0 ? this : new ha(this.line + n, this.character + t);
  }
  with(e, t = this.character) {
    if (e === null || t === null)
      throw Ge();
    let n;
    return typeof e > "u" ? n = this.line : typeof e == "number" ? n = e : (n = typeof e.line == "number" ? e.line : this.line, t = typeof e.character == "number" ? e.character : this.character), n === this.line && t === this.character ? this : new ha(n, t);
  }
  toJSON() {
    return { line: this.line, character: this.character };
  }
  [Symbol.for("debug.description")]() {
    return `(${this.line}:${this.character})`;
  }
};
Ke = ha = z([
  be
], Ke);
let $e = vs = class {
  static isRange(e) {
    return e instanceof vs ? !0 : e ? Ke.isPosition(e.start) && Ke.isPosition(e.end) : !1;
  }
  static of(e) {
    if (e instanceof vs)
      return e;
    if (this.isRange(e))
      return new vs(e.start, e.end);
    throw new Error("Invalid argument, is NOT a range-like object");
  }
  get start() {
    return this._start;
  }
  get end() {
    return this._end;
  }
  constructor(e, t, n, r) {
    let s, o;
    if (typeof e == "number" && typeof t == "number" && typeof n == "number" && typeof r == "number" ? (s = new Ke(e, t), o = new Ke(n, r)) : Ke.isPosition(e) && Ke.isPosition(t) && (s = Ke.of(e), o = Ke.of(t)), !s || !o)
      throw new Error("Invalid arguments");
    s.isBefore(o) ? (this._start = s, this._end = o) : (this._start = o, this._end = s);
  }
  contains(e) {
    return vs.isRange(e) ? this.contains(e.start) && this.contains(e.end) : Ke.isPosition(e) ? !(Ke.of(e).isBefore(this._start) || this._end.isBefore(e)) : !1;
  }
  isEqual(e) {
    return this._start.isEqual(e._start) && this._end.isEqual(e._end);
  }
  intersection(e) {
    const t = Ke.Max(e.start, this._start), n = Ke.Min(e.end, this._end);
    if (!t.isAfter(n))
      return new vs(t, n);
  }
  union(e) {
    if (this.contains(e))
      return this;
    if (e.contains(this))
      return e;
    const t = Ke.Min(e.start, this._start), n = Ke.Max(e.end, this.end);
    return new vs(t, n);
  }
  get isEmpty() {
    return this._start.isEqual(this._end);
  }
  get isSingleLine() {
    return this._start.line === this._end.line;
  }
  with(e, t = this.end) {
    if (e === null || t === null)
      throw Ge();
    let n;
    return e ? Ke.isPosition(e) ? n = e : (n = e.start || this.start, t = e.end || this.end) : n = this.start, n.isEqual(this._start) && t.isEqual(this.end) ? this : new vs(n, t);
  }
  toJSON() {
    return [this.start, this.end];
  }
  [Symbol.for("debug.description")]() {
    return f5(this);
  }
};
$e = vs = z([
  be
], $e);
let os = Db = class extends $e {
  static isSelection(e) {
    return e instanceof Db ? !0 : e ? $e.isRange(e) && Ke.isPosition(e.anchor) && Ke.isPosition(e.active) && typeof e.isReversed == "boolean" : !1;
  }
  get anchor() {
    return this._anchor;
  }
  get active() {
    return this._active;
  }
  constructor(e, t, n, r) {
    let s, o;
    if (typeof e == "number" && typeof t == "number" && typeof n == "number" && typeof r == "number" ? (s = new Ke(e, t), o = new Ke(n, r)) : Ke.isPosition(e) && Ke.isPosition(t) && (s = Ke.of(e), o = Ke.of(t)), !s || !o)
      throw new Error("Invalid arguments");
    super(s, o), this._anchor = s, this._active = o;
  }
  get isReversed() {
    return this._anchor === this._end;
  }
  toJSON() {
    return {
      start: this.start,
      end: this.end,
      active: this.active,
      anchor: this.anchor
    };
  }
  [Symbol.for("debug.description")]() {
    return pN(this);
  }
};
os = Db = z([
  be
], os);
function f5(i) {
  return i.isEmpty ? `[${i.start.line}:${i.start.character})` : `[${i.start.line}:${i.start.character} -> ${i.end.line}:${i.end.character})`;
}
function pN(i) {
  let e = f5(i);
  return i.isEmpty || (i.active.isEqual(i.start) ? e = `|${e}` : e = `${e}|`), e;
}
const p5 = (i) => {
  if (typeof i != "string" || i.length === 0 || !/^[0-9A-Za-z_\-]+$/.test(i))
    throw Ge("connectionToken");
};
class gN {
  static isResolvedAuthority(e) {
    return e && typeof e == "object" && typeof e.host == "string" && typeof e.port == "number" && (e.connectionToken === void 0 || typeof e.connectionToken == "string");
  }
  constructor(e, t, n) {
    if (typeof e != "string" || e.length === 0)
      throw Ge("host");
    if (typeof t != "number" || t === 0 || Math.round(t) !== t)
      throw Ge("port");
    typeof n < "u" && p5(n), this.host = e, this.port = Math.round(t), this.connectionToken = n;
  }
}
class Dg {
  static isManagedResolvedAuthority(e) {
    return e && typeof e == "object" && typeof e.makeConnection == "function" && (e.connectionToken === void 0 || typeof e.connectionToken == "string");
  }
  constructor(e, t) {
    this.makeConnection = e, this.connectionToken = t, typeof t < "u" && p5(t);
  }
}
class qr extends Error {
  static NotAvailable(e, t) {
    return new qr(e, Vs.NotAvailable, t);
  }
  static TemporarilyNotAvailable(e) {
    return new qr(e, Vs.TemporarilyNotAvailable);
  }
  constructor(e, t = Vs.Unknown, n) {
    super(e), this._message = e, this._code = t, this._detail = n, Object.setPrototypeOf(this, qr.prototype);
  }
}
var Er;
(function(i) {
  i[i.LF = 1] = "LF", i[i.CRLF = 2] = "CRLF";
})(Er || (Er = {}));
var Yc;
(function(i) {
  i[i.Replace = 1] = "Replace", i[i.Append = 2] = "Append", i[i.Prepend = 3] = "Prepend";
})(Yc || (Yc = {}));
let Jo = fa = class {
  static isTextEdit(e) {
    return e instanceof fa ? !0 : e ? $e.isRange(e) && typeof e.newText == "string" : !1;
  }
  static replace(e, t) {
    return new fa(e, t);
  }
  static insert(e, t) {
    return fa.replace(new $e(e, e), t);
  }
  static delete(e) {
    return fa.replace(e, "");
  }
  static setEndOfLine(e) {
    const t = new fa(new $e(new Ke(0, 0), new Ke(0, 0)), "");
    return t.newEol = e, t;
  }
  get range() {
    return this._range;
  }
  set range(e) {
    if (e && !$e.isRange(e))
      throw Ge("range");
    this._range = e;
  }
  get newText() {
    return this._newText || "";
  }
  set newText(e) {
    if (e && typeof e != "string")
      throw Ge("newText");
    this._newText = e;
  }
  get newEol() {
    return this._newEol;
  }
  set newEol(e) {
    if (e && typeof e != "number")
      throw Ge("newEol");
    this._newEol = e;
  }
  constructor(e, t) {
    this._range = e, this._newText = t;
  }
  toJSON() {
    return {
      range: this.range,
      newText: this.newText,
      newEol: this._newEol
    };
  }
};
Jo = fa = z([
  be
], Jo);
let Nm = uo = class {
  static isNotebookCellEdit(e) {
    return e instanceof uo ? !0 : e ? es.isNotebookRange(e) && Array.isArray(e.newCells) : !1;
  }
  static replaceCells(e, t) {
    return new uo(e, t);
  }
  static insertCells(e, t) {
    return new uo(new es(e, e), t);
  }
  static deleteCells(e) {
    return new uo(e, []);
  }
  static updateCellMetadata(e, t) {
    const n = new uo(new es(e, e), []);
    return n.newCellMetadata = t, n;
  }
  static updateNotebookMetadata(e) {
    const t = new uo(new es(0, 0), []);
    return t.newNotebookMetadata = e, t;
  }
  constructor(e, t) {
    this.range = e, this.newCells = t;
  }
};
Nm = uo = z([
  be
], Nm);
class fl {
  static isSnippetTextEdit(e) {
    return e instanceof fl ? !0 : e ? $e.isRange(e.range) && Hl.isSnippetString(e.snippet) : !1;
  }
  static replace(e, t) {
    return new fl(e, t);
  }
  static insert(e, t) {
    return fl.replace(new $e(e, e), t);
  }
  constructor(e, t) {
    this.range = e, this.snippet = t;
  }
}
var jt;
(function(i) {
  i[i.File = 1] = "File", i[i.Text = 2] = "Text", i[i.Cell = 3] = "Cell", i[i.CellReplace = 5] = "CellReplace", i[i.Snippet = 6] = "Snippet";
})(jt || (jt = {}));
let $l = class {
  constructor() {
    this._edits = [];
  }
  _allEntries() {
    return this._edits;
  }
  renameFile(e, t, n, r) {
    this._edits.push({ _type: jt.File, from: e, to: t, options: n, metadata: r });
  }
  createFile(e, t, n) {
    this._edits.push({ _type: jt.File, from: void 0, to: e, options: t, metadata: n });
  }
  deleteFile(e, t, n) {
    this._edits.push({ _type: jt.File, from: e, to: void 0, options: t, metadata: n });
  }
  replaceNotebookMetadata(e, t, n) {
    this._edits.push({ _type: jt.Cell, metadata: n, uri: e, edit: { editType: Wo.DocumentMetadata, metadata: t } });
  }
  replaceNotebookCells(e, t, n, r) {
    const s = t.start, o = t.end;
    (s !== o || n.length > 0) && this._edits.push({ _type: jt.CellReplace, uri: e, index: s, count: o - s, cells: n, metadata: r });
  }
  replaceNotebookCellMetadata(e, t, n, r) {
    this._edits.push({ _type: jt.Cell, metadata: r, uri: e, edit: { editType: Wo.Metadata, index: t, metadata: n } });
  }
  replace(e, t, n, r) {
    this._edits.push({ _type: jt.Text, uri: e, edit: new Jo(t, n), metadata: r });
  }
  insert(e, t, n, r) {
    this.replace(e, new $e(t, t), n, r);
  }
  delete(e, t, n) {
    this.replace(e, t, "", n);
  }
  has(e) {
    return this._edits.some((t) => t._type === jt.Text && t.uri.toString() === e.toString());
  }
  set(e, t) {
    if (t)
      for (const n of t) {
        if (!n)
          continue;
        let r, s;
        Array.isArray(n) ? (r = n[0], s = n[1]) : r = n, Nm.isNotebookCellEdit(r) ? r.newCellMetadata ? this.replaceNotebookCellMetadata(e, r.range.start, r.newCellMetadata, s) : r.newNotebookMetadata ? this.replaceNotebookMetadata(e, r.newNotebookMetadata, s) : this.replaceNotebookCells(e, r.range, r.newCells, s) : fl.isSnippetTextEdit(r) ? this._edits.push({ _type: jt.Snippet, uri: e, range: r.range, edit: r.snippet, metadata: s, keepWhitespace: r.keepWhitespace }) : this._edits.push({ _type: jt.Text, uri: e, edit: r, metadata: s });
      }
    else {
      for (let n = 0; n < this._edits.length; n++) {
        const r = this._edits[n];
        switch (r._type) {
          case jt.Text:
          case jt.Snippet:
          case jt.Cell:
          case jt.CellReplace:
            r.uri.toString() === e.toString() && (this._edits[n] = void 0);
            break;
        }
      }
      mR(this._edits);
    }
  }
  get(e) {
    const t = [];
    for (const n of this._edits)
      n._type === jt.Text && n.uri.toString() === e.toString() && t.push(n.edit);
    return t;
  }
  entries() {
    const e = new mi();
    for (const t of this._edits)
      if (t._type === jt.Text) {
        let n = e.get(t.uri);
        n || (n = [t.uri, []], e.set(t.uri, n)), n[1].push(t.edit);
      }
    return [...e.values()];
  }
  get size() {
    return this.entries().length;
  }
  toJSON() {
    return this.entries();
  }
};
$l = z([
  be
], $l);
let Hl = pa = class {
  static isSnippetString(e) {
    return e instanceof pa ? !0 : e ? typeof e.value == "string" : !1;
  }
  static _escape(e) {
    return e.replace(/\$|}|\\/g, "\\$&");
  }
  constructor(e) {
    this._tabstop = 1, this.value = e || "";
  }
  appendText(e) {
    return this.value += pa._escape(e), this;
  }
  appendTabstop(e = this._tabstop++) {
    return this.value += "$", this.value += e, this;
  }
  appendPlaceholder(e, t = this._tabstop++) {
    if (typeof e == "function") {
      const n = new pa();
      n._tabstop = this._tabstop, e(n), this._tabstop = n._tabstop, e = n.value;
    } else
      e = pa._escape(e);
    return this.value += "${", this.value += t, this.value += ":", this.value += e, this.value += "}", this;
  }
  appendChoice(e, t = this._tabstop++) {
    const n = e.map((r) => r.replaceAll(/[|\\,]/g, "\\$&")).join(",");
    return this.value += "${", this.value += t, this.value += "|", this.value += n, this.value += "|}", this;
  }
  appendVariable(e, t) {
    if (typeof t == "function") {
      const n = new pa();
      n._tabstop = this._tabstop, t(n), this._tabstop = n._tabstop, t = n.value;
    } else typeof t == "string" && (t = t.replace(/\$|}/g, "\\$&"));
    return this.value += "${", this.value += e, t && (this.value += ":", this.value += t), this.value += "}", this;
  }
};
Hl = pa = z([
  be
], Hl);
var Ma;
(function(i) {
  i[i.Unnecessary = 1] = "Unnecessary", i[i.Deprecated = 2] = "Deprecated";
})(Ma || (Ma = {}));
var Ri;
(function(i) {
  i[i.Hint = 3] = "Hint", i[i.Information = 2] = "Information", i[i.Warning = 1] = "Warning", i[i.Error = 0] = "Error";
})(Ri || (Ri = {}));
let $n = kb = class {
  static isLocation(e) {
    return e instanceof kb ? !0 : e ? $e.isRange(e.range) && x.isUri(e.uri) : !1;
  }
  constructor(e, t) {
    if (this.uri = e, t) if ($e.isRange(t))
      this.range = $e.of(t);
    else if (Ke.isPosition(t))
      this.range = new $e(t, t);
    else
      throw new Error("Illegal argument");
  }
  toJSON() {
    return {
      uri: this.uri,
      range: this.range
    };
  }
};
$n = kb = z([
  be
], $n);
let nf = class {
  static is(e) {
    return e ? typeof e.message == "string" && e.location && $e.isRange(e.location.range) && x.isUri(e.location.uri) : !1;
  }
  constructor(e, t) {
    this.location = e, this.message = t;
  }
  static isEqual(e, t) {
    return e === t ? !0 : !e || !t ? !1 : e.message === t.message && e.location.range.isEqual(t.location.range) && e.location.uri.toString() === t.location.uri.toString();
  }
};
nf = z([
  be
], nf);
let Mm = class {
  constructor(e, t, n = Ri.Error) {
    if (!$e.isRange(e))
      throw new TypeError("range must be set");
    if (!t)
      throw new TypeError("message must be set");
    this.range = e, this.message = t, this.severity = n;
  }
  toJSON() {
    return {
      severity: Ri[this.severity],
      message: this.message,
      range: this.range,
      source: this.source,
      code: this.code
    };
  }
  static isEqual(e, t) {
    return e === t ? !0 : !e || !t ? !1 : e.message === t.message && e.severity === t.severity && e.code === t.code && e.severity === t.severity && e.source === t.source && e.range.isEqual(t.range) && Fn(e.tags, t.tags) && Fn(e.relatedInformation, t.relatedInformation, nf.isEqual);
  }
};
Mm = z([
  be
], Mm);
let Om = class {
  constructor(e, t) {
    if (!e)
      throw new Error("Illegal argument, contents must be defined");
    Array.isArray(e) ? this.contents = e : this.contents = [e], this.range = t;
  }
};
Om = z([
  be
], Om);
let Fm = class extends Om {
  constructor(e, t, n, r) {
    super(e, t), this.canIncreaseVerbosity = n, this.canDecreaseVerbosity = r;
  }
};
Fm = z([
  be
], Fm);
var Rb;
(function(i) {
  i[i.Increase = 0] = "Increase", i[i.Decrease = 1] = "Decrease";
})(Rb || (Rb = {}));
var rf;
(function(i) {
  i[i.Text = 0] = "Text", i[i.Read = 1] = "Read", i[i.Write = 2] = "Write";
})(rf || (rf = {}));
let Um = class {
  constructor(e, t = rf.Text) {
    this.range = e, this.kind = t;
  }
  toJSON() {
    return {
      range: this.range,
      kind: rf[this.kind]
    };
  }
};
Um = z([
  be
], Um);
let $m = class {
  constructor(e, t) {
    this.uri = e, this.highlights = t;
  }
  toJSON() {
    return {
      uri: this.uri,
      highlights: this.highlights.map((e) => e.toJSON())
    };
  }
};
$m = z([
  be
], $m);
var Et;
(function(i) {
  i[i.File = 0] = "File", i[i.Module = 1] = "Module", i[i.Namespace = 2] = "Namespace", i[i.Package = 3] = "Package", i[i.Class = 4] = "Class", i[i.Method = 5] = "Method", i[i.Property = 6] = "Property", i[i.Field = 7] = "Field", i[i.Constructor = 8] = "Constructor", i[i.Enum = 9] = "Enum", i[i.Interface = 10] = "Interface", i[i.Function = 11] = "Function", i[i.Variable = 12] = "Variable", i[i.Constant = 13] = "Constant", i[i.String = 14] = "String", i[i.Number = 15] = "Number", i[i.Boolean = 16] = "Boolean", i[i.Array = 17] = "Array", i[i.Object = 18] = "Object", i[i.Key = 19] = "Key", i[i.Null = 20] = "Null", i[i.EnumMember = 21] = "EnumMember", i[i.Struct = 22] = "Struct", i[i.Event = 23] = "Event", i[i.Operator = 24] = "Operator", i[i.TypeParameter = 25] = "TypeParameter";
})(Et || (Et = {}));
var sf;
(function(i) {
  i[i.Deprecated = 1] = "Deprecated";
})(sf || (sf = {}));
let of = Ib = class {
  static validate(e) {
    if (!e.name)
      throw new Error("name must not be falsy");
  }
  constructor(e, t, n, r, s) {
    this.name = e, this.kind = t, this.containerName = s, typeof n == "string" && (this.containerName = n), r instanceof $n ? this.location = r : n instanceof $e && (this.location = new $n(r, n)), Ib.validate(this);
  }
  toJSON() {
    return {
      name: this.name,
      kind: Et[this.kind],
      location: this.location,
      containerName: this.containerName
    };
  }
};
of = Ib = z([
  be
], of);
let af = Sg = class {
  static validate(e) {
    var t;
    if (!e.name)
      throw new Error("name must not be falsy");
    if (!e.range.contains(e.selectionRange))
      throw new Error("selectionRange must be contained in fullRange");
    (t = e.children) == null || t.forEach(Sg.validate);
  }
  constructor(e, t, n, r, s) {
    this.name = e, this.detail = t, this.kind = n, this.range = r, this.selectionRange = s, this.children = [], Sg.validate(this);
  }
};
af = Sg = z([
  be
], af);
var lf;
(function(i) {
  i[i.Invoke = 1] = "Invoke", i[i.Automatic = 2] = "Automatic";
})(lf || (lf = {}));
let cf = class {
  constructor(e, t) {
    this.title = e, this.kind = t;
  }
};
cf = z([
  be
], cf);
var Cl;
let Nt = (Cl = class {
  constructor(e) {
    this.value = e;
  }
  append(e) {
    return new Qd(this.value ? this.value + Qd.sep + e : e);
  }
  intersects(e) {
    return this.contains(e) || e.contains(this);
  }
  contains(e) {
    return this.value === e.value || e.value.startsWith(this.value + Qd.sep);
  }
}, Qd = Cl, Cl.sep = ".", Cl);
Nt = Qd = z([
  be
], Nt);
Nt.Empty = new Nt("");
Nt.QuickFix = Nt.Empty.append("quickfix");
Nt.Refactor = Nt.Empty.append("refactor");
Nt.RefactorExtract = Nt.Refactor.append("extract");
Nt.RefactorInline = Nt.Refactor.append("inline");
Nt.RefactorMove = Nt.Refactor.append("move");
Nt.RefactorRewrite = Nt.Refactor.append("rewrite");
Nt.Source = Nt.Empty.append("source");
Nt.SourceOrganizeImports = Nt.Source.append("organizeImports");
Nt.SourceFixAll = Nt.Source.append("fixAll");
Nt.Notebook = Nt.Empty.append("notebook");
let uf = class {
  constructor(e, t) {
    if (this.range = e, this.parent = t, t && !t.range.contains(this.range))
      throw new Error("Invalid argument: parent must contain this range");
  }
};
uf = z([
  be
], uf);
let uS = class {
  constructor(e, t, n, r, s, o) {
    this.kind = e, this.name = t, this.detail = n, this.uri = r, this.range = s, this.selectionRange = o;
  }
}, g5 = class {
  constructor(e, t) {
    this.fromRanges = t, this.from = e;
  }
}, m5 = class {
  constructor(e, t) {
    this.fromRanges = t, this.to = e;
  }
};
var Xc;
(function(i) {
  i[i.Information = 0] = "Information", i[i.Warning = 1] = "Warning", i[i.Error = 2] = "Error";
})(Xc || (Xc = {}));
let Hm = class {
  constructor(e, t) {
    this.range = e, this.command = t;
  }
  get isResolved() {
    return !!this.command;
  }
};
Hm = z([
  be
], Hm);
var $i, _T;
let Dn = Cb = (_T = class {
  constructor(e, t = !1) {
    ye(this, $i);
    le(this, $i, new Gh(e, { supportThemeIcons: t }));
  }
  static isMarkdownString(e) {
    return e instanceof Cb ? !0 : e && e.appendCodeblock && e.appendMarkdown && e.appendText && e.value !== void 0;
  }
  get value() {
    return N(this, $i).value;
  }
  set value(e) {
    N(this, $i).value = e;
  }
  get isTrusted() {
    return N(this, $i).isTrusted;
  }
  set isTrusted(e) {
    N(this, $i).isTrusted = e;
  }
  get supportThemeIcons() {
    return N(this, $i).supportThemeIcons;
  }
  set supportThemeIcons(e) {
    N(this, $i).supportThemeIcons = e;
  }
  get supportHtml() {
    return N(this, $i).supportHtml;
  }
  set supportHtml(e) {
    N(this, $i).supportHtml = e;
  }
  get baseUri() {
    return N(this, $i).baseUri;
  }
  set baseUri(e) {
    N(this, $i).baseUri = e;
  }
  appendText(e) {
    return N(this, $i).appendText(e), this;
  }
  appendMarkdown(e) {
    return N(this, $i).appendMarkdown(e), this;
  }
  appendCodeblock(e, t) {
    return N(this, $i).appendCodeblock(t ?? "", e), this;
  }
}, $i = new WeakMap(), _T);
Dn = Cb = z([
  be
], Dn);
let Lb = class {
  constructor(e, t) {
    this.label = e, this.documentation = t;
  }
};
Lb = z([
  be
], Lb);
let Nb = class {
  constructor(e, t) {
    this.label = e, this.documentation = t, this.parameters = [];
  }
};
Nb = z([
  be
], Nb);
let Mb = class {
  constructor() {
    this.activeSignature = 0, this.activeParameter = 0, this.signatures = [];
  }
};
Mb = z([
  be
], Mb);
var Ob;
(function(i) {
  i[i.Invoke = 1] = "Invoke", i[i.TriggerCharacter = 2] = "TriggerCharacter", i[i.ContentChange = 3] = "ContentChange";
})(Ob || (Ob = {}));
var Fb;
(function(i) {
  i[i.Type = 1] = "Type", i[i.Parameter = 2] = "Parameter";
})(Fb || (Fb = {}));
let Bm = class {
  constructor(e) {
    this.value = e;
  }
};
Bm = z([
  be
], Bm);
let Wm = class {
  constructor(e, t, n) {
    this.position = e, this.label = t, this.kind = n;
  }
};
Wm = z([
  be
], Wm);
var Zc;
(function(i) {
  i[i.Invoke = 0] = "Invoke", i[i.TriggerCharacter = 1] = "TriggerCharacter", i[i.TriggerForIncompleteCompletions = 2] = "TriggerForIncompleteCompletions";
})(Zc || (Zc = {}));
var Ae;
(function(i) {
  i[i.Text = 0] = "Text", i[i.Method = 1] = "Method", i[i.Function = 2] = "Function", i[i.Constructor = 3] = "Constructor", i[i.Field = 4] = "Field", i[i.Variable = 5] = "Variable", i[i.Class = 6] = "Class", i[i.Interface = 7] = "Interface", i[i.Module = 8] = "Module", i[i.Property = 9] = "Property", i[i.Unit = 10] = "Unit", i[i.Value = 11] = "Value", i[i.Enum = 12] = "Enum", i[i.Keyword = 13] = "Keyword", i[i.Snippet = 14] = "Snippet", i[i.Color = 15] = "Color", i[i.File = 16] = "File", i[i.Reference = 17] = "Reference", i[i.Folder = 18] = "Folder", i[i.EnumMember = 19] = "EnumMember", i[i.Constant = 20] = "Constant", i[i.Struct = 21] = "Struct", i[i.Event = 22] = "Event", i[i.Operator = 23] = "Operator", i[i.TypeParameter = 24] = "TypeParameter", i[i.User = 25] = "User", i[i.Issue = 26] = "Issue";
})(Ae || (Ae = {}));
var df;
(function(i) {
  i[i.Deprecated = 1] = "Deprecated";
})(df || (df = {}));
let Vm = class {
  constructor(e, t) {
    this.label = e, this.kind = t;
  }
  toJSON() {
    return {
      label: this.label,
      kind: this.kind && Ae[this.kind],
      detail: this.detail,
      documentation: this.documentation,
      sortText: this.sortText,
      filterText: this.filterText,
      preselect: this.preselect,
      insertText: this.insertText,
      textEdit: this.textEdit
    };
  }
};
Vm = z([
  be
], Vm);
let zu = class {
  constructor(e = [], t = !1) {
    this.items = e, this.isIncomplete = t;
  }
};
zu = z([
  be
], zu);
let Ub = class {
  constructor(e, t, n) {
    this.insertText = e, this.range = t, this.command = n;
  }
};
Ub = z([
  be
], Ub);
let $b = class {
  constructor(e) {
    this.commands = void 0, this.suppressSuggestions = void 0, this.items = e;
  }
};
$b = z([
  be
], $b);
var Oa;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Word = 1] = "Word", i[i.Line = 2] = "Line", i[i.Suggest = 3] = "Suggest";
})(Oa || (Oa = {}));
var eu;
(function(i) {
  i[i.Accepted = 0] = "Accepted", i[i.Rejected = 1] = "Rejected", i[i.Ignored = 2] = "Ignored";
})(eu || (eu = {}));
var hf;
(function(i) {
  i[i.Active = -1] = "Active", i[i.Beside = -2] = "Beside", i[i.One = 1] = "One", i[i.Two = 2] = "Two", i[i.Three = 3] = "Three", i[i.Four = 4] = "Four", i[i.Five = 5] = "Five", i[i.Six = 6] = "Six", i[i.Seven = 7] = "Seven", i[i.Eight = 8] = "Eight", i[i.Nine = 9] = "Nine";
})(hf || (hf = {}));
var Mo;
(function(i) {
  i[i.Left = 1] = "Left", i[i.Right = 2] = "Right";
})(Mo || (Mo = {}));
function mN(i, e) {
  return `${gt.toKey(i)}.${e}`;
}
var hr;
(function(i) {
  i[i.Off = 0] = "Off", i[i.On = 1] = "On", i[i.Relative = 2] = "Relative", i[i.Interval = 3] = "Interval";
})(hr || (hr = {}));
var tu;
(function(i) {
  i[i.Manual = 1] = "Manual", i[i.AfterDelay = 2] = "AfterDelay", i[i.FocusOut = 3] = "FocusOut";
})(tu || (tu = {}));
var zm;
(function(i) {
  i[i.Default = 0] = "Default", i[i.InCenter = 1] = "InCenter", i[i.InCenterIfOutsideViewport = 2] = "InCenterIfOutsideViewport", i[i.AtTop = 3] = "AtTop";
})(zm || (zm = {}));
var qu;
(function(i) {
  i[i.Keyboard = 1] = "Keyboard", i[i.Mouse = 2] = "Mouse", i[i.Command = 3] = "Command";
})(qu || (qu = {}));
var iu;
(function(i) {
  i[i.Addition = 1] = "Addition", i[i.Deletion = 2] = "Deletion", i[i.Modification = 3] = "Modification";
})(iu || (iu = {}));
var ff;
(function(i) {
  i[i.Undo = 1] = "Undo", i[i.Redo = 2] = "Redo";
})(ff || (ff = {}));
var Fa;
(function(i) {
  i[i.OpenOpen = 0] = "OpenOpen", i[i.ClosedClosed = 1] = "ClosedClosed", i[i.OpenClosed = 2] = "OpenClosed", i[i.ClosedOpen = 3] = "ClosedOpen";
})(Fa || (Fa = {}));
(function(i) {
  function e(t) {
    switch (t) {
      case "keyboard":
        return i.Keyboard;
      case "mouse":
        return i.Mouse;
      case vh.PROGRAMMATIC:
      case vh.JUMP:
      case vh.NAVIGATION:
        return i.Command;
    }
  }
  i.fromValue = e;
})(qu || (qu = {}));
var ju;
(function(i) {
  i[i.Other = 0] = "Other", i[i.Comment = 1] = "Comment", i[i.String = 2] = "String", i[i.RegEx = 3] = "RegEx";
})(ju || (ju = {}));
(function(i) {
  function e(t) {
    switch (t) {
      case i.Other:
        return "other";
      case i.Comment:
        return "comment";
      case i.String:
        return "string";
      case i.RegEx:
        return "regex";
    }
    return "other";
  }
  i.toString = e;
})(ju || (ju = {}));
let qm = class {
  constructor(e, t) {
    if (t && !x.isUri(t))
      throw Ge("target");
    if (!$e.isRange(e) || e.isEmpty)
      throw Ge("range");
    this.range = e, this.target = t;
  }
};
qm = z([
  be
], qm);
let Gu = class {
  constructor(e, t, n, r) {
    this.red = e, this.green = t, this.blue = n, this.alpha = r;
  }
};
Gu = z([
  be
], Gu);
let jm = class {
  constructor(e, t) {
    if (t && !(t instanceof Gu))
      throw Ge("color");
    if (!$e.isRange(e) || e.isEmpty)
      throw Ge("range");
    this.range = e, this.color = t;
  }
};
jm = z([
  be
], jm);
let Gm = class {
  constructor(e) {
    if (!e || typeof e != "string")
      throw Ge("label");
    this.label = e;
  }
};
Gm = z([
  be
], Gm);
var hI;
(function(i) {
  i[i.RGB = 0] = "RGB", i[i.HEX = 1] = "HEX", i[i.HSL = 2] = "HSL";
})(hI || (hI = {}));
var Hb;
(function(i) {
  i[i.Error = 0] = "Error", i[i.Warning = 1] = "Warning", i[i.Information = 2] = "Information";
})(Hb || (Hb = {}));
var Bb;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Shutdown = 1] = "Shutdown", i[i.Process = 2] = "Process", i[i.User = 3] = "User", i[i.Extension = 4] = "Extension";
})(Bb || (Bb = {}));
var pf;
(function(i) {
  i[i.Low = 0] = "Low", i[i.Medium = 1] = "Medium", i[i.High = 2] = "High";
})(pf || (pf = {}));
var Wb;
(function(i) {
  i[i.Sh = 1] = "Sh", i[i.Bash = 2] = "Bash", i[i.Fish = 3] = "Fish", i[i.Csh = 4] = "Csh", i[i.Ksh = 5] = "Ksh", i[i.Zsh = 6] = "Zsh", i[i.CommandPrompt = 7] = "CommandPrompt", i[i.GitBash = 8] = "GitBash", i[i.PowerShell = 9] = "PowerShell", i[i.Python = 10] = "Python", i[i.Julia = 11] = "Julia", i[i.NuShell = 12] = "NuShell", i[i.Node = 13] = "Node";
})(Wb || (Wb = {}));
class _N {
  constructor(e, t, n) {
    if (this.startIndex = e, this.length = t, this.tooltip = n, typeof e != "number" || e < 0)
      throw Ge("startIndex");
    if (typeof t != "number" || t < 1)
      throw Ge("length");
    if (n !== void 0 && typeof n != "string")
      throw Ge("tooltip");
  }
}
class vN {
  constructor(e) {
    this.uri = e;
  }
}
class wN {
  constructor(e) {
    this.terminalCommand = e;
  }
}
var Vb;
(function(i) {
  i[i.Panel = 1] = "Panel", i[i.Editor = 2] = "Editor";
})(Vb || (Vb = {}));
class bN {
  constructor(e) {
    if (this.options = e, typeof e != "object")
      throw Ge("options");
  }
}
var zb;
(function(i) {
  i[i.File = 0] = "File", i[i.Folder = 1] = "Folder", i[i.Method = 2] = "Method", i[i.Alias = 3] = "Alias", i[i.Argument = 4] = "Argument", i[i.Option = 5] = "Option", i[i.OptionValue = 6] = "OptionValue", i[i.Flag = 7] = "Flag", i[i.SymbolicLinkFile = 8] = "SymbolicLinkFile", i[i.SymbolicLinkFolder = 9] = "SymbolicLinkFolder";
})(zb || (zb = {}));
class yN {
  constructor(e, t, n, r, s, o, a, l, c) {
    this.label = e, this.icon = t, this.detail = n, this.documentation = r, this.isFile = s, this.isDirectory = o, this.isKeyword = a, this.replacementIndex = l ?? 0, this.replacementLength = c ?? 0;
  }
}
let xN = class {
  constructor(e, t) {
    this.items = e ?? [], this.resourceRequestConfig = t;
  }
};
var qb;
(function(i) {
  i[i.Always = 1] = "Always", i[i.Silent = 2] = "Silent", i[i.Never = 3] = "Never";
})(qb || (qb = {}));
var jb;
(function(i) {
  i.Changed = "changed", i.ProcessStarted = "processStarted", i.ProcessEnded = "processEnded", i.Terminated = "terminated", i.Start = "start", i.AcquiredInput = "acquiredInput", i.DependsOnStarted = "dependsOnStarted", i.Active = "active", i.Inactive = "inactive", i.End = "end", i.ProblemMatcherStarted = "problemMatcherStarted", i.ProblemMatcherEnded = "problemMatcherEnded", i.ProblemMatcherFoundErrors = "problemMatcherFoundErrors";
})(jb || (jb = {}));
var Gb;
(function(i) {
  i[i.Shared = 1] = "Shared", i[i.Dedicated = 2] = "Dedicated", i[i.New = 3] = "New";
})(Gb || (Gb = {}));
var Gr;
let gf = (Gr = class {
  static from(e) {
    switch (e) {
      case "clean":
        return Lr.Clean;
      case "build":
        return Lr.Build;
      case "rebuild":
        return Lr.Rebuild;
      case "test":
        return Lr.Test;
      default:
        return;
    }
  }
  constructor(e, t) {
    if (this.label = t, typeof e != "string" || typeof t != "string")
      throw Ge("name");
    this._id = e;
  }
  get id() {
    return this._id;
  }
}, Lr = Gr, Gr.Clean = new Lr("clean", "Clean"), Gr.Build = new Lr("build", "Build"), Gr.Rebuild = new Lr("rebuild", "Rebuild"), Gr.Test = new Lr("test", "Test"), Gr);
gf = Lr = z([
  be
], gf);
function _5(i) {
  let e = "";
  for (let t = 0; t < i.length; t++)
    e += i[t].replace(/,/g, ",,") + ",";
  return e;
}
let Qu = class {
  constructor(e, t, n) {
    if (typeof e != "string")
      throw Ge("process");
    this._args = [], this._process = e, t !== void 0 && (Array.isArray(t) ? (this._args = t, this._options = n) : this._options = t);
  }
  get process() {
    return this._process;
  }
  set process(e) {
    if (typeof e != "string")
      throw Ge("process");
    this._process = e;
  }
  get args() {
    return this._args;
  }
  set args(e) {
    Array.isArray(e) || (e = []), this._args = e;
  }
  get options() {
    return this._options;
  }
  set options(e) {
    this._options = e;
  }
  computeId() {
    const e = [];
    if (e.push("process"), this._process !== void 0 && e.push(this._process), this._args && this._args.length > 0)
      for (const t of this._args)
        e.push(t);
    return _5(e);
  }
};
Qu = z([
  be
], Qu);
let Bl = class {
  constructor(e, t, n) {
    if (this._args = [], Array.isArray(t)) {
      if (!e)
        throw Ge("command can't be undefined or null");
      if (typeof e != "string" && typeof e.value != "string")
        throw Ge("command");
      this._command = e, t && (this._args = t), this._options = n;
    } else {
      if (typeof e != "string")
        throw Ge("commandLine");
      this._commandLine = e, this._options = t;
    }
  }
  get commandLine() {
    return this._commandLine;
  }
  set commandLine(e) {
    if (typeof e != "string")
      throw Ge("commandLine");
    this._commandLine = e;
  }
  get command() {
    return this._command ? this._command : "";
  }
  set command(e) {
    if (typeof e != "string" && typeof e.value != "string")
      throw Ge("command");
    this._command = e;
  }
  get args() {
    return this._args;
  }
  set args(e) {
    this._args = e || [];
  }
  get options() {
    return this._options;
  }
  set options(e) {
    this._options = e;
  }
  computeId() {
    const e = [];
    if (e.push("shell"), this._commandLine !== void 0 && e.push(this._commandLine), this._command !== void 0 && e.push(typeof this._command == "string" ? this._command : this._command.value), this._args && this._args.length > 0)
      for (const t of this._args)
        e.push(typeof t == "string" ? t : t.value);
    return _5(e);
  }
};
Bl = z([
  be
], Bl);
var Qb;
(function(i) {
  i[i.Escape = 1] = "Escape", i[i.Strong = 2] = "Strong", i[i.Weak = 3] = "Weak";
})(Qb || (Qb = {}));
var Yo;
(function(i) {
  i[i.Global = 1] = "Global", i[i.Workspace = 2] = "Workspace";
})(Yo || (Yo = {}));
class dS {
  constructor(e) {
    this._callback = e;
  }
  computeId() {
    return "customExecution" + dn();
  }
  set callback(e) {
    this._callback = e;
  }
  get callback() {
    return this._callback;
  }
}
var Qr;
let Qm = (Qr = class {
  constructor(e, t, n, r, s, o) {
    this.__deprecated = !1, this._definition = this.definition = e;
    let a;
    typeof t == "string" ? (this._name = this.name = t, this._source = this.source = n, this.execution = r, a = s, this.__deprecated = !0) : t === Yo.Global || t === Yo.Workspace ? (this.target = t, this._name = this.name = n, this._source = this.source = r, this.execution = s, a = o) : (this.target = t, this._name = this.name = n, this._source = this.source = r, this.execution = s, a = o), typeof a == "string" ? (this._problemMatchers = [a], this._hasDefinedMatchers = !0) : Array.isArray(a) ? (this._problemMatchers = a, this._hasDefinedMatchers = !0) : (this._problemMatchers = [], this._hasDefinedMatchers = !1), this._isBackground = !1, this._presentationOptions = /* @__PURE__ */ Object.create(null), this._runOptions = /* @__PURE__ */ Object.create(null);
  }
  get _id() {
    return this.__id;
  }
  set _id(e) {
    this.__id = e;
  }
  get _deprecated() {
    return this.__deprecated;
  }
  clear() {
    this.__id !== void 0 && (this.__id = void 0, this._scope = void 0, this.computeDefinitionBasedOnExecution());
  }
  computeDefinitionBasedOnExecution() {
    this._execution instanceof Qu ? this._definition = {
      type: Nr.ProcessType,
      id: this._execution.computeId()
    } : this._execution instanceof Bl ? this._definition = {
      type: Nr.ShellType,
      id: this._execution.computeId()
    } : this._execution instanceof dS ? this._definition = {
      type: Nr.ExtensionCallbackType,
      id: this._execution.computeId()
    } : this._definition = {
      type: Nr.EmptyType,
      id: dn()
    };
  }
  get definition() {
    return this._definition;
  }
  set definition(e) {
    if (e == null)
      throw Ge("Kind can't be undefined or null");
    this.clear(), this._definition = e;
  }
  get scope() {
    return this._scope;
  }
  set target(e) {
    this.clear(), this._scope = e;
  }
  get name() {
    return this._name;
  }
  set name(e) {
    if (typeof e != "string")
      throw Ge("name");
    this.clear(), this._name = e;
  }
  get execution() {
    return this._execution;
  }
  set execution(e) {
    e === null && (e = void 0), this.clear(), this._execution = e;
    const t = this._definition.type;
    (Nr.EmptyType === t || Nr.ProcessType === t || Nr.ShellType === t || Nr.ExtensionCallbackType === t) && this.computeDefinitionBasedOnExecution();
  }
  get problemMatchers() {
    return this._problemMatchers;
  }
  set problemMatchers(e) {
    if (Array.isArray(e))
      this.clear(), this._problemMatchers = e, this._hasDefinedMatchers = !0;
    else {
      this.clear(), this._problemMatchers = [], this._hasDefinedMatchers = !1;
      return;
    }
  }
  get hasDefinedMatchers() {
    return this._hasDefinedMatchers;
  }
  get isBackground() {
    return this._isBackground;
  }
  set isBackground(e) {
    e !== !0 && e !== !1 && (e = !1), this.clear(), this._isBackground = e;
  }
  get source() {
    return this._source;
  }
  set source(e) {
    if (typeof e != "string" || e.length === 0)
      throw Ge("source must be a string of length > 0");
    this.clear(), this._source = e;
  }
  get group() {
    return this._group;
  }
  set group(e) {
    e === null && (e = void 0), this.clear(), this._group = e;
  }
  get detail() {
    return this._detail;
  }
  set detail(e) {
    e === null && (e = void 0), this._detail = e;
  }
  get presentationOptions() {
    return this._presentationOptions;
  }
  set presentationOptions(e) {
    e == null && (e = /* @__PURE__ */ Object.create(null)), this.clear(), this._presentationOptions = e;
  }
  get runOptions() {
    return this._runOptions;
  }
  set runOptions(e) {
    e == null && (e = /* @__PURE__ */ Object.create(null)), this.clear(), this._runOptions = e;
  }
}, Nr = Qr, Qr.ExtensionCallbackType = "customExecution", Qr.ProcessType = "process", Qr.ShellType = "shell", Qr.EmptyType = "$empty", Qr);
Qm = Nr = z([
  be
], Qm);
var zo;
(function(i) {
  i[i.SourceControl = 1] = "SourceControl", i[i.Window = 10] = "Window", i[i.Notification = 15] = "Notification";
})(zo || (zo = {}));
var Kb;
(function(i) {
  function e(t) {
    const n = t;
    return ol(n.value) ? n.tooltip && !st(n.tooltip) ? (console.log("INVALID view badge, invalid tooltip", n.tooltip), !1) : !0 : (console.log("INVALID view badge, invalid value", n.value), !1);
  }
  i.isViewBadge = e;
})(Kb || (Kb = {}));
let Km = Tb = class {
  static isTreeItem(e, t) {
    var r, s;
    const n = e;
    if (n.checkboxState !== void 0) {
      const o = ol(n.checkboxState) ? n.checkboxState : ai(n.checkboxState) && ol(n.checkboxState.state) ? n.checkboxState.state : void 0, a = !ol(n.checkboxState) && ai(n.checkboxState) ? n.checkboxState.tooltip : void 0;
      if (o === void 0 || o !== jr.Checked && o !== jr.Unchecked || a !== void 0 && !st(a))
        return console.log("INVALID tree item, invalid checkboxState", n.checkboxState), !1;
    }
    if (e instanceof Tb)
      return !0;
    if (n.label !== void 0 && !st(n.label) && !((r = n.label) != null && r.label))
      return console.log("INVALID tree item, invalid label", n.label), !1;
    if (n.id !== void 0 && !st(n.id))
      return console.log("INVALID tree item, invalid id", n.id), !1;
    if (n.iconPath !== void 0 && !st(n.iconPath) && !x.isUri(n.iconPath) && (!n.iconPath || !st(n.iconPath.id))) {
      const o = n.iconPath;
      if (!o || !st(o.light) && !x.isUri(o.light) && !st(o.dark) && !x.isUri(o.dark))
        return console.log("INVALID tree item, invalid iconPath", n.iconPath), !1;
    }
    return n.description !== void 0 && !st(n.description) && typeof n.description != "boolean" ? (console.log("INVALID tree item, invalid description", n.description), !1) : n.resourceUri !== void 0 && !x.isUri(n.resourceUri) ? (console.log("INVALID tree item, invalid resourceUri", n.resourceUri), !1) : n.tooltip !== void 0 && !st(n.tooltip) && !(n.tooltip instanceof Dn) ? (console.log("INVALID tree item, invalid tooltip", n.tooltip), !1) : n.command !== void 0 && !n.command.command ? (console.log("INVALID tree item, invalid command", n.command), !1) : n.collapsibleState !== void 0 && n.collapsibleState < pl.None && n.collapsibleState > pl.Expanded ? (console.log("INVALID tree item, invalid collapsibleState", n.collapsibleState), !1) : n.contextValue !== void 0 && !st(n.contextValue) ? (console.log("INVALID tree item, invalid contextValue", n.contextValue), !1) : n.accessibilityInformation !== void 0 && !((s = n.accessibilityInformation) != null && s.label) ? (console.log("INVALID tree item, invalid accessibilityInformation", n.accessibilityInformation), !1) : !0;
  }
  constructor(e, t = pl.None) {
    this.collapsibleState = t, x.isUri(e) ? this.resourceUri = e : this.label = e;
  }
};
Km = Tb = z([
  be
], Km);
var pl;
(function(i) {
  i[i.None = 0] = "None", i[i.Collapsed = 1] = "Collapsed", i[i.Expanded = 2] = "Expanded";
})(pl || (pl = {}));
var jr;
(function(i) {
  i[i.Unchecked = 0] = "Unchecked", i[i.Checked = 1] = "Checked";
})(jr || (jr = {}));
let Jm = class {
  async asString() {
    return typeof this.value == "string" ? this.value : JSON.stringify(this.value);
  }
  asFile() {
  }
  constructor(e) {
    this.value = e;
  }
};
Jm = z([
  be
], Jm);
class Ym extends Jm {
}
var sp;
class EN extends Ym {
  constructor(t) {
    super("");
    ye(this, sp);
    le(this, sp, t);
  }
  asFile() {
    return N(this, sp);
  }
}
sp = new WeakMap();
class SN {
  constructor(e, t, n, r) {
    this.name = e, this.uri = t, this._itemId = n, this._getData = r;
  }
  data() {
    return this._getData();
  }
}
var Ns, qa, Kd, vT;
let Ku = (vT = class {
  constructor(e) {
    ye(this, qa);
    ye(this, Ns, /* @__PURE__ */ new Map());
    for (const [t, n] of e ?? []) {
      const r = N(this, Ns).get(Pd(this, qa, Kd).call(this, t));
      r ? r.push(n) : N(this, Ns).set(Pd(this, qa, Kd).call(this, t), [n]);
    }
  }
  get(e) {
    var t;
    return (t = N(this, Ns).get(Pd(this, qa, Kd).call(this, e))) == null ? void 0 : t[0];
  }
  set(e, t) {
    N(this, Ns).set(Pd(this, qa, Kd).call(this, e), [t]);
  }
  forEach(e, t) {
    for (const [n, r] of N(this, Ns))
      for (const s of r)
        e.call(t, s, n, this);
  }
  *[Symbol.iterator]() {
    for (const [e, t] of N(this, Ns))
      for (const n of t)
        yield [e, n];
  }
}, Ns = new WeakMap(), qa = new WeakSet(), Kd = function(e) {
  return e.toLowerCase();
}, vT);
Ku = z([
  be
], Ku);
let Jb = class {
  constructor(e, t, n) {
    this.insertText = e, this.title = t, this.kind = n;
  }
};
Jb = z([
  be
], Jb);
var Yb;
(function(i) {
  i[i.Automatic = 0] = "Automatic", i[i.PasteAs = 1] = "PasteAs";
})(Yb || (Yb = {}));
const zc = class zc {
  constructor(e) {
    this.value = e;
  }
  append(...e) {
    return new zc(
      (this.value ? [this.value, ...e] : e).join(zc.sep)
    );
  }
  intersects(e) {
    return this.contains(e) || e.contains(this);
  }
  contains(e) {
    return this.value === e.value || e.value.startsWith(this.value + zc.sep);
  }
};
zc.sep = ".";
let hs = zc;
hs.Empty = new hs("");
hs.Text = new hs("text");
hs.TextUpdateImports = hs.Text.append("updateImports");
class DN {
  constructor(e, t, n) {
    this.title = t, this.insertText = e, this.kind = n;
  }
}
let Ji = class {
  constructor(e, t) {
    this.id = e, this.color = t;
  }
  static isThemeIcon(e) {
    return typeof e.id != "string" ? (console.log("INVALID ThemeIcon, invalid id", e.id), !1) : !0;
  }
};
Ji = z([
  be
], Ji);
Ji.File = new Ji("file");
Ji.Folder = new Ji("folder");
let mf = class {
  constructor(e) {
    this.id = e;
  }
};
mf = z([
  be
], mf);
var nu;
(function(i) {
  i[i.Global = 1] = "Global", i[i.Workspace = 2] = "Workspace", i[i.WorkspaceFolder = 3] = "WorkspaceFolder";
})(nu || (nu = {}));
let ru = class {
  get base() {
    return this._base;
  }
  set base(e) {
    this._base = e, this._baseUri = x.file(e);
  }
  get baseUri() {
    return this._baseUri;
  }
  set baseUri(e) {
    this._baseUri = e, this._base = e.fsPath;
  }
  constructor(e, t) {
    if (typeof e != "string" && (!e || !x.isUri(e) && !x.isUri(e.uri)))
      throw Ge("base");
    if (typeof t != "string")
      throw Ge("pattern");
    typeof e == "string" ? this.baseUri = x.file(e) : x.isUri(e) ? this.baseUri = e : this.baseUri = e.uri, this.pattern = t;
  }
  toJSON() {
    return {
      pattern: this.pattern,
      base: this.base,
      baseUri: this.baseUri.toJSON()
    };
  }
};
ru = z([
  be
], ru);
const v5 = /* @__PURE__ */ new WeakMap();
function kN(i, e) {
  v5.set(i, e);
}
let Ju = class {
  constructor(e, t, n, r, s) {
    this.enabled = typeof e == "boolean" ? e : !0, typeof t == "string" && (this.condition = t), typeof n == "string" && (this.hitCondition = n), typeof r == "string" && (this.logMessage = r), typeof s == "string" && (this.mode = s);
  }
  get id() {
    return this._id || (this._id = v5.get(this) ?? dn()), this._id;
  }
};
Ju = z([
  be
], Ju);
let Ua = class extends Ju {
  constructor(e, t, n, r, s, o) {
    if (super(t, n, r, s, o), e === null)
      throw Ge("location");
    this.location = e;
  }
};
Ua = z([
  be
], Ua);
let $a = class extends Ju {
  constructor(e, t, n, r, s, o) {
    super(t, n, r, s, o), this.functionName = e;
  }
};
$a = z([
  be
], $a);
let Xm = class extends Ju {
  constructor(e, t, n, r, s, o, a, l) {
    if (super(r, s, o, a, l), !t)
      throw Ge("dataId");
    this.label = e, this.dataId = t, this.canPersist = n;
  }
};
Xm = z([
  be
], Xm);
let Zm = class {
  constructor(e, t, n) {
    this.command = e, this.args = t || [], this.options = n;
  }
};
Zm = z([
  be
], Zm);
let _f = class {
  constructor(e, t) {
    this.port = e, this.host = t;
  }
};
_f = z([
  be
], _f);
let e_ = class {
  constructor(e) {
    this.path = e;
  }
};
e_ = z([
  be
], e_);
let vf = class {
  constructor(e) {
    this.implementation = e;
  }
};
vf = z([
  be
], vf);
class w5 {
  constructor(e, t, n) {
    this.session = e, this.threadId = t, this.frameId = n;
  }
}
class b5 {
  constructor(e, t) {
    this.session = e, this.threadId = t;
  }
}
let t_ = class {
  constructor(e, t) {
    this.range = e, this.expression = t;
  }
};
t_ = z([
  be
], t_);
var wf;
(function(i) {
  i[i.Invoke = 0] = "Invoke", i[i.Automatic = 1] = "Automatic";
})(wf || (wf = {}));
var Ts;
(function(i) {
  i[i.Other = 0] = "Other", i[i.Empty = 1] = "Empty", i[i.TokenCancellation = 2] = "TokenCancellation", i[i.LostRace = 3] = "LostRace", i[i.NotTaken = 4] = "NotTaken";
})(Ts || (Ts = {}));
let i_ = class {
  constructor(e, t) {
    this.range = e, this.text = t;
  }
};
i_ = z([
  be
], i_);
let n_ = class {
  constructor(e, t, n = !0) {
    this.range = e, this.variableName = t, this.caseSensitiveLookup = n;
  }
};
n_ = z([
  be
], n_);
let r_ = class {
  constructor(e, t) {
    this.range = e, this.expression = t;
  }
};
r_ = z([
  be
], r_);
let Xb = class {
  constructor(e, t) {
    this.frameId = e, this.stoppedLocation = t;
  }
};
Xb = z([
  be
], Xb);
var Zb;
(function(i) {
  i[i.AIGenerated = 1] = "AIGenerated";
})(Zb || (Zb = {}));
var bf;
(function(i) {
  i[i.Invoke = 0] = "Invoke", i[i.Automatic = 1] = "Automatic";
})(bf || (bf = {}));
class IN {
  constructor(e, t) {
    this.newSymbolName = e, this.tags = t;
  }
}
var su;
(function(i) {
  i[i.Changed = 1] = "Changed", i[i.Created = 2] = "Created", i[i.Deleted = 3] = "Deleted";
})(su || (su = {}));
let fi = tn = class extends Error {
  static FileExists(e) {
    return new tn(
      e,
      Ue.FileExists,
      tn.FileExists
    );
  }
  static FileNotFound(e) {
    return new tn(
      e,
      Ue.FileNotFound,
      tn.FileNotFound
    );
  }
  static FileNotADirectory(e) {
    return new tn(
      e,
      Ue.FileNotADirectory,
      tn.FileNotADirectory
    );
  }
  static FileIsADirectory(e) {
    return new tn(
      e,
      Ue.FileIsADirectory,
      tn.FileIsADirectory
    );
  }
  static NoPermissions(e) {
    return new tn(
      e,
      Ue.NoPermissions,
      tn.NoPermissions
    );
  }
  static Unavailable(e) {
    return new tn(
      e,
      Ue.Unavailable,
      tn.Unavailable
    );
  }
  constructor(e, t = Ue.Unknown, n) {
    super(x.isUri(e) ? e.toString(!0) : e), this.code = (n == null ? void 0 : n.name) ?? "Unknown", gP(this, t), Object.setPrototypeOf(this, tn.prototype), typeof Error.captureStackTrace == "function" && typeof n == "function" && Error.captureStackTrace(this, n);
  }
};
fi = tn = z([
  be
], fi);
let ey = class {
  constructor(e, t, n) {
    this.start = e, this.end = t, this.kind = n;
  }
};
ey = z([
  be
], ey);
var Ps;
(function(i) {
  i[i.Comment = 1] = "Comment", i[i.Imports = 2] = "Imports", i[i.Region = 3] = "Region";
})(Ps || (Ps = {}));
var yf;
(function(i) {
  i[i.Collapsed = 0] = "Collapsed", i[i.Expanded = 1] = "Expanded";
})(yf || (yf = {}));
var ty;
(function(i) {
  i[i.Editing = 0] = "Editing", i[i.Preview = 1] = "Preview";
})(ty || (ty = {}));
var iy;
(function(i) {
  i[i.Published = 0] = "Published", i[i.Draft = 1] = "Draft";
})(iy || (iy = {}));
var xf;
(function(i) {
  i[i.Unresolved = 0] = "Unresolved", i[i.Resolved = 1] = "Resolved";
})(xf || (xf = {}));
var Ef;
(function(i) {
  i[i.Current = 0] = "Current", i[i.Outdated = 1] = "Outdated";
})(Ef || (Ef = {}));
var Sf;
(function(i) {
  i[i.Reply = 1] = "Reply", i[i.Comment = 2] = "Comment";
})(Sf || (Sf = {}));
class ny {
  constructor(e, t = []) {
    this.tokenTypes = e, this.tokenModifiers = t;
  }
}
function CN(i) {
  return typeof i > "u" || DR(i);
}
class hS {
  constructor(e) {
    if (this._prevLine = 0, this._prevChar = 0, this._dataIsSortedAndDeltaEncoded = !0, this._data = [], this._dataLen = 0, this._tokenTypeStrToInt = /* @__PURE__ */ new Map(), this._tokenModifierStrToInt = /* @__PURE__ */ new Map(), this._hasLegend = !1, e) {
      this._hasLegend = !0;
      for (let t = 0, n = e.tokenTypes.length; t < n; t++)
        this._tokenTypeStrToInt.set(e.tokenTypes[t], t);
      for (let t = 0, n = e.tokenModifiers.length; t < n; t++)
        this._tokenModifierStrToInt.set(e.tokenModifiers[t], t);
    }
  }
  push(e, t, n, r, s) {
    if (typeof e == "number" && typeof t == "number" && typeof n == "number" && typeof r == "number" && (typeof s == "number" || typeof s > "u"))
      return typeof s > "u" && (s = 0), this._pushEncoded(e, t, n, r, s);
    if ($e.isRange(e) && typeof t == "string" && CN(n))
      return this._push(e, t, n);
    throw Ge();
  }
  _push(e, t, n) {
    if (!this._hasLegend)
      throw new Error("Legend must be provided in constructor");
    if (e.start.line !== e.end.line)
      throw new Error("`range` cannot span multiple lines");
    if (!this._tokenTypeStrToInt.has(t))
      throw new Error("`tokenType` is not in the provided legend");
    const r = e.start.line, s = e.start.character, o = e.end.character - e.start.character, a = this._tokenTypeStrToInt.get(t);
    let l = 0;
    if (n)
      for (const c of n) {
        if (!this._tokenModifierStrToInt.has(c))
          throw new Error("`tokenModifier` is not in the provided legend");
        const u = this._tokenModifierStrToInt.get(c);
        l |= 1 << u >>> 0;
      }
    this._pushEncoded(r, s, o, a, l);
  }
  _pushEncoded(e, t, n, r, s) {
    if (this._dataIsSortedAndDeltaEncoded && (e < this._prevLine || e === this._prevLine && t < this._prevChar)) {
      this._dataIsSortedAndDeltaEncoded = !1;
      const l = this._data.length / 5 | 0;
      let c = 0, u = 0;
      for (let d = 0; d < l; d++) {
        let f = this._data[5 * d], p = this._data[5 * d + 1];
        f === 0 ? (f = c, p += u) : f += c, this._data[5 * d] = f, this._data[5 * d + 1] = p, c = f, u = p;
      }
    }
    let o = e, a = t;
    this._dataIsSortedAndDeltaEncoded && this._dataLen > 0 && (o -= this._prevLine, o === 0 && (a -= this._prevChar)), this._data[this._dataLen++] = o, this._data[this._dataLen++] = a, this._data[this._dataLen++] = n, this._data[this._dataLen++] = r, this._data[this._dataLen++] = s, this._prevLine = e, this._prevChar = t;
  }
  static _sortAndDeltaEncode(e) {
    const t = [], n = e.length / 5 | 0;
    for (let a = 0; a < n; a++)
      t[a] = a;
    t.sort((a, l) => {
      const c = e[5 * a], u = e[5 * l];
      if (c === u) {
        const d = e[5 * a + 1], f = e[5 * l + 1];
        return d - f;
      }
      return c - u;
    });
    const r = new Uint32Array(e.length);
    let s = 0, o = 0;
    for (let a = 0; a < n; a++) {
      const l = 5 * t[a], c = e[l + 0], u = e[l + 1], d = e[l + 2], f = e[l + 3], p = e[l + 4], v = c - s, _ = v === 0 ? u - o : u, m = 5 * a;
      r[m + 0] = v, r[m + 1] = _, r[m + 2] = d, r[m + 3] = f, r[m + 4] = p, s = c, o = u;
    }
    return r;
  }
  build(e) {
    return this._dataIsSortedAndDeltaEncoded ? new Yu(new Uint32Array(this._data), e) : new Yu(hS._sortAndDeltaEncode(this._data), e);
  }
}
class Yu {
  constructor(e, t) {
    this.resultId = t, this.data = e;
  }
}
class y5 {
  constructor(e, t, n) {
    this.start = e, this.deleteCount = t, this.data = n;
  }
}
class kg {
  constructor(e, t) {
    this.resultId = t, this.edits = e;
  }
}
var s_;
(function(i) {
  i[i.Separate = 0] = "Separate", i[i.MergeWithParent = 1] = "MergeWithParent";
})(s_ || (s_ = {}));
class TN {
  constructor(e) {
    this.name = e;
  }
}
var ry;
(function(i) {
  i[i.Title = 1] = "Title", i[i.Inline = 2] = "Inline";
})(ry || (ry = {}));
var pu;
let Df = (pu = class {
  constructor() {
  }
}, pu.Back = { iconPath: new Ji("arrow-left") }, pu);
Df = z([
  be
], Df);
var kf;
(function(i) {
  i[i.Separator = -1] = "Separator", i[i.Default = 0] = "Default";
})(kf || (kf = {}));
var ou;
(function(i) {
  i[i.Info = 1] = "Info", i[i.Warning = 2] = "Warning", i[i.Error = 3] = "Error";
})(ou || (ou = {}));
var gl;
(function(i) {
  i[i.UI = 1] = "UI", i[i.Workspace = 2] = "Workspace";
})(gl || (gl = {}));
class sy {
  static validate(e) {
    if (typeof e.badge == "string") {
      let t = D2(e.badge, 0);
      if (t < e.badge.length && (t += D2(e.badge, t)), e.badge.length > t)
        throw new Error("The 'badge'-property must be undefined or a short character");
    } else if (e.badge && !Ji.isThemeIcon(e.badge))
      throw new Error("The 'badge'-property is not a valid ThemeIcon");
    if (!e.color && !e.badge && !e.tooltip)
      throw new Error("The decoration is empty");
    return !0;
  }
  constructor(e, t, n) {
    this.badge = e, this.tooltip = t, this.color = n;
  }
}
let o_ = class {
  constructor(e) {
    this.kind = e;
  }
};
o_ = z([
  be
], o_);
var Do;
(function(i) {
  i[i.Light = 1] = "Light", i[i.Dark = 2] = "Dark", i[i.HighContrast = 3] = "HighContrast", i[i.HighContrastLight = 4] = "HighContrastLight";
})(Do || (Do = {}));
let es = class oy {
  static isNotebookRange(e) {
    return e instanceof oy ? !0 : e ? typeof e.start == "number" && typeof e.end == "number" : !1;
  }
  get start() {
    return this._start;
  }
  get end() {
    return this._end;
  }
  get isEmpty() {
    return this._start === this._end;
  }
  constructor(e, t) {
    if (e < 0)
      throw Ge("start must be positive");
    if (t < 0)
      throw Ge("end must be positive");
    e <= t ? (this._start = e, this._end = t) : (this._start = t, this._end = e);
  }
  with(e) {
    let t = this._start, n = this._end;
    return e.start !== void 0 && (t = e.start), e.end !== void 0 && (n = e.end), t === this._start && n === this._end ? this : new oy(t, n);
  }
}, uv = class ay {
  static validate(e) {
    if (typeof e.kind != "number")
      throw new Error("NotebookCellData MUST have 'kind' property");
    if (typeof e.value != "string")
      throw new Error("NotebookCellData MUST have 'value' property");
    if (typeof e.languageId != "string")
      throw new Error("NotebookCellData MUST have 'languageId' property");
  }
  static isNotebookCellDataArray(e) {
    return Array.isArray(e) && e.every((t) => ay.isNotebookCellData(t));
  }
  static isNotebookCellData(e) {
    return !0;
  }
  constructor(e, t, n, r, s, o, a) {
    this.kind = e, this.value = t, this.languageId = n, this.mime = r, this.outputs = s ?? [], this.metadata = o, this.executionSummary = a, ay.validate(this);
  }
}, x5 = class {
  constructor(e) {
    this.cells = e;
  }
};
var bn, A1;
let E5 = (bn = class {
  static isNotebookCellOutputItem(e) {
    return e instanceof bn ? !0 : e ? typeof e.mime == "string" && e.data instanceof Uint8Array : !1;
  }
  static error(e) {
    const t = {
      name: e.name,
      message: e.message,
      stack: e.stack
    };
    return bn.json(t, "application/vnd.code.notebook.error");
  }
  static stdout(e) {
    return bn.text(e, "application/vnd.code.notebook.stdout");
  }
  static stderr(e) {
    return bn.text(e, "application/vnd.code.notebook.stderr");
  }
  static bytes(e, t = "application/octet-stream") {
    return new bn(e, t);
  }
  static text(e, t = Dr.text) {
    const n = N(bn, A1).encode(String(e));
    return new bn(n, t);
  }
  static json(e, t = "text/x-json") {
    const n = JSON.stringify(e, void 0, "	");
    return bn.text(n, t);
  }
  constructor(e, t) {
    this.data = e, this.mime = t;
    const n = OP(t, !0);
    if (!n)
      throw new Error(
        `INVALID mime type: ${t}. Must be in the format "type/subtype[;optionalparameter]"`
      );
    this.mime = n;
  }
}, A1 = new WeakMap(), ye(bn, A1, new TextEncoder()), bn), a_ = class ly {
  static isNotebookCellOutput(e) {
    return e instanceof ly ? !0 : !e || typeof e != "object" ? !1 : typeof e.id == "string" && Array.isArray(e.items);
  }
  static ensureUniqueMimeTypes(e, t = !1) {
    const n = /* @__PURE__ */ new Set(), r = /* @__PURE__ */ new Set();
    for (let s = 0; s < e.length; s++) {
      const o = e[s], a = OP(o.mime);
      if (!n.has(a) || c5(a)) {
        n.add(a);
        continue;
      }
      r.add(s), t && console.warn(`DUPLICATED mime type '${o.mime}' will be dropped`);
    }
    return r.size === 0 ? e : e.filter((s, o) => !r.has(o));
  }
  constructor(e, t, n) {
    this.items = ly.ensureUniqueMimeTypes(e, !0), typeof t == "string" ? (this.id = t, this.metadata = n) : (this.id = dn(), this.metadata = t ?? n);
  }
};
class PN {
  constructor(e, t, n) {
    this.label = e, this.uri = t, this.position = n;
  }
}
var Ha;
(function(i) {
  i[i.Markup = 1] = "Markup", i[i.Code = 2] = "Code";
})(Ha || (Ha = {}));
var cy;
(function(i) {
  i[i.Idle = 1] = "Idle", i[i.Pending = 2] = "Pending", i[i.Executing = 3] = "Executing";
})(cy || (cy = {}));
var l_;
(function(i) {
  i[i.Left = 1] = "Left", i[i.Right = 2] = "Right";
})(l_ || (l_ = {}));
var c_;
(function(i) {
  i[i.Default = 0] = "Default", i[i.InCenter = 1] = "InCenter", i[i.InCenterIfOutsideViewport = 2] = "InCenterIfOutsideViewport", i[i.AtTop = 3] = "AtTop";
})(c_ || (c_ = {}));
class AN {
  constructor(e, t) {
    this.text = e, this.alignment = t;
  }
}
var uy;
(function(i) {
  i[i.Default = 1] = "Default", i[i.Preferred = 2] = "Preferred";
})(uy || (uy = {}));
var u_;
(function(i) {
  i[i.Default = 1] = "Default", i[i.Preferred = 2] = "Preferred", i[i.Hidden = -1] = "Hidden";
})(u_ || (u_ = {}));
let S5 = class {
  constructor(e, t = []) {
    this.uri = e, this.provides = Xn(t);
  }
}, RN = class {
  constructor(e) {
    this.label = e;
  }
};
var If;
(function(i) {
  i[i.Named = 1] = "Named", i[i.Indexed = 2] = "Indexed";
})(If || (If = {}));
let dy = class {
  constructor(e, t) {
    this.label = e, this.timestamp = t;
  }
};
dy = z([
  be
], dy);
var au;
(function(i) {
  i[i.Production = 1] = "Production", i[i.Development = 2] = "Development", i[i.Test = 3] = "Test";
})(au || (au = {}));
var d_;
(function(i) {
  i[i.Node = 1] = "Node", i[i.Webworker = 2] = "Webworker";
})(d_ || (d_ = {}));
var Oo;
(function(i) {
  i[i.Other = 0] = "Other", i[i.Comment = 1] = "Comment", i[i.String = 2] = "String", i[i.RegEx = 3] = "RegEx";
})(Oo || (Oo = {}));
class LN {
  constructor(e, t) {
    this.ranges = e, this.wordPattern = t;
  }
}
class NN {
  constructor(e) {
    this._autoForwardAction = e;
  }
  get autoForwardAction() {
    return this._autoForwardAction;
  }
}
var hy;
(function(i) {
  i[i.Queued = 1] = "Queued", i[i.Running = 2] = "Running", i[i.Passed = 3] = "Passed", i[i.Failed = 4] = "Failed", i[i.Skipped = 5] = "Skipped", i[i.Errored = 6] = "Errored";
})(hy || (hy = {}));
var lu;
(function(i) {
  i[i.Run = 1] = "Run", i[i.Debug = 2] = "Debug", i[i.Coverage = 3] = "Coverage";
})(lu || (lu = {}));
class D5 {
  constructor(e, t, n) {
    this.controllerId = e, this.profileId = t, this.kind = n;
  }
}
let h_ = class {
  constructor(e = void 0, t = void 0, n = void 0, r = !1, s = !0) {
    this.include = e, this.exclude = t, this.profile = n, this.continuous = r, this.preserveFocus = s;
  }
};
h_ = z([
  be
], h_);
let f_ = Pb = class {
  static diff(e, t, n) {
    const r = new Pb(e);
    return r.expectedOutput = t, r.actualOutput = n, r;
  }
  constructor(e) {
    this.message = e;
  }
};
f_ = Pb = z([
  be
], f_);
let Cf = class {
  constructor(e) {
    this.id = e;
  }
};
Cf = z([
  be
], Cf);
class MN {
  constructor(e, t, n) {
    this.label = e, this.uri = t, this.position = n;
  }
}
class Ig {
  constructor(e, t) {
    this.covered = e, this.total = t, Cg(this);
  }
}
function Cg(i) {
  if (i) {
    if (i.covered > i.total)
      throw new Error(
        `The total number of covered items (${i.covered}) cannot be greater than the total (${i.total})`
      );
    if (i.total < 0)
      throw new Error(`The number of covered items (${i.total}) cannot be negative`);
  }
}
class Xu {
  static fromDetails(e, t) {
    const n = new Ig(0, 0), r = new Ig(0, 0), s = new Ig(0, 0);
    for (const a of t)
      if ("branches" in a) {
        n.total += 1, n.covered += a.executed ? 1 : 0;
        for (const l of a.branches)
          r.total += 1, r.covered += l.executed ? 1 : 0;
      } else
        s.total += 1, s.covered += a.executed ? 1 : 0;
    const o = new Xu(
      e,
      n,
      r.total > 0 ? r : void 0,
      s.total > 0 ? s : void 0
    );
    return o.detailedCoverage = t, o;
  }
  constructor(e, t, n, r, s = []) {
    this.uri = e, this.statementCoverage = t, this.branchCoverage = n, this.declarationCoverage = r, this.includesTests = s;
  }
}
class k5 {
  get executionCount() {
    return +this.executed;
  }
  set executionCount(e) {
    this.executed = e;
  }
  constructor(e, t, n = []) {
    this.executed = e, this.location = t, this.branches = n;
  }
}
class I5 {
  get executionCount() {
    return +this.executed;
  }
  set executionCount(e) {
    this.executed = e;
  }
  constructor(e, t, n) {
    this.executed = e, this.location = t, this.label = n;
  }
}
class C5 {
  get executionCount() {
    return +this.executed;
  }
  set executionCount(e) {
    this.executed = e;
  }
  constructor(e, t, n) {
    this.name = e, this.executed = t, this.location = n;
  }
}
var fy;
(function(i) {
  i[i.None = 0] = "None", i[i.Option = 1] = "Option", i[i.Default = 2] = "Default", i[i.Preferred = 3] = "Preferred";
})(fy || (fy = {}));
var py;
(function(i) {
  i[i.Untrusted = 0] = "Untrusted", i[i.Trusted = 1] = "Trusted", i[i.Unspecified = 2] = "Unspecified";
})(py || (py = {}));
var gy;
(function(i) {
  i[i.Notify = 1] = "Notify", i[i.OpenBrowser = 2] = "OpenBrowser", i[i.OpenPreview = 3] = "OpenPreview", i[i.Silent = 4] = "Silent", i[i.Ignore = 5] = "Ignore", i[i.OpenBrowserOnce = 6] = "OpenBrowserOnce";
})(gy || (gy = {}));
let fS = class {
  constructor(e, t, n, r, s, o) {
    this.kind = e, this.name = t, this.detail = n, this.uri = r, this.range = s, this.selectionRange = o;
  }
};
class pS {
  constructor(e) {
    this.uri = e;
  }
}
class p_ {
  constructor(e, t) {
    this.original = e, this.modified = t;
  }
}
class T5 {
  constructor(e, t, n, r) {
    this.base = e, this.input1 = t, this.input2 = n, this.result = r;
  }
}
class gS {
  constructor(e, t) {
    this.uri = e, this.viewType = t;
  }
}
class P5 {
  constructor(e) {
    this.viewType = e;
  }
}
class mS {
  constructor(e, t) {
    this.uri = e, this.notebookType = t;
  }
}
class _S {
  constructor(e, t, n) {
    this.original = e, this.modified = t, this.notebookType = n;
  }
}
class A5 {
  constructor() {
  }
}
class R5 {
  constructor(e, t) {
    this.uri = e, this.inputBoxUri = t;
  }
}
class L5 {
  constructor() {
  }
}
class N5 {
  constructor(e) {
    this.textDiffs = e;
  }
}
var my;
(function(i) {
  i[i.Down = 0] = "Down", i[i.Up = 1] = "Up";
})(my || (my = {}));
var _y;
(function(i) {
  i[i.Action = 1] = "Action", i[i.Toolbar = 2] = "Toolbar";
})(_y || (_y = {}));
var vy;
(function(i) {
  i[i.Short = 1] = "Short", i[i.Medium = 2] = "Medium", i[i.Full = 3] = "Full";
})(vy || (vy = {}));
class ON {
  constructor(e, t, n) {
    this.id = e, this.label = t, this.values = n;
  }
}
var $r;
(function(i) {
  i[i.Accepted = 1] = "Accepted", i[i.Rejected = 2] = "Rejected", i[i.Saved = 3] = "Saved";
})($r || ($r = {}));
var wy;
(function(i) {
  i[i.Keep = 1] = "Keep", i[i.Undo = 2] = "Undo", i[i.UserModification = 3] = "UserModification";
})(wy || (wy = {}));
var by;
(function(i) {
  i[i.Unhelpful = 0] = "Unhelpful", i[i.Helpful = 1] = "Helpful", i[i.Undone = 2] = "Undone", i[i.Accepted = 3] = "Accepted", i[i.Bug = 4] = "Bug";
})(by || (by = {}));
var Tf;
(function(i) {
  i[i.Unhelpful = 0] = "Unhelpful", i[i.Helpful = 1] = "Helpful";
})(Tf || (Tf = {}));
let dv = class {
  constructor(e) {
    if (typeof e != "string" && e.isTrusted === !0)
      throw new Error(
        "The boolean form of MarkdownString.isTrusted is NOT supported for chat participants."
      );
    this.value = typeof e == "string" ? new Dn(e) : e;
  }
}, Pf = class {
  constructor(e, t) {
    if (typeof e != "string" && e.isTrusted === !0)
      throw new Error(
        "The boolean form of MarkdownString.isTrusted is NOT supported for chat participants."
      );
    this.value = typeof e == "string" ? new Dn(e) : e, this.vulnerabilities = t;
  }
}, g_ = class {
  constructor(e, t, n, r) {
    this.title = e, this.message = t, this.data = n, this.buttons = r;
  }
};
class hv {
  constructor(e, t) {
    this.value = e, this.baseUri = t;
  }
}
let vS = class {
  constructor(e, t) {
    this.value = e, this.title = t;
  }
}, Af = class {
  constructor(e, t) {
    this.value = e, this.value2 = e, this.title = t;
  }
}, wS = class {
  constructor(e) {
    this.value = e;
  }
};
class Tg {
  constructor(e, t) {
    this.value = e, this.task = t;
  }
}
let Rf = class {
  constructor(e) {
    if (typeof e != "string" && e.isTrusted === !0)
      throw new Error(
        "The boolean form of MarkdownString.isTrusted is NOT supported for chat participants."
      );
    this.value = typeof e == "string" ? new Dn(e) : e;
  }
}, fv = class {
  constructor(e) {
    this.value = e;
  }
}, ml = class {
  constructor(e, t, n) {
    this.value = e, this.iconPath = t, this.options = n;
  }
}, pv = class {
  constructor(e, t) {
    this.value = e, this.isEdit = t;
  }
}, m_ = class {
  constructor(e, t, n) {
    this.value = e, this.license = t, this.snippet = n;
  }
}, gv = class {
  constructor(e, t) {
    this.uri = e, this.range = t;
  }
}, bS = class {
  constructor(e) {
    this.extensions = e;
  }
}, yS = class {
  constructor(e, t, n, r, s) {
    this.uri = e, this.title = t, this.description = n, this.author = r, this.linkTag = s;
  }
  toJSON() {
    return {
      $mid: rt.ChatResponsePullRequestPart,
      uri: this.uri,
      title: this.title,
      description: this.description,
      author: this.author
    };
  }
}, Lf = class {
  constructor(e, t) {
    this.uri = e, t === !0 ? (this.isDone = !0, this.edits = []) : this.edits = Array.isArray(t) ? t : [t];
  }
}, __ = class {
  constructor(e, t) {
    this.uri = e, t === !0 ? (this.isDone = !0, this.edits = []) : this.edits = Array.isArray(t) ? t : [t];
  }
}, Nf = class {
  constructor(e) {
    this.toolName = e;
  }
}, xS = class {
  constructor(e, t, n) {
    this.toolName = e, this.toolCallId = t, this.isError = n;
  }
};
class v_ {
  constructor(e, t, n, r, s, o) {
    this.prompt = e, this.command = t, this.references = n, this.participant = r, this.toolReferences = s, this.editedFileEvents = o;
  }
}
class M5 {
  constructor(e, t, n, r) {
    this.response = e, this.result = t, this.participant = n, this.command = r;
  }
}
class FN {
  constructor(e, t, n, r) {
    this.response = e, this.result = t, this.participant = n, this.command = r;
  }
}
var fr;
(function(i) {
  i[i.Panel = 1] = "Panel", i[i.Terminal = 2] = "Terminal", i[i.Notebook = 3] = "Notebook", i[i.Editor = 4] = "Editor";
})(fr || (fr = {}));
var yy;
(function(i) {
  i[i.Complete = 1] = "Complete", i[i.Partial = 2] = "Partial", i[i.Omitted = 3] = "Omitted";
})(yy || (yy = {}));
var xy;
(function(i) {
  i[i.NoReason = 0] = "NoReason", i[i.FilteredContentRetry = 1] = "FilteredContentRetry", i[i.CopyrightContentRetry = 2] = "CopyrightContentRetry";
})(xy || (xy = {}));
class O5 {
  constructor(e, t, n) {
    this.document = e, this.selection = t, this.wholeRange = n;
  }
}
class F5 {
  constructor(e) {
    this.cell = e;
  }
}
class U5 {
  constructor(e, t, n) {
    this.mimeType = e, this.data = t, this.reference = n;
  }
}
class $5 {
  constructor(e) {
    this.diagnostics = e;
  }
}
var xn;
(function(i) {
  i[i.User = 1] = "User", i[i.Assistant = 2] = "Assistant", i[i.System = 3] = "System";
})(xn || (xn = {}));
class w_ {
  constructor(e, t, n) {
    this.callId = e, this.content = t, this.isError = n ?? !1;
  }
}
class Ey {
  constructor(e, t, n) {
    this.callId = e, this.content = t, this.isError = n ?? !1;
  }
}
var Sy;
(function(i) {
  i[i.Info = 0] = "Info", i[i.Warning = 1] = "Warning", i[i.Error = 2] = "Error";
})(Sy || (Sy = {}));
let H5 = class Dy {
  static User(e, t) {
    return new Dy(xn.User, e, t);
  }
  static Assistant(e, t) {
    return new Dy(xn.Assistant, e, t);
  }
  set content(e) {
    typeof e == "string" ? this._content = [new Vt(e)] : this._content = e;
  }
  get content() {
    return this._content;
  }
  constructor(e, t, n) {
    this._content = [], this.role = e, this.content = t, this.name = n;
  }
}, B5 = class ky {
  static User(e, t) {
    return new ky(xn.User, e, t);
  }
  static Assistant(e, t) {
    return new ky(xn.Assistant, e, t);
  }
  set content(e) {
    typeof e == "string" ? this._content = [new Vt(e)] : this._content = e;
  }
  get content() {
    return this._content;
  }
  set content2(e) {
    e && (this.content = e.map((t) => typeof t == "string" ? new Vt(t) : t));
  }
  get content2() {
    return this.content.map((e) => e instanceof Vt ? e.value : e);
  }
  constructor(e, t, n) {
    this._content = [], this.role = e, this.content = t, this.name = n;
  }
};
class Wl {
  constructor(e, t, n) {
    this.callId = e, this.name = t, this.input = n;
  }
}
var Iy;
(function(i) {
  i[i.Assistant = 0] = "Assistant", i[i.User = 1] = "User";
})(Iy || (Iy = {}));
class Vt {
  constructor(e, t) {
    this.value = e;
  }
  toJSON() {
    return {
      $mid: rt.LanguageModelTextPart,
      value: this.value,
      audience: this.audience
    };
  }
}
class Sn {
  constructor(e, t, n) {
    this.mimeType = t, this.data = e, this.audience = n;
  }
  static image(e, t) {
    return new Sn(e, t);
  }
  static json(e, t = "text/x-json") {
    const n = JSON.stringify(e, void 0, "	");
    return new Sn(he.fromString(n).buffer, t);
  }
  static text(e, t = Dr.text) {
    return new Sn(he.fromString(e).buffer, t);
  }
  toJSON() {
    return {
      $mid: rt.LanguageModelDataPart,
      mimeType: this.mimeType,
      data: this.data,
      audience: this.audience
    };
  }
}
var ko;
(function(i) {
  i.PNG = "image/png", i.JPEG = "image/jpeg", i.GIF = "image/gif", i.WEBP = "image/webp", i.BMP = "image/bmp";
})(ko || (ko = {}));
class fs {
  constructor(e) {
    this.value = e;
  }
  toJSON() {
    return {
      $mid: rt.LanguageModelPromptTsxPart,
      value: this.value
    };
  }
}
var op;
const Gn = class Gn extends Error {
  static NotFound(e) {
    return new Gn(e, Gn.NotFound.name);
  }
  static NoPermissions(e) {
    return new Gn(e, Gn.NoPermissions.name);
  }
  static Blocked(e) {
    return new Gn(e, Gn.Blocked.name);
  }
  static tryDeserialize(e) {
    if (e.name === N(Gn, op))
      return new Gn(e.message, e.code, e.cause);
  }
  constructor(e, t, n) {
    super(e, { cause: n }), this.name = N(Gn, op), this.code = t ?? "";
  }
};
op = new WeakMap(), ye(Gn, op, "LanguageModelError");
let mr = Gn, mv = class {
  constructor(e) {
    this.content = e;
  }
  toJSON() {
    return {
      $mid: rt.LanguageModelToolResult,
      content: this.content
    };
  }
}, W5 = class {
  constructor(e) {
    this.content = e;
  }
  toJSON() {
    return {
      $mid: rt.LanguageModelToolResult,
      content: this.content
    };
  }
};
class UN extends mv {
}
var Cy;
(function(i) {
  i[i.Auto = 1] = "Auto", i[i.Required = 2] = "Required";
})(Cy || (Cy = {}));
class V5 {
  constructor(e, t) {
    this.id = e, this.label = t;
  }
}
class z5 {
  constructor(e, t, n) {
    this.label = e, this.name = t, this.instructions = n;
  }
}
var Ty;
(function(i) {
  i[i.SymbolInformation = 1] = "SymbolInformation", i[i.CommandInformation = 2] = "CommandInformation", i[i.SearchInformation = 3] = "SearchInformation", i[i.SettingInformation = 4] = "SettingInformation";
})(Ty || (Ty = {}));
var Py;
(function(i) {
  i[i.EMBEDDED = 1] = "EMBEDDED", i[i.LLM_RANKED = 2] = "LLM_RANKED", i[i.CANCELED = 3] = "CANCELED";
})(Py || (Py = {}));
var Ay;
(function(i) {
  i[i.Started = 1] = "Started", i[i.Recognizing = 2] = "Recognizing", i[i.Recognized = 3] = "Recognized", i[i.Stopped = 4] = "Stopped", i[i.Error = 5] = "Error";
})(Ay || (Ay = {}));
var Ry;
(function(i) {
  i[i.Started = 1] = "Started", i[i.Stopped = 2] = "Stopped", i[i.Error = 3] = "Error";
})(Ry || (Ry = {}));
var Ly;
(function(i) {
  i[i.Recognized = 1] = "Recognized", i[i.Stopped = 2] = "Stopped";
})(Ly || (Ly = {}));
class $N {
  constructor(e, t, n, r = {}, s) {
    this.label = e, this.command = t, this.args = n, this.env = r, this.version = s;
  }
}
class HN {
  constructor(e, t, n = {}, r) {
    this.label = e, this.uri = t, this.headers = n, this.version = r;
  }
}
var po;
(function(i) {
  i[i.EMBEDDED = 1] = "EMBEDDED", i[i.LLM_RANKED = 2] = "LLM_RANKED", i[i.CANCELED = 3] = "CANCELED";
})(po || (po = {}));
let ga;
function q5(i) {
  ga ? ga instanceof fI ? ga.loggers.push(i) : ga = new fI([ga, i]) : ga = i;
}
function Di() {
  return ga;
}
let Ny;
function BN(i) {
  Ny = i;
}
function WN(i) {
  Ny && Ny(i);
}
class fI {
  constructor(e) {
    this.loggers = e;
  }
  handleObservableCreated(e) {
    for (const t of this.loggers)
      t.handleObservableCreated(e);
  }
  handleOnListenerCountChanged(e, t) {
    for (const n of this.loggers)
      n.handleOnListenerCountChanged(e, t);
  }
  handleObservableUpdated(e, t) {
    for (const n of this.loggers)
      n.handleObservableUpdated(e, t);
  }
  handleAutorunCreated(e) {
    for (const t of this.loggers)
      t.handleAutorunCreated(e);
  }
  handleAutorunDisposed(e) {
    for (const t of this.loggers)
      t.handleAutorunDisposed(e);
  }
  handleAutorunDependencyChanged(e, t, n) {
    for (const r of this.loggers)
      r.handleAutorunDependencyChanged(e, t, n);
  }
  handleAutorunStarted(e) {
    for (const t of this.loggers)
      t.handleAutorunStarted(e);
  }
  handleAutorunFinished(e) {
    for (const t of this.loggers)
      t.handleAutorunFinished(e);
  }
  handleDerivedDependencyChanged(e, t, n) {
    for (const r of this.loggers)
      r.handleDerivedDependencyChanged(e, t, n);
  }
  handleDerivedCleared(e) {
    for (const t of this.loggers)
      t.handleDerivedCleared(e);
  }
  handleBeginTransaction(e) {
    for (const t of this.loggers)
      t.handleBeginTransaction(e);
  }
  handleEndTransaction(e) {
    for (const t of this.loggers)
      t.handleEndTransaction(e);
  }
}
var Ci;
(function(i) {
  i[i.dependenciesMightHaveChanged = 1] = "dependenciesMightHaveChanged", i[i.stale = 2] = "stale", i[i.upToDate = 3] = "upToDate";
})(Ci || (Ci = {}));
class My {
  get debugName() {
    return this._debugNameData.getDebugName(this) ?? "(anonymous)";
  }
  constructor(e, t, n) {
    var r, s;
    this._debugNameData = e, this._runFn = t, this._changeTracker = n, this._state = Ci.stale, this._updateCount = 0, this._disposed = !1, this._dependencies = /* @__PURE__ */ new Set(), this._dependenciesToBeRemoved = /* @__PURE__ */ new Set(), this._isRunning = !1, this._store = void 0, this._delayedStore = void 0, this._changeSummary = (r = this._changeTracker) == null ? void 0 : r.createChangeSummary(void 0), (s = Di()) == null || s.handleAutorunCreated(this), this._run();
  }
  dispose() {
    var e;
    if (!this._disposed) {
      this._disposed = !0;
      for (const t of this._dependencies)
        t.removeObserver(this);
      this._dependencies.clear(), this._store !== void 0 && this._store.dispose(), this._delayedStore !== void 0 && this._delayedStore.dispose(), (e = Di()) == null || e.handleAutorunDisposed(this);
    }
  }
  _run() {
    var t, n, r, s;
    const e = this._dependenciesToBeRemoved;
    this._dependenciesToBeRemoved = this._dependencies, this._dependencies = e, this._state = Ci.upToDate;
    try {
      if (!this._disposed) {
        (t = Di()) == null || t.handleAutorunStarted(this);
        const o = this._changeSummary, a = this._delayedStore;
        a !== void 0 && (this._delayedStore = void 0);
        try {
          this._isRunning = !0, this._changeTracker && ((r = (n = this._changeTracker).beforeUpdate) == null || r.call(n, this, o), this._changeSummary = this._changeTracker.createChangeSummary(o)), this._store !== void 0 && (this._store.dispose(), this._store = void 0), this._runFn(this, o);
        } catch (l) {
          Hg(l);
        } finally {
          this._isRunning = !1, a !== void 0 && a.dispose();
        }
      }
    } finally {
      this._disposed || (s = Di()) == null || s.handleAutorunFinished(this);
      for (const o of this._dependenciesToBeRemoved)
        o.removeObserver(this);
      this._dependenciesToBeRemoved.clear();
    }
  }
  toString() {
    return `Autorun<${this.debugName}>`;
  }
  beginUpdate(e) {
    this._state === Ci.upToDate && (this._state = Ci.dependenciesMightHaveChanged), this._updateCount++;
  }
  endUpdate(e) {
    try {
      if (this._updateCount === 1)
        do {
          if (this._state === Ci.dependenciesMightHaveChanged) {
            this._state = Ci.upToDate;
            for (const t of this._dependencies)
              if (t.reportChanges(), this._state === Ci.stale)
                break;
          }
          this._state !== Ci.upToDate && this._run();
        } while (this._state !== Ci.upToDate);
    } finally {
      this._updateCount--;
    }
    ET(() => this._updateCount >= 0);
  }
  handlePossibleChange(e) {
    this._state === Ci.upToDate && this._isDependency(e) && (this._state = Ci.dependenciesMightHaveChanged);
  }
  handleChange(e, t) {
    var n;
    if (this._isDependency(e)) {
      (n = Di()) == null || n.handleAutorunDependencyChanged(this, e, t);
      try {
        (this._changeTracker ? this._changeTracker.handleChange({
          changedObservable: e,
          change: t,
          didChange: (s) => s === e
        }, this._changeSummary) : !0) && (this._state = Ci.stale);
      } catch (r) {
        Hg(r);
      }
    }
  }
  _isDependency(e) {
    return this._dependencies.has(e) && !this._dependenciesToBeRemoved.has(e);
  }
  _ensureNoRunning() {
    if (!this._isRunning)
      throw new cn("The reader object cannot be used outside its compute function!");
  }
  readObservable(e) {
    if (this._ensureNoRunning(), this._disposed)
      return e.get();
    e.addObserver(this);
    const t = e.get();
    return this._dependencies.add(e), this._dependenciesToBeRemoved.delete(e), t;
  }
  get store() {
    if (this._ensureNoRunning(), this._disposed)
      throw new cn("Cannot access store after dispose");
    return this._store === void 0 && (this._store = new Te()), this._store;
  }
  get delayedStore() {
    if (this._ensureNoRunning(), this._disposed)
      throw new cn("Cannot access store after dispose");
    return this._delayedStore === void 0 && (this._delayedStore = new Te()), this._delayedStore;
  }
  debugGetState() {
    return {
      isRunning: this._isRunning,
      updateCount: this._updateCount,
      dependencies: this._dependencies,
      state: this._state
    };
  }
  debugRerun() {
    this._isRunning ? this._state = Ci.stale : this._run();
  }
}
const ES = (i, e) => i === e;
function Oy(i, e) {
  if (i === e)
    return !0;
  if (Array.isArray(i) && Array.isArray(e)) {
    if (i.length !== e.length)
      return !1;
    for (let t = 0; t < i.length; t++)
      if (!Oy(i[t], e[t]))
        return !1;
    return !0;
  }
  if (i && typeof i == "object" && e && typeof e == "object" && Object.getPrototypeOf(i) === Object.prototype && Object.getPrototypeOf(e) === Object.prototype) {
    const t = i, n = e, r = Object.keys(t), s = Object.keys(n), o = new Set(s);
    if (r.length !== s.length)
      return !1;
    for (const a of r)
      if (!o.has(a) || !Oy(t[a], n[a]))
        return !1;
    return !0;
  }
  return !1;
}
class _v {
  constructor(e, t, n) {
    this.owner = e, this.debugNameSource = t, this.referenceFn = n;
  }
  getDebugName(e) {
    return VN(e, this);
  }
}
const pI = /* @__PURE__ */ new Map(), Fy = /* @__PURE__ */ new WeakMap();
function VN(i, e) {
  const t = Fy.get(i);
  if (t)
    return t;
  const n = zN(i, e);
  if (n) {
    let r = pI.get(n) ?? 0;
    r++, pI.set(n, r);
    const s = r === 1 ? n : `${n}#${r}`;
    return Fy.set(i, s), s;
  }
}
function zN(i, e) {
  const t = Fy.get(i);
  if (t)
    return t;
  const n = e.owner ? jN(e.owner) + "." : "";
  let r;
  const s = e.debugNameSource;
  if (s !== void 0)
    if (typeof s == "function") {
      if (r = s(), r !== void 0)
        return n + r;
    } else
      return n + s;
  const o = e.referenceFn;
  if (o !== void 0 && (r = SS(o), r !== void 0))
    return n + r;
  if (e.owner !== void 0) {
    const a = qN(e.owner, i);
    if (a !== void 0)
      return n + a;
  }
}
function qN(i, e) {
  for (const t in i)
    if (i[t] === e)
      return t;
}
const gI = /* @__PURE__ */ new Map(), mI = /* @__PURE__ */ new WeakMap();
function jN(i) {
  const e = mI.get(i);
  if (e)
    return e;
  const t = j5(i) ?? "Object";
  let n = gI.get(t) ?? 0;
  n++, gI.set(t, n);
  const r = n === 1 ? t : `${t}#${n}`;
  return mI.set(i, r), r;
}
function j5(i) {
  const e = i.constructor;
  if (e)
    return e.name === "Object" ? void 0 : e.name;
}
function SS(i) {
  const e = i.toString(), n = /\/\*\*\s*@description\s*([^*]*)\*\//.exec(e), r = n ? n[1] : void 0;
  return r == null ? void 0 : r.trim();
}
let Uy;
function GN(i) {
  Uy = i;
}
let G5;
function QN(i) {
  G5 = i;
}
let Q5;
function KN(i) {
  Q5 = i;
}
class JN {
  get TChange() {
    return null;
  }
  reportChanges() {
    this.get();
  }
  read(e) {
    return e ? e.readObservable(this) : this.get();
  }
  map(e, t) {
    const n = t === void 0 ? void 0 : e, r = t === void 0 ? e : t;
    return Uy({
      owner: n,
      debugName: () => {
        const s = SS(r);
        if (s !== void 0)
          return s;
        const a = /^\s*\(?\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\s*\)?\s*=>\s*\1(?:\??)\.([a-zA-Z_$][a-zA-Z_$0-9]*)\s*$/.exec(r.toString());
        if (a)
          return `${this.debugName}.${a[2]}`;
        if (!n)
          return `${this.debugName} (mapped)`;
      },
      debugReferenceFn: r
    }, (s) => r(this.read(s), s));
  }
  flatten() {
    return Uy({
      owner: void 0,
      debugName: () => `${this.debugName} (flattened)`
    }, (e) => this.read(e).read(e));
  }
  recomputeInitiallyAndOnChange(e, t) {
    return e.add(G5(this, t)), this;
  }
  keepObserved(e) {
    return e.add(Q5(this)), this;
  }
  get debugValue() {
    return this.get();
  }
}
class DS extends JN {
  constructor() {
    var e;
    super(), this._observers = /* @__PURE__ */ new Set(), (e = Di()) == null || e.handleObservableCreated(this);
  }
  addObserver(e) {
    var n;
    const t = this._observers.size;
    this._observers.add(e), t === 0 && this.onFirstObserverAdded(), t !== this._observers.size && ((n = Di()) == null || n.handleOnListenerCountChanged(this, this._observers.size));
  }
  removeObserver(e) {
    var n;
    const t = this._observers.delete(e);
    t && this._observers.size === 0 && this.onLastObserverRemoved(), t && ((n = Di()) == null || n.handleOnListenerCountChanged(this, this._observers.size));
  }
  onFirstObserverAdded() {
  }
  onLastObserverRemoved() {
  }
  log() {
    var t;
    const e = !!Di();
    return WN(this), e || (t = Di()) == null || t.handleObservableCreated(this), this;
  }
  debugGetObservers() {
    return this._observers;
  }
}
var qt;
(function(i) {
  i[i.initial = 0] = "initial", i[i.dependenciesMightHaveChanged = 1] = "dependenciesMightHaveChanged", i[i.stale = 2] = "stale", i[i.upToDate = 3] = "upToDate";
})(qt || (qt = {}));
class Hr extends DS {
  get debugName() {
    return this._debugNameData.getDebugName(this) ?? "(anonymous)";
  }
  constructor(e, t, n, r = void 0, s) {
    var o;
    super(), this._debugNameData = e, this._computeFn = t, this._changeTracker = n, this._handleLastObserverRemoved = r, this._equalityComparator = s, this._state = qt.initial, this._value = void 0, this._updateCount = 0, this._dependencies = /* @__PURE__ */ new Set(), this._dependenciesToBeRemoved = /* @__PURE__ */ new Set(), this._changeSummary = void 0, this._isUpdating = !1, this._isComputing = !1, this._didReportChange = !1, this._isInBeforeUpdate = !1, this._isReaderValid = !1, this._store = void 0, this._delayedStore = void 0, this._removedObserverToCallEndUpdateOn = null, this._changeSummary = (o = this._changeTracker) == null ? void 0 : o.createChangeSummary(void 0);
  }
  onLastObserverRemoved() {
    var e, t;
    this._state = qt.initial, this._value = void 0, (e = Di()) == null || e.handleDerivedCleared(this);
    for (const n of this._dependencies)
      n.removeObserver(this);
    this._dependencies.clear(), this._store !== void 0 && (this._store.dispose(), this._store = void 0), this._delayedStore !== void 0 && (this._delayedStore.dispose(), this._delayedStore = void 0), (t = this._handleLastObserverRemoved) == null || t.call(this);
  }
  get() {
    var e, t;
    if (this._observers.size === 0) {
      let n;
      try {
        this._isReaderValid = !0;
        let r;
        this._changeTracker && (r = this._changeTracker.createChangeSummary(void 0), (t = (e = this._changeTracker).beforeUpdate) == null || t.call(e, this, r)), n = this._computeFn(this, r);
      } finally {
        this._isReaderValid = !1;
      }
      return this.onLastObserverRemoved(), n;
    } else {
      do {
        if (this._state === qt.dependenciesMightHaveChanged) {
          for (const n of this._dependencies)
            if (n.reportChanges(), this._state === qt.stale)
              break;
        }
        this._state === qt.dependenciesMightHaveChanged && (this._state = qt.upToDate), this._state !== qt.upToDate && this._recompute();
      } while (this._state !== qt.upToDate);
      return this._value;
    }
  }
  _recompute() {
    var n, r, s, o;
    let e = !1;
    this._isComputing = !0, this._didReportChange = !1;
    const t = this._dependenciesToBeRemoved;
    this._dependenciesToBeRemoved = this._dependencies, this._dependencies = t;
    try {
      const a = this._changeSummary;
      this._isReaderValid = !0, this._changeTracker && (this._isInBeforeUpdate = !0, (r = (n = this._changeTracker).beforeUpdate) == null || r.call(n, this, a), this._isInBeforeUpdate = !1, this._changeSummary = (s = this._changeTracker) == null ? void 0 : s.createChangeSummary(a));
      const l = this._state !== qt.initial, c = this._value;
      this._state = qt.upToDate;
      const u = this._delayedStore;
      u !== void 0 && (this._delayedStore = void 0);
      try {
        this._store !== void 0 && (this._store.dispose(), this._store = void 0), this._value = this._computeFn(this, a);
      } finally {
        this._isReaderValid = !1;
        for (const d of this._dependenciesToBeRemoved)
          d.removeObserver(this);
        this._dependenciesToBeRemoved.clear(), u !== void 0 && u.dispose();
      }
      e = this._didReportChange || l && !this._equalityComparator(c, this._value), (o = Di()) == null || o.handleObservableUpdated(this, {
        oldValue: c,
        newValue: this._value,
        change: void 0,
        didChange: e,
        hadValue: l
      });
    } catch (a) {
      Hg(a);
    }
    if (this._isComputing = !1, !this._didReportChange && e)
      for (const a of this._observers)
        a.handleChange(this, void 0);
    else
      this._didReportChange = !1;
  }
  toString() {
    return `LazyDerived<${this.debugName}>`;
  }
  beginUpdate(e) {
    if (this._isUpdating)
      throw new cn("Cyclic deriveds are not supported yet!");
    this._updateCount++, this._isUpdating = !0;
    try {
      const t = this._updateCount === 1;
      if (this._state === qt.upToDate && (this._state = qt.dependenciesMightHaveChanged, !t))
        for (const n of this._observers)
          n.handlePossibleChange(this);
      if (t)
        for (const n of this._observers)
          n.beginUpdate(this);
    } finally {
      this._isUpdating = !1;
    }
  }
  endUpdate(e) {
    if (this._updateCount--, this._updateCount === 0) {
      const t = [...this._observers];
      for (const n of t)
        n.endUpdate(this);
      if (this._removedObserverToCallEndUpdateOn) {
        const n = [...this._removedObserverToCallEndUpdateOn];
        this._removedObserverToCallEndUpdateOn = null;
        for (const r of n)
          r.endUpdate(this);
      }
    }
    ET(() => this._updateCount >= 0);
  }
  handlePossibleChange(e) {
    if (this._state === qt.upToDate && this._dependencies.has(e) && !this._dependenciesToBeRemoved.has(e)) {
      this._state = qt.dependenciesMightHaveChanged;
      for (const t of this._observers)
        t.handlePossibleChange(this);
    }
  }
  handleChange(e, t) {
    var n;
    if (this._dependencies.has(e) && !this._dependenciesToBeRemoved.has(e) || this._isInBeforeUpdate) {
      (n = Di()) == null || n.handleDerivedDependencyChanged(this, e, t);
      let r = !1;
      try {
        r = this._changeTracker ? this._changeTracker.handleChange({
          changedObservable: e,
          change: t,
          didChange: (o) => o === e
        }, this._changeSummary) : !0;
      } catch (o) {
        Hg(o);
      }
      const s = this._state === qt.upToDate;
      if (r && (this._state === qt.dependenciesMightHaveChanged || s) && (this._state = qt.stale, s))
        for (const o of this._observers)
          o.handlePossibleChange(this);
    }
  }
  _ensureReaderValid() {
    if (!this._isReaderValid)
      throw new cn("The reader object cannot be used outside its compute function!");
  }
  readObservable(e) {
    this._ensureReaderValid(), e.addObserver(this);
    const t = e.get();
    return this._dependencies.add(e), this._dependenciesToBeRemoved.delete(e), t;
  }
  reportChange(e) {
    this._ensureReaderValid(), this._didReportChange = !0;
    for (const t of this._observers)
      t.handleChange(this, e);
  }
  get store() {
    return this._ensureReaderValid(), this._store === void 0 && (this._store = new Te()), this._store;
  }
  get delayedStore() {
    return this._ensureReaderValid(), this._delayedStore === void 0 && (this._delayedStore = new Te()), this._delayedStore;
  }
  addObserver(e) {
    const t = !this._observers.has(e) && this._updateCount > 0;
    super.addObserver(e), t && (this._removedObserverToCallEndUpdateOn && this._removedObserverToCallEndUpdateOn.has(e) ? this._removedObserverToCallEndUpdateOn.delete(e) : e.beginUpdate(this));
  }
  removeObserver(e) {
    this._observers.has(e) && this._updateCount > 0 && (this._removedObserverToCallEndUpdateOn || (this._removedObserverToCallEndUpdateOn = /* @__PURE__ */ new Set()), this._removedObserverToCallEndUpdateOn.add(e)), super.removeObserver(e);
  }
  debugGetState() {
    return {
      state: this._state,
      updateCount: this._updateCount,
      isComputing: this._isComputing,
      dependencies: this._dependencies,
      value: this._value
    };
  }
  debugSetValue(e) {
    this._value = e;
  }
  debugRecompute() {
    this._isComputing ? this._state = qt.stale : this._recompute();
  }
  setValue(e, t, n) {
    this._value = e;
    const r = this._observers;
    t.updateObserver(this, this);
    for (const s of r)
      s.handleChange(this, n);
  }
}
function K5(i, e) {
  return new Hr(new _v(i.owner, i.debugName, i.debugReferenceFn), e, void 0, i.onLastObserverRemoved, i.equalsFn ?? ES);
}
GN(K5);
function J5(i) {
  return new My(new _v(void 0, void 0, i), i, void 0);
}
function _I(i) {
  const e = new Error("BugIndicatingErrorRecovery: " + i);
  Fi(e), console.error("recovered from an error that indicates a bug", e);
}
function Y5(i, e) {
  const t = new X5(i, e);
  try {
    i(t);
  } finally {
    t.finish();
  }
}
function YN(i, e, t) {
  i ? e(i) : Y5(e, t);
}
class X5 {
  constructor(e, t) {
    var n;
    this._fn = e, this._getDebugName = t, this._updatingObservers = [], (n = Di()) == null || n.handleBeginTransaction(this);
  }
  getDebugName() {
    return this._getDebugName ? this._getDebugName() : SS(this._fn);
  }
  updateObserver(e, t) {
    if (!this._updatingObservers) {
      _I("Transaction already finished!"), Y5((n) => {
        n.updateObserver(e, t);
      });
      return;
    }
    this._updatingObservers.push({ observer: e, observable: t }), e.beginUpdate(t);
  }
  finish() {
    var t;
    const e = this._updatingObservers;
    if (!e) {
      _I("transaction.finish() has already been called!");
      return;
    }
    for (let n = 0; n < e.length; n++) {
      const { observer: r, observable: s } = e[n];
      r.endUpdate(s);
    }
    this._updatingObservers = null, (t = Di()) == null || t.handleEndTransaction(this);
  }
  debugGetUpdatingObservers() {
    return this._updatingObservers;
  }
}
function XN(i, e) {
  let t;
  return t = new _v(void 0, i, void 0), new $y(t, e, ES);
}
class $y extends DS {
  get debugName() {
    return this._debugNameData.getDebugName(this) ?? "ObservableValue";
  }
  constructor(e, t, n) {
    var r;
    super(), this._debugNameData = e, this._equalityComparator = n, this._value = t, (r = Di()) == null || r.handleObservableUpdated(this, { hadValue: !1, newValue: t, change: void 0, didChange: !0, oldValue: void 0 });
  }
  get() {
    return this._value;
  }
  set(e, t, n) {
    var s;
    if (n === void 0 && this._equalityComparator(this._value, e))
      return;
    let r;
    t || (t = r = new X5(() => {
    }, () => `Setting ${this.debugName}`));
    try {
      const o = this._value;
      this._setValue(e), (s = Di()) == null || s.handleObservableUpdated(this, { oldValue: o, newValue: e, change: n, didChange: !0, hadValue: !0 });
      for (const a of this._observers)
        t.updateObserver(a, this), a.handleChange(this, n);
    } finally {
      r && r.finish();
    }
  }
  toString() {
    return `${this.debugName}: ${this._value}`;
  }
  _setValue(e) {
    this._value = e;
  }
  debugGetState() {
    return {
      value: this._value
    };
  }
  debugSetValue(e) {
    this._value = e;
  }
}
function vI(...i) {
  let e, t, n;
  return i.length === 3 ? [e, t, n] = i : [t, n] = i, new Ba(new _v(e, void 0, n), t, n, () => Ba.globalTransaction, ES);
}
class Ba extends DS {
  constructor(e, t, n, r, s) {
    super(), this._debugNameData = e, this.event = t, this._getValue = n, this._getTransaction = r, this._equalityComparator = s, this._hasValue = !1, this.handleEvent = (o) => {
      var d;
      const a = this._getValue(o), l = this._value, c = !this._hasValue || !this._equalityComparator(l, a);
      let u = !1;
      c && (this._value = a, this._hasValue && (u = !0, YN(this._getTransaction(), (f) => {
        var p;
        (p = Di()) == null || p.handleObservableUpdated(this, { oldValue: l, newValue: a, change: void 0, didChange: c, hadValue: this._hasValue });
        for (const v of this._observers)
          f.updateObserver(v, this), v.handleChange(this, void 0);
      }, () => {
        const f = this.getDebugName();
        return "Event fired" + (f ? `: ${f}` : "");
      })), this._hasValue = !0), u || (d = Di()) == null || d.handleObservableUpdated(this, { oldValue: l, newValue: a, change: void 0, didChange: c, hadValue: this._hasValue });
    };
  }
  getDebugName() {
    return this._debugNameData.getDebugName(this);
  }
  get debugName() {
    const e = this.getDebugName();
    return "From Event" + (e ? `: ${e}` : "");
  }
  onFirstObserverAdded() {
    this._subscription = this.event(this.handleEvent);
  }
  onLastObserverRemoved() {
    this._subscription.dispose(), this._subscription = void 0, this._hasValue = !1, this._value = void 0;
  }
  get() {
    return this._subscription ? (this._hasValue || this.handleEvent(void 0), this._value) : this._getValue(void 0);
  }
  debugSetValue(e) {
    this._value = e;
  }
}
(function(i) {
  i.Observer = Ba;
  function e(t, n) {
    let r = !1;
    Ba.globalTransaction === void 0 && (Ba.globalTransaction = t, r = !0);
    try {
      n();
    } finally {
      r && (Ba.globalTransaction = void 0);
    }
  }
  i.batchEventsGlobally = e;
})(vI || (vI = {}));
function ZN(i) {
  const e = new Z5(!1, void 0);
  return i.addObserver(e), Ie(() => {
    i.removeObserver(e);
  });
}
KN(ZN);
function eM(i, e) {
  const t = new Z5(!0, e);
  i.addObserver(t);
  try {
    t.beginUpdate(i);
  } finally {
    t.endUpdate(i);
  }
  return Ie(() => {
    i.removeObserver(t);
  });
}
QN(eM);
class Z5 {
  constructor(e, t) {
    this._forceRecompute = e, this._handleValue = t, this._counter = 0;
  }
  beginUpdate(e) {
    this._counter++;
  }
  endUpdate(e) {
    this._counter === 1 && this._forceRecompute && (this._handleValue ? this._handleValue(e.get()) : e.reportChanges()), this._counter--;
  }
  handlePossibleChange(e) {
  }
  handleChange(e, t) {
  }
}
let Jp;
function tM(i) {
  Jp || (Jp = new iM(), q5(Jp)), Jp.addFilteredObj(i);
}
class iM {
  constructor() {
    this.indentation = 0, this.changedObservablesSets = /* @__PURE__ */ new WeakMap();
  }
  addFilteredObj(e) {
    this._filteredObjects || (this._filteredObjects = /* @__PURE__ */ new Set()), this._filteredObjects.add(e);
  }
  _isIncluded(e) {
    var t;
    return ((t = this._filteredObjects) == null ? void 0 : t.has(e)) ?? !0;
  }
  textToConsoleArgs(e) {
    return nM([
      pc(oM("|  ", this.indentation)),
      e
    ]);
  }
  formatInfo(e) {
    return e.hadValue ? e.didChange ? [
      pc(" "),
      jn(zs(e.oldValue, 70), {
        color: "red",
        strikeThrough: !0
      }),
      pc(" "),
      jn(zs(e.newValue, 60), {
        color: "green"
      })
    ] : [pc(" (unchanged)")] : [
      pc(" "),
      jn(zs(e.newValue, 60), {
        color: "green"
      }),
      pc(" (initial)")
    ];
  }
  handleObservableCreated(e) {
    if (e instanceof Hr) {
      const t = e;
      this.changedObservablesSets.set(t, /* @__PURE__ */ new Set());
    }
  }
  handleOnListenerCountChanged(e, t) {
  }
  handleObservableUpdated(e, t) {
    if (this._isIncluded(e)) {
      if (e instanceof Hr) {
        this._handleDerivedRecomputed(e, t);
        return;
      }
      console.log(...this.textToConsoleArgs([
        gc("observable value changed"),
        jn(e.debugName, { color: "BlueViolet" }),
        ...this.formatInfo(t)
      ]));
    }
  }
  formatChanges(e) {
    if (e.size !== 0)
      return jn(" (changed deps: " + [...e].map((t) => t.debugName).join(", ") + ")", { color: "gray" });
  }
  handleDerivedDependencyChanged(e, t, n) {
    var r;
    this._isIncluded(e) && ((r = this.changedObservablesSets.get(e)) == null || r.add(t));
  }
  _handleDerivedRecomputed(e, t) {
    if (!this._isIncluded(e))
      return;
    const n = this.changedObservablesSets.get(e);
    n && (console.log(...this.textToConsoleArgs([
      gc("derived recomputed"),
      jn(e.debugName, { color: "BlueViolet" }),
      ...this.formatInfo(t),
      this.formatChanges(n),
      { data: [{ fn: e._debugNameData.referenceFn ?? e._computeFn }] }
    ])), n.clear());
  }
  handleDerivedCleared(e) {
    this._isIncluded(e) && console.log(...this.textToConsoleArgs([
      gc("derived cleared"),
      jn(e.debugName, { color: "BlueViolet" })
    ]));
  }
  handleFromEventObservableTriggered(e, t) {
    this._isIncluded(e) && console.log(...this.textToConsoleArgs([
      gc("observable from event triggered"),
      jn(e.debugName, { color: "BlueViolet" }),
      ...this.formatInfo(t),
      { data: [{ fn: e._getValue }] }
    ]));
  }
  handleAutorunCreated(e) {
    this._isIncluded(e) && this.changedObservablesSets.set(e, /* @__PURE__ */ new Set());
  }
  handleAutorunDisposed(e) {
  }
  handleAutorunDependencyChanged(e, t, n) {
    this._isIncluded(e) && this.changedObservablesSets.get(e).add(t);
  }
  handleAutorunStarted(e) {
    const t = this.changedObservablesSets.get(e);
    t && (this._isIncluded(e) && console.log(...this.textToConsoleArgs([
      gc("autorun"),
      jn(e.debugName, { color: "BlueViolet" }),
      this.formatChanges(t),
      { data: [{ fn: e._debugNameData.referenceFn ?? e._runFn }] }
    ])), t.clear(), this.indentation++);
  }
  handleAutorunFinished(e) {
    this.indentation--;
  }
  handleBeginTransaction(e) {
    let t = e.getDebugName();
    t === void 0 && (t = ""), this._isIncluded(e) && console.log(...this.textToConsoleArgs([
      gc("transaction"),
      jn(t, { color: "BlueViolet" }),
      { data: [{ fn: e._fn }] }
    ])), this.indentation++;
  }
  handleEndTransaction() {
    this.indentation--;
  }
}
function nM(i) {
  const e = new Array(), t = [];
  let n = "";
  function r(o) {
    if ("length" in o)
      for (const a of o)
        a && r(a);
    else "text" in o ? (n += `%c${o.text}`, e.push(o.style), o.data && t.push(...o.data)) : "data" in o && t.push(...o.data);
  }
  r(i);
  const s = [n, ...e];
  return s.push(...t), s;
}
function pc(i) {
  return jn(i, { color: "black" });
}
function gc(i) {
  return jn(aM(`${i}: `, 10), { color: "black", bold: !0 });
}
function jn(i, e = {
  color: "black"
}) {
  function t(r) {
    return Object.entries(r).reduce((s, [o, a]) => `${s}${o}:${a};`, "");
  }
  const n = {
    color: e.color
  };
  return e.strikeThrough && (n["text-decoration"] = "line-through"), e.bold && (n["font-weight"] = "bold"), {
    text: i,
    style: t(n)
  };
}
function zs(i, e) {
  switch (typeof i) {
    case "number":
      return "" + i;
    case "string":
      return i.length + 2 <= e ? `"${i}"` : `"${i.substr(0, e - 7)}"+...`;
    case "boolean":
      return i ? "true" : "false";
    case "undefined":
      return "undefined";
    case "object":
      return i === null ? "null" : Array.isArray(i) ? rM(i, e) : sM(i, e);
    case "symbol":
      return i.toString();
    case "function":
      return `[[Function${i.name ? " " + i.name : ""}]]`;
    default:
      return "" + i;
  }
}
function rM(i, e) {
  let t = "[ ", n = !0;
  for (const r of i) {
    if (n || (t += ", "), t.length - 5 > e) {
      t += "...";
      break;
    }
    n = !1, t += `${zs(r, e - t.length)}`;
  }
  return t += " ]", t;
}
function sM(i, e) {
  if (typeof i.toString == "function" && i.toString !== Object.prototype.toString) {
    const s = i.toString();
    return s.length <= e ? s : s.substring(0, e - 3) + "...";
  }
  const t = j5(i);
  let n = t ? t + "(" : "{ ", r = !0;
  for (const [s, o] of Object.entries(i)) {
    if (r || (n += ", "), n.length - 5 > e) {
      n += "...";
      break;
    }
    r = !1, n += `${s}: ${zs(o, e - n.length)}`;
  }
  return n += t ? ")" : " }", n;
}
function oM(i, e) {
  let t = "";
  for (let n = 1; n <= e; n++)
    t += i;
  return t;
}
function aM(i, e) {
  for (; i.length < e; )
    i += " ";
  return i;
}
class b_ {
  static createHost(e, t) {
    return new b_(e, t);
  }
  static createClient(e, t) {
    return new b_(e, t);
  }
  constructor(e, t) {
    this._channelFactory = e, this._getHandler = t, this._channel = this._channelFactory({
      handleNotification: (s) => {
        const o = s, a = this._getHandler().notifications[o[0]];
        if (!a)
          throw new Error(`Unknown notification "${o[0]}"!`);
        a(...o[1]);
      },
      handleRequest: (s) => {
        const o = s;
        try {
          return { type: "result", value: this._getHandler().requests[o[0]](...o[1]) };
        } catch (a) {
          return { type: "error", value: a };
        }
      }
    });
    const n = new Proxy({}, {
      get: (s, o) => async (...a) => {
        const l = await this._channel.sendRequest([o, a]);
        if (l.type === "error")
          throw l.value;
        return l.value;
      }
    }), r = new Proxy({}, {
      get: (s, o) => (...a) => {
        this._channel.sendNotification([o, a]);
      }
    });
    this.api = { notifications: r, requests: n };
  }
}
function lM(i, e) {
  const t = globalThis;
  let n = [], r;
  const { channel: s, handler: o } = cM({
    sendNotification: (l) => {
      r ? r.sendNotification(l) : n.push(l);
    }
  });
  let a;
  return (t.$$debugValueEditor_debugChannels ?? (t.$$debugValueEditor_debugChannels = {}))[i] = (l) => {
    a = e(), r = l;
    for (const c of n)
      l.sendNotification(c);
    return n = [], o;
  }, b_.createClient(s, () => {
    if (!a)
      throw new Error("Not supported");
    return a;
  });
}
function cM(i) {
  let e;
  return {
    channel: (n) => (e = n, {
      sendNotification: (r) => {
        i.sendNotification(r);
      },
      sendRequest: (r) => {
        throw new Error("not supported");
      }
    }),
    handler: {
      handleRequest: (n) => n.type === "notification" ? e == null ? void 0 : e.handleNotification(n.data) : e == null ? void 0 : e.handleRequest(n.data)
    }
  };
}
function wI(i, e) {
  const t = i.split(`
`);
  for (let n = 1; n < t.length; n++) {
    const r = t[n];
    if (e && e.test(r))
      continue;
    const s = r.match(/\$show(\d+)FramesUp/);
    if (s) {
      const a = parseInt(s[1], 10);
      n += a - 1;
      continue;
    }
    const o = uM(r);
    if (o)
      return o;
  }
}
function uM(i) {
  const e = i.match(/\((.*):(\d+):(\d+)\)/);
  if (e)
    return {
      fileName: e[1],
      line: parseInt(e[2]),
      column: parseInt(e[3]),
      id: i
    };
  const t = i.match(/at ([^\(\)]*):(\d+):(\d+)/);
  if (t)
    return {
      fileName: t[1],
      line: parseInt(t[2]),
      column: parseInt(t[3]),
      id: i
    };
}
class dM {
  constructor() {
    this._timeout = void 0;
  }
  throttle(e, t) {
    this._timeout === void 0 && (this._timeout = setTimeout(() => {
      this._timeout = void 0, e();
    }, t));
  }
  dispose() {
    this._timeout !== void 0 && clearTimeout(this._timeout);
  }
}
function eA(i, e) {
  for (const t in e)
    i[t] && typeof i[t] == "object" && e[t] && typeof e[t] == "object" ? eA(i[t], e[t]) : i[t] = e[t];
}
function tA(i, e) {
  for (const t in e)
    e[t] === null ? delete i[t] : i[t] && typeof i[t] == "object" && e[t] && typeof e[t] == "object" ? tA(i[t], e[t]) : i[t] = e[t];
}
const Ia = class Ia {
  static getInstance() {
    return Ia._instance === void 0 && (Ia._instance = new Ia()), Ia._instance;
  }
  getTransactionState() {
    const e = [], t = [...this._activeTransactions];
    if (t.length === 0)
      return;
    const n = t.flatMap((s) => s.debugGetUpdatingObservers() ?? []).map((s) => s.observer), r = /* @__PURE__ */ new Set();
    for (; n.length > 0; ) {
      const s = n.shift();
      if (r.has(s))
        continue;
      r.add(s);
      const o = this._getInfo(s, (a) => {
        r.has(a) || n.push(a);
      });
      o && e.push(o);
    }
    return { names: t.map((s) => s.getDebugName() ?? "tx"), affected: e };
  }
  _getObservableInfo(e) {
    const t = this._instanceInfos.get(e);
    if (!t) {
      Fi(new cn("No info found"));
      return;
    }
    return t;
  }
  _getAutorunInfo(e) {
    const t = this._instanceInfos.get(e);
    if (!t) {
      Fi(new cn("No info found"));
      return;
    }
    return t;
  }
  _getInfo(e, t) {
    if (e instanceof Hr) {
      const n = [...e.debugGetObservers()];
      for (const l of n)
        t(l);
      const r = this._getObservableInfo(e);
      if (!r)
        return;
      const s = e.debugGetState(), o = { name: e.debugName, instanceId: r.instanceId, updateCount: s.updateCount }, a = [...r.changedObservables].map((l) => {
        var c;
        return (c = this._instanceInfos.get(l)) == null ? void 0 : c.instanceId;
      }).filter(Mn);
      if (s.isComputing)
        return { ...o, type: "observable/derived", state: "updating", changedDependencies: a, initialComputation: !1 };
      switch (s.state) {
        case qt.initial:
          return { ...o, type: "observable/derived", state: "noValue" };
        case qt.upToDate:
          return { ...o, type: "observable/derived", state: "upToDate" };
        case qt.stale:
          return { ...o, type: "observable/derived", state: "stale", changedDependencies: a };
        case qt.dependenciesMightHaveChanged:
          return { ...o, type: "observable/derived", state: "possiblyStale" };
      }
    } else if (e instanceof My) {
      const n = this._getAutorunInfo(e);
      if (!n)
        return;
      const r = { name: e.debugName, instanceId: n.instanceId, updateCount: n.updateCount }, s = [...n.changedObservables].map((o) => this._instanceInfos.get(o).instanceId);
      if (e.debugGetState().isRunning)
        return { ...r, type: "autorun", state: "updating", changedDependencies: s };
      switch (e.debugGetState().state) {
        case Ci.upToDate:
          return { ...r, type: "autorun", state: "upToDate" };
        case Ci.stale:
          return { ...r, type: "autorun", state: "stale", changedDependencies: s };
        case Ci.dependenciesMightHaveChanged:
          return { ...r, type: "autorun", state: "possiblyStale" };
      }
    }
  }
  _formatObservable(e) {
    const t = this._getObservableInfo(e);
    if (t)
      return { name: e.debugName, instanceId: t.instanceId };
  }
  _formatObserver(e) {
    var n;
    if (e instanceof Hr)
      return { name: e.toString(), instanceId: (n = this._getObservableInfo(e)) == null ? void 0 : n.instanceId };
    const t = this._getAutorunInfo(e);
    if (t)
      return { name: e.toString(), instanceId: t.instanceId };
  }
  constructor() {
    this._declarationId = 0, this._instanceId = 0, this._declarations = /* @__PURE__ */ new Map(), this._instanceInfos = /* @__PURE__ */ new WeakMap(), this._aliveInstances = /* @__PURE__ */ new Map(), this._activeTransactions = /* @__PURE__ */ new Set(), this._channel = lM("observableDevTools", () => ({
      notifications: {
        setDeclarationIdFilter: (e) => {
        },
        logObservableValue: (e) => {
          console.log("logObservableValue", e);
        },
        flushUpdates: () => {
          this._flushUpdates();
        },
        resetUpdates: () => {
          this._pendingChanges = null, this._channel.api.notifications.handleChange(this._fullState, !0);
        }
      },
      requests: {
        getDeclarations: () => {
          const e = {};
          for (const t of this._declarations.values())
            e[t.id] = t;
          return { decls: e };
        },
        getSummarizedInstances: () => null,
        getObservableValueInfo: (e) => ({
          observers: [...this._aliveInstances.get(e).debugGetObservers()].map((n) => this._formatObserver(n)).filter(Mn)
        }),
        getDerivedInfo: (e) => {
          const t = this._aliveInstances.get(e);
          return {
            dependencies: [...t.debugGetState().dependencies].map((n) => this._formatObservable(n)).filter(Mn),
            observers: [...t.debugGetObservers()].map((n) => this._formatObserver(n)).filter(Mn)
          };
        },
        getAutorunInfo: (e) => ({
          dependencies: [...this._aliveInstances.get(e).debugGetState().dependencies].map((n) => this._formatObservable(n)).filter(Mn)
        }),
        getTransactionState: () => this.getTransactionState(),
        setValue: (e, t) => {
          const n = this._aliveInstances.get(e);
          if (n instanceof Hr)
            n.debugSetValue(t);
          else if (n instanceof $y)
            n.debugSetValue(t);
          else if (n instanceof Ba)
            n.debugSetValue(t);
          else
            throw new cn("Observable is not supported");
          const r = [...n.debugGetObservers()];
          for (const s of r)
            s.beginUpdate(n);
          for (const s of r)
            s.handleChange(n, void 0);
          for (const s of r)
            s.endUpdate(n);
        },
        getValue: (e) => {
          const t = this._aliveInstances.get(e);
          if (t instanceof Hr)
            return zs(t.debugGetState().value, 200);
          if (t instanceof $y)
            return zs(t.debugGetState().value, 200);
        },
        logValue: (e) => {
          const t = this._aliveInstances.get(e);
          if (t && "get" in t)
            console.log("Logged Value:", t.get());
          else
            throw new cn("Observable is not supported");
        },
        rerun: (e) => {
          const t = this._aliveInstances.get(e);
          if (t instanceof Hr)
            t.debugRecompute();
          else if (t instanceof My)
            t.debugRerun();
          else
            throw new cn("Observable is not supported");
        }
      }
    })), this._pendingChanges = null, this._changeThrottler = new dM(), this._fullState = {}, this._flushUpdates = () => {
      this._pendingChanges !== null && (this._channel.api.notifications.handleChange(this._pendingChanges, !1), this._pendingChanges = null);
    };
  }
  _handleChange(e) {
    tA(this._fullState, e), this._pendingChanges === null ? this._pendingChanges = e : eA(this._pendingChanges, e), this._changeThrottler.throttle(this._flushUpdates, 10);
  }
  _getDeclarationId(e) {
    let t = !0, n;
    const r = Error;
    for (; ; ) {
      const o = r.stackTraceLimit;
      r.stackTraceLimit = t ? 6 : 20;
      const a = new Error().stack;
      r.stackTraceLimit = o;
      let l = wI(a, /[/\\]observableInternal[/\\]|\.observe|[/\\]util(s)?\./);
      if (!t && !l && (l = wI(a, /[/\\]observableInternal[/\\]|\.observe/)), l) {
        n = l;
        break;
      }
      if (!t) {
        console.error("Could not find location for declaration", new Error().stack), n = { fileName: "unknown", line: 0, column: 0, id: "unknown" };
        break;
      }
      t = !1;
    }
    let s = this._declarations.get(n.id);
    return s === void 0 && (s = {
      id: this._declarationId++,
      type: e,
      url: n.fileName,
      line: n.line,
      column: n.column
    }, this._declarations.set(n.id, s), this._handleChange({ decls: { [s.id]: s } })), s.id;
  }
  handleObservableCreated(e) {
    const n = {
      declarationId: this._getDeclarationId("observable/value"),
      instanceId: this._instanceId++,
      listenerCount: 0,
      lastValue: void 0,
      updateCount: 0,
      changedObservables: /* @__PURE__ */ new Set()
    };
    this._instanceInfos.set(e, n);
  }
  handleOnListenerCountChanged(e, t) {
    const n = this._getObservableInfo(e);
    if (n) {
      if (n.listenerCount === 0 && t > 0) {
        const r = e instanceof Hr ? "observable/derived" : "observable/value";
        this._aliveInstances.set(n.instanceId, e), this._handleChange({
          instances: {
            [n.instanceId]: {
              instanceId: n.instanceId,
              declarationId: n.declarationId,
              formattedValue: n.lastValue,
              type: r,
              name: e.debugName
            }
          }
        });
      } else n.listenerCount > 0 && t === 0 && (this._handleChange({
        instances: { [n.instanceId]: null }
      }), this._aliveInstances.delete(n.instanceId));
      n.listenerCount = t;
    }
  }
  handleObservableUpdated(e, t) {
    if (e instanceof Hr) {
      this._handleDerivedRecomputed(e, t);
      return;
    }
    const n = this._getObservableInfo(e);
    n && t.didChange && (n.lastValue = zs(t.newValue, 30), n.listenerCount > 0 && this._handleChange({
      instances: { [n.instanceId]: { formattedValue: n.lastValue } }
    }));
  }
  handleAutorunCreated(e) {
    const n = {
      declarationId: this._getDeclarationId("autorun"),
      instanceId: this._instanceId++,
      updateCount: 0,
      changedObservables: /* @__PURE__ */ new Set()
    };
    this._instanceInfos.set(e, n), this._aliveInstances.set(n.instanceId, e), n && this._handleChange({
      instances: {
        [n.instanceId]: {
          instanceId: n.instanceId,
          declarationId: n.declarationId,
          runCount: 0,
          type: "autorun",
          name: e.debugName
        }
      }
    });
  }
  handleAutorunDisposed(e) {
    const t = this._getAutorunInfo(e);
    t && (this._handleChange({
      instances: { [t.instanceId]: null }
    }), this._instanceInfos.delete(e), this._aliveInstances.delete(t.instanceId));
  }
  handleAutorunDependencyChanged(e, t, n) {
    const r = this._getAutorunInfo(e);
    r && r.changedObservables.add(t);
  }
  handleAutorunStarted(e) {
  }
  handleAutorunFinished(e) {
    const t = this._getAutorunInfo(e);
    t && (t.changedObservables.clear(), t.updateCount++, this._handleChange({
      instances: { [t.instanceId]: { runCount: t.updateCount } }
    }));
  }
  handleDerivedDependencyChanged(e, t, n) {
    const r = this._getObservableInfo(e);
    r && r.changedObservables.add(t);
  }
  _handleDerivedRecomputed(e, t) {
    const n = this._getObservableInfo(e);
    if (!n)
      return;
    const r = zs(t.newValue, 30);
    n.updateCount++, n.changedObservables.clear(), n.lastValue = r, n.listenerCount > 0 && this._handleChange({
      instances: { [n.instanceId]: { formattedValue: r, recomputationCount: n.updateCount } }
    });
  }
  handleDerivedCleared(e) {
    const t = this._getObservableInfo(e);
    t && (t.lastValue = void 0, t.changedObservables.clear(), t.listenerCount > 0 && this._handleChange({
      instances: {
        [t.instanceId]: {
          formattedValue: void 0
        }
      }
    }));
  }
  handleBeginTransaction(e) {
    this._activeTransactions.add(e);
  }
  handleEndTransaction(e) {
    this._activeTransactions.delete(e);
  }
};
Ia._instance = void 0;
let Hy = Ia;
BN(tM);
Vh && Vh.VSCODE_DEV_DEBUG && q5(Hy.getInstance());
me("IMcpService");
const hM = me("IMcpWorkbenchService");
me("IMcpServerSampling");
me("IMcpElicitationService");
var Nc;
(function(i) {
  i.LATEST_PROTOCOL_VERSION = "2025-06-18", i.JSONRPC_VERSION = "2.0", i.PARSE_ERROR = -32700, i.INVALID_REQUEST = -32600, i.METHOD_NOT_FOUND = -32601, i.INVALID_PARAMS = -32602, i.INTERNAL_ERROR = -32603;
})(Nc || (Nc = {}));
function fM(i, e) {
  return gt.toKey(i) + "/" + e;
}
var bI;
(function(i) {
  i[i.WorkspaceFolder = 0] = "WorkspaceFolder", i[i.Workspace = 100] = "Workspace", i[i.User = 200] = "User", i[i.Extension = 300] = "Extension", i[i.Filesystem = 400] = "Filesystem", i[i.RemoteBoost = -50] = "RemoteBoost";
})(bI || (bI = {}));
var yI;
(function(i) {
  function e(t, n) {
    return t.id === n.id && t.remoteAuthority === n.remoteAuthority && t.label === n.label && t.trustBehavior === n.trustBehavior;
  }
  i.equals = e;
})(yI || (yI = {}));
var xI;
(function(i) {
  function e(r) {
    return r;
  }
  i.toSerialized = e;
  function t(r) {
    return {
      id: r.id,
      label: r.label,
      cacheNonce: r.cacheNonce,
      launch: Mf.fromSerialized(r.launch),
      variableReplacement: r.variableReplacement ? By.fromSerialized(r.variableReplacement) : void 0
    };
  }
  i.fromSerialized = t;
  function n(r, s) {
    return r.id === s.id && r.label === s.label && Fn(r.roots, s.roots, (o, a) => o.toString() === a.toString()) && un(r.launch, s.launch) && un(r.presentation, s.presentation) && un(r.variableReplacement, s.variableReplacement) && un(r.devMode, s.devMode);
  }
  i.equals = n;
})(xI || (xI = {}));
var By;
(function(i) {
  function e(n) {
    return n;
  }
  i.toSerialized = e;
  function t(n) {
    return {
      section: n.section,
      folder: n.folder ? { ...n.folder, uri: x.revive(n.folder.uri) } : void 0,
      target: n.target
    };
  }
  i.fromSerialized = t;
})(By || (By = {}));
var EI;
(function(i) {
  i[i.HasUnknown = 0] = "HasUnknown", i[i.LoadingUnknown = 1] = "LoadingUnknown", i[i.AllKnown = 2] = "AllKnown";
})(EI || (EI = {}));
var SI;
(function(i) {
  (function(e) {
    e[e.Trusted = 0] = "Trusted", e[e.TrustedOnNonce = 1] = "TrustedOnNonce", e[e.Untrusted = 2] = "Untrusted", e[e.Unknown = 3] = "Unknown";
  })(i.Kind || (i.Kind = {}));
})(SI || (SI = {}));
var DI;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Cached = 1] = "Cached", i[i.Outdated = 2] = "Outdated", i[i.RefreshingFromUnknown = 3] = "RefreshingFromUnknown", i[i.RefreshingFromCached = 4] = "RefreshingFromCached", i[i.Live = 5] = "Live";
})(DI || (DI = {}));
var Vl;
(function(i) {
  i[i.Stdio = 1] = "Stdio", i[i.HTTP = 2] = "HTTP";
})(Vl || (Vl = {}));
var Mf;
(function(i) {
  function e(r) {
    return r;
  }
  i.toSerialized = e;
  function t(r) {
    switch (r.type) {
      case Vl.HTTP:
        return { type: r.type, uri: x.revive(r.uri), headers: r.headers };
      case Vl.Stdio:
        return {
          type: r.type,
          cwd: r.cwd,
          command: r.command,
          args: r.args,
          env: r.env,
          envFile: r.envFile
        };
    }
  }
  i.fromSerialized = t;
  async function n(r) {
    const s = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(JSON.stringify(r)));
    return AT(he.wrap(new Uint8Array(s)));
  }
  i.hash = n;
})(Mf || (Mf = {}));
var As;
(function(i) {
  let e;
  (function(t) {
    t[t.Stopped = 0] = "Stopped", t[t.Starting = 1] = "Starting", t[t.Running = 2] = "Running", t[t.Error = 3] = "Error";
  })(e = i.Kind || (i.Kind = {})), i.toString = (t) => {
    switch (t.state) {
      case e.Stopped:
        return h(8370, "Stopped");
      case e.Starting:
        return h(8371, "Starting");
      case e.Running:
        return h(8372, "Running");
      case e.Error:
        return h(8373, "Error {0}", t.message);
      default:
        Rw();
    }
  }, i.toKindString = (t) => {
    switch (t) {
      case e.Stopped:
        return "stopped";
      case e.Starting:
        return "starting";
      case e.Running:
        return "running";
      case e.Error:
        return "error";
      default:
        Rw();
    }
  }, i.canBeStarted = (t) => t === e.Error || t === e.Stopped, i.isRunning = (t) => !i.canBeStarted(t.state);
})(As || (As = {}));
var kI;
(function(i) {
  i[i.Installing = 0] = "Installing", i[i.Installed = 1] = "Installed", i[i.Uninstalling = 2] = "Uninstalling", i[i.Uninstalled = 3] = "Uninstalled";
})(kI || (kI = {}));
var II;
(function(i) {
  i.Readme = "readme", i.Manifest = "manifest", i.Configuration = "configuration";
})(II || (II = {}));
let CI = class extends xe {
  constructor(e, t) {
    super(), this.containers = e, this._register(t.onChange(this.update, this));
  }
  set mcpServer(e) {
    this.containers.forEach((t) => t.mcpServer = e);
  }
  update(e) {
    for (const t of this.containers)
      e && t.mcpServer ? e.id === t.mcpServer.id && (t.mcpServer = e) : t.update();
  }
};
CI = z([
  O(1, hM)
], CI);
new P("mcpServersGalleryEnabled", !1);
new P("hasInstalledMcpServers", !0);
var TI;
(function(i) {
  i.scheme = "mcp-resource";
  const e = "dylo78gyp";
  function t(r, s) {
    return typeof s == "string" && (s = x.parse(s)), s.with({
      scheme: i.scheme,
      authority: AT(he.fromString(r.id)),
      path: ["", s.scheme, s.authority || e].join("/") + s.path
    });
  }
  i.fromServer = t;
  function n(r) {
    if (typeof r == "string" && (r = x.parse(r)), r.scheme !== i.scheme)
      throw new Error(`Invalid MCP resource URI: ${r.toString()}`);
    const s = r.path.split("/");
    if (s.length < 3)
      throw new Error(`Invalid MCP resource URI: ${r.toString()}`);
    const [, o, a, ...l] = s, c = new URL(
      `${o}://${a.toLowerCase() === e ? "" : a}`
    );
    return c.pathname = l.length ? "/" + l.join("/") : "", c.search = r.query, c.hash = r.fragment, {
      definitionId: jR(r.authority).toString(),
      resourceURL: c
    };
  }
  i.toServer = n;
})(TI || (TI = {}));
var PI;
(function(i) {
  i[i.Logging = 1] = "Logging", i[i.Completions = 2] = "Completions", i[i.Prompts = 4] = "Prompts", i[i.PromptsListChanged = 8] = "PromptsListChanged", i[i.Resources = 16] = "Resources", i[i.ResourcesSubscribe = 32] = "ResourcesSubscribe", i[i.ResourcesListChanged = 64] = "ResourcesListChanged", i[i.Tools = 128] = "Tools", i[i.ToolsListChanged = 256] = "ToolsListChanged";
})(PI || (PI = {}));
var AI;
(function(i) {
  i.Prefix = "mcp_", i[i.MaxPrefixLen = 18] = "MaxPrefixLen", i[i.MaxLength = 64] = "MaxLength";
})(AI || (AI = {}));
var Cr;
(function(i) {
  function e(n) {
    const { selectionStartLineNumber: r, selectionStartColumn: s, positionLineNumber: o, positionColumn: a } = n, l = new Ke(r - 1, s - 1), c = new Ke(o - 1, a - 1);
    return new os(l, c);
  }
  i.to = e;
  function t(n) {
    const { anchor: r, active: s } = n;
    return {
      selectionStartLineNumber: r.line + 1,
      selectionStartColumn: r.character + 1,
      positionLineNumber: s.line + 1,
      positionColumn: s.character + 1
    };
  }
  i.from = t;
})(Cr || (Cr = {}));
var j;
(function(i) {
  function e(n) {
    if (!n)
      return;
    const { start: r, end: s } = n;
    return {
      startLineNumber: r.line + 1,
      startColumn: r.character + 1,
      endLineNumber: s.line + 1,
      endColumn: s.character + 1
    };
  }
  i.from = e;
  function t(n) {
    if (!n)
      return;
    const { startLineNumber: r, startColumn: s, endLineNumber: o, endColumn: a } = n;
    return new $e(r - 1, s - 1, o - 1, a - 1);
  }
  i.to = t;
})(j || (j = {}));
var as;
(function(i) {
  function e(n) {
    return {
      uri: n.uri,
      range: j.from(n.range)
    };
  }
  i.from = e;
  function t(n) {
    return new $n(x.revive(n.uri), j.to(n.range));
  }
  i.to = t;
})(as || (as = {}));
var Wy;
(function(i) {
  function e(t) {
    switch (t) {
      case kc.Comment:
        return Oo.Comment;
      case kc.Other:
        return Oo.Other;
      case kc.RegEx:
        return Oo.RegEx;
      case kc.String:
        return Oo.String;
    }
  }
  i.to = e;
})(Wy || (Wy = {}));
var ut;
(function(i) {
  function e(n) {
    return new Ke(n.lineNumber - 1, n.column - 1);
  }
  i.to = e;
  function t(n) {
    return { lineNumber: n.line + 1, column: n.character + 1 };
  }
  i.from = t;
})(ut || (ut = {}));
var Zu;
(function(i) {
  function e(r, s, o) {
    return Xt(Xn(r).map((a) => t(a, s, o)));
  }
  i.from = e;
  function t(r, s, o) {
    if (typeof r == "string")
      return {
        $serialized: !0,
        language: r,
        isBuiltin: o == null ? void 0 : o.isBuiltin
      };
    if (r)
      return {
        $serialized: !0,
        language: r.language,
        scheme: n(r.scheme, s),
        pattern: En.from(r.pattern) ?? void 0,
        exclusive: r.exclusive,
        notebookType: r.notebookType,
        isBuiltin: o == null ? void 0 : o.isBuiltin
      };
  }
  function n(r, s) {
    return s && typeof r == "string" ? s.transformOutgoingScheme(r) : r;
  }
})(Zu || (Zu = {}));
var y_;
(function(i) {
  function e(n) {
    switch (n) {
      case Ma.Unnecessary:
        return Pc.Unnecessary;
      case Ma.Deprecated:
        return Pc.Deprecated;
    }
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case Pc.Unnecessary:
        return Ma.Unnecessary;
      case Pc.Deprecated:
        return Ma.Deprecated;
      default:
        return;
    }
  }
  i.to = t;
})(y_ || (y_ = {}));
var ed;
(function(i) {
  function e(n) {
    let r;
    return n.code && (st(n.code) || ol(n.code) ? r = String(n.code) : r = {
      value: String(n.code.value),
      target: n.code.target
    }), {
      ...j.from(n.range),
      message: n.message,
      source: n.source,
      code: r,
      severity: Of.from(n.severity),
      relatedInformation: n.relatedInformation && n.relatedInformation.map(x_.from),
      tags: Array.isArray(n.tags) ? Xt(n.tags.map(y_.from)) : void 0
    };
  }
  i.from = e;
  function t(n) {
    var s;
    const r = new Mm(j.to(n), n.message, Of.to(n.severity));
    return r.source = n.source, r.code = st(n.code) ? n.code : (s = n.code) == null ? void 0 : s.value, r.relatedInformation = n.relatedInformation && n.relatedInformation.map(x_.to), r.tags = n.tags && Xt(n.tags.map(y_.to)), r;
  }
  i.to = t;
})(ed || (ed = {}));
var x_;
(function(i) {
  function e(n) {
    return {
      ...j.from(n.location.range),
      message: n.message,
      resource: n.location.uri
    };
  }
  i.from = e;
  function t(n) {
    return new nf(new $n(n.resource, j.to(n)), n.message);
  }
  i.to = t;
})(x_ || (x_ = {}));
var Of;
(function(i) {
  function e(n) {
    switch (n) {
      case Ri.Error:
        return on.Error;
      case Ri.Warning:
        return on.Warning;
      case Ri.Information:
        return on.Info;
      case Ri.Hint:
        return on.Hint;
    }
    return on.Error;
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case on.Info:
        return Ri.Information;
      case on.Warning:
        return Ri.Warning;
      case on.Error:
        return Ri.Error;
      case on.Hint:
        return Ri.Hint;
      default:
        return Ri.Error;
    }
  }
  i.to = t;
})(Of || (Of = {}));
var li;
(function(i) {
  function e(n) {
    return typeof n == "number" && n >= hf.One ? n - 1 : n === hf.Beside ? nN : iN;
  }
  i.from = e;
  function t(n) {
    if (typeof n == "number" && n >= 0)
      return n + 1;
    throw new Error("invalid 'EditorGroupColumn'");
  }
  i.to = t;
})(li || (li = {}));
function pM(i) {
  return typeof i.range < "u";
}
function iA(i) {
  return i.length === 0 ? !0 : !!pM(i[0]);
}
var Ne;
(function(i) {
  function e(a) {
    return a.map(i.from);
  }
  i.fromMany = e;
  function t(a) {
    return a && typeof a == "object" && typeof a.language == "string" && typeof a.value == "string";
  }
  function n(a) {
    let l;
    if (t(a)) {
      const { language: d, value: f } = a;
      l = { value: "```" + d + `
` + f + "\n```\n" };
    } else Dn.isMarkdownString(a) ? l = { value: a.value, isTrusted: a.isTrusted, supportThemeIcons: a.supportThemeIcons, supportHtml: a.supportHtml, baseUri: a.baseUri } : typeof a == "string" ? l = { value: a } : l = { value: "" };
    const c = /* @__PURE__ */ Object.create(null);
    l.uris = c;
    const u = ({ href: d }) => {
      try {
        let f = x.parse(d, !0);
        f = f.with({ query: r(f.query, c) }), c[d] = f;
      } catch {
      }
      return "";
    };
    return kt.walkTokens(kt.lexer(l.value), (d) => {
      d.type === "link" ? u({ href: d.href }) : d.type === "image" && typeof d.href == "string" && u(_7(d.href));
    }), l;
  }
  i.from = n;
  function r(a, l) {
    if (!a)
      return a;
    let c;
    try {
      c = MP(a);
    } catch {
    }
    if (!c)
      return a;
    let u = !1;
    return c = $u(c, (d) => {
      if (x.isUri(d)) {
        const f = `__uri_${Math.random().toString(16).slice(2, 8)}`;
        return l[f] = d, u = !0, f;
      } else
        return;
    }), u ? JSON.stringify(c) : a;
  }
  function s(a) {
    const l = new Dn(a.value, a.supportThemeIcons);
    return l.isTrusted = a.isTrusted, l.supportHtml = a.supportHtml, l.baseUri = a.baseUri ? x.from(a.baseUri) : void 0, l;
  }
  i.to = s;
  function o(a) {
    if (a)
      return typeof a == "string" ? a : i.from(a);
  }
  i.fromStrict = o;
})(Ne || (Ne = {}));
function gM(i) {
  return iA(i) ? i.map((e) => ({
    range: j.from(e.range),
    hoverMessage: Array.isArray(e.hoverMessage) ? Ne.fromMany(e.hoverMessage) : e.hoverMessage ? Ne.from(e.hoverMessage) : void 0,
    renderOptions: e.renderOptions
  })) : i.map((e) => ({
    range: j.from(e)
  }));
}
function vv(i) {
  return typeof i > "u" ? i : typeof i == "string" ? x.file(i) : i;
}
var td;
(function(i) {
  function e(t) {
    return typeof t > "u" ? t : {
      contentText: t.contentText,
      contentIconPath: t.contentIconPath ? vv(t.contentIconPath) : void 0,
      border: t.border,
      borderColor: t.borderColor,
      fontStyle: t.fontStyle,
      fontWeight: t.fontWeight,
      textDecoration: t.textDecoration,
      color: t.color,
      backgroundColor: t.backgroundColor,
      margin: t.margin,
      width: t.width,
      height: t.height
    };
  }
  i.from = e;
})(td || (td = {}));
var E_;
(function(i) {
  function e(t) {
    return typeof t > "u" ? t : {
      backgroundColor: t.backgroundColor,
      outline: t.outline,
      outlineColor: t.outlineColor,
      outlineStyle: t.outlineStyle,
      outlineWidth: t.outlineWidth,
      border: t.border,
      borderColor: t.borderColor,
      borderRadius: t.borderRadius,
      borderSpacing: t.borderSpacing,
      borderStyle: t.borderStyle,
      borderWidth: t.borderWidth,
      fontStyle: t.fontStyle,
      fontWeight: t.fontWeight,
      textDecoration: t.textDecoration,
      cursor: t.cursor,
      color: t.color,
      opacity: t.opacity,
      letterSpacing: t.letterSpacing,
      gutterIconPath: t.gutterIconPath ? vv(t.gutterIconPath) : void 0,
      gutterIconSize: t.gutterIconSize,
      overviewRulerColor: t.overviewRulerColor,
      before: t.before ? td.from(t.before) : void 0,
      after: t.after ? td.from(t.after) : void 0
    };
  }
  i.from = e;
})(E_ || (E_ = {}));
var Vy;
(function(i) {
  function e(t) {
    if (typeof t > "u")
      return t;
    switch (t) {
      case Fa.OpenOpen:
        return Tc.AlwaysGrowsWhenTypingAtEdges;
      case Fa.ClosedClosed:
        return Tc.NeverGrowsWhenTypingAtEdges;
      case Fa.OpenClosed:
        return Tc.GrowsOnlyWhenTypingBefore;
      case Fa.ClosedOpen:
        return Tc.GrowsOnlyWhenTypingAfter;
    }
  }
  i.from = e;
})(Vy || (Vy = {}));
var zy;
(function(i) {
  function e(t) {
    return {
      isWholeLine: t.isWholeLine,
      rangeBehavior: t.rangeBehavior ? Vy.from(t.rangeBehavior) : void 0,
      overviewRulerLane: t.overviewRulerLane,
      light: t.light ? E_.from(t.light) : void 0,
      dark: t.dark ? E_.from(t.dark) : void 0,
      backgroundColor: t.backgroundColor,
      outline: t.outline,
      outlineColor: t.outlineColor,
      outlineStyle: t.outlineStyle,
      outlineWidth: t.outlineWidth,
      border: t.border,
      borderColor: t.borderColor,
      borderRadius: t.borderRadius,
      borderSpacing: t.borderSpacing,
      borderStyle: t.borderStyle,
      borderWidth: t.borderWidth,
      fontStyle: t.fontStyle,
      fontWeight: t.fontWeight,
      textDecoration: t.textDecoration,
      cursor: t.cursor,
      color: t.color,
      opacity: t.opacity,
      letterSpacing: t.letterSpacing,
      gutterIconPath: t.gutterIconPath ? vv(t.gutterIconPath) : void 0,
      gutterIconSize: t.gutterIconSize,
      overviewRulerColor: t.overviewRulerColor,
      before: t.before ? td.from(t.before) : void 0,
      after: t.after ? td.from(t.after) : void 0
    };
  }
  i.from = e;
})(zy || (zy = {}));
var gi;
(function(i) {
  function e(n) {
    return {
      text: n.newText,
      eol: n.newEol && rd.from(n.newEol),
      range: j.from(n.range)
    };
  }
  i.from = e;
  function t(n) {
    const r = new Jo(j.to(n.range), n.text);
    return r.newEol = typeof n.eol > "u" ? void 0 : rd.to(n.eol), r;
  }
  i.to = t;
})(gi || (gi = {}));
var kn;
(function(i) {
  function e(n, r) {
    var o;
    const s = {
      edits: []
    };
    if (n instanceof $l) {
      const a = new xT();
      for (const l of n._allEntries())
        l._type === jt.File && x.isUri(l.to) && l.from === void 0 && a.add(l.to);
      for (const l of n._allEntries())
        if (l._type === jt.File) {
          let c;
          (o = l.options) != null && o.contents && (ArrayBuffer.isView(l.options.contents) ? c = { type: "base64", value: Y1(he.wrap(l.options.contents)) } : c = { type: "dataTransferItem", id: l.options.contents._itemId }), s.edits.push({
            oldResource: l.from,
            newResource: l.to,
            options: { ...l.options, contents: c },
            metadata: l.metadata
          });
        } else l._type === jt.Text ? s.edits.push({
          resource: l.uri,
          textEdit: gi.from(l.edit),
          versionId: a.has(l.uri) || r == null ? void 0 : r.getTextDocumentVersion(l.uri),
          metadata: l.metadata
        }) : l._type === jt.Snippet ? s.edits.push({
          resource: l.uri,
          textEdit: {
            range: j.from(l.range),
            text: l.edit.value,
            insertAsSnippet: !0,
            keepWhitespace: l.keepWhitespace
          },
          versionId: a.has(l.uri) || r == null ? void 0 : r.getTextDocumentVersion(l.uri),
          metadata: l.metadata
        }) : l._type === jt.Cell ? s.edits.push({
          metadata: l.metadata,
          resource: l.uri,
          cellEdit: l.edit,
          notebookVersionId: r == null ? void 0 : r.getNotebookDocumentVersion(l.uri)
        }) : l._type === jt.CellReplace && s.edits.push({
          metadata: l.metadata,
          resource: l.uri,
          notebookVersionId: r == null ? void 0 : r.getNotebookDocumentVersion(l.uri),
          cellEdit: {
            editType: Wo.Replace,
            index: l.index,
            count: l.count,
            cells: l.cells.map(od.from)
          }
        });
    }
    return s;
  }
  i.from = e;
  function t(n) {
    const r = new $l(), s = new mi();
    for (const o of n.edits)
      if (o.textEdit) {
        const a = o, l = x.revive(a.resource), c = j.to(a.textEdit.range), u = a.textEdit.text, d = a.textEdit.insertAsSnippet;
        let f;
        d ? f = fl.replace(c, new Hl(u)) : f = Jo.replace(c, u);
        const p = s.get(l);
        p ? p.push(f) : s.set(l, [f]);
      } else
        r.renameFile(x.revive(o.oldResource), x.revive(o.newResource), o.options);
    for (const [o, a] of s)
      r.set(o, a);
    return r;
  }
  i.to = t;
})(kn || (kn = {}));
var Zn;
(function(i) {
  const e = /* @__PURE__ */ Object.create(null);
  e[Et.File] = J.File, e[Et.Module] = J.Module, e[Et.Namespace] = J.Namespace, e[Et.Package] = J.Package, e[Et.Class] = J.Class, e[Et.Method] = J.Method, e[Et.Property] = J.Property, e[Et.Field] = J.Field, e[Et.Constructor] = J.Constructor, e[Et.Enum] = J.Enum, e[Et.Interface] = J.Interface, e[Et.Function] = J.Function, e[Et.Variable] = J.Variable, e[Et.Constant] = J.Constant, e[Et.String] = J.String, e[Et.Number] = J.Number, e[Et.Boolean] = J.Boolean, e[Et.Array] = J.Array, e[Et.Object] = J.Object, e[Et.Key] = J.Key, e[Et.Null] = J.Null, e[Et.EnumMember] = J.EnumMember, e[Et.Struct] = J.Struct, e[Et.Event] = J.Event, e[Et.Operator] = J.Operator, e[Et.TypeParameter] = J.TypeParameter;
  function t(r) {
    return typeof e[r] == "number" ? e[r] : J.Property;
  }
  i.from = t;
  function n(r) {
    for (const s in e)
      if (e[s] === r)
        return Number(s);
    return Et.Property;
  }
  i.to = n;
})(Zn || (Zn = {}));
var Ys;
(function(i) {
  function e(n) {
    switch (n) {
      case sf.Deprecated:
        return fm.Deprecated;
    }
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case fm.Deprecated:
        return sf.Deprecated;
    }
  }
  i.to = t;
})(Ys || (Ys = {}));
var zl;
(function(i) {
  function e(n) {
    return {
      name: n.name,
      kind: Zn.from(n.kind),
      tags: n.tags && n.tags.map(Ys.from),
      containerName: n.containerName,
      location: hn.from(n.location)
    };
  }
  i.from = e;
  function t(n) {
    const r = new of(n.name, Zn.to(n.kind), n.containerName, hn.to(n.location));
    return r.tags = n.tags && n.tags.map(Ys.to), r;
  }
  i.to = t;
})(zl || (zl = {}));
var qy;
(function(i) {
  function e(n) {
    var s;
    const r = {
      name: n.name || "!!MISSING: name!!",
      detail: n.detail,
      range: j.from(n.range),
      selectionRange: j.from(n.selectionRange),
      kind: Zn.from(n.kind),
      tags: ((s = n.tags) == null ? void 0 : s.map(Ys.from)) ?? []
    };
    return n.children && (r.children = n.children.map(e)), r;
  }
  i.from = e;
  function t(n) {
    const r = new af(n.name, n.detail, Zn.to(n.kind), j.to(n.range), j.to(n.selectionRange));
    return yp(n.tags) && (r.tags = n.tags.map(Ys.to)), n.children && (r.children = n.children.map(t)), r;
  }
  i.to = t;
})(qy || (qy = {}));
var ql;
(function(i) {
  function e(n) {
    const r = new uS(Zn.to(n.kind), n.name, n.detail || "", x.revive(n.uri), j.to(n.range), j.to(n.selectionRange));
    return r._sessionId = n._sessionId, r._itemId = n._itemId, r;
  }
  i.to = e;
  function t(n, r, s) {
    var o;
    if (r = r ?? n._sessionId, s = s ?? n._itemId, r === void 0 || s === void 0)
      throw new Error("invalid item");
    return {
      _sessionId: r,
      _itemId: s,
      name: n.name,
      detail: n.detail,
      kind: Zn.from(n.kind),
      uri: n.uri,
      range: j.from(n.range),
      selectionRange: j.from(n.selectionRange),
      tags: (o = n.tags) == null ? void 0 : o.map(Ys.from)
    };
  }
  i.from = t;
})(ql || (ql = {}));
var jy;
(function(i) {
  function e(t) {
    return new g5(ql.to(t.from), t.fromRanges.map((n) => j.to(n)));
  }
  i.to = e;
})(jy || (jy = {}));
var Gy;
(function(i) {
  function e(t) {
    return new m5(ql.to(t.to), t.fromRanges.map((n) => j.to(n)));
  }
  i.to = e;
})(Gy || (Gy = {}));
var hn;
(function(i) {
  function e(n) {
    return {
      range: n.range && j.from(n.range),
      uri: n.uri
    };
  }
  i.from = e;
  function t(n) {
    return new $n(x.revive(n.uri), j.to(n.range));
  }
  i.to = t;
})(hn || (hn = {}));
var Ff;
(function(i) {
  function e(n) {
    const r = n, s = n;
    return {
      originSelectionRange: r.originSelectionRange ? j.from(r.originSelectionRange) : void 0,
      uri: r.targetUri ? r.targetUri : s.uri,
      range: j.from(r.targetRange ? r.targetRange : s.range),
      targetSelectionRange: r.targetSelectionRange ? j.from(r.targetSelectionRange) : void 0
    };
  }
  i.from = e;
  function t(n) {
    return {
      targetUri: x.revive(n.uri),
      targetRange: j.to(n.range),
      targetSelectionRange: n.targetSelectionRange ? j.to(n.targetSelectionRange) : void 0,
      originSelectionRange: n.originSelectionRange ? j.to(n.originSelectionRange) : void 0
    };
  }
  i.to = t;
})(Ff || (Ff = {}));
var Uf;
(function(i) {
  function e(n) {
    return {
      range: j.from(n.range),
      contents: Ne.fromMany(n.contents),
      canIncreaseVerbosity: n.canIncreaseVerbosity,
      canDecreaseVerbosity: n.canDecreaseVerbosity
    };
  }
  i.from = e;
  function t(n) {
    const r = n.contents.map(Ne.to), s = j.to(n.range), o = n.canIncreaseVerbosity, a = n.canDecreaseVerbosity;
    return new Fm(r, s, o, a);
  }
  i.to = t;
})(Uf || (Uf = {}));
var Qy;
(function(i) {
  function e(n) {
    return {
      range: j.from(n.range),
      expression: n.expression
    };
  }
  i.from = e;
  function t(n) {
    return new t_(j.to(n.range), n.expression);
  }
  i.to = t;
})(Qy || (Qy = {}));
var S_;
(function(i) {
  function e(n) {
    if (n instanceof i_)
      return {
        type: "text",
        range: j.from(n.range),
        text: n.text
      };
    if (n instanceof n_)
      return {
        type: "variable",
        range: j.from(n.range),
        variableName: n.variableName,
        caseSensitiveLookup: n.caseSensitiveLookup
      };
    if (n instanceof r_)
      return {
        type: "expression",
        range: j.from(n.range),
        expression: n.expression
      };
    throw new Error("Unknown 'InlineValue' type");
  }
  i.from = e;
  function t(n) {
    switch (n.type) {
      case "text":
        return {
          range: j.to(n.range),
          text: n.text
        };
      case "variable":
        return {
          range: j.to(n.range),
          variableName: n.variableName,
          caseSensitiveLookup: n.caseSensitiveLookup
        };
      case "expression":
        return {
          range: j.to(n.range),
          expression: n.expression
        };
    }
  }
  i.to = t;
})(S_ || (S_ = {}));
var D_;
(function(i) {
  function e(n) {
    return {
      frameId: n.frameId,
      stoppedLocation: j.from(n.stoppedLocation)
    };
  }
  i.from = e;
  function t(n) {
    return new Xb(n.frameId, j.to(n.stoppedLocation));
  }
  i.to = t;
})(D_ || (D_ = {}));
var id;
(function(i) {
  function e(n) {
    return {
      range: j.from(n.range),
      kind: n.kind
    };
  }
  i.from = e;
  function t(n) {
    return new Um(j.to(n.range), n.kind);
  }
  i.to = t;
})(id || (id = {}));
var Ky;
(function(i) {
  function e(n) {
    return {
      uri: n.uri,
      highlights: n.highlights.map(id.from)
    };
  }
  i.from = e;
  function t(n) {
    return new $m(x.revive(n.uri), n.highlights.map(id.to));
  }
  i.to = t;
})(Ky || (Ky = {}));
var Jy;
(function(i) {
  function e(t) {
    switch (t) {
      case dh.TriggerCharacter:
        return Zc.TriggerCharacter;
      case dh.TriggerForIncompleteCompletions:
        return Zc.TriggerForIncompleteCompletions;
      case dh.Invoke:
      default:
        return Zc.Invoke;
    }
  }
  i.to = e;
})(Jy || (Jy = {}));
var Yy;
(function(i) {
  function e(t) {
    return {
      triggerKind: Jy.to(t.triggerKind),
      triggerCharacter: t.triggerCharacter
    };
  }
  i.to = e;
})(Yy || (Yy = {}));
var k_;
(function(i) {
  function e(n) {
    switch (n) {
      case df.Deprecated:
        return cm.Deprecated;
    }
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case cm.Deprecated:
        return df.Deprecated;
    }
  }
  i.to = t;
})(k_ || (k_ = {}));
var Xy;
(function(i) {
  function e(t, n, r) {
    return "icon" in t && "command" in t ? {
      command: n.toInternal(t.command, r),
      icon: e1.fromThemeIcon(t.icon)
    } : { command: n.toInternal(t, r) };
  }
  i.from = e;
})(Xy || (Xy = {}));
var I_;
(function(i) {
  const e = /* @__PURE__ */ new Map([
    [Ae.Method, F.Method],
    [Ae.Function, F.Function],
    [Ae.Constructor, F.Constructor],
    [Ae.Field, F.Field],
    [Ae.Variable, F.Variable],
    [Ae.Class, F.Class],
    [Ae.Interface, F.Interface],
    [Ae.Struct, F.Struct],
    [Ae.Module, F.Module],
    [Ae.Property, F.Property],
    [Ae.Unit, F.Unit],
    [Ae.Value, F.Value],
    [Ae.Constant, F.Constant],
    [Ae.Enum, F.Enum],
    [Ae.EnumMember, F.EnumMember],
    [Ae.Keyword, F.Keyword],
    [Ae.Snippet, F.Snippet],
    [Ae.Text, F.Text],
    [Ae.Color, F.Color],
    [Ae.File, F.File],
    [Ae.Reference, F.Reference],
    [Ae.Folder, F.Folder],
    [Ae.Event, F.Event],
    [Ae.Operator, F.Operator],
    [Ae.TypeParameter, F.TypeParameter],
    [Ae.Issue, F.Issue],
    [Ae.User, F.User]
  ]);
  function t(s) {
    return e.get(s) ?? F.Property;
  }
  i.from = t;
  const n = /* @__PURE__ */ new Map([
    [F.Method, Ae.Method],
    [F.Function, Ae.Function],
    [F.Constructor, Ae.Constructor],
    [F.Field, Ae.Field],
    [F.Variable, Ae.Variable],
    [F.Class, Ae.Class],
    [F.Interface, Ae.Interface],
    [F.Struct, Ae.Struct],
    [F.Module, Ae.Module],
    [F.Property, Ae.Property],
    [F.Unit, Ae.Unit],
    [F.Value, Ae.Value],
    [F.Constant, Ae.Constant],
    [F.Enum, Ae.Enum],
    [F.EnumMember, Ae.EnumMember],
    [F.Keyword, Ae.Keyword],
    [F.Snippet, Ae.Snippet],
    [F.Text, Ae.Text],
    [F.Color, Ae.Color],
    [F.File, Ae.File],
    [F.Reference, Ae.Reference],
    [F.Folder, Ae.Folder],
    [F.Event, Ae.Event],
    [F.Operator, Ae.Operator],
    [F.TypeParameter, Ae.TypeParameter],
    [F.User, Ae.User],
    [F.Issue, Ae.Issue]
  ]);
  function r(s) {
    return n.get(s) ?? Ae.Property;
  }
  i.to = r;
})(I_ || (I_ = {}));
var Zy;
(function(i) {
  function e(t, n) {
    var s;
    const r = new Vm(t.label);
    return r.insertText = t.insertText, r.kind = I_.to(t.kind), r.tags = (s = t.tags) == null ? void 0 : s.map(k_.to), r.detail = t.detail, r.documentation = Kl(t.documentation) ? Ne.to(t.documentation) : t.documentation, r.sortText = t.sortText, r.filterText = t.filterText, r.preselect = t.preselect, r.commitCharacters = t.commitCharacters, ft.isIRange(t.range) ? r.range = j.to(t.range) : typeof t.range == "object" && (r.range = { inserting: j.to(t.range.insert), replacing: j.to(t.range.replace) }), r.keepWhitespace = typeof t.insertTextRules > "u" ? !1 : !!(t.insertTextRules & dl.KeepWhitespace), typeof t.insertTextRules < "u" && t.insertTextRules & dl.InsertAsSnippet ? r.insertText = new Hl(t.insertText) : (r.insertText = t.insertText, r.textEdit = r.range instanceof $e ? new Jo(r.range, r.insertText) : void 0), t.additionalTextEdits && t.additionalTextEdits.length > 0 && (r.additionalTextEdits = t.additionalTextEdits.map((o) => gi.to(o))), r.command = n && t.command ? n.fromInternal(t.command) : void 0, r;
  }
  i.to = e;
})(Zy || (Zy = {}));
var C_;
(function(i) {
  function e(n) {
    if (typeof n.label != "string" && !Array.isArray(n.label))
      throw new TypeError("Invalid label");
    return {
      label: n.label,
      documentation: Ne.fromStrict(n.documentation)
    };
  }
  i.from = e;
  function t(n) {
    return {
      label: n.label,
      documentation: Kl(n.documentation) ? Ne.to(n.documentation) : n.documentation
    };
  }
  i.to = t;
})(C_ || (C_ = {}));
var T_;
(function(i) {
  function e(n) {
    return {
      label: n.label,
      documentation: Ne.fromStrict(n.documentation),
      parameters: Array.isArray(n.parameters) ? n.parameters.map(C_.from) : [],
      activeParameter: n.activeParameter
    };
  }
  i.from = e;
  function t(n) {
    return {
      label: n.label,
      documentation: Kl(n.documentation) ? Ne.to(n.documentation) : n.documentation,
      parameters: Array.isArray(n.parameters) ? n.parameters.map(C_.to) : [],
      activeParameter: n.activeParameter
    };
  }
  i.to = t;
})(T_ || (T_ = {}));
var $f;
(function(i) {
  function e(n) {
    return {
      activeSignature: n.activeSignature,
      activeParameter: n.activeParameter,
      signatures: Array.isArray(n.signatures) ? n.signatures.map(T_.from) : []
    };
  }
  i.from = e;
  function t(n) {
    return {
      activeSignature: n.activeSignature,
      activeParameter: n.activeParameter,
      signatures: Array.isArray(n.signatures) ? n.signatures.map(T_.to) : []
    };
  }
  i.to = t;
})($f || ($f = {}));
var e0;
(function(i) {
  function e(t, n) {
    const r = new Wm(ut.to(n.position), typeof n.label == "string" ? n.label : n.label.map(t0.to.bind(void 0, t)), n.kind && P_.to(n.kind));
    return r.textEdits = n.textEdits && n.textEdits.map(gi.to), r.tooltip = Kl(n.tooltip) ? Ne.to(n.tooltip) : n.tooltip, r.paddingLeft = n.paddingLeft, r.paddingRight = n.paddingRight, r;
  }
  i.to = e;
})(e0 || (e0 = {}));
var t0;
(function(i) {
  function e(t, n) {
    const r = new Bm(n.label);
    return r.tooltip = Kl(n.tooltip) ? Ne.to(n.tooltip) : n.tooltip, ab.is(n.command) && (r.command = t.fromInternal(n.command)), n.location && (r.location = hn.to(n.location)), r;
  }
  i.to = e;
})(t0 || (t0 = {}));
var P_;
(function(i) {
  function e(n) {
    return n;
  }
  i.from = e;
  function t(n) {
    return n;
  }
  i.to = t;
})(P_ || (P_ = {}));
var _l;
(function(i) {
  function e(n) {
    return {
      range: j.from(n.range),
      url: n.target,
      tooltip: n.tooltip
    };
  }
  i.from = e;
  function t(n) {
    let r;
    if (n.url)
      try {
        r = typeof n.url == "string" ? x.parse(n.url, !0) : x.revive(n.url);
      } catch {
      }
    const s = new qm(j.to(n.range), r);
    return s.tooltip = n.tooltip, s;
  }
  i.to = t;
})(_l || (_l = {}));
var A_;
(function(i) {
  function e(n) {
    const r = new Gm(n.label);
    return n.textEdit && (r.textEdit = gi.to(n.textEdit)), n.additionalTextEdits && (r.additionalTextEdits = n.additionalTextEdits.map((s) => gi.to(s))), r;
  }
  i.to = e;
  function t(n) {
    return {
      label: n.label,
      textEdit: n.textEdit ? gi.from(n.textEdit) : void 0,
      additionalTextEdits: n.additionalTextEdits ? n.additionalTextEdits.map((r) => gi.from(r)) : void 0
    };
  }
  i.from = t;
})(A_ || (A_ = {}));
var nd;
(function(i) {
  function e(n) {
    return new Gu(n[0], n[1], n[2], n[3]);
  }
  i.to = e;
  function t(n) {
    return [n.red, n.green, n.blue, n.alpha];
  }
  i.from = t;
})(nd || (nd = {}));
var i0;
(function(i) {
  function e(n) {
    return { range: j.from(n.range) };
  }
  i.from = e;
  function t(n) {
    return new uf(j.to(n.range));
  }
  i.to = t;
})(i0 || (i0 = {}));
var R_;
(function(i) {
  function e(t) {
    switch (t) {
      case Ac.AUTO:
        return tu.AfterDelay;
      case Ac.EXPLICIT:
        return tu.Manual;
      case Ac.FOCUS_CHANGE:
      case Ac.WINDOW_CHANGE:
        return tu.FocusOut;
    }
  }
  i.to = e;
})(R_ || (R_ = {}));
var cu;
(function(i) {
  function e(n) {
    switch (n) {
      case hr.Off:
        return Hi.Off;
      case hr.Relative:
        return Hi.Relative;
      case hr.Interval:
        return Hi.Interval;
      case hr.On:
      default:
        return Hi.On;
    }
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case Hi.Off:
        return hr.Off;
      case Hi.Relative:
        return hr.Relative;
      case Hi.Interval:
        return hr.Interval;
      case Hi.On:
      default:
        return hr.On;
    }
  }
  i.to = t;
})(cu || (cu = {}));
var rd;
(function(i) {
  function e(n) {
    if (n === Er.CRLF)
      return Cc.CRLF;
    if (n === Er.LF)
      return Cc.LF;
  }
  i.from = e;
  function t(n) {
    if (n === Cc.CRLF)
      return Er.CRLF;
    if (n === Cc.LF)
      return Er.LF;
  }
  i.to = t;
})(rd || (rd = {}));
var L_;
(function(i) {
  function e(t) {
    if (typeof t == "object")
      return t.viewId;
    switch (t) {
      case zo.SourceControl:
        return ph.Scm;
      case zo.Window:
        return ph.Window;
      case zo.Notification:
        return ph.Notification;
    }
    throw new Error("Unknown 'ProgressLocation'");
  }
  i.from = e;
})(L_ || (L_ = {}));
var N_;
(function(i) {
  function e(n) {
    const r = { start: n.start + 1, end: n.end + 1 };
    return n.kind && (r.kind = M_.from(n.kind)), r;
  }
  i.from = e;
  function t(n) {
    const r = { start: n.start - 1, end: n.end - 1 };
    return n.kind && (r.kind = M_.to(n.kind)), r;
  }
  i.to = t;
})(N_ || (N_ = {}));
var M_;
(function(i) {
  function e(n) {
    if (n)
      switch (n) {
        case Ps.Comment:
          return dc.Comment;
        case Ps.Imports:
          return dc.Imports;
        case Ps.Region:
          return dc.Region;
      }
  }
  i.from = e;
  function t(n) {
    if (n)
      switch (n.value) {
        case dc.Comment.value:
          return Ps.Comment;
        case dc.Imports.value:
          return Ps.Imports;
        case dc.Region.value:
          return Ps.Region;
      }
  }
  i.to = t;
})(M_ || (M_ = {}));
var xh;
(function(i) {
  function e(t) {
    if (t)
      return {
        pinned: typeof t.preview == "boolean" ? !t.preview : void 0,
        inactive: t.background,
        preserveFocus: t.preserveFocus,
        selection: typeof t.selection == "object" ? j.from(t.selection) : void 0,
        override: typeof t.override == "boolean" ? y9.id : void 0
      };
  }
  i.from = e;
})(xh || (xh = {}));
var En;
(function(i) {
  function e(s) {
    return s instanceof ru ? s.toJSON() : typeof s == "string" ? s : t(s) || n(s) ? new ru(s.baseUri ?? s.base, s.pattern).toJSON() : s;
  }
  i.from = e;
  function t(s) {
    const o = s;
    return o ? x.isUri(o.baseUri) && typeof o.pattern == "string" : !1;
  }
  function n(s) {
    const o = s;
    return o ? typeof o.base == "string" && typeof o.pattern == "string" : !1;
  }
  function r(s) {
    return typeof s == "string" ? s : new ru(x.revive(s.baseUri), s.pattern);
  }
  i.to = r;
})(En || (En = {}));
var n0;
(function(i) {
  function e(t) {
    if (t) {
      if (Array.isArray(t))
        return t.map(e);
      if (typeof t == "string")
        return t;
      {
        const n = t;
        return {
          language: n.language,
          scheme: n.scheme,
          pattern: En.from(n.pattern) ?? void 0,
          exclusive: n.exclusive,
          notebookType: n.notebookType
        };
      }
    } else return;
  }
  i.from = e;
})(n0 || (n0 = {}));
var ls;
(function(i) {
  function e(n) {
    return { start: n.start, end: n.end };
  }
  i.from = e;
  function t(n) {
    return new es(n.start, n.end);
  }
  i.to = t;
})(ls || (ls = {}));
var sd;
(function(i) {
  function e(n) {
    return {
      timing: typeof n.runStartTime == "number" && typeof n.runEndTime == "number" ? { startTime: n.runStartTime, endTime: n.runEndTime } : void 0,
      executionOrder: n.executionOrder,
      success: n.lastRunSuccess
    };
  }
  i.to = e;
  function t(n) {
    var r, s;
    return {
      lastRunSuccess: n.success,
      runStartTime: (r = n.timing) == null ? void 0 : r.startTime,
      runEndTime: (s = n.timing) == null ? void 0 : s.endTime,
      executionOrder: n.executionOrder
    };
  }
  i.from = t;
})(sd || (sd = {}));
var Hf;
(function(i) {
  function e(n) {
    switch (n) {
      case Ha.Markup:
        return Lc.Markup;
      case Ha.Code:
      default:
        return Lc.Code;
    }
  }
  i.from = e;
  function t(n) {
    switch (n) {
      case Lc.Markup:
        return Ha.Markup;
      case Lc.Code:
      default:
        return Ha.Code;
    }
  }
  i.to = t;
})(Hf || (Hf = {}));
var go;
(function(i) {
  function e(n) {
    const r = {
      metadata: n.metadata ?? /* @__PURE__ */ Object.create(null),
      cells: []
    };
    for (const s of n.cells)
      uv.validate(s), r.cells.push(od.from(s));
    return r;
  }
  i.from = e;
  function t(n) {
    const r = new x5(n.cells.map(od.to));
    return DT(n.metadata) || (r.metadata = n.metadata), r;
  }
  i.to = t;
})(go || (go = {}));
var od;
(function(i) {
  function e(n) {
    return {
      cellKind: Hf.from(n.kind),
      language: n.languageId,
      mime: n.mime,
      source: n.value,
      metadata: n.metadata,
      internalMetadata: sd.from(n.executionSummary ?? {}),
      outputs: n.outputs ? n.outputs.map(Xo.from) : []
    };
  }
  i.from = e;
  function t(n) {
    return new uv(Hf.to(n.cellKind), n.source, n.language, n.mime, n.outputs ? n.outputs.map(Xo.to) : void 0, n.metadata, n.internalMetadata ? sd.to(n.internalMetadata) : void 0);
  }
  i.to = t;
})(od || (od = {}));
var ad;
(function(i) {
  function e(n) {
    return {
      mime: n.mime,
      valueBytes: he.wrap(n.data)
    };
  }
  i.from = e;
  function t(n) {
    return new E5(n.valueBytes.buffer, n.mime);
  }
  i.to = t;
})(ad || (ad = {}));
var Xo;
(function(i) {
  function e(n) {
    return {
      outputId: n.id,
      items: n.items.map(ad.from),
      metadata: n.metadata
    };
  }
  i.from = e;
  function t(n) {
    const r = n.items.map(ad.to);
    return new a_(r, n.outputId, n.metadata);
  }
  i.to = t;
})(Xo || (Xo = {}));
var O_;
(function(i) {
  function e(r) {
    return n(r) ? {
      include: En.from(r.include) ?? void 0,
      exclude: En.from(r.exclude) ?? void 0
    } : En.from(r) ?? void 0;
  }
  i.from = e;
  function t(r) {
    return n(r) ? {
      include: En.to(r.include),
      exclude: En.to(r.exclude)
    } : En.to(r);
  }
  i.to = t;
  function n(r) {
    const s = r;
    return s ? !oi(s.include) && !oi(s.exclude) : !1;
  }
})(O_ || (O_ = {}));
var r0;
(function(i) {
  function e(t, n, r) {
    const s = typeof t.command == "string" ? { title: "", command: t.command } : t.command;
    return {
      alignment: t.alignment === l_.Left ? xm.Left : xm.Right,
      command: n.toInternal(s, r),
      text: t.text,
      tooltip: t.tooltip,
      accessibilityInformation: t.accessibilityInformation,
      priority: t.priority
    };
  }
  i.from = e;
})(r0 || (r0 = {}));
var s0;
(function(i) {
  function e(t, n, r) {
    const s = typeof t.command == "string" ? { title: "", command: t.command } : t.command;
    return {
      command: n.toInternal(s, r),
      label: t.label,
      description: t.description,
      detail: t.detail,
      documentation: t.documentation
    };
  }
  i.from = e;
})(s0 || (s0 = {}));
var o0;
(function(i) {
  function e(t) {
    return {
      transientOutputs: (t == null ? void 0 : t.transientOutputs) ?? !1,
      transientCellMetadata: (t == null ? void 0 : t.transientCellMetadata) ?? {},
      transientDocumentMetadata: (t == null ? void 0 : t.transientDocumentMetadata) ?? {},
      cellContentMetadata: (t == null ? void 0 : t.cellContentMetadata) ?? {}
    };
  }
  i.from = e;
})(o0 || (o0 = {}));
var F_;
(function(i) {
  function e(n) {
    return {
      uri: n.uri,
      provides: n.provides
    };
  }
  i.from = e;
  function t(n) {
    return new S5(x.revive(n.uri), n.provides);
  }
  i.to = t;
})(F_ || (F_ = {}));
var ld;
(function(i) {
  function e(n) {
    var r;
    return {
      message: Ne.fromStrict(n.message) || "",
      type: kr.Error,
      expected: n.expectedOutput,
      actual: n.actualOutput,
      contextValue: n.contextValue,
      location: n.location && { range: j.from(n.location.range), uri: n.location.uri },
      stackTrace: (r = n.stackTrace) == null ? void 0 : r.map((s) => ({
        label: s.label,
        position: s.position && ut.from(s.position),
        uri: s.uri && x.revive(s.uri).toJSON()
      }))
    };
  }
  i.from = e;
  function t(n) {
    const r = new f_(typeof n.message == "string" ? n.message : Ne.to(n.message));
    return r.actualOutput = n.actual, r.expectedOutput = n.expected, r.contextValue = n.contextValue, r.location = n.location ? hn.to(n.location) : void 0, r;
  }
  i.to = t;
})(ld || (ld = {}));
var Tr;
(function(i) {
  i.namespace = Eg, i.denamespace = d5;
})(Tr || (Tr = {}));
var a0;
(function(i) {
  function e(t) {
    return {
      controllerId: t.controllerId,
      profileId: t.profileId,
      group: cd.from(t.kind)
    };
  }
  i.from = e;
})(a0 || (a0 = {}));
var cd;
(function(i) {
  const e = {
    [lu.Coverage]: Ni.Coverage,
    [lu.Debug]: Ni.Debug,
    [lu.Run]: Ni.Run
  };
  function t(n) {
    return e.hasOwnProperty(n) ? e[n] : Ni.Run;
  }
  i.from = t;
})(cd || (cd = {}));
var Zo;
(function(i) {
  function e(n) {
    const r = cv(n).controllerId;
    return {
      extId: Fe.fromExtHostTestItem(n, r).toString(),
      label: n.label,
      uri: x.revive(n.uri),
      busy: n.busy,
      tags: n.tags.map((s) => Tr.namespace(r, s.id)),
      range: ft.lift(j.from(n.range)),
      description: n.description || null,
      sortText: n.sortText || null,
      error: n.error && Ne.fromStrict(n.error) || null
    };
  }
  i.from = e;
  function t(n) {
    return {
      parent: void 0,
      error: void 0,
      id: Fe.fromString(n.extId).localId,
      label: n.label,
      uri: x.revive(n.uri),
      tags: (n.tags || []).map((r) => {
        const { tagId: s } = Tr.denamespace(r);
        return new Cf(s);
      }),
      children: {
        add: () => {
        },
        delete: () => {
        },
        forEach: () => {
        },
        *[Symbol.iterator]() {
        },
        get: () => {
        },
        replace: () => {
        },
        size: 0
      },
      range: j.to(n.range || void 0),
      canResolveChildren: !1,
      busy: n.busy,
      description: n.description || void 0,
      sortText: n.sortText || void 0
    };
  }
  i.toPlain = t;
})(Zo || (Zo = {}));
(function(i) {
  function e(n) {
    return { id: n.id };
  }
  i.from = e;
  function t(n) {
    return new Cf(n.id);
  }
  i.to = t;
})(Tr || (Tr = {}));
var l0;
(function(i) {
  const e = (n, r) => {
    const s = n.value;
    if (!s)
      return;
    const o = {
      ...Zo.toPlain(s.item),
      parent: r,
      taskStates: s.tasks.map((a) => ({
        state: a.state,
        duration: a.duration,
        messages: a.messages.filter((l) => l.type === kr.Error).map(ld.to)
      })),
      children: []
    };
    if (n.children)
      for (const a of n.children.values()) {
        const l = e(a, o);
        l && o.children.push(l);
      }
    return o;
  };
  function t(n) {
    const r = new e3();
    for (const a of n.items)
      r.insert(Fe.fromString(a.item.extId).path, a);
    const s = [r.nodes], o = [];
    for (; s.length; )
      for (const a of s.pop())
        a.value ? o.push(a) : a.children && s.push(a.children.values());
    return {
      completedAt: n.completedAt,
      results: o.map((a) => e(a)).filter(Mn)
    };
  }
  i.to = t;
})(l0 || (l0 = {}));
var Bf;
(function(i) {
  function e(a) {
    return { covered: a.covered, total: a.total };
  }
  function t(a) {
    return "line" in a ? ut.from(a) : j.from(a);
  }
  function n(a) {
    if (a)
      return "endLineNumber" in a ? j.to(a) : ut.to(a);
  }
  function r(a) {
    var l;
    if (a.type === hl.Statement) {
      const c = [];
      if (a.branches)
        for (const u of a.branches)
          c.push({
            executed: u.count,
            location: n(u.location),
            label: u.label
          });
      return new k5(a.count, n(a.location), (l = a.branches) == null ? void 0 : l.map((u) => new I5(u.count, n(u.location), u.label)));
    } else
      return new C5(a.name, a.count, n(a.location));
  }
  i.to = r;
  function s(a) {
    if (typeof a.executed == "number" && a.executed < 0)
      throw new Error(`Invalid coverage count ${a.executed}`);
    return "branches" in a ? {
      count: a.executed,
      location: t(a.location),
      type: hl.Statement,
      branches: a.branches.length ? a.branches.map(
        (l) => ({ count: l.executed, location: l.location && t(l.location), label: l.label })
      ) : void 0
    } : {
      type: hl.Declaration,
      name: a.name,
      count: a.executed,
      location: t(a.location)
    };
  }
  i.fromDetails = s;
  function o(a, l, c) {
    return Cg(c.statementCoverage), Cg(c.branchCoverage), Cg(c.declarationCoverage), {
      id: l,
      uri: c.uri,
      statement: e(c.statementCoverage),
      branch: c.branchCoverage && e(c.branchCoverage),
      declaration: c.declarationCoverage && e(c.declarationCoverage),
      testIds: c instanceof Xu && c.includesTests.length ? c.includesTests.map((u) => Fe.fromExtHostTestItem(u, a).toString()) : void 0
    };
  }
  i.fromFile = o;
})(Bf || (Bf = {}));
var c0;
(function(i) {
  function e(t) {
    switch (t) {
      case hm.Invoke:
        return lf.Invoke;
      case hm.Auto:
        return lf.Automatic;
    }
  }
  i.to = e;
})(c0 || (c0 = {}));
var vl;
(function(i) {
  function e(n) {
    const r = new fS(Zn.to(n.kind), n.name, n.detail || "", x.revive(n.uri), j.to(n.range), j.to(n.selectionRange));
    return r._sessionId = n._sessionId, r._itemId = n._itemId, r;
  }
  i.to = e;
  function t(n, r, s) {
    var o;
    if (r = r ?? n._sessionId, s = s ?? n._itemId, r === void 0 || s === void 0)
      throw new Error("invalid item");
    return {
      _sessionId: r,
      _itemId: s,
      kind: Zn.from(n.kind),
      name: n.name,
      detail: n.detail ?? "",
      uri: n.uri,
      range: j.from(n.range),
      selectionRange: j.from(n.selectionRange),
      tags: (o = n.tags) == null ? void 0 : o.map(Ys.from)
    };
  }
  i.from = t;
})(vl || (vl = {}));
var U_;
(function(i) {
  function e(t) {
    if (t)
      return {
        value: t.value,
        tooltip: t.tooltip
      };
  }
  i.from = e;
})(U_ || (U_ = {}));
var wl;
(function(i) {
  function e(s, o, a) {
    const l = o.fileData;
    return l ? new EN(new SN(l.name, x.revive(l.uri), l.id, RE(() => a(l.id)))) : s === Dr.uriList && o.uriListData ? new Ym(r(o.uriListData)) : new Ym(o.asString);
  }
  i.to = e;
  async function t(s, o, a = dn()) {
    const l = await o.asString();
    if (s === Dr.uriList)
      return {
        id: a,
        asString: l,
        fileData: void 0,
        uriListData: n(l)
      };
    const c = o.asFile();
    return {
      id: a,
      asString: l,
      fileData: c ? {
        name: c.name,
        uri: c.uri,
        id: c._itemId ?? c.id
      } : void 0
    };
  }
  i.from = t;
  function n(s) {
    return Zw.split(s).map((o) => {
      if (o.startsWith("#"))
        return o;
      try {
        return x.parse(o);
      } catch {
      }
      return o;
    });
  }
  function r(s) {
    return Zw.create(s.map((o) => typeof o == "string" ? o : x.revive(o)));
  }
})(wl || (wl = {}));
var ud;
(function(i) {
  function e(r, s) {
    const o = r.items.map(([a, l]) => [a, wl.to(a, l, s)]);
    return new Ku(o);
  }
  i.toDataTransfer = e;
  async function t(r) {
    return { items: await Promise.all(Array.from(r, async ([o, a]) => [o, await wl.from(o, a)])) };
  }
  i.from = t;
  async function n(r) {
    return { items: await Promise.all(Array.from(r, async ([o, a]) => [o, await wl.from(o, a, a.id)])) };
  }
  i.fromList = n;
})(ud || (ud = {}));
var $_;
(function(i) {
  function e(n, r) {
    return {
      kind: "reply",
      agentId: n.participant ?? (r == null ? void 0 : r.agentId) ?? "",
      subCommand: n.command ?? (r == null ? void 0 : r.command),
      message: n.prompt,
      title: n.label
    };
  }
  i.from = e;
  function t(n) {
    return {
      prompt: n.message,
      label: n.title,
      participant: n.agentId,
      command: n.subCommand
    };
  }
  i.to = t;
})($_ || ($_ = {}));
var dd;
(function(i) {
  function e(n) {
    switch (n) {
      case Ss.System:
        return xn.System;
      case Ss.User:
        return xn.User;
      case Ss.Assistant:
        return xn.Assistant;
    }
  }
  i.to = e;
  function t(n) {
    switch (n) {
      case xn.System:
        return Ss.System;
      case xn.User:
        return Ss.User;
      case xn.Assistant:
        return Ss.Assistant;
    }
    return Ss.User;
  }
  i.from = t;
})(dd || (dd = {}));
var RI;
(function(i) {
  function e(n) {
    const r = n.content.map((a) => {
      if (a.type === "text")
        return new Vt(a.value, a.audience);
      if (a.type === "tool_result") {
        const l = a.value.map((c) => c.type === "text" ? new Vt(c.value, c.audience) : new fs(c.value));
        return new w_(a.toolCallId, l, a.isError);
      } else {
        if (a.type === "image_url")
          return;
        if (a.type === "tool_use")
          return new Wl(a.toolCallId, a.name, a.parameters);
      }
    }).filter((a) => a !== void 0), s = dd.to(n.role);
    return new H5(s, r, n.name);
  }
  i.to = e;
  function t(n) {
    const r = dd.from(n.role), s = n.name;
    let o = n.content;
    typeof o == "string" && (o = [new Vt(o)]);
    const a = o.map((l) => {
      if (l instanceof w_)
        return {
          type: "tool_result",
          toolCallId: l.callId,
          value: Xt(l.content.map((c) => c instanceof Vt ? {
            type: "text",
            value: c.value,
            audience: c.audience
          } : c instanceof fs ? {
            type: "prompt_tsx",
            value: c.value
          } : void 0)),
          isError: l.isError
        };
      if (l instanceof Wl)
        return {
          type: "tool_use",
          toolCallId: l.callId,
          name: l.name,
          parameters: l.input
        };
      if (l instanceof Vt)
        return {
          type: "text",
          value: l.value
        };
      if (typeof l != "string")
        throw new Error("Unexpected chat message content type");
      return {
        type: "text",
        value: l
      };
    });
    return {
      role: r,
      name: s,
      content: a
    };
  }
  i.from = t;
})(RI || (RI = {}));
var H_;
(function(i) {
  function e(n) {
    const r = n.content.map((a) => {
      if (a.type === "text")
        return new Vt(a.value, a.audience);
      if (a.type === "tool_result") {
        const l = a.value.map((c) => c.type === "text" ? new Vt(c.value, c.audience) : c.type === "data" ? new Sn(c.value.data.buffer, c.value.mimeType) : new fs(c.value));
        return new Ey(a.toolCallId, l, a.isError);
      } else return a.type === "image_url" ? new Sn(a.value.data.buffer, a.value.mimeType) : a.type === "data" ? new Sn(a.data.buffer, a.mimeType) : new Wl(a.toolCallId, a.name, a.parameters);
    }), s = dd.to(n.role);
    return new B5(s, r, n.name);
  }
  i.to = e;
  function t(n) {
    const r = dd.from(n.role), s = n.name;
    let o = n.content;
    typeof o == "string" && (o = [new Vt(o)]);
    const a = o.map((l) => {
      if (l instanceof Ey || l instanceof w_)
        return {
          type: "tool_result",
          toolCallId: l.callId,
          value: Xt(l.content.map((c) => c instanceof Vt ? {
            type: "text",
            value: c.value,
            audience: c.audience
          } : c instanceof fs ? {
            type: "prompt_tsx",
            value: c.value
          } : c instanceof Sn ? {
            type: "data",
            value: {
              mimeType: c.mimeType,
              data: he.wrap(c.data)
            },
            audience: c.audience
          } : void 0)),
          isError: l.isError
        };
      if (l instanceof Sn)
        return mM(l) ? {
          type: "image_url",
          value: {
            mimeType: l.mimeType,
            data: he.wrap(l.data)
          }
        } : {
          type: "data",
          mimeType: l.mimeType,
          data: he.wrap(l.data),
          audience: l.audience
        };
      if (l instanceof Wl)
        return {
          type: "tool_use",
          toolCallId: l.callId,
          name: l.name,
          parameters: l.input
        };
      if (l instanceof Vt)
        return {
          type: "text",
          value: l.value
        };
      if (typeof l != "string")
        throw new Error("Unexpected chat message content type llm 2");
      return {
        type: "text",
        value: l
      };
    });
    return {
      role: r,
      name: s,
      content: a
    };
  }
  i.from = t;
})(H_ || (H_ = {}));
function mM(i) {
  switch (i.mimeType) {
    case ko.PNG:
    case ko.JPEG:
    case ko.GIF:
    case ko.WEBP:
    case ko.BMP:
      return !0;
    default:
      return !1;
  }
}
var Wf;
(function(i) {
  function e(n) {
    return {
      kind: "markdownContent",
      content: Ne.from(n.value)
    };
  }
  i.from = e;
  function t(n) {
    return new dv(Ne.to(n.content));
  }
  i.to = t;
})(Wf || (Wf = {}));
var B_;
(function(i) {
  function e(n) {
    return {
      kind: "codeblockUri",
      uri: n.value,
      isEdit: n.isEdit
    };
  }
  i.from = e;
  function t(n) {
    return new pv(x.revive(n.uri), n.isEdit);
  }
  i.to = t;
})(B_ || (B_ = {}));
var W_;
(function(i) {
  function e(n) {
    return {
      kind: "markdownVuln",
      content: Ne.from(n.value),
      vulnerabilities: n.vulnerabilities
    };
  }
  i.from = e;
  function t(n) {
    return new Pf(Ne.to(n.content), n.vulnerabilities);
  }
  i.to = t;
})(W_ || (W_ = {}));
var V_;
(function(i) {
  function e(t) {
    return {
      kind: "confirmation",
      title: t.title,
      message: Ne.from(t.message),
      data: t.data,
      buttons: t.buttons
    };
  }
  i.from = e;
})(V_ || (V_ = {}));
var Vf;
(function(i) {
  function e(n) {
    const { value: r, baseUri: s } = n;
    function o(a, l) {
      return a.map((c) => {
        const u = x.joinPath(l, c.name);
        return {
          label: c.name,
          uri: u,
          children: c.children && o(c.children, u)
        };
      });
    }
    return {
      kind: "treeData",
      treeData: {
        label: Xs(s),
        uri: s,
        children: o(r, s)
      }
    };
  }
  i.from = e;
  function t(n) {
    const r = Wi(n.treeData);
    function s(l) {
      return l.map((c) => ({
        name: c.label,
        children: c.children && s(c.children)
      }));
    }
    const o = r.uri, a = r.children ? s(r.children) : [];
    return new hv(a, o);
  }
  i.to = t;
})(Vf || (Vf = {}));
var u0;
(function(i) {
  function e(n) {
    return {
      kind: "multiDiffData",
      multiDiffData: {
        title: n.title,
        resources: n.value.map((r) => ({
          originalUri: r.originalUri,
          modifiedUri: r.modifiedUri,
          goToFileUri: r.goToFileUri
        }))
      }
    };
  }
  i.from = e;
  function t(n) {
    const r = n.multiDiffData.resources.map((s) => ({
      originalUri: s.originalUri ? x.revive(s.originalUri) : void 0,
      modifiedUri: s.modifiedUri ? x.revive(s.modifiedUri) : void 0,
      goToFileUri: s.goToFileUri ? x.revive(s.goToFileUri) : void 0
    }));
    return new vS(r, n.multiDiffData.title);
  }
  i.to = t;
})(u0 || (u0 = {}));
var hd;
(function(i) {
  function e(n) {
    const r = (o) => x.isUri(o), s = (o) => "name" in o;
    return {
      kind: "inlineReference",
      name: n.title,
      inlineReference: r(n.value) ? n.value : s(n.value) ? zl.from(n.value) : as.from(n.value)
    };
  }
  i.from = e;
  function t(n) {
    const r = Wi(n);
    return new Af(x.isUri(r.inlineReference) ? r.inlineReference : "location" in r.inlineReference ? zl.to(r.inlineReference) : as.to(r.inlineReference), n.name);
  }
  i.to = t;
})(hd || (hd = {}));
var zf;
(function(i) {
  function e(n) {
    return {
      kind: "progressMessage",
      content: Ne.from(n.value)
    };
  }
  i.from = e;
  function t(n) {
    return new wS(n.content.value);
  }
  i.to = t;
})(zf || (zf = {}));
var qf;
(function(i) {
  function e(n) {
    return {
      kind: "warning",
      content: Ne.from(n.value)
    };
  }
  i.from = e;
  function t(n) {
    return new Rf(n.content.value);
  }
  i.to = t;
})(qf || (qf = {}));
var d0;
(function(i) {
  function e(t) {
    return {
      kind: "extensions",
      extensions: t.extensions
    };
  }
  i.from = e;
})(d0 || (d0 = {}));
var h0;
(function(i) {
  function e(t) {
    return {
      kind: "pullRequest",
      author: t.author,
      title: t.title,
      description: t.description,
      uri: t.uri,
      linkTag: t.linkTag
    };
  }
  i.from = e;
})(h0 || (h0 = {}));
var f0;
(function(i) {
  function e(n) {
    return {
      kind: "move",
      uri: n.uri,
      range: j.from(n.range)
    };
  }
  i.from = e;
  function t(n) {
    return new gv(x.revive(n.uri), j.to(n.range));
  }
  i.to = t;
})(f0 || (f0 = {}));
var jf;
(function(i) {
  function e(n) {
    return {
      kind: "prepareToolInvocation",
      toolName: n.toolName
    };
  }
  i.from = e;
  function t(n) {
    return new Nf(n.toolName);
  }
  i.to = t;
})(jf || (jf = {}));
var p0;
(function(i) {
  function e(s) {
    return {
      kind: "toolInvocationSerialized",
      toolCallId: s.toolCallId,
      toolId: s.toolName,
      invocationMessage: s.invocationMessage ? Ne.from(s.invocationMessage) : s.toolName,
      originMessage: s.originMessage ? Ne.from(s.originMessage) : void 0,
      pastTenseMessage: s.pastTenseMessage ? Ne.from(s.pastTenseMessage) : void 0,
      isConfirmed: s.isConfirmed,
      isComplete: s.isComplete ?? !0,
      isError: s.isError ?? !1,
      resultDetails: void 0,
      toolSpecificData: s.toolSpecificData ? t(s.toolSpecificData) : void 0,
      presentation: void 0
    };
  }
  i.from = e;
  function t(s) {
    return "command" in s && "language" in s ? {
      kind: "terminal",
      command: s.command,
      language: s.language
    } : "commandLine" in s && "language" in s ? {
      kind: "terminal",
      commandLine: s.commandLine,
      language: s.language
    } : s;
  }
  function n(s) {
    const o = new xS(s.toolId || s.toolName, s.toolCallId, s.isError);
    return s.invocationMessage && (o.invocationMessage = s.invocationMessage), s.originMessage && (o.originMessage = s.originMessage), s.pastTenseMessage && (o.pastTenseMessage = s.pastTenseMessage), s.isConfirmed !== void 0 && (o.isConfirmed = s.isConfirmed), s.isComplete !== void 0 && (o.isComplete = s.isComplete), s.toolSpecificData && (o.toolSpecificData = r(s.toolSpecificData)), o;
  }
  i.to = n;
  function r(s) {
    return s.kind === "terminal" ? {
      command: s.command,
      language: s.language
    } : s.kind === "terminal2" ? {
      commandLine: s.commandLine,
      language: s.language
    } : s;
  }
})(p0 || (p0 = {}));
var z_;
(function(i) {
  function e(t) {
    return {
      kind: "progressTask",
      content: Ne.from(t.value)
    };
  }
  i.from = e;
})(z_ || (z_ = {}));
var g0;
(function(i) {
  function e(t) {
    return {
      kind: "progressTaskResult",
      content: typeof t == "string" ? Ne.from(t) : void 0
    };
  }
  i.from = e;
})(g0 || (g0 = {}));
var Gf;
(function(i) {
  function e(n, r, s) {
    return {
      kind: "command",
      command: r.toInternal(n.value, s) ?? { command: n.value.command, title: n.value.title }
    };
  }
  i.from = e;
  function t(n, r) {
    return new fv(r.fromInternal(n.command) ?? { command: n.command.id, title: n.command.title });
  }
  i.to = t;
})(Gf || (Gf = {}));
var q_;
(function(i) {
  function e(n) {
    return {
      kind: "textEdit",
      uri: n.uri,
      edits: n.edits.map((r) => gi.from(r)),
      done: n.isDone
    };
  }
  i.from = e;
  function t(n) {
    const r = new Lf(x.revive(n.uri), n.edits.map((s) => gi.to(s)));
    return r.isDone = n.done, r;
  }
  i.to = t;
})(q_ || (q_ = {}));
var j_;
(function(i) {
  function e(t) {
    return t.newCellMetadata ? {
      editType: Wo.Metadata,
      index: t.range.start,
      metadata: t.newCellMetadata
    } : t.newNotebookMetadata ? {
      editType: Wo.DocumentMetadata,
      metadata: t.newNotebookMetadata
    } : {
      editType: Wo.Replace,
      index: t.range.start,
      count: t.range.end - t.range.start,
      cells: t.newCells.map(od.from)
    };
  }
  i.from = e;
})(j_ || (j_ = {}));
var G_;
(function(i) {
  function e(t) {
    return {
      kind: "notebookEdit",
      uri: t.uri,
      edits: t.edits.map(j_.from),
      done: t.isDone
    };
  }
  i.from = e;
})(G_ || (G_ = {}));
var bl;
(function(i) {
  function e(n) {
    const r = ci.isThemeIcon(n.iconPath) ? n.iconPath : x.isUri(n.iconPath) ? { light: x.revive(n.iconPath) } : n.iconPath && "light" in n.iconPath && "dark" in n.iconPath && x.isUri(n.iconPath.light) && x.isUri(n.iconPath.dark) ? { light: x.revive(n.iconPath.light), dark: x.revive(n.iconPath.dark) } : void 0;
    return typeof n.value == "object" && "variableName" in n.value ? {
      kind: "reference",
      reference: {
        variableName: n.value.variableName,
        value: x.isUri(n.value.value) || !n.value.value ? n.value.value : as.from(n.value.value)
      },
      iconPath: r,
      options: n.options
    } : {
      kind: "reference",
      reference: x.isUri(n.value) || typeof n.value == "string" ? n.value : as.from(n.value),
      iconPath: r,
      options: n.options
    };
  }
  i.from = e;
  function t(n) {
    const r = Wi(n), s = (o) => x.isUri(o) ? o : as.to(o);
    return new ml(typeof r.reference == "string" ? r.reference : "variableName" in r.reference ? {
      variableName: r.reference.variableName,
      value: r.reference.value && s(r.reference.value)
    } : s(r.reference));
  }
  i.to = t;
})(bl || (bl = {}));
var Q_;
(function(i) {
  function e(t) {
    return {
      kind: "codeCitation",
      value: t.value,
      license: t.license,
      snippet: t.snippet
    };
  }
  i.from = e;
})(Q_ || (Q_ = {}));
var Qf;
(function(i) {
  function e(r, s, o) {
    return r instanceof dv ? Wf.from(r) : r instanceof Af ? hd.from(r) : r instanceof ml ? bl.from(r) : r instanceof wS ? zf.from(r) : r instanceof hv ? Vf.from(r) : r instanceof vS ? u0.from(r) : r instanceof fv ? Gf.from(r, s, o) : r instanceof Lf ? q_.from(r) : r instanceof __ ? G_.from(r) : r instanceof Pf ? W_.from(r) : r instanceof pv ? B_.from(r) : r instanceof Rf ? qf.from(r) : r instanceof g_ ? V_.from(r) : r instanceof m_ ? Q_.from(r) : r instanceof gv ? f0.from(r) : r instanceof bS ? d0.from(r) : r instanceof Nf ? jf.from(r) : r instanceof yS ? h0.from(r) : r instanceof xS ? p0.from(r) : {
      kind: "markdownContent",
      content: Ne.from("")
    };
  }
  i.from = e;
  function t(r, s) {
    switch (r.kind) {
      case "reference":
        return bl.to(r);
      case "markdownContent":
      case "inlineReference":
      case "progressMessage":
      case "treeData":
      case "command":
        return n(r, s);
    }
  }
  i.to = t;
  function n(r, s) {
    switch (r.kind) {
      case "markdownContent":
        return Wf.to(r);
      case "inlineReference":
        return hd.to(r);
      case "progressMessage":
        return;
      case "treeData":
        return Vf.to(r);
      case "command":
        return Gf.to(r, s);
    }
  }
  i.toContent = n;
})(Qf || (Qf = {}));
var Kf;
(function(i) {
  function e(t, n, r, s, o, a, l) {
    const c = [], u = [];
    for (const f of t.variables.variables)
      f.kind === "tool" ? c.push(f) : f.kind === "toolset" ? c.push(...f.value) : u.push(f);
    const d = {
      id: t.requestId,
      prompt: t.message,
      command: t.command,
      attempt: t.attempt ?? 0,
      enableCommandDetection: t.enableCommandDetection ?? !0,
      isParticipantDetected: t.isParticipantDetected ?? !1,
      references: u.map((f) => J_.to(f, s, l)).filter(Mn),
      toolReferences: c.map(Jf.to),
      location: K_.to(t.location),
      acceptedConfirmationData: t.acceptedConfirmationData,
      rejectedConfirmationData: t.rejectedConfirmationData,
      location2: n,
      toolInvocationToken: Object.freeze({ sessionId: t.sessionId }),
      tools: o,
      model: r,
      editedFileEvents: t.editedFileEvents,
      modeInstructions: t.modeInstructions
    };
    return dt(a, "chatParticipantPrivate") || (delete d.id, delete d.attempt, delete d.enableCommandDetection, delete d.isParticipantDetected, delete d.location, delete d.location2, delete d.editedFileEvents), dt(a, "chatParticipantAdditions") || (delete d.acceptedConfirmationData, delete d.rejectedConfirmationData, delete d.tools), d;
  }
  i.to = e;
})(Kf || (Kf = {}));
var m0;
(function(i) {
  function e(t) {
    return {
      prompt: t.prompt,
      files: t.files.map((n) => x.revive(n))
    };
  }
  i.to = e;
})(m0 || (m0 = {}));
var K_;
(function(i) {
  function e(n) {
    switch (n) {
      case ln.Notebook:
        return fr.Notebook;
      case ln.Terminal:
        return fr.Terminal;
      case ln.Panel:
        return fr.Panel;
      case ln.Editor:
        return fr.Editor;
    }
  }
  i.to = e;
  function t(n) {
    switch (n) {
      case fr.Notebook:
        return ln.Notebook;
      case fr.Terminal:
        return ln.Terminal;
      case fr.Panel:
        return ln.Panel;
      case fr.Editor:
        return ln.Editor;
    }
  }
  i.from = t;
})(K_ || (K_ = {}));
var J_;
(function(i) {
  function e(t, n, r) {
    var o, a;
    let s = t.value;
    if (!s) {
      let l;
      try {
        l = JSON.stringify(t);
      } catch {
        l = `kind=${t.kind}, id=${t.id}, name=${t.name}`;
      }
      r.error(`[ChatPromptReference] Ignoring invalid reference in variable: ${l}`);
      return;
    }
    if (Uw(s))
      s = x.revive(s);
    else if (s && typeof s == "object" && "uri" in s && "range" in s && Uw(s.uri))
      s = as.to(Wi(s));
    else if (T9(t)) {
      const l = (a = (o = t.references) == null ? void 0 : o[0]) == null ? void 0 : a.reference;
      s = new U5(t.mimeType ?? "image/png", () => Promise.resolve(new Uint8Array(Object.values(t.value))), l && x.isUri(l) ? l : void 0);
    } else if (t.kind === "diagnostic") {
      const l = t.filterSeverity && Of.to(t.filterSeverity), c = t.filterUri && x.revive(t.filterUri).toString();
      s = new $5(n.map(([u, d]) => t.filterUri && u.toString() !== c ? [u, []] : [u, d.filter((f) => !(l && f.severity > l || t.filterRange && !ft.areIntersectingOrTouching(t.filterRange, j.from(f.range))))]).filter(([, u]) => u.length > 0));
    }
    return {
      id: t.id,
      name: t.name,
      range: t.range && [t.range.start, t.range.endExclusive],
      value: s,
      modelDescription: t.modelDescription
    };
  }
  i.to = e;
})(J_ || (J_ = {}));
var Jf;
(function(i) {
  function e(t) {
    if (t.value)
      throw new Error("Invalid tool reference");
    return {
      name: t.id,
      range: t.range && [t.range.start, t.range.endExclusive]
    };
  }
  i.to = e;
})(Jf || (Jf = {}));
var _0;
(function(i) {
  function e(t, n, r) {
    var s;
    return {
      id: t.id,
      label: t.label,
      fullName: t.fullName,
      icon: (s = t.icon) == null ? void 0 : s.id,
      value: t.values[0].value,
      insertText: t.insertText,
      detail: t.detail,
      documentation: t.documentation,
      command: n.toInternal(t.command, r)
    };
  }
  i.from = e;
})(_0 || (_0 = {}));
var uu;
(function(i) {
  function e(r) {
    return {
      errorDetails: r.errorDetails,
      metadata: n(r.metadata),
      nextQuestion: r.nextQuestion,
      details: r.details
    };
  }
  i.to = e;
  function t(r) {
    return {
      errorDetails: r.errorDetails,
      metadata: r.metadata,
      nextQuestion: r.nextQuestion,
      details: r.details
    };
  }
  i.from = t;
  function n(r) {
    return $u(r, (s) => {
      if (s.$mid === rt.LanguageModelToolResult)
        return new mv($u(s.content, n));
      if (s.$mid === rt.LanguageModelTextPart)
        return new Vt(s.value, s.audience);
      if (s.$mid === rt.LanguageModelPromptTsxPart)
        return new fs(s.value);
    });
  }
})(uu || (uu = {}));
var v0;
(function(i) {
  function e(t, n, r) {
    if (n.action.kind === "vote")
      return;
    const s = uu.to(t);
    if (n.action.kind === "command") {
      const o = n.action.commandButton.command;
      return { action: { kind: "command", commandButton: {
        command: r.fromInternal(o) ?? { command: o.id, title: o.title }
      } }, result: s };
    } else return n.action.kind === "followUp" ? { action: { kind: "followUp", followup: $_.to(n.action.followup) }, result: s } : n.action.kind === "inlineChat" ? { action: { kind: "editor", accepted: n.action.action === "accepted" }, result: s } : n.action.kind === "chatEditingSessionAction" ? {
      action: {
        kind: "chatEditingSessionAction",
        outcome: (/* @__PURE__ */ new Map([
          ["accepted", $r.Accepted],
          ["rejected", $r.Rejected],
          ["saved", $r.Saved]
        ])).get(n.action.outcome) ?? $r.Rejected,
        uri: x.revive(n.action.uri),
        hasRemainingEdits: n.action.hasRemainingEdits
      },
      result: s
    } : n.action.kind === "chatEditingHunkAction" ? {
      action: {
        kind: "chatEditingHunkAction",
        outcome: (/* @__PURE__ */ new Map([
          ["accepted", $r.Accepted],
          ["rejected", $r.Rejected]
        ])).get(n.action.outcome) ?? $r.Rejected,
        uri: x.revive(n.action.uri),
        hasRemainingEdits: n.action.hasRemainingEdits,
        lineCount: n.action.lineCount
      },
      result: s
    } : { action: n.action, result: s };
  }
  i.to = e;
})(v0 || (v0 = {}));
var Y_;
(function(i) {
  function e(t, n, r) {
    return "terminalCommand" in t ? { terminalCommand: t.terminalCommand, shouldExecute: t.shouldExecute } : "uri" in t ? { uri: t.uri } : n.toInternal(t, r);
  }
  i.from = e;
})(Y_ || (Y_ = {}));
var X_;
(function(i) {
  function e(t) {
    return {
      ...t,
      documentation: Ne.fromStrict(t.documentation)
    };
  }
  i.from = e;
})(X_ || (X_ = {}));
var w0;
(function(i) {
  function e(t, n) {
    return Array.isArray(t) ? {
      items: t.map((r) => X_.from(r))
    } : {
      items: t.items.map((r) => X_.from(r)),
      resourceRequestConfig: t.resourceRequestConfig ? b0.from(t.resourceRequestConfig, n) : void 0
    };
  }
  i.from = e;
})(w0 || (w0 = {}));
var b0;
(function(i) {
  function e(t, n) {
    return {
      ...t,
      pathSeparator: n,
      cwd: t.cwd
    };
  }
  i.from = e;
})(b0 || (b0 = {}));
var y0;
(function(i) {
  function e(t) {
    return {
      kind: x0.to(t.kind),
      acceptedLength: t.acceptedLength
    };
  }
  i.to = e;
})(y0 || (y0 = {}));
var x0;
(function(i) {
  function e(t) {
    switch (t) {
      case uh.Word:
        return Oa.Word;
      case uh.Line:
        return Oa.Line;
      case uh.Suggest:
        return Oa.Suggest;
      default:
        return Oa.Unknown;
    }
  }
  i.to = e;
})(x0 || (x0 = {}));
var E0;
(function(i) {
  function e(t, n) {
    if (t.kind === dm.Ignored) {
      const r = t.supersededBy ? n(t.supersededBy) : void 0;
      return {
        kind: eu.Ignored,
        supersededBy: r,
        userTypingDisagreed: t.userTypingDisagreed
      };
    } else if (t.kind === dm.Accepted)
      return {
        kind: eu.Accepted
      };
    return {
      kind: eu.Rejected
    };
  }
  i.to = e;
})(E0 || (E0 = {}));
var S0;
(function(i) {
  function e(t, n) {
    return {
      id: n,
      label: t.label,
      description: t.description,
      canEdit: t.canEdit,
      collapsibleState: t.collapsibleState || _b.None,
      contextValue: t.contextValue
    };
  }
  i.from = e;
})(S0 || (S0 = {}));
var D0;
(function(i) {
  function e(t) {
    return t.type === "mcp" ? new z5(t.label, t.serverLabel || t.label, t.instructions) : t.type === "extension" ? new V5(t.extensionId.value, t.label) : void 0;
  }
  i.to = e;
})(D0 || (D0 = {}));
var LI;
(function(i) {
  function e(n) {
    return new mv(n.content.map((r) => r.kind === "text" ? new Vt(r.value, r.audience) : new fs(r.value)));
  }
  i.to = e;
  function t(n, r) {
    var o;
    n.toolResultMessage && H(r, "chatParticipantPrivate");
    const s = (a) => {
      a.audience && H(r, "languageModelToolResultAudience");
    };
    return {
      content: n.content.map((a) => {
        if (a instanceof Vt)
          return s(a), {
            kind: "text",
            value: a.value,
            audience: a.audience
          };
        if (a instanceof fs)
          return {
            kind: "promptTsx",
            value: a.value
          };
        throw new Error("Unknown LanguageModelToolResult part type");
      }),
      toolResultMessage: Ne.fromStrict(n.toolResultMessage),
      toolResultDetails: (o = n.toolResultDetails) == null ? void 0 : o.map((a) => x.isUri(a) ? a : as.from(a))
    };
  }
  i.from = t;
})(LI || (LI = {}));
var Z_;
(function(i) {
  function e(n) {
    return new W5(n.content.map((r) => r.kind === "text" ? new Vt(r.value, r.audience) : r.kind === "data" ? new Sn(r.value.data.buffer, r.value.mimeType, r.audience) : new fs(r.value)));
  }
  i.to = e;
  function t(n, r) {
    var c;
    n.toolResultMessage && H(r, "chatParticipantPrivate");
    const s = (u) => {
      u.audience && H(r, "languageModelToolResultAudience");
    };
    let o = !1, a;
    Array.isArray(n.toolResultDetails) ? a = (c = n.toolResultDetails) == null ? void 0 : c.map((u) => x.isUri(u) ? u : as.from(u)) : n.toolResultDetails2 && (a = {
      output: {
        type: "data",
        mimeType: n.toolResultDetails2.mime,
        value: he.wrap(n.toolResultDetails2.value)
      }
    }, o = !0);
    const l = {
      content: n.content.map((u) => {
        if (u instanceof Vt)
          return s(u), {
            kind: "text",
            value: u.value,
            audience: u.audience
          };
        if (u instanceof fs)
          return {
            kind: "promptTsx",
            value: u.value
          };
        if (u instanceof Sn)
          return s(u), o = !0, {
            kind: "data",
            value: {
              mimeType: u.mimeType,
              data: he.wrap(u.data)
            },
            audience: u.audience
          };
        throw new Error("Unknown LanguageModelToolResult part type");
      }),
      toolResultMessage: Ne.fromStrict(n.toolResultMessage),
      toolResultDetails: a
    };
    return o ? new Ki(l) : l;
  }
  i.from = t;
})(Z_ || (Z_ = {}));
var e1;
(function(i) {
  function e(t) {
    return t;
  }
  i.fromThemeIcon = e;
})(e1 || (e1 = {}));
var k0;
(function(i) {
  function e(n) {
    return {
      query: n.query,
      kind: t(n.kind),
      settings: n.settings
    };
  }
  i.fromSettingsSearchResult = e;
  function t(n) {
    switch (n) {
      case po.EMBEDDED:
        return po.EMBEDDED;
      case po.LLM_RANKED:
        return po.LLM_RANKED;
      case po.CANCELED:
        return po.CANCELED;
      default:
        throw new Error("Unknown AiSettingsSearchResultKind");
    }
  }
})(k0 || (k0 = {}));
var Eh;
(function(i) {
  function e(n) {
    return !!n.uri;
  }
  function t(n) {
    var r;
    return Mf.toSerialized(e(n) ? {
      type: Vl.HTTP,
      uri: n.uri,
      headers: Object.entries(n.headers)
    } : {
      type: Vl.Stdio,
      cwd: (r = n.cwd) == null ? void 0 : r.fsPath,
      args: n.args,
      command: n.command,
      env: n.env,
      envFile: void 0
    });
  }
  i.from = t;
})(Eh || (Eh = {}));
class Fo {
  constructor(e, t, n) {
    this.uri = e, this.ranges = t, this.previewText = n;
  }
}
class kS {
  constructor(e, t, n) {
    this.uri = e, this.text = t, this.lineNumber = n;
  }
}
class I0 {
  constructor(e) {
    this.keyword = e;
  }
}
var Rs;
(function(i) {
  i[i.None = 1] = "None", i[i.FilesExclude = 2] = "FilesExclude", i[i.SearchAndFilesExclude = 3] = "SearchAndFilesExclude";
})(Rs || (Rs = {}));
var t1;
(function(i) {
  i[i.Information = 1] = "Information", i[i.Warning = 2] = "Warning";
})(t1 || (t1 = {}));
const nA = 2e4, rA = "⟪ ", sA = " characters skipped ⟫", _M = (rA.length + sA.length + 5) * 2;
var NI;
(function(i) {
  i[i.file = 0] = "file", i[i.text = 1] = "text", i[i.aiText = 2] = "aiText";
})(NI || (NI = {}));
var yl;
(function(i) {
  i[i.File = 1] = "File", i[i.Text = 2] = "Text", i[i.aiText = 3] = "aiText";
})(yl || (yl = {}));
function MI(i) {
  return !!i.rangeLocations && !!i.previewText;
}
var OI;
(function(i) {
  i[i.Normal = 0] = "Normal", i[i.NewSearchStarted = 1] = "NewSearchStarted";
})(OI || (OI = {}));
class vM {
  constructor(e, t, n, r) {
    this.rangeLocations = [], this.webviewIndex = r;
    const s = Array.isArray(t) ? t : [t];
    if (n && n.matchLines === 1 && wM(s)) {
      e = eL(e, n.matchLines);
      let o = "", a = 0, l = 0;
      const c = Math.floor(n.charsPerLine / 5);
      for (const u of s) {
        const d = Math.max(u.startColumn - c, 0), f = u.startColumn + n.charsPerLine;
        if (d > l + c + _M) {
          const p = rA + (d - l) + sA;
          o += p + e.slice(d, f), a += d - (l + p.length);
        } else
          o += e.slice(l, f);
        l = f, this.rangeLocations.push({
          source: u,
          preview: new bM(0, u.startColumn - a, u.endColumn - a)
        });
      }
      this.previewText = o;
    } else {
      const o = Array.isArray(t) ? t[0].startLineNumber : t.startLineNumber, a = Pw(t, (l) => ({
        preview: new oA(
          l.startLineNumber - o,
          l.startColumn,
          l.endLineNumber - o,
          l.endColumn
        ),
        source: l
      }));
      this.rangeLocations = Array.isArray(a) ? a : [a], this.previewText = e;
    }
  }
}
function wM(i) {
  const e = i[0].startLineNumber;
  for (const t of i)
    if (t.startLineNumber !== e || t.endLineNumber !== e)
      return !1;
  return !0;
}
class oA {
  constructor(e, t, n, r) {
    this.startLineNumber = e, this.startColumn = t, this.endLineNumber = n, this.endColumn = r;
  }
}
class bM extends oA {
  constructor(e, t, n) {
    super(e, t, e, n);
  }
}
var FI;
(function(i) {
  i.List = "list", i.Tree = "tree";
})(FI || (FI = {}));
var UI;
(function(i) {
  i.Default = "default", i.FileNames = "fileNames", i.Type = "type", i.Modified = "modified", i.CountDescending = "countDescending", i.CountAscending = "countAscending";
})(UI || (UI = {}));
var $I;
(function(i) {
  i.Auto = "auto", i.Manual = "manual", i.RunOnEmpty = "runOnEmpty";
})($I || ($I = {}));
function yM(i, e = !0) {
  const t = i && i.files && i.files.exclude, n = e && i && i.search && i.search.exclude;
  if (!t && !n)
    return;
  if (!t || !n)
    return t || n || void 0;
  let r = /* @__PURE__ */ Object.create(null);
  return r = Fl(r, St(t)), r = Fl(r, St(n), !0), r;
}
function HI(i, e) {
  return i.excludePattern && wh(i.excludePattern, e) ? !1 : i.includePattern || i.usingSearchPaths ? i.includePattern && wh(i.includePattern, e) ? !0 : i.usingSearchPaths ? !!i.folderQueries && i.folderQueries.some((t) => {
    const n = t.folder.fsPath;
    if (Xg(e, n)) {
      const r = zh(n, e);
      return !t.includePattern || !!wh(t.includePattern, r);
    } else
      return !1;
  }) : !1 : !0;
}
var BI;
(function(i) {
  i[i.unknownEncoding = 1] = "unknownEncoding", i[i.regexParseError = 2] = "regexParseError", i[i.globParseError = 3] = "globParseError", i[i.invalidLiteral = 4] = "invalidLiteral", i[i.rgProcessError = 5] = "rgProcessError", i[i.other = 6] = "other", i[i.canceled = 7] = "canceled";
})(BI || (BI = {}));
function du(i, e) {
  const t = {
    ...i || {},
    ...e || {}
  };
  return Object.keys(t).filter((n) => {
    const r = t[n];
    return typeof r == "boolean" && r;
  });
}
class aA {
  constructor(e, t) {
    var r;
    this._parsedIncludeExpression = null, this._excludeExpression = ((r = t.excludePattern) == null ? void 0 : r.map((s) => ({
      ...e.excludePattern || {},
      ...s.pattern || {}
    }))) ?? [], this._excludeExpression.length === 0 && (this._excludeExpression = [e.excludePattern || {}]), this._parsedExcludeExpression = this._excludeExpression.map((s) => Wu(s));
    let n = e.includePattern;
    t.includePattern && (n ? n = {
      ...n,
      ...t.includePattern
    } : n = t.includePattern), n && (this._parsedIncludeExpression = Wu(n));
  }
  _evalParsedExcludeExpression(e, t, n) {
    let r = null;
    for (const s of this._parsedExcludeExpression) {
      const o = s(e, t, n);
      if (typeof o == "string") {
        r = o;
        break;
      }
    }
    return r;
  }
  matchesExcludesSync(e, t, n) {
    return !!(this._parsedExcludeExpression && this._evalParsedExcludeExpression(e, t, n));
  }
  includedInQuerySync(e, t, n) {
    return !(this._parsedExcludeExpression && this._evalParsedExcludeExpression(e, t, n) || this._parsedIncludeExpression && !this._parsedIncludeExpression(e, t, n));
  }
  includedInQuery(e, t, n) {
    const r = () => this._parsedIncludeExpression ? !!this._parsedIncludeExpression(e, t, n) : !0;
    return Promise.all(this._parsedExcludeExpression.map((s) => {
      const o = s(e, t, n);
      return Go(o) ? o.then((a) => a ? !1 : r()) : r();
    })).then((s) => s.some((o) => !!o));
  }
  hasSiblingExcludeClauses() {
    return this._excludeExpression.reduce((e, t) => xM(t) || e, !1);
  }
}
function xM(i) {
  for (const e in i)
    if (typeof i[e] != "boolean")
      return !0;
  return !1;
}
function EM(i) {
  if (!i)
    return;
  let e;
  return (t) => (e || (e = (i() || Promise.resolve([])).then((n) => n ? lA(n) : {})), e.then((n) => !!n[t]));
}
function SM(i) {
  if (!i)
    return;
  let e;
  return (t) => {
    if (!e) {
      const n = i();
      e = n ? lA(n) : {};
    }
    return !!e[t];
  };
}
function lA(i) {
  const e = {};
  for (const t of i)
    e[t] = !0;
  return e;
}
function cA(i) {
  return i.flatMap((e) => e.patterns.map((t) => e.baseUri ? {
    baseUri: e.baseUri,
    pattern: t
  } : t));
}
const C0 = {
  matchLines: 100,
  charsPerLine: 1e4
}, wv = "utf8", IS = "utf8bom", i1 = "utf16be", n1 = "utf16le", Pg = [254, 255], T0 = [255, 254], Jd = [239, 187, 191], DM = 512, kM = 512, IM = 512 * 8, CM = 512 * 128;
var P0;
(function(i) {
  i[i.STREAM_IS_BINARY = 1] = "STREAM_IS_BINARY";
})(P0 || (P0 = {}));
class TM extends Error {
  constructor(e, t) {
    super(e), this.decodeStreamErrorKind = t;
  }
}
class CS {
  static async create(e) {
    let t;
    if (e !== wv)
      t = (await import("./iconv-lite-umd-CNHLrBrw.js").then(function(r) {
        return r.i;
      }).then((r) => r.default ?? r)).getDecoder(uA(e));
    else {
      const n = new TextDecoder();
      t = {
        write(r) {
          return n.decode(r, {
            stream: !0
          });
        },
        end() {
          return n.decode();
        }
      };
    }
    return new CS(t);
  }
  constructor(e) {
    this.iconvLiteDecoder = e;
  }
  write(e) {
    return this.iconvLiteDecoder.write(e);
  }
  end() {
    return this.iconvLiteDecoder.end();
  }
}
function PM(i, e) {
  const t = e.minBytesRequiredForDetection ?? e.guessEncoding ? IM : kM;
  return new Promise((n, r) => {
    const s = TT((d) => d.join("")), o = [];
    let a = 0, l;
    const c = new Lt(), u = async () => {
      try {
        const d = await $M({
          buffer: he.concat(o),
          bytesRead: a
        }, e.guessEncoding, e.candidateGuessEncodings);
        if (d.seemsBinary && e.acceptTextOnly)
          throw new TM(
            "Stream is binary but only text is accepted for decoding",
            P0.STREAM_IS_BINARY
          );
        d.encoding = await e.overwriteEncoding(d.encoding), l = await CS.create(d.encoding);
        const f = l.write(he.concat(o).buffer);
        s.write(f), o.length = 0, a = 0, n({
          stream: s,
          detected: d
        });
      } catch (d) {
        c.cancel(), s.destroy(), r(d);
      }
    };
    PT(i, {
      onData: async (d) => {
        l ? s.write(l.write(d.buffer)) : (o.push(d), a += d.byteLength, a >= t && (i.pause(), await u(), setTimeout(() => i.resume())));
      },
      onError: (d) => s.error(d),
      onEnd: async () => {
        l || await u(), s.end(l == null ? void 0 : l.end());
      }
    }, c.token);
  });
}
async function AM(i, e, t) {
  const r = (await import("./iconv-lite-umd-CNHLrBrw.js").then(function(a) {
    return a.i;
  }).then((a) => a.default ?? a)).getEncoder(uA(e), t);
  let s = !1, o = !1;
  return {
    read() {
      if (o)
        return null;
      const a = i.read();
      if (typeof a != "string") {
        if (o = !0, !s && (t != null && t.addBOM))
          switch (e) {
            case wv:
            case IS:
              return he.wrap(Uint8Array.from(Jd));
            case i1:
              return he.wrap(Uint8Array.from(Pg));
            case n1:
              return he.wrap(Uint8Array.from(T0));
          }
        const l = r.end();
        return l && l.length > 0 ? (s = !0, he.wrap(l)) : null;
      }
      return s = !0, he.wrap(r.write(a));
    }
  };
}
function uA(i) {
  return i === IS || i === null ? wv : i;
}
function RM(i, e) {
  if (!i || e < Pg.length)
    return null;
  const t = i.readUInt8(0), n = i.readUInt8(1);
  if (t === Pg[0] && n === Pg[1])
    return i1;
  if (t === T0[0] && n === T0[1])
    return n1;
  if (e < Jd.length)
    return null;
  const r = i.readUInt8(2);
  return t === Jd[0] && n === Jd[1] && r === Jd[2] ? IS : null;
}
const LM = ["ascii", "utf-16", "utf-32"];
async function NM(i, e) {
  const t = await import("./index-Y2Op7TCg.js").then(function(a) {
    return a.i;
  }).then((a) => a.default ?? a), n = i.slice(0, CM), r = UM(n.buffer);
  e && (e = Xt(e.map((a) => FM(a))), e.length === 0 && (e = void 0));
  let s;
  try {
    s = t.detect(r, e ? { detectEncodings: e } : void 0);
  } catch {
    return null;
  }
  if (!s || !s.encoding)
    return null;
  const o = s.encoding.toLowerCase();
  return 0 <= LM.indexOf(o) ? null : OM(s.encoding);
}
const MM = {
  ibm866: "cp866",
  big5: "cp950"
};
function dA(i) {
  return i.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
}
function OM(i) {
  const e = dA(i);
  return MM[e] || e;
}
function FM(i) {
  const e = dA(i), t = HM[e];
  return t ? t.guessableName : void 0;
}
function UM(i) {
  let e = "";
  for (let t = 0; t < i.length; t++)
    e += String.fromCharCode(i[t]);
  return e;
}
function $M({ buffer: i, bytesRead: e }, t, n) {
  let r = RM(i, e), s = !1;
  if (r !== i1 && r !== n1 && i) {
    let o = !0, a = !0, l = !1;
    for (let c = 0; c < e && c < DM; c++) {
      const u = c % 2 === 1, d = i.readUInt8(c) === 0;
      if (d && (l = !0), o && (u && !d || !u && d) && (o = !1), a && (u && d || !u && !d) && (a = !1), d && !o && !a)
        break;
    }
    l && (o ? r = n1 : a ? r = i1 : s = !0);
  }
  return t && !s && !r && i ? NM(i.slice(0, e), n).then((o) => ({
    seemsBinary: !1,
    encoding: o
  })) : { seemsBinary: s, encoding: r };
}
const ow = {
  utf8: {
    labelLong: "UTF-8",
    labelShort: "UTF-8",
    order: 1,
    alias: "utf8bom",
    guessableName: "UTF-8"
  },
  utf8bom: {
    labelLong: "UTF-8 with BOM",
    labelShort: "UTF-8 with BOM",
    encodeOnly: !0,
    order: 2,
    alias: "utf8"
  },
  utf16le: {
    labelLong: "UTF-16 LE",
    labelShort: "UTF-16 LE",
    order: 3,
    guessableName: "UTF-16LE"
  },
  utf16be: {
    labelLong: "UTF-16 BE",
    labelShort: "UTF-16 BE",
    order: 4,
    guessableName: "UTF-16BE"
  },
  windows1252: {
    labelLong: "Western (Windows 1252)",
    labelShort: "Windows 1252",
    order: 5,
    guessableName: "windows-1252"
  },
  iso88591: {
    labelLong: "Western (ISO 8859-1)",
    labelShort: "ISO 8859-1",
    order: 6
  },
  iso88593: {
    labelLong: "Western (ISO 8859-3)",
    labelShort: "ISO 8859-3",
    order: 7
  },
  iso885915: {
    labelLong: "Western (ISO 8859-15)",
    labelShort: "ISO 8859-15",
    order: 8
  },
  macroman: {
    labelLong: "Western (Mac Roman)",
    labelShort: "Mac Roman",
    order: 9
  },
  cp437: {
    labelLong: "DOS (CP 437)",
    labelShort: "CP437",
    order: 10
  },
  windows1256: {
    labelLong: "Arabic (Windows 1256)",
    labelShort: "Windows 1256",
    order: 11
  },
  iso88596: {
    labelLong: "Arabic (ISO 8859-6)",
    labelShort: "ISO 8859-6",
    order: 12
  },
  windows1257: {
    labelLong: "Baltic (Windows 1257)",
    labelShort: "Windows 1257",
    order: 13
  },
  iso88594: {
    labelLong: "Baltic (ISO 8859-4)",
    labelShort: "ISO 8859-4",
    order: 14
  },
  iso885914: {
    labelLong: "Celtic (ISO 8859-14)",
    labelShort: "ISO 8859-14",
    order: 15
  },
  windows1250: {
    labelLong: "Central European (Windows 1250)",
    labelShort: "Windows 1250",
    order: 16,
    guessableName: "windows-1250"
  },
  iso88592: {
    labelLong: "Central European (ISO 8859-2)",
    labelShort: "ISO 8859-2",
    order: 17,
    guessableName: "ISO-8859-2"
  },
  cp852: {
    labelLong: "Central European (CP 852)",
    labelShort: "CP 852",
    order: 18
  },
  windows1251: {
    labelLong: "Cyrillic (Windows 1251)",
    labelShort: "Windows 1251",
    order: 19,
    guessableName: "windows-1251"
  },
  cp866: {
    labelLong: "Cyrillic (CP 866)",
    labelShort: "CP 866",
    order: 20,
    guessableName: "IBM866"
  },
  cp1125: {
    labelLong: "Cyrillic (CP 1125)",
    labelShort: "CP 1125",
    order: 21,
    guessableName: "IBM1125"
  },
  iso88595: {
    labelLong: "Cyrillic (ISO 8859-5)",
    labelShort: "ISO 8859-5",
    order: 22,
    guessableName: "ISO-8859-5"
  },
  koi8r: {
    labelLong: "Cyrillic (KOI8-R)",
    labelShort: "KOI8-R",
    order: 23,
    guessableName: "KOI8-R"
  },
  koi8u: {
    labelLong: "Cyrillic (KOI8-U)",
    labelShort: "KOI8-U",
    order: 24
  },
  iso885913: {
    labelLong: "Estonian (ISO 8859-13)",
    labelShort: "ISO 8859-13",
    order: 25
  },
  windows1253: {
    labelLong: "Greek (Windows 1253)",
    labelShort: "Windows 1253",
    order: 26,
    guessableName: "windows-1253"
  },
  iso88597: {
    labelLong: "Greek (ISO 8859-7)",
    labelShort: "ISO 8859-7",
    order: 27,
    guessableName: "ISO-8859-7"
  },
  windows1255: {
    labelLong: "Hebrew (Windows 1255)",
    labelShort: "Windows 1255",
    order: 28,
    guessableName: "windows-1255"
  },
  iso88598: {
    labelLong: "Hebrew (ISO 8859-8)",
    labelShort: "ISO 8859-8",
    order: 29,
    guessableName: "ISO-8859-8"
  },
  iso885910: {
    labelLong: "Nordic (ISO 8859-10)",
    labelShort: "ISO 8859-10",
    order: 30
  },
  iso885916: {
    labelLong: "Romanian (ISO 8859-16)",
    labelShort: "ISO 8859-16",
    order: 31
  },
  windows1254: {
    labelLong: "Turkish (Windows 1254)",
    labelShort: "Windows 1254",
    order: 32
  },
  iso88599: {
    labelLong: "Turkish (ISO 8859-9)",
    labelShort: "ISO 8859-9",
    order: 33
  },
  windows1258: {
    labelLong: "Vietnamese (Windows 1258)",
    labelShort: "Windows 1258",
    order: 34
  },
  gbk: {
    labelLong: "Simplified Chinese (GBK)",
    labelShort: "GBK",
    order: 35
  },
  gb18030: {
    labelLong: "Simplified Chinese (GB18030)",
    labelShort: "GB18030",
    order: 36
  },
  cp950: {
    labelLong: "Traditional Chinese (Big5)",
    labelShort: "Big5",
    order: 37,
    guessableName: "Big5"
  },
  big5hkscs: {
    labelLong: "Traditional Chinese (Big5-HKSCS)",
    labelShort: "Big5-HKSCS",
    order: 38
  },
  shiftjis: {
    labelLong: "Japanese (Shift JIS)",
    labelShort: "Shift JIS",
    order: 39,
    guessableName: "SHIFT_JIS"
  },
  eucjp: {
    labelLong: "Japanese (EUC-JP)",
    labelShort: "EUC-JP",
    order: 40,
    guessableName: "EUC-JP"
  },
  euckr: {
    labelLong: "Korean (EUC-KR)",
    labelShort: "EUC-KR",
    order: 41,
    guessableName: "EUC-KR"
  },
  windows874: {
    labelLong: "Thai (Windows 874)",
    labelShort: "Windows 874",
    order: 42
  },
  iso885911: {
    labelLong: "Latin/Thai (ISO 8859-11)",
    labelShort: "ISO 8859-11",
    order: 43
  },
  koi8ru: {
    labelLong: "Cyrillic (KOI8-RU)",
    labelShort: "KOI8-RU",
    order: 44
  },
  koi8t: {
    labelLong: "Tajik (KOI8-T)",
    labelShort: "KOI8-T",
    order: 45
  },
  gb2312: {
    labelLong: "Simplified Chinese (GB 2312)",
    labelShort: "GB 2312",
    order: 46,
    guessableName: "GB2312"
  },
  cp865: {
    labelLong: "Nordic DOS (CP 865)",
    labelShort: "CP 865",
    order: 47
  },
  cp850: {
    labelLong: "Western European DOS (CP 850)",
    labelShort: "CP 850",
    order: 48
  }
}, HM = (() => {
  const i = {};
  for (const e in ow)
    ow[e].guessableName && (i[e] = ow[e]);
  return i;
})();
var WI;
(function(i) {
  i[i.FILE_IS_BINARY = 0] = "FILE_IS_BINARY";
})(WI || (WI = {}));
var VI;
(function(i) {
  i[i.SAVED = 0] = "SAVED", i[i.DIRTY = 1] = "DIRTY", i[i.PENDING_SAVE = 2] = "PENDING_SAVE", i[i.CONFLICT = 3] = "CONFLICT", i[i.ORPHAN = 4] = "ORPHAN", i[i.ERROR = 5] = "ERROR";
})(VI || (VI = {}));
var zI;
(function(i) {
  i[i.EDITOR = 1] = "EDITOR", i[i.REFERENCE = 2] = "REFERENCE", i[i.OTHER = 3] = "OTHER";
})(zI || (zI = {}));
var qI;
(function(i) {
  i[i.Encode = 0] = "Encode", i[i.Decode = 1] = "Decode";
})(qI || (qI = {}));
function BM(i) {
  let e = !1;
  return {
    read() {
      return e ? null : (e = !0, i);
    }
  };
}
function Yf(i, e, t) {
  return new Sp((n) => TS(n, t)).isEqual(i, e);
}
function WM(i, e, t) {
  return Yf(i.uri, e.uri, t) ? 0 : Ml(i.uri.toString(), e.uri.toString());
}
function VM(i, e, t) {
  return i.index !== e.index ? i.index < e.index ? -1 : 1 : Yf(i.uri, e.uri, t) ? Ml(i.name, e.name) : Ml(i.uri.toString(), e.uri.toString());
}
function hA(i, e, t, n) {
  const r = i.slice(0).sort((o, a) => t(o, a, n)), s = e.slice(0).sort((o, a) => t(o, a, n));
  return gR(r, s, (o, a) => t(o, a, n));
}
function TS(i, e) {
  const t = e.getCapabilities(i.scheme);
  return !(t && t & zr.PathCaseSensitive);
}
class hu extends ZL {
  static toExtHostWorkspace(e, t, n, r) {
    if (!e)
      return { workspace: null, added: [], removed: [] };
    const { id: s, name: o, folders: a, configuration: l, transient: c, isUntitled: u } = e, d = [], f = t;
    t ? a.forEach((m, E) => {
      const S = x.revive(m.uri), k = hu._findFolder(n || t, S, r);
      k ? (k.name = m.name, k.index = m.index, d.push(k)) : d.push({ uri: S, name: m.name, index: E });
    }) : d.push(...a.map(({ uri: m, name: E, index: S }) => ({ uri: x.revive(m), name: E, index: S }))), d.sort((m, E) => m.index < E.index ? -1 : 1);
    const p = new hu(
      s,
      o,
      d,
      !!c,
      l ? x.revive(l) : null,
      !!u,
      (m) => TS(m, r)
    ), { added: v, removed: _ } = hA(f ? f.workspaceFolders : [], p.workspaceFolders, WM, r);
    return { workspace: p, added: v, removed: _ };
  }
  static _findFolder(e, t, n) {
    for (let r = 0; r < e.folders.length; r++) {
      const s = e.workspaceFolders[r];
      if (Yf(s.uri, t, n))
        return s;
    }
  }
  constructor(e, t, n, r, s, o, a) {
    super(e, n.map((l) => new mP(l)), r, s, a), this._name = t, this._isUntitled = o, this._workspaceFolders = [], this._structure = Yr.forUris(a, () => !0), n.forEach((l) => {
      this._workspaceFolders.push(l), this._structure.set(l.uri, l);
    });
  }
  get name() {
    return this._name;
  }
  get isUntitled() {
    return this._isUntitled;
  }
  get workspaceFolders() {
    return this._workspaceFolders.slice(0);
  }
  getWorkspaceFolder(e, t) {
    return t && this._structure.get(e) && (e = Z1(e)), this._structure.findSubstr(e);
  }
  resolveWorkspaceFolder(e) {
    return this._structure.get(e);
  }
}
let A0 = class {
  constructor(e, t, n, r, s) {
    this._onDidChangeWorkspace = new M(), this.onDidChangeWorkspace = this._onDidChangeWorkspace.event, this._onDidGrantWorkspaceTrust = new M(), this.onDidGrantWorkspaceTrust = this._onDidGrantWorkspaceTrust.event, this._activeSearchCallbacks = [], this._trusted = !1, this._editSessionIdentityProviders = /* @__PURE__ */ new Map(), this._providerHandlePool = 0, this._onWillCreateEditSessionIdentityEvent = new th(), this._canonicalUriProviders = /* @__PURE__ */ new Map(), this._logService = r, this._extHostFileSystemInfo = n, this._uriTransformerService = s, this._requestIdProvider = new QL(), this._barrier = new Jr(), this._proxy = e.getProxy(ie.MainThreadWorkspace), this._messageService = e.getProxy(ie.MainThreadMessageService);
    const o = t.workspace;
    this._confirmedWorkspace = o ? new hu(
      o.id,
      o.name,
      [],
      !!o.transient,
      o.configuration ? x.revive(o.configuration) : null,
      !!o.isUntitled,
      (a) => TS(a, n)
    ) : void 0;
  }
  $initializeWorkspace(e, t) {
    this._trusted = t, this.$acceptWorkspaceData(e), this._barrier.open();
  }
  waitForInitializeCall() {
    return this._barrier.wait();
  }
  get workspace() {
    return this._actualWorkspace;
  }
  get name() {
    return this._actualWorkspace ? this._actualWorkspace.name : void 0;
  }
  get workspaceFile() {
    if (this._actualWorkspace && this._actualWorkspace.configuration)
      return this._actualWorkspace.isUntitled ? x.from(
        { scheme: fe.untitled, path: Xs(Z1(this._actualWorkspace.configuration)) }
      ) : this._actualWorkspace.configuration;
  }
  get _actualWorkspace() {
    return this._unconfirmedWorkspace || this._confirmedWorkspace;
  }
  getWorkspaceFolders() {
    if (this._actualWorkspace)
      return this._actualWorkspace.workspaceFolders.slice(0);
  }
  async getWorkspaceFolders2() {
    if (await this._barrier.wait(), !!this._actualWorkspace)
      return this._actualWorkspace.workspaceFolders.slice(0);
  }
  updateWorkspaceFolders(e, t, n, ...r) {
    const s = [];
    if (Array.isArray(r) && r.forEach((u) => {
      x.isUri(u.uri) && !s.some((d) => Yf(d.uri, u.uri, this._extHostFileSystemInfo)) && s.push({ uri: u.uri, name: u.name || qw(u.uri) });
    }), this._unconfirmedWorkspace || [t, n].some((u) => typeof u != "number" || u < 0) || n === 0 && s.length === 0)
      return !1;
    const o = this._actualWorkspace ? this._actualWorkspace.workspaceFolders : [];
    if (t + n > o.length)
      return !1;
    const a = o.slice(0);
    a.splice(t, n, ...s.map(
      (u) => ({ uri: u.uri, name: u.name || qw(u.uri), index: void 0 })
    ));
    for (let u = 0; u < a.length; u++) {
      const d = a[u];
      if (a.some(
        (f, p) => p !== u && Yf(d.uri, f.uri, this._extHostFileSystemInfo)
      ))
        return !1;
    }
    a.forEach((u, d) => u.index = d);
    const { added: l, removed: c } = hA(o, a, VM, this._extHostFileSystemInfo);
    if (l.length === 0 && c.length === 0)
      return !1;
    if (this._proxy) {
      const u = e.displayName || e.name;
      this._proxy.$updateWorkspaceFolders(u, t, n, s).then(void 0, (d) => {
        this._unconfirmedWorkspace = void 0;
        const f = { source: { identifier: e.identifier, label: e.displayName || e.name } };
        this._messageService.$showMessage(Yt.Error, h(
          2640,
          "Extension '{0}' failed to update workspace folders: {1}",
          u,
          d.toString()
        ), f, []);
      });
    }
    return this.trySetWorkspaceFolders(a), !0;
  }
  getWorkspaceFolder(e, t) {
    if (this._actualWorkspace)
      return this._actualWorkspace.getWorkspaceFolder(e, t);
  }
  async getWorkspaceFolder2(e, t) {
    if (await this._barrier.wait(), !!this._actualWorkspace)
      return this._actualWorkspace.getWorkspaceFolder(e, t);
  }
  async resolveWorkspaceFolder(e) {
    if (await this._barrier.wait(), !!this._actualWorkspace)
      return this._actualWorkspace.resolveWorkspaceFolder(e);
  }
  getPath() {
    if (!this._actualWorkspace)
      return;
    const { folders: e } = this._actualWorkspace;
    if (e.length !== 0)
      return e[0].uri.fsPath;
  }
  getRelativePath(e, t) {
    let n, r = "";
    if (typeof e == "string" ? (n = x.file(e), r = e) : typeof e < "u" && (n = e, r = e.fsPath), !n)
      return r;
    const s = this.getWorkspaceFolder(n, !0);
    if (!s)
      return r;
    typeof t > "u" && this._actualWorkspace && (t = this._actualWorkspace.folders.length > 1);
    let o = rP(s.uri, n);
    return t && s.name && (o = `${s.name}/${o}`), o;
  }
  trySetWorkspaceFolders(e) {
    this._actualWorkspace && (this._unconfirmedWorkspace = hu.toExtHostWorkspace({
      id: this._actualWorkspace.id,
      name: this._actualWorkspace.name,
      configuration: this._actualWorkspace.configuration,
      folders: e,
      isUntitled: this._actualWorkspace.isUntitled
    }, this._actualWorkspace, void 0, this._extHostFileSystemInfo).workspace || void 0);
  }
  $acceptWorkspaceData(e) {
    const { workspace: t, added: n, removed: r } = hu.toExtHostWorkspace(e, this._confirmedWorkspace, this._unconfirmedWorkspace, this._extHostFileSystemInfo);
    this._confirmedWorkspace = t || void 0, this._unconfirmedWorkspace = void 0, this._onDidChangeWorkspace.fire(Object.freeze({
      added: n,
      removed: r
    }));
  }
  findFiles(e, t, n, r, s = Dt.None) {
    this._logService.trace(`extHostWorkspace#findFiles: fileSearch, extension: ${r.value}, entryPoint: findFiles`);
    let o = "", a = !0;
    return t === null ? a = !1 : t !== void 0 && (typeof t == "string" ? o = t : o = t.pattern), this._findFilesImpl({ type: "include", value: e }, {
      exclude: [o],
      maxResults: n,
      useExcludeSettings: a ? Rs.FilesExclude : Rs.None,
      useIgnoreFiles: {
        local: !1
      }
    }, s);
  }
  findFiles2(e, t = {}, n, r = Dt.None) {
    return this._logService.trace(`extHostWorkspace#findFiles2New: fileSearch, extension: ${n.value}, entryPoint: findFiles2New`), this._findFilesImpl({ type: "filePatterns", value: e }, t, r);
  }
  async _findFilesImpl(e, t, n) {
    if (n.isCancellationRequested)
      return Promise.resolve([]);
    const r = e.type === "include" ? [e.value] : e.value ?? [];
    if (!Array.isArray(r))
      throw console.error("Invalid file pattern provided", r), new Error(`Invalid file pattern provided ${JSON.stringify(r)}`);
    const s = r.map((o) => {
      var d, f, p;
      const a = jI(t.exclude), l = {
        ignoreSymlinks: typeof t.followSymlinks == "boolean" ? !t.followSymlinks : void 0,
        disregardIgnoreFiles: typeof ((d = t.useIgnoreFiles) == null ? void 0 : d.local) == "boolean" ? !t.useIgnoreFiles.local : void 0,
        disregardGlobalIgnoreFiles: typeof ((f = t.useIgnoreFiles) == null ? void 0 : f.global) == "boolean" ? !t.useIgnoreFiles.global : void 0,
        disregardParentIgnoreFiles: typeof ((p = t.useIgnoreFiles) == null ? void 0 : p.parent) == "boolean" ? !t.useIgnoreFiles.parent : void 0,
        disregardExcludeSettings: t.useExcludeSettings !== void 0 && t.useExcludeSettings === Rs.None,
        disregardSearchExcludeSettings: t.useExcludeSettings !== void 0 && t.useExcludeSettings !== Rs.SearchAndFilesExclude,
        maxResults: t.maxResults,
        excludePattern: a.length > 0 ? a : void 0,
        _reason: "startFileSearch",
        shouldGlobSearch: e.type === "include" ? void 0 : !0
      }, c = Ag(En.from(o)), u = c == null ? void 0 : c.folder;
      return e.type === "include" ? l.includePattern = c == null ? void 0 : c.pattern : l.filePattern = c == null ? void 0 : c.pattern, {
        folder: u,
        options: l
      };
    });
    return this._findFilesBase(s, n);
  }
  async _findFilesBase(e, t) {
    return (await Promise.all((e == null ? void 0 : e.map((r) => this._proxy.$startFileSearch(r.folder ?? null, r.options, t).then((s) => Array.isArray(s) ? s.map((o) => x.revive(o)) : []))) ?? [])).flat();
  }
  findTextInFiles2(e, t, n, r = Dt.None) {
    var f;
    this._logService.trace(`extHostWorkspace#findTextInFiles2: textSearch, extension: ${n.value}, entryPoint: findTextInFiles2`);
    const s = (p) => {
      var m, E, S, k, q, B;
      if (!t)
        return {
          folder: void 0,
          options: {}
        };
      const v = p ? Ag(En.from(p)) : void 0, _ = t.exclude ? jI(t.exclude) : void 0;
      return {
        options: {
          ignoreSymlinks: typeof t.followSymlinks == "boolean" ? !t.followSymlinks : void 0,
          disregardIgnoreFiles: typeof t.useIgnoreFiles == "boolean" ? !t.useIgnoreFiles : void 0,
          disregardGlobalIgnoreFiles: typeof ((m = t.useIgnoreFiles) == null ? void 0 : m.global) == "boolean" ? !((E = t.useIgnoreFiles) != null && E.global) : void 0,
          disregardParentIgnoreFiles: typeof ((S = t.useIgnoreFiles) == null ? void 0 : S.parent) == "boolean" ? !((k = t.useIgnoreFiles) != null && k.parent) : void 0,
          disregardExcludeSettings: t.useExcludeSettings !== void 0 && t.useExcludeSettings === Rs.None,
          disregardSearchExcludeSettings: t.useExcludeSettings !== void 0 && t.useExcludeSettings !== Rs.SearchAndFilesExclude,
          fileEncoding: t.encoding,
          maxResults: t.maxResults,
          previewOptions: t.previewOptions ? {
            matchLines: ((q = t.previewOptions) == null ? void 0 : q.numMatchLines) ?? 100,
            charsPerLine: ((B = t.previewOptions) == null ? void 0 : B.charsPerLine) ?? 1e4
          } : void 0,
          surroundingContext: t.surroundingContext,
          includePattern: v == null ? void 0 : v.pattern,
          excludePattern: _
        },
        folder: v == null ? void 0 : v.folder
      };
    }, a = (((f = t == null ? void 0 : t.include) == null ? void 0 : f.map((p) => s(p))) ?? [s(void 0)]).filter((p) => !!p), l = new Te(), c = l.add(new M()), u = this.findTextInFilesBase(e, a, (p, v) => c.fire({ result: p, uri: v }), r);
    return {
      results: new Ol(async (p) => {
        l.add(c.event((v) => {
          const _ = v.result, m = v.uri;
          MI(_) ? p.emitOne(new Fo(m, _.rangeLocations.map((E) => ({
            previewRange: new $e(
              E.preview.startLineNumber,
              E.preview.startColumn,
              E.preview.endLineNumber,
              E.preview.endColumn
            ),
            sourceRange: new $e(
              E.source.startLineNumber,
              E.source.startColumn,
              E.source.endLineNumber,
              E.source.endColumn
            )
          })), _.previewText)) : p.emitOne(new kS(m, _.text, _.lineNumber));
        })), await u;
      }),
      complete: u.then((p) => (l.dispose(), {
        limitHit: (p == null ? void 0 : p.limitHit) ?? !1
      }))
    };
  }
  async findTextInFilesBase(e, t, n, r = Dt.None) {
    const s = this._requestIdProvider.getNext();
    let o = !1;
    if (r.onCancellationRequested((a) => {
      o = !0;
    }), this._activeSearchCallbacks[s] = (a) => {
      if (o)
        return;
      const l = x.revive(a.resource);
      a.results.forEach((c) => {
        const u = Wi(c);
        n(u, l);
      });
    }, r.isCancellationRequested)
      return {};
    try {
      const a = await Promise.all((t == null ? void 0 : t.map((l) => this._proxy.$startTextSearch(e, l.folder ?? null, l.options, s, r) || {})) ?? []);
      return delete this._activeSearchCallbacks[s], a.reduce((l, c) => ({
        limitHit: (l == null ? void 0 : l.limitHit) || ((c == null ? void 0 : c.limitHit) ?? !1),
        message: [(l == null ? void 0 : l.message) ?? [], (c == null ? void 0 : c.message) ?? []].flat()
      }), {}) ?? { limitHit: !1 };
    } catch (a) {
      throw delete this._activeSearchCallbacks[s], a;
    }
  }
  async findTextInFiles(e, t, n, r, s = Dt.None) {
    this._logService.trace(`extHostWorkspace#findTextInFiles: textSearch, extension: ${r.value}, entryPoint: findTextInFiles`);
    const o = typeof t.previewOptions > "u" ? {
      matchLines: 100,
      charsPerLine: 1e4
    } : t.previewOptions, a = Ag(En.from(t.include)), l = typeof t.exclude == "string" ? t.exclude : t.exclude ? t.exclude.pattern : void 0, c = {
      ignoreSymlinks: typeof t.followSymlinks == "boolean" ? !t.followSymlinks : void 0,
      disregardIgnoreFiles: typeof t.useIgnoreFiles == "boolean" ? !t.useIgnoreFiles : void 0,
      disregardGlobalIgnoreFiles: typeof t.useGlobalIgnoreFiles == "boolean" ? !t.useGlobalIgnoreFiles : void 0,
      disregardParentIgnoreFiles: typeof t.useParentIgnoreFiles == "boolean" ? !t.useParentIgnoreFiles : void 0,
      disregardExcludeSettings: typeof t.useDefaultExcludes == "boolean" ? !t.useDefaultExcludes : !0,
      disregardSearchExcludeSettings: typeof t.useSearchExclude == "boolean" ? !t.useSearchExclude : !0,
      fileEncoding: t.encoding,
      maxResults: t.maxResults,
      previewOptions: o,
      surroundingContext: t.afterContext,
      includePattern: a == null ? void 0 : a.pattern,
      excludePattern: l ? [{ pattern: l }] : void 0
    }, u = (d, f) => {
      MI(d) ? n({
        uri: f,
        preview: {
          text: d.previewText,
          matches: Pw(d.rangeLocations, (p) => new $e(
            p.preview.startLineNumber,
            p.preview.startColumn,
            p.preview.endLineNumber,
            p.preview.endColumn
          ))
        },
        ranges: Pw(d.rangeLocations, (p) => new $e(
          p.source.startLineNumber,
          p.source.startColumn,
          p.source.endLineNumber,
          p.source.endColumn
        ))
      }) : n({
        uri: f,
        text: d.text,
        lineNumber: d.lineNumber
      });
    };
    return this.findTextInFilesBase(e, [{ options: c, folder: a == null ? void 0 : a.folder }], u, s);
  }
  $handleTextSearchResult(e, t) {
    var n, r;
    (r = (n = this._activeSearchCallbacks)[t]) == null || r.call(n, e);
  }
  async save(e) {
    const t = await this._proxy.$save(e, { saveAs: !1 });
    return x.revive(t);
  }
  async saveAs(e) {
    const t = await this._proxy.$save(e, { saveAs: !0 });
    return x.revive(t);
  }
  saveAll(e) {
    return this._proxy.$saveAll(e);
  }
  resolveProxy(e) {
    return this._proxy.$resolveProxy(e);
  }
  lookupAuthorization(e) {
    return this._proxy.$lookupAuthorization(e);
  }
  lookupKerberosAuthorization(e) {
    return this._proxy.$lookupKerberosAuthorization(e);
  }
  loadCertificates() {
    return this._proxy.$loadCertificates();
  }
  get trusted() {
    return this._trusted;
  }
  requestWorkspaceTrust(e) {
    return this._proxy.$requestWorkspaceTrust(e);
  }
  $onDidGrantWorkspaceTrust() {
    this._trusted || (this._trusted = !0, this._onDidGrantWorkspaceTrust.fire());
  }
  registerEditSessionIdentityProvider(e, t) {
    if (this._editSessionIdentityProviders.has(e))
      throw new Error(`A provider has already been registered for scheme ${e}`);
    this._editSessionIdentityProviders.set(e, t);
    const n = this._uriTransformerService.transformOutgoingScheme(e), r = this._providerHandlePool++;
    return this._proxy.$registerEditSessionIdentityProvider(r, n), Ie(() => {
      this._editSessionIdentityProviders.delete(e), this._proxy.$unregisterEditSessionIdentityProvider(r);
    });
  }
  async $getEditSessionIdentifier(e, t) {
    this._logService.info("Getting edit session identifier for workspaceFolder", e);
    const n = await this.resolveWorkspaceFolder(x.revive(e));
    if (!n) {
      this._logService.warn("Unable to resolve workspace folder");
      return;
    }
    this._logService.info("Invoking #provideEditSessionIdentity for workspaceFolder", n);
    const r = this._editSessionIdentityProviders.get(n.uri.scheme);
    if (this._logService.info(`Provider for scheme ${n.uri.scheme} is defined: `, !!r), !r)
      return;
    const s = await r.provideEditSessionIdentity(n, t);
    if (this._logService.info("Provider returned edit session identifier: ", s), !!s)
      return s;
  }
  async $provideEditSessionIdentityMatch(e, t, n, r) {
    var l;
    this._logService.info("Getting edit session identifier for workspaceFolder", e);
    const s = await this.resolveWorkspaceFolder(x.revive(e));
    if (!s) {
      this._logService.warn("Unable to resolve workspace folder");
      return;
    }
    this._logService.info("Invoking #provideEditSessionIdentity for workspaceFolder", s);
    const o = this._editSessionIdentityProviders.get(s.uri.scheme);
    if (this._logService.info(`Provider for scheme ${s.uri.scheme} is defined: `, !!o), !o)
      return;
    const a = await ((l = o.provideEditSessionIdentityMatch) == null ? void 0 : l.call(o, t, n, r));
    if (this._logService.info("Provider returned edit session identifier match result: ", a), !!a)
      return a;
  }
  getOnWillCreateEditSessionIdentityEvent(e) {
    return (t, n, r) => {
      const s = function(a) {
        t.call(n, a);
      };
      return s.extension = e, this._onWillCreateEditSessionIdentityEvent.event(s, void 0, r);
    };
  }
  async $onWillCreateEditSessionIdentity(e, t, n) {
    const r = await this.resolveWorkspaceFolder(x.revive(e));
    if (r === void 0)
      throw new Error("Unable to resolve workspace folder");
    await this._onWillCreateEditSessionIdentityEvent.fireAsync({ workspaceFolder: r }, t, async (s, o) => {
      const a = Date.now();
      await Promise.resolve(s), Date.now() - a > n && this._logService.warn("SLOW edit session create-participant", o.extension.identifier);
    }), t.isCancellationRequested;
  }
  registerCanonicalUriProvider(e, t) {
    if (this._canonicalUriProviders.has(e))
      throw new Error(`A provider has already been registered for scheme ${e}`);
    this._canonicalUriProviders.set(e, t);
    const n = this._uriTransformerService.transformOutgoingScheme(e), r = this._providerHandlePool++;
    return this._proxy.$registerCanonicalUriProvider(r, n), Ie(() => {
      this._canonicalUriProviders.delete(e), this._proxy.$unregisterCanonicalUriProvider(r);
    });
  }
  async provideCanonicalUri(e, t, n) {
    var o;
    const r = this._canonicalUriProviders.get(e.scheme);
    if (!r)
      return;
    const s = await ((o = r.provideCanonicalUri) == null ? void 0 : o.call(r, x.revive(e), t, n));
    if (s)
      return s;
  }
  async $provideCanonicalUri(e, t, n) {
    return this.provideCanonicalUri(x.revive(e), { targetScheme: t }, n);
  }
  async decode(e, t) {
    const [n, r] = this.toEncodeDecodeParameters(t), s = await this._proxy.$resolveDecoding(n, r), o = (await PM(VR(he.wrap(e)), {
      ...s,
      acceptTextOnly: !0,
      overwriteEncoding: (a) => a === null || a === s.preferredEncoding ? Promise.resolve(s.preferredEncoding) : this._proxy.$validateDetectedEncoding(n, a, r)
    })).stream;
    return RR(o, (a) => a.join(""));
  }
  async encode(e, t) {
    const [n, r] = this.toEncodeDecodeParameters(t), { encoding: s, addBOM: o } = await this._proxy.$resolveEncoding(n, r);
    if (s === wv && !o)
      return he.fromString(e).buffer;
    const a = await AM(BM(e), s, { addBOM: o });
    return WR(a).buffer;
  }
  toEncodeDecodeParameters(e) {
    const t = Uw(e == null ? void 0 : e.uri) ? e.uri : void 0, n = typeof (e == null ? void 0 : e.encoding) == "string" ? e.encoding : void 0;
    return [t, n ? { encoding: n } : void 0];
  }
};
A0 = z([
  O(0, tt),
  O(1, _i),
  O(2, md),
  O(3, ot),
  O(4, ev)
], A0);
const Zs = me("IExtHostWorkspace");
function Ag(i) {
  let e, t;
  if (i)
    return typeof i == "string" ? e = i : (e = i.pattern, t = x.revive(i.baseUri)), {
      pattern: e,
      folder: t
    };
}
function jI(i) {
  return ((i == null ? void 0 : i.map((e) => {
    if (typeof e == "string")
      return e === "" ? void 0 : {
        pattern: e,
        uri: void 0
      };
    {
      const t = Ag(e);
      return t ? {
        pattern: t.pattern,
        uri: t.folder
      } : void 0;
    }
  })) ?? []).filter((e) => !!e);
}
var bi;
(function(i) {
  i[i.None = 0] = "None", i[i.UnexpectedEndOfComment = 1] = "UnexpectedEndOfComment", i[i.UnexpectedEndOfString = 2] = "UnexpectedEndOfString", i[i.UnexpectedEndOfNumber = 3] = "UnexpectedEndOfNumber", i[i.InvalidUnicode = 4] = "InvalidUnicode", i[i.InvalidEscapeCharacter = 5] = "InvalidEscapeCharacter", i[i.InvalidCharacter = 6] = "InvalidCharacter";
})(bi || (bi = {}));
var Se;
(function(i) {
  i[i.OpenBraceToken = 1] = "OpenBraceToken", i[i.CloseBraceToken = 2] = "CloseBraceToken", i[i.OpenBracketToken = 3] = "OpenBracketToken", i[i.CloseBracketToken = 4] = "CloseBracketToken", i[i.CommaToken = 5] = "CommaToken", i[i.ColonToken = 6] = "ColonToken", i[i.NullKeyword = 7] = "NullKeyword", i[i.TrueKeyword = 8] = "TrueKeyword", i[i.FalseKeyword = 9] = "FalseKeyword", i[i.StringLiteral = 10] = "StringLiteral", i[i.NumericLiteral = 11] = "NumericLiteral", i[i.LineCommentTrivia = 12] = "LineCommentTrivia", i[i.BlockCommentTrivia = 13] = "BlockCommentTrivia", i[i.LineBreakTrivia = 14] = "LineBreakTrivia", i[i.Trivia = 15] = "Trivia", i[i.Unknown = 16] = "Unknown", i[i.EOF = 17] = "EOF";
})(Se || (Se = {}));
var Ft;
(function(i) {
  i[i.InvalidSymbol = 1] = "InvalidSymbol", i[i.InvalidNumberFormat = 2] = "InvalidNumberFormat", i[i.PropertyNameExpected = 3] = "PropertyNameExpected", i[i.ValueExpected = 4] = "ValueExpected", i[i.ColonExpected = 5] = "ColonExpected", i[i.CommaExpected = 6] = "CommaExpected", i[i.CloseBraceExpected = 7] = "CloseBraceExpected", i[i.CloseBracketExpected = 8] = "CloseBracketExpected", i[i.EndOfFileExpected = 9] = "EndOfFileExpected", i[i.InvalidCommentToken = 10] = "InvalidCommentToken", i[i.UnexpectedEndOfComment = 11] = "UnexpectedEndOfComment", i[i.UnexpectedEndOfString = 12] = "UnexpectedEndOfString", i[i.UnexpectedEndOfNumber = 13] = "UnexpectedEndOfNumber", i[i.InvalidUnicode = 14] = "InvalidUnicode", i[i.InvalidEscapeCharacter = 15] = "InvalidEscapeCharacter", i[i.InvalidCharacter = 16] = "InvalidCharacter";
})(Ft || (Ft = {}));
var R0;
(function(i) {
  i.DEFAULT = {
    allowTrailingComma: !0
  };
})(R0 || (R0 = {}));
function zM(i, e = !1) {
  let t = 0;
  const n = i.length;
  let r = "", s = 0, o = Se.Unknown, a = bi.None;
  function l(_) {
    let m = 0, E = 0;
    for (; m < _; ) {
      const S = i.charCodeAt(t);
      if (S >= de._0 && S <= de._9)
        E = E * 16 + S - de._0;
      else if (S >= de.A && S <= de.F)
        E = E * 16 + S - de.A + 10;
      else if (S >= de.a && S <= de.f)
        E = E * 16 + S - de.a + 10;
      else
        break;
      t++, m++;
    }
    return m < _ && (E = -1), E;
  }
  function c(_) {
    t = _, r = "", s = 0, o = Se.Unknown, a = bi.None;
  }
  function u() {
    const _ = t;
    if (i.charCodeAt(t) === de._0)
      t++;
    else
      for (t++; t < i.length && mc(i.charCodeAt(t)); )
        t++;
    if (t < i.length && i.charCodeAt(t) === de.dot)
      if (t++, t < i.length && mc(i.charCodeAt(t)))
        for (t++; t < i.length && mc(i.charCodeAt(t)); )
          t++;
      else
        return a = bi.UnexpectedEndOfNumber, i.substring(_, t);
    let m = t;
    if (t < i.length && (i.charCodeAt(t) === de.E || i.charCodeAt(t) === de.e))
      if (t++, (t < i.length && i.charCodeAt(t) === de.plus || i.charCodeAt(t) === de.minus) && t++, t < i.length && mc(i.charCodeAt(t))) {
        for (t++; t < i.length && mc(i.charCodeAt(t)); )
          t++;
        m = t;
      } else
        a = bi.UnexpectedEndOfNumber;
    return i.substring(_, m);
  }
  function d() {
    let _ = "", m = t;
    for (; ; ) {
      if (t >= n) {
        _ += i.substring(m, t), a = bi.UnexpectedEndOfString;
        break;
      }
      const E = i.charCodeAt(t);
      if (E === de.doubleQuote) {
        _ += i.substring(m, t), t++;
        break;
      }
      if (E === de.backslash) {
        if (_ += i.substring(m, t), t++, t >= n) {
          a = bi.UnexpectedEndOfString;
          break;
        }
        switch (i.charCodeAt(t++)) {
          case de.doubleQuote:
            _ += '"';
            break;
          case de.backslash:
            _ += "\\";
            break;
          case de.slash:
            _ += "/";
            break;
          case de.b:
            _ += "\b";
            break;
          case de.f:
            _ += "\f";
            break;
          case de.n:
            _ += `
`;
            break;
          case de.r:
            _ += "\r";
            break;
          case de.t:
            _ += "	";
            break;
          case de.u: {
            const k = l(4);
            k >= 0 ? _ += String.fromCharCode(k) : a = bi.InvalidUnicode;
            break;
          }
          default:
            a = bi.InvalidEscapeCharacter;
        }
        m = t;
        continue;
      }
      if (E >= 0 && E <= 31)
        if (Yp(E)) {
          _ += i.substring(m, t), a = bi.UnexpectedEndOfString;
          break;
        } else
          a = bi.InvalidCharacter;
      t++;
    }
    return _;
  }
  function f() {
    if (r = "", a = bi.None, s = t, t >= n)
      return s = n, o = Se.EOF;
    let _ = i.charCodeAt(t);
    if (aw(_)) {
      do
        t++, r += String.fromCharCode(_), _ = i.charCodeAt(t);
      while (aw(_));
      return o = Se.Trivia;
    }
    if (Yp(_))
      return t++, r += String.fromCharCode(_), _ === de.carriageReturn && i.charCodeAt(t) === de.lineFeed && (t++, r += `
`), o = Se.LineBreakTrivia;
    switch (_) {
      case de.openBrace:
        return t++, o = Se.OpenBraceToken;
      case de.closeBrace:
        return t++, o = Se.CloseBraceToken;
      case de.openBracket:
        return t++, o = Se.OpenBracketToken;
      case de.closeBracket:
        return t++, o = Se.CloseBracketToken;
      case de.colon:
        return t++, o = Se.ColonToken;
      case de.comma:
        return t++, o = Se.CommaToken;
      case de.doubleQuote:
        return t++, r = d(), o = Se.StringLiteral;
      case de.slash: {
        const m = t - 1;
        if (i.charCodeAt(t + 1) === de.slash) {
          for (t += 2; t < n && !Yp(i.charCodeAt(t)); )
            t++;
          return r = i.substring(m, t), o = Se.LineCommentTrivia;
        }
        if (i.charCodeAt(t + 1) === de.asterisk) {
          t += 2;
          const E = n - 1;
          let S = !1;
          for (; t < E; ) {
            if (i.charCodeAt(t) === de.asterisk && i.charCodeAt(t + 1) === de.slash) {
              t += 2, S = !0;
              break;
            }
            t++;
          }
          return S || (t++, a = bi.UnexpectedEndOfComment), r = i.substring(m, t), o = Se.BlockCommentTrivia;
        }
        return r += String.fromCharCode(_), t++, o = Se.Unknown;
      }
      case de.minus:
        if (r += String.fromCharCode(_), t++, t === n || !mc(i.charCodeAt(t)))
          return o = Se.Unknown;
      case de._0:
      case de._1:
      case de._2:
      case de._3:
      case de._4:
      case de._5:
      case de._6:
      case de._7:
      case de._8:
      case de._9:
        return r += u(), o = Se.NumericLiteral;
      default:
        for (; t < n && p(_); )
          t++, _ = i.charCodeAt(t);
        if (s !== t) {
          switch (r = i.substring(s, t), r) {
            case "true":
              return o = Se.TrueKeyword;
            case "false":
              return o = Se.FalseKeyword;
            case "null":
              return o = Se.NullKeyword;
          }
          return o = Se.Unknown;
        }
        return r += String.fromCharCode(_), t++, o = Se.Unknown;
    }
  }
  function p(_) {
    if (aw(_) || Yp(_))
      return !1;
    switch (_) {
      case de.closeBrace:
      case de.closeBracket:
      case de.openBrace:
      case de.openBracket:
      case de.doubleQuote:
      case de.colon:
      case de.comma:
      case de.slash:
        return !1;
    }
    return !0;
  }
  function v() {
    let _;
    do
      _ = f();
    while (_ >= Se.LineCommentTrivia && _ <= Se.Trivia);
    return _;
  }
  return {
    setPosition: c,
    getPosition: () => t,
    scan: e ? v : f,
    getToken: () => o,
    getTokenValue: () => r,
    getTokenOffset: () => s,
    getTokenLength: () => t - s,
    getTokenError: () => a
  };
}
function aw(i) {
  return i === de.space || i === de.tab || i === de.verticalTab || i === de.formFeed || i === de.nonBreakingSpace || i === de.ogham || i >= de.enQuad && i <= de.zeroWidthSpace || i === de.narrowNoBreakSpace || i === de.mathematicalSpace || i === de.ideographicSpace || i === de.byteOrderMark;
}
function Yp(i) {
  return i === de.lineFeed || i === de.carriageReturn || i === de.lineSeparator || i === de.paragraphSeparator;
}
function mc(i) {
  return i >= de._0 && i <= de._9;
}
var de;
(function(i) {
  i[i.nullCharacter = 0] = "nullCharacter", i[i.maxAsciiCharacter = 127] = "maxAsciiCharacter", i[i.lineFeed = 10] = "lineFeed", i[i.carriageReturn = 13] = "carriageReturn", i[i.lineSeparator = 8232] = "lineSeparator", i[i.paragraphSeparator = 8233] = "paragraphSeparator", i[i.nextLine = 133] = "nextLine", i[i.space = 32] = "space", i[i.nonBreakingSpace = 160] = "nonBreakingSpace", i[i.enQuad = 8192] = "enQuad", i[i.emQuad = 8193] = "emQuad", i[i.enSpace = 8194] = "enSpace", i[i.emSpace = 8195] = "emSpace", i[i.threePerEmSpace = 8196] = "threePerEmSpace", i[i.fourPerEmSpace = 8197] = "fourPerEmSpace", i[i.sixPerEmSpace = 8198] = "sixPerEmSpace", i[i.figureSpace = 8199] = "figureSpace", i[i.punctuationSpace = 8200] = "punctuationSpace", i[i.thinSpace = 8201] = "thinSpace", i[i.hairSpace = 8202] = "hairSpace", i[i.zeroWidthSpace = 8203] = "zeroWidthSpace", i[i.narrowNoBreakSpace = 8239] = "narrowNoBreakSpace", i[i.ideographicSpace = 12288] = "ideographicSpace", i[i.mathematicalSpace = 8287] = "mathematicalSpace", i[i.ogham = 5760] = "ogham", i[i._ = 95] = "_", i[i.$ = 36] = "$", i[i._0 = 48] = "_0", i[i._1 = 49] = "_1", i[i._2 = 50] = "_2", i[i._3 = 51] = "_3", i[i._4 = 52] = "_4", i[i._5 = 53] = "_5", i[i._6 = 54] = "_6", i[i._7 = 55] = "_7", i[i._8 = 56] = "_8", i[i._9 = 57] = "_9", i[i.a = 97] = "a", i[i.b = 98] = "b", i[i.c = 99] = "c", i[i.d = 100] = "d", i[i.e = 101] = "e", i[i.f = 102] = "f", i[i.g = 103] = "g", i[i.h = 104] = "h", i[i.i = 105] = "i", i[i.j = 106] = "j", i[i.k = 107] = "k", i[i.l = 108] = "l", i[i.m = 109] = "m", i[i.n = 110] = "n", i[i.o = 111] = "o", i[i.p = 112] = "p", i[i.q = 113] = "q", i[i.r = 114] = "r", i[i.s = 115] = "s", i[i.t = 116] = "t", i[i.u = 117] = "u", i[i.v = 118] = "v", i[i.w = 119] = "w", i[i.x = 120] = "x", i[i.y = 121] = "y", i[i.z = 122] = "z", i[i.A = 65] = "A", i[i.B = 66] = "B", i[i.C = 67] = "C", i[i.D = 68] = "D", i[i.E = 69] = "E", i[i.F = 70] = "F", i[i.G = 71] = "G", i[i.H = 72] = "H", i[i.I = 73] = "I", i[i.J = 74] = "J", i[i.K = 75] = "K", i[i.L = 76] = "L", i[i.M = 77] = "M", i[i.N = 78] = "N", i[i.O = 79] = "O", i[i.P = 80] = "P", i[i.Q = 81] = "Q", i[i.R = 82] = "R", i[i.S = 83] = "S", i[i.T = 84] = "T", i[i.U = 85] = "U", i[i.V = 86] = "V", i[i.W = 87] = "W", i[i.X = 88] = "X", i[i.Y = 89] = "Y", i[i.Z = 90] = "Z", i[i.ampersand = 38] = "ampersand", i[i.asterisk = 42] = "asterisk", i[i.at = 64] = "at", i[i.backslash = 92] = "backslash", i[i.bar = 124] = "bar", i[i.caret = 94] = "caret", i[i.closeBrace = 125] = "closeBrace", i[i.closeBracket = 93] = "closeBracket", i[i.closeParen = 41] = "closeParen", i[i.colon = 58] = "colon", i[i.comma = 44] = "comma", i[i.dot = 46] = "dot", i[i.doubleQuote = 34] = "doubleQuote", i[i.equals = 61] = "equals", i[i.exclamation = 33] = "exclamation", i[i.greaterThan = 62] = "greaterThan", i[i.lessThan = 60] = "lessThan", i[i.minus = 45] = "minus", i[i.openBrace = 123] = "openBrace", i[i.openBracket = 91] = "openBracket", i[i.openParen = 40] = "openParen", i[i.percent = 37] = "percent", i[i.plus = 43] = "plus", i[i.question = 63] = "question", i[i.semicolon = 59] = "semicolon", i[i.singleQuote = 39] = "singleQuote", i[i.slash = 47] = "slash", i[i.tilde = 126] = "tilde", i[i.backspace = 8] = "backspace", i[i.formFeed = 12] = "formFeed", i[i.byteOrderMark = 65279] = "byteOrderMark", i[i.tab = 9] = "tab", i[i.verticalTab = 11] = "verticalTab";
})(de || (de = {}));
function qM(i, e, t = R0.DEFAULT) {
  const n = zM(i, !1);
  function r(K) {
    return K ? () => K(n.getTokenOffset(), n.getTokenLength()) : () => !0;
  }
  function s(K) {
    return K ? (Ee) => K(Ee, n.getTokenOffset(), n.getTokenLength()) : () => !0;
  }
  const o = r(e.onObjectBegin), a = s(e.onObjectProperty), l = r(e.onObjectEnd), c = r(e.onArrayBegin), u = r(e.onArrayEnd), d = s(e.onLiteralValue), f = s(e.onSeparator), p = r(e.onComment), v = s(e.onError), _ = t && t.disallowComments, m = t && t.allowTrailingComma;
  function E() {
    for (; ; ) {
      const K = n.scan();
      switch (n.getTokenError()) {
        case bi.InvalidUnicode:
          S(Ft.InvalidUnicode);
          break;
        case bi.InvalidEscapeCharacter:
          S(Ft.InvalidEscapeCharacter);
          break;
        case bi.UnexpectedEndOfNumber:
          S(Ft.UnexpectedEndOfNumber);
          break;
        case bi.UnexpectedEndOfComment:
          _ || S(Ft.UnexpectedEndOfComment);
          break;
        case bi.UnexpectedEndOfString:
          S(Ft.UnexpectedEndOfString);
          break;
        case bi.InvalidCharacter:
          S(Ft.InvalidCharacter);
          break;
      }
      switch (K) {
        case Se.LineCommentTrivia:
        case Se.BlockCommentTrivia:
          _ ? S(Ft.InvalidCommentToken) : p();
          break;
        case Se.Unknown:
          S(Ft.InvalidSymbol);
          break;
        case Se.Trivia:
        case Se.LineBreakTrivia:
          break;
        default:
          return K;
      }
    }
  }
  function S(K, Ee = [], He = []) {
    if (v(K), Ee.length + He.length > 0) {
      let Re = n.getToken();
      for (; Re !== Se.EOF; ) {
        if (Ee.indexOf(Re) !== -1) {
          E();
          break;
        } else if (He.indexOf(Re) !== -1)
          break;
        Re = E();
      }
    }
  }
  function k(K) {
    const Ee = n.getTokenValue();
    return K ? d(Ee) : a(Ee), E(), !0;
  }
  function q() {
    switch (n.getToken()) {
      case Se.NumericLiteral: {
        let K = 0;
        try {
          K = JSON.parse(n.getTokenValue()), typeof K != "number" && (S(Ft.InvalidNumberFormat), K = 0);
        } catch {
          S(Ft.InvalidNumberFormat);
        }
        d(K);
        break;
      }
      case Se.NullKeyword:
        d(null);
        break;
      case Se.TrueKeyword:
        d(!0);
        break;
      case Se.FalseKeyword:
        d(!1);
        break;
      default:
        return !1;
    }
    return E(), !0;
  }
  function B() {
    return n.getToken() !== Se.StringLiteral ? (S(Ft.PropertyNameExpected, [], [Se.CloseBraceToken, Se.CommaToken]), !1) : (k(!1), n.getToken() === Se.ColonToken ? (f(":"), E(), ae() || S(Ft.ValueExpected, [], [Se.CloseBraceToken, Se.CommaToken])) : S(Ft.ColonExpected, [], [Se.CloseBraceToken, Se.CommaToken]), !0);
  }
  function te() {
    o(), E();
    let K = !1;
    for (; n.getToken() !== Se.CloseBraceToken && n.getToken() !== Se.EOF; ) {
      if (n.getToken() === Se.CommaToken) {
        if (K || S(Ft.ValueExpected, [], []), f(","), E(), n.getToken() === Se.CloseBraceToken && m)
          break;
      } else K && S(Ft.CommaExpected, [], []);
      B() || S(Ft.ValueExpected, [], [Se.CloseBraceToken, Se.CommaToken]), K = !0;
    }
    return l(), n.getToken() !== Se.CloseBraceToken ? S(Ft.CloseBraceExpected, [Se.CloseBraceToken], []) : E(), !0;
  }
  function G() {
    c(), E();
    let K = !1;
    for (; n.getToken() !== Se.CloseBracketToken && n.getToken() !== Se.EOF; ) {
      if (n.getToken() === Se.CommaToken) {
        if (K || S(Ft.ValueExpected, [], []), f(","), E(), n.getToken() === Se.CloseBracketToken && m)
          break;
      } else K && S(Ft.CommaExpected, [], []);
      ae() || S(Ft.ValueExpected, [], [Se.CloseBracketToken, Se.CommaToken]), K = !0;
    }
    return u(), n.getToken() !== Se.CloseBracketToken ? S(Ft.CloseBracketExpected, [Se.CloseBracketToken], []) : E(), !0;
  }
  function ae() {
    switch (n.getToken()) {
      case Se.OpenBracketToken:
        return G();
      case Se.OpenBraceToken:
        return te();
      case Se.StringLiteral:
        return k(!0);
      default:
        return q();
    }
  }
  return E(), n.getToken() === Se.EOF ? t.allowEmptyContent ? !0 : (S(Ft.ValueExpected, [], []), !1) : ae() ? (n.getToken() !== Se.EOF && S(Ft.EndOfFileExpected, [], []), !0) : (S(Ft.ValueExpected, [], []), !1);
}
function Yd(i) {
  return Object.isFrozen(i) ? i : Jw(i);
}
class Nn {
  static createEmptyModel(e) {
    return new Nn({}, [], [], void 0, e);
  }
  constructor(e, t, n, r, s) {
    this._contents = e, this._keys = t, this._overrides = n, this.raw = r, this.logService = s, this.overrideConfigurations = /* @__PURE__ */ new Map();
  }
  get rawConfiguration() {
    if (!this._rawConfiguration)
      if (this.raw) {
        const e = (Array.isArray(this.raw) ? this.raw : [this.raw]).map((t) => {
          if (t instanceof Nn)
            return t;
          const n = new jM("", this.logService);
          return n.parseRaw(t), n.configurationModel;
        });
        this._rawConfiguration = e.reduce((t, n) => n === t ? n : t.merge(n), e[0]);
      } else
        this._rawConfiguration = this;
    return this._rawConfiguration;
  }
  get contents() {
    return this._contents;
  }
  get overrides() {
    return this._overrides;
  }
  get keys() {
    return this._keys;
  }
  isEmpty() {
    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;
  }
  getValue(e) {
    return e ? _m(this.contents, e) : this.contents;
  }
  inspect(e, t) {
    const n = this;
    return {
      get value() {
        return Yd(n.rawConfiguration.getValue(e));
      },
      get override() {
        return t ? Yd(n.rawConfiguration.getOverrideValue(e, t)) : void 0;
      },
      get merged() {
        return Yd(t ? n.rawConfiguration.override(t).getValue(e) : n.rawConfiguration.getValue(e));
      },
      get overrides() {
        const r = [];
        for (const { contents: s, identifiers: o, keys: a } of n.rawConfiguration.overrides) {
          const l = new Nn(s, a, [], void 0, n.logService).getValue(e);
          l !== void 0 && r.push({ identifiers: o, value: l });
        }
        return r.length ? Yd(r) : void 0;
      }
    };
  }
  getOverrideValue(e, t) {
    const n = this.getContentsForOverrideIdentifer(t);
    return n ? e ? _m(n, e) : n : void 0;
  }
  getKeysForOverrideIdentifier(e) {
    const t = [];
    for (const n of this.overrides)
      n.identifiers.includes(e) && t.push(...n.keys);
    return xc(t);
  }
  getAllOverrideIdentifiers() {
    const e = [];
    for (const t of this.overrides)
      e.push(...t.identifiers);
    return xc(e);
  }
  override(e) {
    let t = this.overrideConfigurations.get(e);
    return t || (t = this.createOverrideConfigurationModel(e), this.overrideConfigurations.set(e, t)), t;
  }
  merge(...e) {
    const t = St(this.contents), n = St(this.overrides), r = [...this.keys], s = this.raw ? Array.isArray(this.raw) ? [...this.raw] : [this.raw] : [this];
    for (const o of e)
      if (s.push(...o.raw ? Array.isArray(o.raw) ? o.raw : [o.raw] : [o]), !o.isEmpty()) {
        this.mergeContents(t, o.contents);
        for (const a of o.overrides) {
          const [l] = n.filter((c) => Fn(c.identifiers, a.identifiers));
          l ? (this.mergeContents(l.contents, a.contents), l.keys.push(...a.keys), l.keys = xc(l.keys)) : n.push(St(a));
        }
        for (const a of o.keys)
          r.indexOf(a) === -1 && r.push(a);
      }
    return new Nn(
      t,
      r,
      n,
      !s.length || s.every((o) => o instanceof Nn) ? void 0 : s,
      this.logService
    );
  }
  createOverrideConfigurationModel(e) {
    const t = this.getContentsForOverrideIdentifer(e);
    if (!t || typeof t != "object" || !Object.keys(t).length)
      return this;
    const n = {};
    for (const r of xc([...Object.keys(this.contents), ...Object.keys(t)])) {
      let s = this.contents[r];
      const o = t[r];
      o && (typeof s == "object" && typeof o == "object" ? (s = St(s), this.mergeContents(s, o)) : s = o), n[r] = s;
    }
    return new Nn(n, this.keys, this.overrides, void 0, this.logService);
  }
  mergeContents(e, t) {
    for (const n of Object.keys(t)) {
      if (n in e && ai(e[n]) && ai(t[n])) {
        this.mergeContents(e[n], t[n]);
        continue;
      }
      e[n] = St(t[n]);
    }
  }
  getContentsForOverrideIdentifer(e) {
    let t = null, n = null;
    const r = (s) => {
      s && (n ? this.mergeContents(n, s) : n = St(s));
    };
    for (const s of this.overrides)
      s.identifiers.length === 1 && s.identifiers[0] === e ? t = s.contents : s.identifiers.includes(e) && r(s.contents);
    return r(t), n;
  }
  toJSON() {
    return {
      contents: this.contents,
      overrides: this.overrides,
      keys: this.keys
    };
  }
  addValue(e, t) {
    this.updateValue(e, t, !0);
  }
  setValue(e, t) {
    this.updateValue(e, t, !1);
  }
  removeValue(e) {
    const t = this.keys.indexOf(e);
    t !== -1 && (this.keys.splice(t, 1), $9(this.contents, e), rs.test(e) && this.overrides.splice(this.overrides.findIndex((n) => Fn(n.identifiers, Xh(e))), 1));
  }
  updateValue(e, t, n) {
    if (GP(this.contents, e, t, (r) => this.logService.error(r)), n = n || this.keys.indexOf(e) === -1, n && this.keys.push(e), rs.test(e)) {
      const r = Xh(e), s = {
        identifiers: r,
        keys: Object.keys(this.contents[e]),
        contents: db(this.contents[e], (a) => this.logService.error(a))
      }, o = this.overrides.findIndex((a) => Fn(a.identifiers, r));
      o !== -1 ? this.overrides[o] = s : this.overrides.push(s);
    }
  }
}
class jM {
  constructor(e, t) {
    this._name = e, this.logService = t, this._raw = null, this._configurationModel = null, this._restrictedConfigurations = [], this._parseErrors = [];
  }
  get configurationModel() {
    return this._configurationModel || Nn.createEmptyModel(this.logService);
  }
  get restrictedConfigurations() {
    return this._restrictedConfigurations;
  }
  get errors() {
    return this._parseErrors;
  }
  parse(e, t) {
    if (!oi(e)) {
      const n = this.doParseContent(e);
      this.parseRaw(n, t);
    }
  }
  reparse(e) {
    this._raw && this.parseRaw(this._raw, e);
  }
  parseRaw(e, t) {
    this._raw = e;
    const { contents: n, keys: r, overrides: s, restricted: o, hasExcludedProperties: a } = this.doParseRaw(e, t);
    this._configurationModel = new Nn(
      n,
      r,
      s,
      a ? [e] : void 0,
      this.logService
    ), this._restrictedConfigurations = o || [];
  }
  doParseContent(e) {
    let t = {}, n = null, r = [];
    const s = [];
    function o(l) {
      Array.isArray(r) ? r.push(l) : n !== null && (r[n] = l);
    }
    const a = {
      onObjectBegin: () => {
        const l = {};
        o(l), s.push(r), r = l, n = null;
      },
      onObjectProperty: (l) => {
        n = l;
      },
      onObjectEnd: () => {
        r = s.pop();
      },
      onArrayBegin: () => {
        const l = [];
        o(l), s.push(r), r = l, n = null;
      },
      onArrayEnd: () => {
        r = s.pop();
      },
      onLiteralValue: o,
      onError: (l, c, u) => {
      }
    };
    if (e)
      try {
        qM(e, a), t = r[0] || {};
      } catch (l) {
        this.logService.error(`Error while parsing settings file ${this._name}: ${l}`), this._parseErrors = [l];
      }
    return t;
  }
  doParseRaw(e, t) {
    const n = ui.as(ec.Configuration).getConfigurationProperties(), r = this.filter(e, n, !0, t);
    e = r.raw;
    const s = db(e, (l) => this.logService.error(`Conflict in settings file ${this._name}: ${l}`)), o = Object.keys(e), a = this.toOverrides(e, (l) => this.logService.error(`Conflict in settings file ${this._name}: ${l}`));
    return { contents: s, keys: o, overrides: a, restricted: r.restricted, hasExcludedProperties: r.hasExcludedProperties };
  }
  filter(e, t, n, r) {
    var l;
    let s = !1;
    if (!(r != null && r.scopes) && !(r != null && r.skipRestricted) && !((l = r == null ? void 0 : r.exclude) != null && l.length))
      return { raw: e, restricted: [], hasExcludedProperties: s };
    const o = {}, a = [];
    for (const c in e)
      if (rs.test(c) && n) {
        const u = this.filter(e[c], t, !1, r);
        o[c] = u.raw, s = s || u.hasExcludedProperties, a.push(...u.restricted);
      } else {
        const u = t[c];
        u != null && u.restricted && a.push(c), this.shouldInclude(c, u, r) ? o[c] = e[c] : s = !0;
      }
    return { raw: o, restricted: a, hasExcludedProperties: s };
  }
  shouldInclude(e, t, n) {
    var s, o;
    if ((s = n.exclude) != null && s.includes(e))
      return !1;
    if ((o = n.include) != null && o.includes(e))
      return !0;
    if (n.skipRestricted && (t != null && t.restricted) || n.skipUnregistered && !t)
      return !1;
    const r = t ? typeof t.scope < "u" ? t.scope : Ut.WINDOW : void 0;
    return r === void 0 || n.scopes === void 0 ? !0 : n.scopes.includes(r);
  }
  toOverrides(e, t) {
    const n = [];
    for (const r of Object.keys(e))
      if (rs.test(r)) {
        const s = {};
        for (const o in e[r])
          s[o] = e[r][o];
        n.push({
          identifiers: Xh(r),
          keys: Object.keys(s),
          contents: db(s, t)
        });
      }
    return n;
  }
}
class GM {
  constructor(e, t, n, r, s, o, a, l, c, u, d, f, p) {
    this.key = e, this.overrides = t, this._value = n, this.overrideIdentifiers = r, this.defaultConfiguration = s, this.policyConfiguration = o, this.applicationConfiguration = a, this.userConfiguration = l, this.localUserConfiguration = c, this.remoteUserConfiguration = u, this.workspaceConfiguration = d, this.folderConfigurationModel = f, this.memoryConfigurationModel = p;
  }
  get value() {
    return Yd(this._value);
  }
  toInspectValue(e) {
    return (e == null ? void 0 : e.value) !== void 0 || (e == null ? void 0 : e.override) !== void 0 || (e == null ? void 0 : e.overrides) !== void 0 ? e : void 0;
  }
  get defaultInspectValue() {
    return this._defaultInspectValue || (this._defaultInspectValue = this.defaultConfiguration.inspect(this.key, this.overrides.overrideIdentifier)), this._defaultInspectValue;
  }
  get defaultValue() {
    return this.defaultInspectValue.merged;
  }
  get default() {
    return this.toInspectValue(this.defaultInspectValue);
  }
  get policyInspectValue() {
    return this._policyInspectValue === void 0 && (this._policyInspectValue = this.policyConfiguration ? this.policyConfiguration.inspect(this.key) : null), this._policyInspectValue;
  }
  get policyValue() {
    var e;
    return (e = this.policyInspectValue) == null ? void 0 : e.merged;
  }
  get policy() {
    var e;
    return ((e = this.policyInspectValue) == null ? void 0 : e.value) !== void 0 ? { value: this.policyInspectValue.value } : void 0;
  }
  get applicationInspectValue() {
    return this._applicationInspectValue === void 0 && (this._applicationInspectValue = this.applicationConfiguration ? this.applicationConfiguration.inspect(this.key) : null), this._applicationInspectValue;
  }
  get applicationValue() {
    var e;
    return (e = this.applicationInspectValue) == null ? void 0 : e.merged;
  }
  get application() {
    return this.toInspectValue(this.applicationInspectValue);
  }
  get userInspectValue() {
    return this._userInspectValue || (this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier)), this._userInspectValue;
  }
  get userValue() {
    return this.userInspectValue.merged;
  }
  get user() {
    return this.toInspectValue(this.userInspectValue);
  }
  get userLocalInspectValue() {
    return this._userLocalInspectValue || (this._userLocalInspectValue = this.localUserConfiguration.inspect(this.key, this.overrides.overrideIdentifier)), this._userLocalInspectValue;
  }
  get userLocalValue() {
    return this.userLocalInspectValue.merged;
  }
  get userLocal() {
    return this.toInspectValue(this.userLocalInspectValue);
  }
  get userRemoteInspectValue() {
    return this._userRemoteInspectValue || (this._userRemoteInspectValue = this.remoteUserConfiguration.inspect(this.key, this.overrides.overrideIdentifier)), this._userRemoteInspectValue;
  }
  get userRemoteValue() {
    return this.userRemoteInspectValue.merged;
  }
  get userRemote() {
    return this.toInspectValue(this.userRemoteInspectValue);
  }
  get workspaceInspectValue() {
    return this._workspaceInspectValue === void 0 && (this._workspaceInspectValue = this.workspaceConfiguration ? this.workspaceConfiguration.inspect(this.key, this.overrides.overrideIdentifier) : null), this._workspaceInspectValue;
  }
  get workspaceValue() {
    var e;
    return (e = this.workspaceInspectValue) == null ? void 0 : e.merged;
  }
  get workspace() {
    return this.toInspectValue(this.workspaceInspectValue);
  }
  get workspaceFolderInspectValue() {
    return this._workspaceFolderInspectValue === void 0 && (this._workspaceFolderInspectValue = this.folderConfigurationModel ? this.folderConfigurationModel.inspect(this.key, this.overrides.overrideIdentifier) : null), this._workspaceFolderInspectValue;
  }
  get workspaceFolderValue() {
    var e;
    return (e = this.workspaceFolderInspectValue) == null ? void 0 : e.merged;
  }
  get workspaceFolder() {
    return this.toInspectValue(this.workspaceFolderInspectValue);
  }
  get memoryInspectValue() {
    return this._memoryInspectValue === void 0 && (this._memoryInspectValue = this.memoryConfigurationModel.inspect(this.key, this.overrides.overrideIdentifier)), this._memoryInspectValue;
  }
  get memoryValue() {
    return this.memoryInspectValue.merged;
  }
  get memory() {
    return this.toInspectValue(this.memoryInspectValue);
  }
}
let L0 = class fA {
  constructor(e, t, n, r, s, o, a, l, c, u) {
    this._defaultConfiguration = e, this._policyConfiguration = t, this._applicationConfiguration = n, this._localUserConfiguration = r, this._remoteUserConfiguration = s, this._workspaceConfiguration = o, this._folderConfigurations = a, this._memoryConfiguration = l, this._memoryConfigurationByResource = c, this.logService = u, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations = new mi(), this._userConfiguration = null;
  }
  getValue(e, t, n) {
    return this.getConsolidatedConfigurationModel(e, t, n).getValue(e);
  }
  updateValue(e, t, n = {}) {
    let r;
    n.resource ? (r = this._memoryConfigurationByResource.get(n.resource), r || (r = Nn.createEmptyModel(this.logService), this._memoryConfigurationByResource.set(n.resource, r))) : r = this._memoryConfiguration, t === void 0 ? r.removeValue(e) : r.setValue(e, t), n.resource || (this._workspaceConsolidatedConfiguration = null);
  }
  inspect(e, t, n) {
    const r = this.getConsolidatedConfigurationModel(e, t, n), s = this.getFolderConfigurationModelForResource(t.resource, n), o = t.resource ? this._memoryConfigurationByResource.get(t.resource) || this._memoryConfiguration : this._memoryConfiguration, a = /* @__PURE__ */ new Set();
    for (const l of r.overrides)
      for (const c of l.identifiers)
        r.getOverrideValue(e, c) !== void 0 && a.add(c);
    return new GM(
      e,
      t,
      r.getValue(e),
      a.size ? [...a] : void 0,
      this._defaultConfiguration,
      this._policyConfiguration.isEmpty() ? void 0 : this._policyConfiguration,
      this.applicationConfiguration.isEmpty() ? void 0 : this.applicationConfiguration,
      this.userConfiguration,
      this.localUserConfiguration,
      this.remoteUserConfiguration,
      n ? this._workspaceConfiguration : void 0,
      s || void 0,
      o
    );
  }
  keys(e) {
    const t = this.getFolderConfigurationModelForResource(void 0, e);
    return {
      default: this._defaultConfiguration.keys.slice(0),
      user: this.userConfiguration.keys.slice(0),
      workspace: this._workspaceConfiguration.keys.slice(0),
      workspaceFolder: t ? t.keys.slice(0) : []
    };
  }
  updateDefaultConfiguration(e) {
    this._defaultConfiguration = e, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations.clear();
  }
  updatePolicyConfiguration(e) {
    this._policyConfiguration = e;
  }
  updateApplicationConfiguration(e) {
    this._applicationConfiguration = e, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations.clear();
  }
  updateLocalUserConfiguration(e) {
    this._localUserConfiguration = e, this._userConfiguration = null, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations.clear();
  }
  updateRemoteUserConfiguration(e) {
    this._remoteUserConfiguration = e, this._userConfiguration = null, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations.clear();
  }
  updateWorkspaceConfiguration(e) {
    this._workspaceConfiguration = e, this._workspaceConsolidatedConfiguration = null, this._foldersConsolidatedConfigurations.clear();
  }
  updateFolderConfiguration(e, t) {
    this._folderConfigurations.set(e, t), this._foldersConsolidatedConfigurations.delete(e);
  }
  deleteFolderConfiguration(e) {
    this.folderConfigurations.delete(e), this._foldersConsolidatedConfigurations.delete(e);
  }
  compareAndUpdateDefaultConfiguration(e, t) {
    const n = [];
    if (!t) {
      const { added: r, updated: s, removed: o } = ao(this._defaultConfiguration, e);
      t = [...r, ...s, ...o];
    }
    for (const r of t)
      for (const s of Xh(r)) {
        const o = this._defaultConfiguration.getKeysForOverrideIdentifier(s), a = e.getKeysForOverrideIdentifier(s), l = [
          ...a.filter((c) => o.indexOf(c) === -1),
          ...o.filter((c) => a.indexOf(c) === -1),
          ...o.filter((c) => !un(this._defaultConfiguration.override(s).getValue(c), e.override(s).getValue(c)))
        ];
        n.push([s, l]);
      }
    return this.updateDefaultConfiguration(e), { keys: t, overrides: n };
  }
  compareAndUpdatePolicyConfiguration(e) {
    const { added: t, updated: n, removed: r } = ao(this._policyConfiguration, e), s = [...t, ...n, ...r];
    return s.length && this.updatePolicyConfiguration(e), { keys: s, overrides: [] };
  }
  compareAndUpdateApplicationConfiguration(e) {
    const { added: t, updated: n, removed: r, overrides: s } = ao(this.applicationConfiguration, e), o = [...t, ...n, ...r];
    return o.length && this.updateApplicationConfiguration(e), { keys: o, overrides: s };
  }
  compareAndUpdateLocalUserConfiguration(e) {
    const { added: t, updated: n, removed: r, overrides: s } = ao(this.localUserConfiguration, e), o = [...t, ...n, ...r];
    return o.length && this.updateLocalUserConfiguration(e), { keys: o, overrides: s };
  }
  compareAndUpdateRemoteUserConfiguration(e) {
    const { added: t, updated: n, removed: r, overrides: s } = ao(this.remoteUserConfiguration, e), o = [...t, ...n, ...r];
    return o.length && this.updateRemoteUserConfiguration(e), { keys: o, overrides: s };
  }
  compareAndUpdateWorkspaceConfiguration(e) {
    const { added: t, updated: n, removed: r, overrides: s } = ao(this.workspaceConfiguration, e), o = [...t, ...n, ...r];
    return o.length && this.updateWorkspaceConfiguration(e), { keys: o, overrides: s };
  }
  compareAndUpdateFolderConfiguration(e, t) {
    const n = this.folderConfigurations.get(e), { added: r, updated: s, removed: o, overrides: a } = ao(n, t), l = [...r, ...s, ...o];
    return (l.length || !n) && this.updateFolderConfiguration(e, t), { keys: l, overrides: a };
  }
  compareAndDeleteFolderConfiguration(e) {
    const t = this.folderConfigurations.get(e);
    if (!t)
      throw new Error("Unknown folder");
    this.deleteFolderConfiguration(e);
    const { added: n, updated: r, removed: s, overrides: o } = ao(t, void 0);
    return { keys: [...n, ...r, ...s], overrides: o };
  }
  get defaults() {
    return this._defaultConfiguration;
  }
  get applicationConfiguration() {
    return this._applicationConfiguration;
  }
  get userConfiguration() {
    if (!this._userConfiguration)
      if (this._remoteUserConfiguration.isEmpty())
        this._userConfiguration = this._localUserConfiguration;
      else {
        const e = this._localUserConfiguration.merge(this._remoteUserConfiguration);
        this._userConfiguration = new Nn(e.contents, e.keys, e.overrides, void 0, this.logService);
      }
    return this._userConfiguration;
  }
  get localUserConfiguration() {
    return this._localUserConfiguration;
  }
  get remoteUserConfiguration() {
    return this._remoteUserConfiguration;
  }
  get workspaceConfiguration() {
    return this._workspaceConfiguration;
  }
  get folderConfigurations() {
    return this._folderConfigurations;
  }
  getConsolidatedConfigurationModel(e, t, n) {
    let r = this.getConsolidatedConfigurationModelForResource(t, n);
    if (t.overrideIdentifier && (r = r.override(t.overrideIdentifier)), !this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(e) !== void 0) {
      r = r.merge();
      for (const s of this._policyConfiguration.keys)
        r.setValue(s, this._policyConfiguration.getValue(s));
    }
    return r;
  }
  getConsolidatedConfigurationModelForResource({ resource: e }, t) {
    let n = this.getWorkspaceConsolidatedConfiguration();
    if (t && e) {
      const r = t.getFolder(e);
      r && (n = this.getFolderConsolidatedConfiguration(r.uri) || n);
      const s = this._memoryConfigurationByResource.get(e);
      s && (n = n.merge(s));
    }
    return n;
  }
  getWorkspaceConsolidatedConfiguration() {
    return this._workspaceConsolidatedConfiguration || (this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration)), this._workspaceConsolidatedConfiguration;
  }
  getFolderConsolidatedConfiguration(e) {
    let t = this._foldersConsolidatedConfigurations.get(e);
    if (!t) {
      const n = this.getWorkspaceConsolidatedConfiguration(), r = this._folderConfigurations.get(e);
      r ? (t = n.merge(r), this._foldersConsolidatedConfigurations.set(e, t)) : t = n;
    }
    return t;
  }
  getFolderConfigurationModelForResource(e, t) {
    if (t && e) {
      const n = t.getFolder(e);
      if (n)
        return this._folderConfigurations.get(n.uri);
    }
  }
  toData() {
    return {
      defaults: {
        contents: this._defaultConfiguration.contents,
        overrides: this._defaultConfiguration.overrides,
        keys: this._defaultConfiguration.keys
      },
      policy: {
        contents: this._policyConfiguration.contents,
        overrides: this._policyConfiguration.overrides,
        keys: this._policyConfiguration.keys
      },
      application: {
        contents: this.applicationConfiguration.contents,
        overrides: this.applicationConfiguration.overrides,
        keys: this.applicationConfiguration.keys,
        raw: Array.isArray(this.applicationConfiguration.raw) ? void 0 : this.applicationConfiguration.raw
      },
      userLocal: {
        contents: this.localUserConfiguration.contents,
        overrides: this.localUserConfiguration.overrides,
        keys: this.localUserConfiguration.keys,
        raw: Array.isArray(this.localUserConfiguration.raw) ? void 0 : this.localUserConfiguration.raw
      },
      userRemote: {
        contents: this.remoteUserConfiguration.contents,
        overrides: this.remoteUserConfiguration.overrides,
        keys: this.remoteUserConfiguration.keys,
        raw: Array.isArray(this.remoteUserConfiguration.raw) ? void 0 : this.remoteUserConfiguration.raw
      },
      workspace: {
        contents: this._workspaceConfiguration.contents,
        overrides: this._workspaceConfiguration.overrides,
        keys: this._workspaceConfiguration.keys
      },
      folders: [...this._folderConfigurations.keys()].reduce((e, t) => {
        const { contents: n, overrides: r, keys: s } = this._folderConfigurations.get(t);
        return e.push([t, { contents: n, overrides: r, keys: s }]), e;
      }, [])
    };
  }
  allKeys() {
    const e = /* @__PURE__ */ new Set();
    return this._defaultConfiguration.keys.forEach((t) => e.add(t)), this.userConfiguration.keys.forEach((t) => e.add(t)), this._workspaceConfiguration.keys.forEach((t) => e.add(t)), this._folderConfigurations.forEach((t) => t.keys.forEach((n) => e.add(n))), [...e.values()];
  }
  allOverrideIdentifiers() {
    const e = /* @__PURE__ */ new Set();
    return this._defaultConfiguration.getAllOverrideIdentifiers().forEach((t) => e.add(t)), this.userConfiguration.getAllOverrideIdentifiers().forEach((t) => e.add(t)), this._workspaceConfiguration.getAllOverrideIdentifiers().forEach((t) => e.add(t)), this._folderConfigurations.forEach((t) => t.getAllOverrideIdentifiers().forEach((n) => e.add(n))), [...e.values()];
  }
  getAllKeysForOverrideIdentifier(e) {
    const t = /* @__PURE__ */ new Set();
    return this._defaultConfiguration.getKeysForOverrideIdentifier(e).forEach((n) => t.add(n)), this.userConfiguration.getKeysForOverrideIdentifier(e).forEach((n) => t.add(n)), this._workspaceConfiguration.getKeysForOverrideIdentifier(e).forEach((n) => t.add(n)), this._folderConfigurations.forEach((n) => n.getKeysForOverrideIdentifier(e).forEach((r) => t.add(r))), [...t.values()];
  }
  static parse(e, t) {
    const n = this.parseConfigurationModel(e.defaults, t), r = this.parseConfigurationModel(e.policy, t), s = this.parseConfigurationModel(e.application, t), o = this.parseConfigurationModel(e.userLocal, t), a = this.parseConfigurationModel(e.userRemote, t), l = this.parseConfigurationModel(e.workspace, t), c = e.folders.reduce((u, d) => (u.set(x.revive(d[0]), this.parseConfigurationModel(d[1], t)), u), new mi());
    return new fA(
      n,
      r,
      s,
      o,
      a,
      l,
      c,
      Nn.createEmptyModel(t),
      new mi(),
      t
    );
  }
  static parseConfigurationModel(e, t) {
    return new Nn(e.contents, e.keys, e.overrides, e.raw, t);
  }
};
class QM {
  constructor(e, t, n, r, s) {
    this.change = e, this.previous = t, this.currentConfiguraiton = n, this.currentWorkspace = r, this.logService = s, this._marker = `
`, this._markerCode1 = this._marker.charCodeAt(0), this._markerCode2 = 46, this.affectedKeys = /* @__PURE__ */ new Set(), this._previousConfiguration = void 0;
    for (const o of e.keys)
      this.affectedKeys.add(o);
    for (const [, o] of e.overrides)
      for (const a of o)
        this.affectedKeys.add(a);
    this._affectsConfigStr = this._marker;
    for (const o of this.affectedKeys)
      this._affectsConfigStr += o + this._marker;
  }
  get previousConfiguration() {
    return !this._previousConfiguration && this.previous && (this._previousConfiguration = L0.parse(this.previous.data, this.logService)), this._previousConfiguration;
  }
  affectsConfiguration(e, t) {
    var a;
    const n = this._marker + e, r = this._affectsConfigStr.indexOf(n);
    if (r < 0)
      return !1;
    const s = r + n.length;
    if (s >= this._affectsConfigStr.length)
      return !1;
    const o = this._affectsConfigStr.charCodeAt(s);
    if (o !== this._markerCode1 && o !== this._markerCode2)
      return !1;
    if (t) {
      const l = this.previousConfiguration ? this.previousConfiguration.getValue(e, t, (a = this.previous) == null ? void 0 : a.workspace) : void 0, c = this.currentConfiguraiton.getValue(e, t, this.currentWorkspace);
      return !un(l, c);
    }
    return !0;
  }
}
function ao(i, e) {
  const { added: t, removed: n, updated: r } = GI(e == null ? void 0 : e.rawConfiguration, i == null ? void 0 : i.rawConfiguration), s = [], o = (i == null ? void 0 : i.getAllOverrideIdentifiers()) || [], a = (e == null ? void 0 : e.getAllOverrideIdentifiers()) || [];
  if (e) {
    const l = a.filter((c) => !o.includes(c));
    for (const c of l)
      s.push([c, e.getKeysForOverrideIdentifier(c)]);
  }
  if (i) {
    const l = o.filter((c) => !a.includes(c));
    for (const c of l)
      s.push([c, i.getKeysForOverrideIdentifier(c)]);
  }
  if (e && i) {
    for (const l of o)
      if (a.includes(l)) {
        const c = GI({ contents: i.getOverrideValue(void 0, l) || {}, keys: i.getKeysForOverrideIdentifier(l) }, { contents: e.getOverrideValue(void 0, l) || {}, keys: e.getKeysForOverrideIdentifier(l) });
        s.push([l, [...c.added, ...c.removed, ...c.updated]]);
      }
  }
  return { added: t, removed: n, updated: r, overrides: s };
}
function GI(i, e) {
  const t = i ? e ? i.keys.filter((s) => e.keys.indexOf(s) === -1) : [...i.keys] : [], n = e ? i ? e.keys.filter((s) => i.keys.indexOf(s) === -1) : [...e.keys] : [], r = [];
  if (i && e) {
    for (const s of e.keys)
      if (i.keys.indexOf(s) !== -1) {
        const o = _m(e.contents, s), a = _m(i.contents, s);
        un(o, a) || r.push(s);
      }
  }
  return { added: t, removed: n, updated: r };
}
function Xp(i, e) {
  if (e) {
    const t = e.split(".");
    let n = i;
    for (let r = 0; n && r < t.length; r++)
      n = n[t[r]];
    return n;
  }
}
function KM(i) {
  return i instanceof x;
}
function JM(i) {
  return i && i.uri instanceof x && i.languageId && typeof i.languageId == "string";
}
function YM(i) {
  return i && !i.uri && i.languageId && typeof i.languageId == "string";
}
function XM(i) {
  return i && i.uri instanceof x && (!i.name || typeof i.name == "string") && (!i.index || typeof i.index == "number");
}
function QI(i) {
  if (KM(i))
    return { resource: i };
  if (JM(i))
    return { resource: i.uri, overrideIdentifier: i.languageId };
  if (YM(i))
    return { overrideIdentifier: i.languageId };
  if (XM(i))
    return { resource: i.uri };
  if (i === null)
    return { resource: null };
}
let N0 = class {
  constructor(e, t, n) {
    this._proxy = e.getProxy(ie.MainThreadConfiguration), this._extHostWorkspace = t, this._logService = n, this._barrier = new Jr(), this._actual = null;
  }
  getConfigProvider() {
    return this._barrier.wait().then((e) => this._actual);
  }
  $initializeConfiguration(e) {
    this._actual = new ZM(this._proxy, this._extHostWorkspace, e, this._logService), this._barrier.open();
  }
  $acceptConfigurationChanged(e, t) {
    this.getConfigProvider().then((n) => n.$acceptConfigurationChanged(e, t));
  }
};
N0 = z([
  O(0, tt),
  O(1, Zs),
  O(2, ot)
], N0);
class ZM {
  constructor(e, t, n, r) {
    this._onDidChangeConfiguration = new M(), this._proxy = e, this._logService = r, this._extHostWorkspace = t, this._configuration = L0.parse(n, r), this._configurationScopes = this._toMap(n.configurationScopes);
  }
  get onDidChangeConfiguration() {
    return this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;
  }
  $acceptConfigurationChanged(e, t) {
    const n = { data: this._configuration.toData(), workspace: this._extHostWorkspace.workspace };
    this._configuration = L0.parse(e, this._logService), this._configurationScopes = this._toMap(e.configurationScopes), this._onDidChangeConfiguration.fire(this._toConfigurationChangeEvent(t, n));
  }
  getConfiguration(e, t, n) {
    const r = QI(t) || {}, s = this._toReadonlyValue(this._configuration.getValue(e, r, this._extHostWorkspace.workspace));
    e && this._validateConfigurationAccess(e, r, n == null ? void 0 : n.identifier);
    function o(l) {
      if (l == null)
        return null;
      if (typeof l == "boolean")
        return l ? ri.USER : ri.WORKSPACE;
      switch (l) {
        case nu.Global:
          return ri.USER;
        case nu.Workspace:
          return ri.WORKSPACE;
        case nu.WorkspaceFolder:
          return ri.WORKSPACE_FOLDER;
      }
    }
    const a = {
      has(l) {
        return typeof Xp(s, l) < "u";
      },
      get: (l, c) => {
        this._validateConfigurationAccess(e ? `${e}.${l}` : l, r, n == null ? void 0 : n.identifier);
        let u = Xp(s, l);
        if (typeof u > "u")
          u = c;
        else {
          let d;
          const f = (p, v) => {
            if (ai(p)) {
              let _;
              const m = () => {
                d = d || St(s), _ = _ || Xp(d, v);
              };
              return new Proxy(p, {
                get: (E, S) => {
                  if (typeof S == "string" && S.toLowerCase() === "tojson")
                    return m(), () => _;
                  if (d)
                    return _ = _ || Xp(d, v), _[S];
                  const k = E[S];
                  return typeof S == "string" ? f(k, `${v}.${S}`) : k;
                },
                set: (E, S, k) => (m(), _ && (_[S] = k), !0),
                deleteProperty: (E, S) => (m(), _ && delete _[S], !0),
                defineProperty: (E, S, k) => (m(), _ && Object.defineProperty(_, S, k), !0)
              });
            }
            return Array.isArray(p) ? St(p) : p;
          };
          u = f(u, l);
        }
        return u;
      },
      update: (l, c, u, d) => {
        l = e ? `${e}.${l}` : l;
        const f = o(u);
        return c !== void 0 ? this._proxy.$updateConfigurationOption(f, l, c, r, d) : this._proxy.$removeConfigurationOption(f, l, r, d);
      },
      inspect: (l) => {
        var u, d, f, p, v, _, m, E, S, k, q, B, te, G, ae;
        l = e ? `${e}.${l}` : l;
        const c = this._configuration.inspect(l, r, this._extHostWorkspace.workspace);
        if (c)
          return {
            key: l,
            defaultValue: St(((u = c.policy) == null ? void 0 : u.value) ?? ((d = c.default) == null ? void 0 : d.value)),
            globalLocalValue: St((f = c.userLocal) == null ? void 0 : f.value),
            globalRemoteValue: St((p = c.userRemote) == null ? void 0 : p.value),
            globalValue: St(((v = c.user) == null ? void 0 : v.value) ?? ((_ = c.application) == null ? void 0 : _.value)),
            workspaceValue: St((m = c.workspace) == null ? void 0 : m.value),
            workspaceFolderValue: St((E = c.workspaceFolder) == null ? void 0 : E.value),
            defaultLanguageValue: St((S = c.default) == null ? void 0 : S.override),
            globalLocalLanguageValue: St((k = c.userLocal) == null ? void 0 : k.override),
            globalRemoteLanguageValue: St((q = c.userRemote) == null ? void 0 : q.override),
            globalLanguageValue: St(((B = c.user) == null ? void 0 : B.override) ?? ((te = c.application) == null ? void 0 : te.override)),
            workspaceLanguageValue: St((G = c.workspace) == null ? void 0 : G.override),
            workspaceFolderLanguageValue: St((ae = c.workspaceFolder) == null ? void 0 : ae.override),
            languageIds: St(c.overrideIdentifiers)
          };
      }
    };
    return typeof s == "object" && Fl(a, s, !1), Object.freeze(a);
  }
  _toReadonlyValue(e) {
    const t = (n) => ai(n) ? new Proxy(n, {
      get: (r, s) => t(r[s]),
      set: (r, s, o) => {
        throw new Error(
          `TypeError: Cannot assign to read only property '${String(s)}' of object`
        );
      },
      deleteProperty: (r, s) => {
        throw new Error(
          `TypeError: Cannot delete read only property '${String(s)}' of object`
        );
      },
      defineProperty: (r, s) => {
        throw new Error(
          `TypeError: Cannot define property '${String(s)}' for a readonly object`
        );
      },
      setPrototypeOf: (r) => {
        throw new Error("TypeError: Cannot set prototype for a readonly object");
      },
      isExtensible: () => !1,
      preventExtensions: () => !0
    }) : n;
    return t(e);
  }
  _validateConfigurationAccess(e, t, n) {
    const r = rs.test(e) ? Ut.RESOURCE : this._configurationScopes.get(e), s = n ? `[${n.value}] ` : "";
    if (Ut.RESOURCE === r) {
      typeof (t == null ? void 0 : t.resource) > "u" && this._logService.warn(`${s}Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${e}', provide the URI of a resource or 'null' for any resource.`);
      return;
    }
    if (Ut.WINDOW === r) {
      t != null && t.resource && this._logService.warn(`${s}Accessing a window scoped configuration for a resource is not expected. To associate '${e}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'.`);
      return;
    }
  }
  _toConfigurationChangeEvent(e, t) {
    const n = new QM(
      e,
      t,
      this._configuration,
      this._extHostWorkspace.workspace,
      this._logService
    );
    return Object.freeze({
      affectsConfiguration: (r, s) => n.affectsConfiguration(r, QI(s))
    });
  }
  _toMap(e) {
    return e.reduce((t, n) => (t.set(n[0], n[1]), t), /* @__PURE__ */ new Map());
  }
}
const eo = me("IExtHostConfiguration");
class eO {
  constructor(e, t) {
    this.versionId = e, this.removedDueToLooping = t;
  }
}
class xl extends xe {
  static isHostExtension(e, t, n) {
    if (t.getExtensionDescription(e))
      return !1;
    const r = n.getExtensionDescription(e);
    return r ? !!((r.main || r.browser) && r.api === "none") : !1;
  }
  constructor(e, t) {
    super(), this._activationEventsReader = e, this._onDidChange = this._register(new M()), this.onDidChange = this._onDidChange.event, this._versionId = 0, this._extensionDescriptions = t, this._initialize();
  }
  _initialize() {
    this._extensionDescriptions.sort(iO), this._extensionsMap = new Ko(), this._extensionsArr = [], this._activationMap = /* @__PURE__ */ new Map();
    for (const e of this._extensionDescriptions) {
      if (this._extensionsMap.has(e.identifier)) {
        console.error("Extension `" + e.identifier.value + "` is already registered");
        continue;
      }
      this._extensionsMap.set(e.identifier, e), this._extensionsArr.push(e);
      const t = this._activationEventsReader.readActivationEvents(e);
      for (const n of t)
        this._activationMap.has(n) || this._activationMap.set(n, []), this._activationMap.get(n).push(e);
    }
  }
  set(e) {
    return this._extensionDescriptions = e, this._initialize(), this._versionId++, this._onDidChange.fire(void 0), {
      versionId: this._versionId
    };
  }
  deltaExtensions(e, t) {
    this._extensionDescriptions = KI(this._extensionDescriptions, t), this._extensionDescriptions = this._extensionDescriptions.concat(e);
    const n = xl._findLoopingExtensions(this._extensionDescriptions);
    return this._extensionDescriptions = KI(this._extensionDescriptions, n.map((r) => r.identifier)), this._initialize(), this._versionId++, this._onDidChange.fire(void 0), new eO(this._versionId, n);
  }
  static _findLoopingExtensions(e) {
    const t = new class {
      constructor() {
        this._arcs = /* @__PURE__ */ new Map(), this._nodesSet = /* @__PURE__ */ new Set(), this._nodesArr = [];
      }
      addNode(a) {
        this._nodesSet.has(a) || (this._nodesSet.add(a), this._nodesArr.push(a));
      }
      addArc(a, l) {
        this.addNode(a), this.addNode(l), this._arcs.has(a) ? this._arcs.get(a).push(l) : this._arcs.set(a, [l]);
      }
      getArcs(a) {
        return this._arcs.has(a) ? this._arcs.get(a) : [];
      }
      hasOnlyGoodArcs(a, l) {
        const c = t.getArcs(a);
        for (let u = 0; u < c.length; u++)
          if (!l.has(c[u]))
            return !1;
        return !0;
      }
      getNodes() {
        return this._nodesArr;
      }
    }(), n = new Ko();
    for (const a of e)
      if (n.set(a.identifier, a), a.extensionDependencies)
        for (const l of a.extensionDependencies)
          t.addArc(gt.toKey(a.identifier), gt.toKey(l));
    const r = /* @__PURE__ */ new Set();
    t.getNodes().filter((a) => t.getArcs(a).length === 0).forEach((a) => r.add(a));
    const s = t.getNodes().filter((a) => !r.has(a));
    let o;
    do {
      o = !1;
      for (let a = 0; a < s.length; a++) {
        const l = s[a];
        t.hasOnlyGoodArcs(l, r) && (s.splice(a, 1), a--, r.add(l), o = !0);
      }
    } while (o);
    return s.map((a) => n.get(a));
  }
  containsActivationEvent(e) {
    return this._activationMap.has(e);
  }
  containsExtension(e) {
    return this._extensionsMap.has(e);
  }
  getExtensionDescriptionsForActivationEvent(e) {
    const t = this._activationMap.get(e);
    return t ? t.slice(0) : [];
  }
  getAllExtensionDescriptions() {
    return this._extensionsArr.slice(0);
  }
  getSnapshot() {
    return new tO(this._versionId, this.getAllExtensionDescriptions());
  }
  getExtensionDescription(e) {
    const t = this._extensionsMap.get(e);
    return t || void 0;
  }
  getExtensionDescriptionByUUID(e) {
    for (const t of this._extensionsArr)
      if (t.uuid === e)
        return t;
  }
  getExtensionDescriptionByIdOrUUID(e, t) {
    return this.getExtensionDescription(e) ?? (t ? this.getExtensionDescriptionByUUID(t) : void 0);
  }
}
class tO {
  constructor(e, t) {
    this.versionId = e, this.extensions = t;
  }
}
var mo;
(function(i) {
  i[i.Builtin = 0] = "Builtin", i[i.User = 1] = "User", i[i.Dev = 2] = "Dev";
})(mo || (mo = {}));
function iO(i, e) {
  const t = i.isBuiltin ? mo.Builtin : i.isUnderDevelopment ? mo.Dev : mo.User, n = e.isBuiltin ? mo.Builtin : e.isUnderDevelopment ? mo.Dev : mo.User;
  if (t !== n)
    return t - n;
  const r = pt.basename(i.extensionLocation.path), s = pt.basename(e.extensionLocation.path);
  return r < s ? -1 : r > s ? 1 : 0;
}
function KI(i, e) {
  const t = new Ql(e);
  return i.filter((n) => !t.has(n.identifier));
}
const R1 = class R1 {
  constructor(e, t, n, r) {
    this.startup = e, this.codeLoadingTime = t, this.activateCallTime = n, this.activateResolvedTime = r;
  }
};
R1.NONE = new R1(!1, -1, -1, -1);
let fd = R1;
class lw {
  constructor(e) {
    this._startup = e, this._codeLoadingStart = -1, this._codeLoadingStop = -1, this._activateCallStart = -1, this._activateCallStop = -1, this._activateResolveStart = -1, this._activateResolveStop = -1;
  }
  _delta(e, t) {
    return e === -1 || t === -1 ? -1 : t - e;
  }
  build() {
    return new fd(
      this._startup,
      this._delta(this._codeLoadingStart, this._codeLoadingStop),
      this._delta(this._activateCallStart, this._activateCallStop),
      this._delta(this._activateResolveStart, this._activateResolveStop)
    );
  }
  codeLoadingStart() {
    this._codeLoadingStart = Date.now();
  }
  codeLoadingStop() {
    this._codeLoadingStop = Date.now();
  }
  activateCallStart() {
    this._activateCallStart = Date.now();
  }
  activateCallStop() {
    this._activateCallStop = Date.now();
  }
  activateResolveStart() {
    this._activateResolveStart = Date.now();
  }
  activateResolveStop() {
    this._activateResolveStop = Date.now();
  }
}
class bv {
  constructor(e, t, n, r, s, o) {
    this.activationFailed = e, this.activationFailedError = t, this.activationTimes = n, this.module = r, this.exports = s, this.disposable = o;
  }
}
class nO extends bv {
  constructor(e) {
    super(!1, null, e, { activate: void 0, deactivate: void 0 }, void 0, xe.None);
  }
}
class rO extends bv {
  constructor() {
    super(!1, null, fd.NONE, { activate: void 0, deactivate: void 0 }, void 0, xe.None);
  }
}
class r1 extends bv {
  constructor(e) {
    super(!0, e, fd.NONE, { activate: void 0, deactivate: void 0 }, void 0, xe.None);
  }
}
let M0 = class {
  constructor(e, t, n, r) {
    this._logService = r, this._registry = e, this._globalRegistry = t, this._host = n, this._operations = new Ko(), this._alreadyActivatedEvents = /* @__PURE__ */ Object.create(null);
  }
  dispose() {
    for (const [e, t] of this._operations)
      t.dispose();
  }
  async waitForActivatingExtensions() {
    const e = [];
    for (const [t, n] of this._operations)
      e.push(n.wait());
    await Promise.all(e);
  }
  isActivated(e) {
    const t = this._operations.get(e);
    return !!(t && t.value);
  }
  getActivatedExtension(e) {
    const t = this._operations.get(e);
    if (!t || !t.value)
      throw new Error(`Extension '${e.value}' is not known or not activated`);
    return t.value;
  }
  async activateByEvent(e, t) {
    if (this._alreadyActivatedEvents[e])
      return;
    const n = this._registry.getExtensionDescriptionsForActivationEvent(e);
    await this._activateExtensions(n.map((r) => ({
      id: r.identifier,
      reason: { startup: t, extensionId: r.identifier, activationEvent: e }
    }))), this._alreadyActivatedEvents[e] = !0;
  }
  activateById(e, t) {
    const n = this._registry.getExtensionDescription(e);
    if (!n)
      throw new Error(`Extension '${e.value}' is not known`);
    return this._activateExtensions([{ id: n.identifier, reason: t }]);
  }
  async _activateExtensions(e) {
    const t = e.filter((n) => !this.isActivated(n.id)).map((n) => this._handleActivationRequest(n));
    await Promise.all(t.map((n) => n.wait()));
  }
  _handleActivationRequest(e) {
    if (this._operations.has(e.id))
      return this._operations.get(e.id);
    if (this._isHostExtension(e.id))
      return this._createAndSaveOperation(e, null, [], null);
    const t = this._registry.getExtensionDescription(e.id);
    if (!t) {
      const s = new Error(`Cannot activate unknown extension '${e.id.value}'`), o = this._createAndSaveOperation(e, null, [], new r1(s));
      return this._host.onExtensionActivationError(e.id, s, new dk(e.id.value)), o;
    }
    const n = [], r = typeof t.extensionDependencies > "u" ? [] : t.extensionDependencies;
    for (const s of r) {
      if (this._isResolvedExtension(s))
        continue;
      const o = this._operations.get(s);
      if (o) {
        n.push(o);
        continue;
      }
      if (this._isHostExtension(s)) {
        n.push(this._handleActivationRequest({
          id: this._globalRegistry.getExtensionDescription(s).identifier,
          reason: e.reason
        }));
        continue;
      }
      const a = this._registry.getExtensionDescription(s);
      if (a) {
        if (!a.main && !a.browser)
          continue;
        n.push(this._handleActivationRequest({
          id: a.identifier,
          reason: e.reason
        }));
        continue;
      }
      const l = t.displayName || t.identifier.value, c = new Error(
        `Cannot activate the '${l}' extension because it depends on unknown extension '${s}'`
      ), u = this._createAndSaveOperation(e, t.displayName, [], new r1(c));
      return this._host.onExtensionActivationError(t.identifier, c, new dk(s)), u;
    }
    return this._createAndSaveOperation(e, t.displayName, n, null);
  }
  _createAndSaveOperation(e, t, n, r) {
    const s = new O0(
      e.id,
      t,
      e.reason,
      n,
      r,
      this._host,
      this._logService
    );
    return this._operations.set(e.id, s), s;
  }
  _isHostExtension(e) {
    return xl.isHostExtension(e, this._registry, this._globalRegistry);
  }
  _isResolvedExtension(e) {
    const t = this._globalRegistry.getExtensionDescription(e);
    return t ? !t.main && !t.browser : !1;
  }
};
M0 = z([
  O(3, ot)
], M0);
let O0 = class {
  get value() {
    return this._value;
  }
  get friendlyName() {
    return this._displayName || this._id.value;
  }
  constructor(e, t, n, r, s, o, a) {
    this._id = e, this._displayName = t, this._reason = n, this._deps = r, this._value = s, this._host = o, this._logService = a, this._barrier = new Jr(), this._isDisposed = !1, this._initialize();
  }
  dispose() {
    this._isDisposed = !0;
  }
  wait() {
    return this._barrier.wait();
  }
  async _initialize() {
    await this._waitForDepsThenActivate(), this._barrier.open();
  }
  async _waitForDepsThenActivate() {
    if (!this._value) {
      for (; this._deps.length > 0; ) {
        for (let e = 0; e < this._deps.length; e++) {
          const t = this._deps[e];
          if (t.value && !t.value.activationFailed) {
            this._deps.splice(e, 1), e--;
            continue;
          }
          if (t.value && t.value.activationFailed) {
            const n = new Error(
              `Cannot activate the '${this.friendlyName}' extension because its dependency '${t.friendlyName}' failed to activate`
            );
            n.detail = t.value.activationFailedError, this._value = new r1(n), this._host.onExtensionActivationError(this._id, n, null);
            return;
          }
        }
        this._deps.length > 0 && await Promise.race(this._deps.map((e) => e.wait()));
      }
      await this._activate();
    }
  }
  async _activate() {
    try {
      this._value = await this._host.actualActivateExtension(this._id, this._reason);
    } catch (e) {
      const t = new Error();
      if (e && e.name && (t.name = e.name), e && e.message ? t.message = `Activating extension '${this._id.value}' failed: ${e.message}.` : t.message = `Activating extension '${this._id.value}' failed: ${e}.`, e && e.stack && (t.stack = e.stack), this._value = new r1(t), this._isDisposed && cs(e))
        return;
      this._host.onExtensionActivationError(this._id, t, null), this._logService.error(`Activating extension ${this._id.value} failed due to an error:`), this._logService.error(e);
    }
  }
};
O0 = z([
  O(6, ot)
], O0);
class pA {
  constructor(e, t) {
    this._logService = t, this._onDidChangeStorage = new M(), this.onDidChangeStorage = this._onDidChangeStorage.event, this._proxy = e.getProxy(ie.MainThreadStorage);
  }
  registerExtensionStorageKeysToSync(e, t) {
    this._proxy.$registerExtensionStorageKeysToSync(e, t);
  }
  async initializeExtensionStorage(e, t, n) {
    const r = await this._proxy.$initializeExtensionStorage(e, t);
    let s;
    return r && (s = this.safeParseValue(e, t, r)), s || n;
  }
  setValue(e, t, n) {
    return this._proxy.$setValue(e, t, n);
  }
  $acceptValue(e, t, n) {
    const r = this.safeParseValue(e, t, n);
    r && this._onDidChangeStorage.fire({ shared: e, key: t, value: r });
  }
  safeParseValue(e, t, n) {
    try {
      return JSON.parse(n);
    } catch (r) {
      this._logService.error(`[extHostStorage] unexpected error parsing storage contents (extensionId: ${t}, global: ${e}): ${r}`);
    }
  }
}
const PS = me("IExtHostStorage");
class gA {
  constructor(e, t, n) {
    this._deferredPromises = /* @__PURE__ */ new Map(), this._id = e, this._shared = t, this._storage = n, this._init = this._storage.initializeExtensionStorage(this._shared, this._id, /* @__PURE__ */ Object.create(null)).then((r) => (this._value = r, this)), this._storageListener = this._storage.onDidChangeStorage((r) => {
      r.shared === this._shared && r.key === this._id && (this._value = r.value);
    }), this._scheduler = new Gl(() => {
      const r = this._deferredPromises;
      this._deferredPromises = /* @__PURE__ */ new Map(), (async () => {
        try {
          await this._storage.setValue(this._shared, this._id, this._value);
          for (const s of r.values())
            s.complete();
        } catch (s) {
          for (const o of r.values())
            o.error(s);
        }
      })();
    }, 0);
  }
  keys() {
    return Object.entries(this._value ?? {}).filter(([, e]) => e !== void 0).map(([e]) => e);
  }
  get whenReady() {
    return this._init;
  }
  get(e, t) {
    let n = this._value[e];
    return typeof n > "u" && (n = t), n;
  }
  update(e, t) {
    t !== null && typeof t == "object" ? this._value[e] = JSON.parse(JSON.stringify(t)) : this._value[e] = t;
    const n = this._deferredPromises.get(e);
    if (n !== void 0)
      return n.p;
    const r = new Qo();
    return this._deferredPromises.set(e, r), this._scheduler.isScheduled() || this._scheduler.schedule(), r.p;
  }
  dispose() {
    this._storageListener.dispose();
  }
}
class sO extends gA {
  setKeysForSync(e) {
    this._storage.registerExtensionStorageKeysToSync({ id: this._id, version: this._extension.version }, e);
  }
  constructor(e, t) {
    super(e.identifier.value, !0, t), this._extension = e;
  }
}
var Mr;
let F0 = Mr = class {
  constructor(e, t) {
    this._fileSystemProvider = /* @__PURE__ */ new Map(), this._writeQueue = new IL(), this._proxy = e.getProxy(ie.MainThreadFileSystem);
    const n = this;
    this.value = Object.freeze({
      async stat(r) {
        try {
          let s;
          const o = n._fileSystemProvider.get(r.scheme);
          return o ? (await n._proxy.$ensureActivation(r.scheme), s = await o.impl.stat(r)) : s = await n._proxy.$stat(r), {
            type: s.type,
            ctime: s.ctime,
            mtime: s.mtime,
            size: s.size,
            permissions: s.permissions === Hu.Readonly ? 1 : void 0
          };
        } catch (s) {
          Mr._handleError(s);
        }
      },
      async readDirectory(r) {
        try {
          const s = n._fileSystemProvider.get(r.scheme);
          return s ? (await n._proxy.$ensureActivation(r.scheme), (await s.impl.readDirectory(r)).slice()) : await n._proxy.$readdir(r);
        } catch (s) {
          return Mr._handleError(s);
        }
      },
      async createDirectory(r) {
        try {
          const s = n._fileSystemProvider.get(r.scheme);
          return s && !s.isReadonly ? (await n._proxy.$ensureActivation(r.scheme), await n.mkdirp(s.impl, s.extUri, r)) : await n._proxy.$mkdir(r);
        } catch (s) {
          return Mr._handleError(s);
        }
      },
      async readFile(r) {
        try {
          const s = n._fileSystemProvider.get(r.scheme);
          return s ? (await n._proxy.$ensureActivation(r.scheme), (await s.impl.readFile(r)).slice()) : (await n._proxy.$readFile(r)).buffer;
        } catch (s) {
          return Mr._handleError(s);
        }
      },
      async writeFile(r, s) {
        try {
          const o = n._fileSystemProvider.get(r.scheme);
          return o && !o.isReadonly ? (await n._proxy.$ensureActivation(r.scheme), await n.mkdirp(o.impl, o.extUri, o.extUri.dirname(r)), await n._writeQueue.queueFor(r, () => Promise.resolve(o.impl.writeFile(r, s, { create: !0, overwrite: !0 })))) : await n._proxy.$writeFile(r, he.wrap(s));
        } catch (o) {
          return Mr._handleError(o);
        }
      },
      async delete(r, s) {
        try {
          const o = n._fileSystemProvider.get(r.scheme);
          return o && !o.isReadonly && !(s != null && s.useTrash) ? (await n._proxy.$ensureActivation(r.scheme), await o.impl.delete(r, { recursive: !1, ...s })) : await n._proxy.$delete(r, { recursive: !1, useTrash: !1, atomic: !1, ...s });
        } catch (o) {
          return Mr._handleError(o);
        }
      },
      async rename(r, s, o) {
        try {
          return await n._proxy.$rename(r, s, { overwrite: !1, ...o });
        } catch (a) {
          return Mr._handleError(a);
        }
      },
      async copy(r, s, o) {
        try {
          return await n._proxy.$copy(r, s, { overwrite: !1, ...o });
        } catch (a) {
          return Mr._handleError(a);
        }
      },
      isWritableFileSystem(r) {
        const s = t.getCapabilities(r);
        if (typeof s == "number")
          return !(s & zr.Readonly);
      }
    });
  }
  async mkdirp(e, t, n) {
    const r = [];
    for (; !t.isEqual(n, t.dirname(n)); )
      try {
        if (((await e.stat(n)).type & cl.Directory) === 0)
          throw fi.FileExists(`Unable to create folder '${n.scheme === fe.file ? n.fsPath : n.toString(!0)}' that already exists but is not a directory`);
        break;
      } catch (s) {
        if (em(s) !== Ue.FileNotFound)
          throw s;
        r.push(t.basename(n)), n = t.dirname(n);
      }
    for (let s = r.length - 1; s >= 0; s--) {
      n = t.joinPath(n, r[s]);
      try {
        await e.createDirectory(n);
      } catch (o) {
        if (em(o) !== Ue.FileExists)
          throw o;
      }
    }
  }
  static _handleError(e) {
    if (e instanceof fi)
      throw e;
    if (e instanceof tv)
      switch (e.code) {
        case Ue.FileExists:
          throw fi.FileExists(e.message);
        case Ue.FileNotFound:
          throw fi.FileNotFound(e.message);
        case Ue.FileNotADirectory:
          throw fi.FileNotADirectory(e.message);
        case Ue.FileIsADirectory:
          throw fi.FileIsADirectory(e.message);
        case Ue.NoPermissions:
          throw fi.NoPermissions(e.message);
        case Ue.Unavailable:
          throw fi.Unavailable(e.message);
        default:
          throw new fi(e.message, e.name);
      }
    if (!(e instanceof Error))
      throw new fi(String(e));
    if (e.name === "ENOPRO" || e.message.includes("ENOPRO"))
      throw fi.Unavailable(e.message);
    switch (e.name) {
      case Ue.FileExists:
        throw fi.FileExists(e.message);
      case Ue.FileNotFound:
        throw fi.FileNotFound(e.message);
      case Ue.FileNotADirectory:
        throw fi.FileNotADirectory(e.message);
      case Ue.FileIsADirectory:
        throw fi.FileIsADirectory(e.message);
      case Ue.NoPermissions:
        throw fi.NoPermissions(e.message);
      case Ue.Unavailable:
        throw fi.Unavailable(e.message);
      default:
        throw new fi(e.message, e.name);
    }
  }
  addFileSystemProvider(e, t, n) {
    return this._fileSystemProvider.set(e, { impl: t, extUri: n != null && n.isCaseSensitive ? ct : dL, isReadonly: !!(n != null && n.isReadonly) }), Ie(() => this._fileSystemProvider.delete(e));
  }
  getFileSystemProviderExtUri(e) {
    var t;
    return ((t = this._fileSystemProvider.get(e)) == null ? void 0 : t.extUri) ?? ct;
  }
};
F0 = Mr = z([
  O(0, tt),
  O(1, md)
], F0);
const yv = me("IExtHostConsumerFileSystem"), AS = me("IExtensionStoragePaths");
let U0 = class {
  constructor(e, t, n) {
    this._logService = t, this._extHostFileSystem = n, this._workspace = e.workspace ?? void 0, this._environment = e.environment, this.whenReady = this._getOrCreateWorkspaceStoragePath().then((r) => this._value = r);
  }
  async _getWorkspaceStorageURI(e) {
    return x.joinPath(this._environment.workspaceStorageHome, e);
  }
  async _getOrCreateWorkspaceStoragePath() {
    var n;
    if (!this._workspace)
      return Promise.resolve(void 0);
    const e = this._workspace.id, t = await this._getWorkspaceStorageURI(e);
    try {
      return await this._extHostFileSystem.value.stat(t), this._logService.trace("[ExtHostStorage] storage dir already exists", t), t;
    } catch {
    }
    try {
      return this._logService.trace("[ExtHostStorage] creating dir and metadata-file", t), await this._extHostFileSystem.value.createDirectory(t), await this._extHostFileSystem.value.writeFile(x.joinPath(t, "meta.json"), new TextEncoder().encode(JSON.stringify({
        id: this._workspace.id,
        configuration: (n = x.revive(this._workspace.configuration)) == null ? void 0 : n.toString(),
        name: this._workspace.name
      }, void 0, 2))), t;
    } catch (r) {
      this._logService.error("[ExtHostStorage]", r);
      return;
    }
  }
  workspaceValue(e) {
    if (this._value)
      return x.joinPath(this._value, e.identifier.value);
  }
  globalValue(e) {
    return x.joinPath(this._environment.globalStorageHome, e.identifier.value.toLowerCase());
  }
  onWillDeactivateAll() {
  }
};
U0 = z([
  O(0, _i),
  O(1, ot),
  O(2, yv)
], U0);
const xv = me("configurationService");
var JI;
(function(i) {
  i.Http = "http", i.Https = "https";
})(JI || (JI = {}));
var Wa;
(function(i) {
  i.ConstantPrivate = "constantPrivate", i.Private = "private", i.Public = "public";
})(Wa || (Wa = {}));
var YI;
(function(i) {
  i[i.Notify = 1] = "Notify", i[i.OpenBrowser = 2] = "OpenBrowser", i[i.OpenPreview = 3] = "OpenPreview", i[i.Silent = 4] = "Silent", i[i.Ignore = 5] = "Ignore", i[i.OpenBrowserOnce = 6] = "OpenBrowserOnce";
})(YI || (YI = {}));
function oO(i) {
  if (i.scheme !== "http" && i.scheme !== "https")
    return;
  const e = /^(localhost|127\.0\.0\.1|0\.0\.0\.0):(\d+)$/.exec(i.authority);
  if (e)
    return {
      address: e[1],
      port: +e[2]
    };
}
const $0 = ["localhost", "127.0.0.1", "0:0:0:0:0:0:0:1", "::1"];
function XI(i) {
  return $0.indexOf(i) >= 0;
}
const H0 = ["0.0.0.0", "0:0:0:0:0:0:0:0", "::"];
function ZI(i) {
  return H0.indexOf(i) >= 0;
}
class aO {
  constructor(e, t, n) {
    this.remoteAddress = e, this.localAddress = t, this._dispose = n, this._onDispose = new M(), this.onDidDispose = this._onDispose.event;
  }
  dispose() {
    return this._onDispose.fire(), this._dispose();
  }
}
let eC = class extends xe {
  constructor(e, t) {
    super(), this.logService = e, this.configurationService = t, this._onTunnelOpened = new M(), this.onTunnelOpened = this._onTunnelOpened.event, this._onTunnelClosed = new M(), this.onTunnelClosed = this._onTunnelClosed.event, this._onAddedTunnelProvider = new M(), this.onAddedTunnelProvider = this._onAddedTunnelProvider.event, this._tunnels = /* @__PURE__ */ new Map(), this._canElevate = !1, this._canChangeProtocol = !0, this._privacyOptions = [], this._factoryInProgress = /* @__PURE__ */ new Set();
  }
  get hasTunnelProvider() {
    return !!this._tunnelProvider;
  }
  get defaultTunnelHost() {
    const e = this.configurationService.getValue("remote.localPortHost");
    return !e || e === "localhost" ? "127.0.0.1" : "0.0.0.0";
  }
  setTunnelProvider(e) {
    return this._tunnelProvider = e, e ? (this._onAddedTunnelProvider.fire(), {
      dispose: () => {
        this._tunnelProvider = void 0, this._canElevate = !1, this._privacyOptions = [];
      }
    }) : (this._canElevate = !1, this._privacyOptions = [], this._onAddedTunnelProvider.fire(), {
      dispose: () => {
      }
    });
  }
  setTunnelFeatures(e) {
    this._canElevate = e.elevation, this._privacyOptions = e.privacyOptions, this._canChangeProtocol = e.protocol;
  }
  get canChangeProtocol() {
    return this._canChangeProtocol;
  }
  get canElevate() {
    return this._canElevate;
  }
  get canChangePrivacy() {
    return this._privacyOptions.length > 0;
  }
  get privacyOptions() {
    return this._privacyOptions;
  }
  get tunnels() {
    return this.getTunnels();
  }
  async getTunnels() {
    const e = [], t = Array.from(this._tunnels.values());
    for (const n of t) {
      const r = Array.from(n.values());
      for (const s of r) {
        const o = await s.value;
        o && typeof o != "string" && e.push(o);
      }
    }
    return e;
  }
  async dispose() {
    super.dispose();
    for (const e of this._tunnels.values()) {
      for (const { value: t } of e.values())
        await t.then((n) => typeof n != "string" ? n == null ? void 0 : n.dispose() : void 0);
      e.clear();
    }
    this._tunnels.clear();
  }
  setEnvironmentTunnel(e, t, n, r, s) {
    this.addTunnelToMap(e, t, Promise.resolve({
      tunnelRemoteHost: e,
      tunnelRemotePort: t,
      localAddress: n,
      privacy: r,
      protocol: s,
      dispose: () => Promise.resolve()
    }));
  }
  async getExistingTunnel(e, t) {
    (ZI(e) || XI(e)) && (e = $0[0]);
    const n = this.getTunnelFromMap(e, t);
    if (n)
      return ++n.refcount, n.value;
  }
  openTunnel(e, t, n, r, s, o = !1, a, l) {
    this.logService.trace(`ForwardedPorts: (TunnelService) openTunnel request for ${t}:${n} on local port ${s}.`);
    const c = this._tunnelProvider ?? e;
    if (!c)
      return;
    if (t || (t = "localhost"), r || (r = this.defaultTunnelHost), this._tunnelProvider && this._factoryInProgress.has(n)) {
      this.logService.debug("ForwardedPorts: (TunnelService) Another call to create a tunnel with the same address has occurred before the last one completed. This call will be ignored.");
      return;
    }
    const u = this.retainOrCreateTunnel(c, t, n, r, s, o, a, l);
    return u ? u.then((d) => {
      if (d) {
        if (typeof d == "string")
          return this.logService.trace("ForwardedPorts: (TunnelService) The tunnel provider returned an error when creating the tunnel."), this.removeEmptyOrErrorTunnelFromMap(t, n), d;
      } else {
        this.logService.trace("ForwardedPorts: (TunnelService) New tunnel is undefined."), this.removeEmptyOrErrorTunnelFromMap(t, n);
        return;
      }
      this.logService.trace("ForwardedPorts: (TunnelService) New tunnel established.");
      const f = this.makeTunnel(d);
      return (d.tunnelRemoteHost !== t || d.tunnelRemotePort !== n) && this.logService.warn("ForwardedPorts: (TunnelService) Created tunnel does not match requirements of requested tunnel. Host or port mismatch."), a && d.privacy !== a && this.logService.warn("ForwardedPorts: (TunnelService) Created tunnel does not match requirements of requested tunnel. Privacy mismatch."), this._onTunnelOpened.fire(f), f;
    }) : (this.logService.trace("ForwardedPorts: (TunnelService) Tunnel was not created."), u);
  }
  makeTunnel(e) {
    return {
      tunnelRemotePort: e.tunnelRemotePort,
      tunnelRemoteHost: e.tunnelRemoteHost,
      tunnelLocalPort: e.tunnelLocalPort,
      localAddress: e.localAddress,
      privacy: e.privacy,
      protocol: e.protocol,
      dispose: async () => {
        this.logService.trace(`ForwardedPorts: (TunnelService) dispose request for ${e.tunnelRemoteHost}:${e.tunnelRemotePort} `);
        const t = this._tunnels.get(e.tunnelRemoteHost);
        if (t) {
          const n = t.get(e.tunnelRemotePort);
          n && (n.refcount--, await this.tryDisposeTunnel(e.tunnelRemoteHost, e.tunnelRemotePort, n));
        }
      }
    };
  }
  async tryDisposeTunnel(e, t, n) {
    if (n.refcount <= 0) {
      this.logService.trace(`ForwardedPorts: (TunnelService) Tunnel is being disposed ${e}:${t}.`);
      const r = n.value.then(async (s) => {
        s && typeof s != "string" && (await s.dispose(!0), this._onTunnelClosed.fire({ host: s.tunnelRemoteHost, port: s.tunnelRemotePort }));
      });
      return this._tunnels.has(e) && this._tunnels.get(e).delete(t), r;
    }
  }
  async closeTunnel(e, t) {
    this.logService.trace(`ForwardedPorts: (TunnelService) close request for ${e}:${t} `);
    const n = this._tunnels.get(e);
    if (n && n.has(t)) {
      const r = n.get(t);
      r.refcount = 0, await this.tryDisposeTunnel(e, t, r);
    }
  }
  addTunnelToMap(e, t, n) {
    this._tunnels.has(e) || this._tunnels.set(e, /* @__PURE__ */ new Map()), this._tunnels.get(e).set(t, { refcount: 1, value: n });
  }
  async removeEmptyOrErrorTunnelFromMap(e, t) {
    const n = this._tunnels.get(e);
    if (n) {
      const r = n.get(t), s = r ? await r.value : void 0;
      (!s || typeof s == "string") && n.delete(t), n.size === 0 && this._tunnels.delete(e);
    }
  }
  getTunnelFromMap(e, t) {
    const n = [e];
    XI(e) ? (n.push(...$0), n.push(...H0)) : ZI(e) && n.push(...H0);
    const r = n.map((s) => this._tunnels.get(s));
    for (const s of r) {
      const o = s == null ? void 0 : s.get(t);
      if (o)
        return o;
    }
  }
  canTunnel(e) {
    return !!oO(e);
  }
  createWithProvider(e, t, n, r, s, o, a) {
    this.logService.trace(`ForwardedPorts: (TunnelService) Creating tunnel with provider ${t}:${n} on local port ${r}.`);
    const l = n;
    this._factoryInProgress.add(l);
    const c = r === void 0 ? n : r, u = { elevationRequired: s ? this.isPortPrivileged(c) : !1 }, d = { remoteAddress: { host: t, port: n }, localAddressPort: r, privacy: o, public: o ? o !== Wa.Private : void 0, protocol: a }, f = e.forwardPort(d, u);
    return f ? (this.addTunnelToMap(t, n, f), f.finally(() => {
      this.logService.trace("ForwardedPorts: (TunnelService) Tunnel created by provider."), this._factoryInProgress.delete(l);
    })) : this._factoryInProgress.delete(l), f;
  }
};
eC = z([
  O(0, ot),
  O(1, xv)
], eC);
class lO extends aO {
}
var B0;
(function(i) {
  function e(n) {
    return {
      remoteAddress: n.remoteAddress,
      localAddress: n.localAddress,
      public: !!n.public,
      privacy: n.privacy ?? (n.public ? Wa.Public : Wa.Private),
      protocol: n.protocol
    };
  }
  i.fromApiTunnel = e;
  function t(n) {
    return {
      remoteAddress: {
        host: n.tunnelRemoteHost,
        port: n.tunnelRemotePort
      },
      localAddress: n.localAddress,
      public: n.privacy !== Wa.ConstantPrivate && n.privacy !== Wa.ConstantPrivate,
      privacy: n.privacy,
      protocol: n.protocol
    };
  }
  i.fromServiceTunnel = t;
})(B0 || (B0 = {}));
const RS = me("IExtHostTunnelService");
let W0 = class extends xe {
  constructor(e, t, n) {
    super(), this.logService = n, this._showCandidatePort = () => Promise.resolve(!0), this._extensionTunnels = /* @__PURE__ */ new Map(), this._onDidChangeTunnels = new M(), this.onDidChangeTunnels = this._onDidChangeTunnels.event, this._providerHandleCounter = 0, this._portAttributesProviders = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadTunnelService);
  }
  async openTunnel(e, t) {
    this.logService.trace(`ForwardedPorts: (ExtHostTunnelService) ${e.identifier.value} called openTunnel API for ${t.remoteAddress.host}:${t.remoteAddress.port}.`);
    const n = await this._proxy.$openTunnel(t, e.displayName);
    if (n) {
      const r = new lO(n.remoteAddress, n.localAddress, () => this._proxy.$closeTunnel(n.remoteAddress));
      return this._register(r), r;
    }
  }
  async getTunnels() {
    return this._proxy.$getTunnels();
  }
  nextPortAttributesProviderHandle() {
    return this._providerHandleCounter++;
  }
  registerPortsAttributesProvider(e, t) {
    e.portRange === void 0 && e.commandPattern === void 0 && this.logService.error("PortAttributesProvider must specify either a portRange or a commandPattern");
    const n = this.nextPortAttributesProviderHandle();
    return this._portAttributesProviders.set(n, { selector: e, provider: t }), this._proxy.$registerPortsAttributesProvider(e, n), new je(() => {
      this._portAttributesProviders.delete(n), this._proxy.$unregisterPortsAttributesProvider(n);
    });
  }
  async $providePortAttributes(e, t, n, r, s) {
    const o = [];
    for (const l of e) {
      const c = this._portAttributesProviders.get(l);
      if (!c)
        return [];
      o.push(...await Promise.all(t.map(async (u) => {
        let d;
        try {
          d = await c.provider.providePortAttributes({ port: u, pid: n, commandLine: r }, s);
        } catch {
          d = await c.provider.providePortAttributes(u, n, r, s);
        }
        return { providedAttributes: d, port: u };
      })));
    }
    const a = o.filter((l) => !!l.providedAttributes);
    return a.length > 0 ? a.map((l) => ({
      autoForwardAction: l.providedAttributes.autoForwardAction,
      port: l.port
    })) : [];
  }
  async $registerCandidateFinder(e) {
  }
  registerTunnelProvider(e, t) {
    var r, s;
    if (this._forwardPortProvider)
      throw new Error(
        "A tunnel provider has already been registered. Only the first tunnel provider to be registered will be used."
      );
    this._forwardPortProvider = async (o, a) => await e.provideTunnel(o, a, Dt.None) ?? void 0;
    const n = t.tunnelFeatures ? {
      elevation: !!((r = t.tunnelFeatures) != null && r.elevation),
      privacyOptions: (s = t.tunnelFeatures) == null ? void 0 : s.privacyOptions,
      protocol: t.tunnelFeatures.protocol === void 0 ? !0 : t.tunnelFeatures.protocol
    } : void 0;
    return this._proxy.$setTunnelProvider(n, !0), Promise.resolve(Ie(() => {
      this._forwardPortProvider = void 0, this._proxy.$setTunnelProvider(void 0, !1);
    }));
  }
  async setTunnelFactory(e, t) {
    var n, r, s, o;
    if (e) {
      e.candidatePortSource !== void 0 && this._proxy.$setCandidatePortSource(e.candidatePortSource), e.showCandidatePort && (this._showCandidatePort = e.showCandidatePort, this._proxy.$setCandidateFilter());
      const a = e.tunnelFactory ?? (t ? this.makeManagedTunnelFactory(t) : void 0);
      if (a) {
        this._forwardPortProvider = a;
        let l = ((n = e.tunnelFeatures) == null ? void 0 : n.privacyOptions) ?? [];
        (r = e.tunnelFeatures) != null && r.public && l.length === 0 && (l = [
          {
            id: "private",
            label: h(2638, "Private"),
            themeIcon: "lock"
          },
          {
            id: "public",
            label: h(2639, "Public"),
            themeIcon: "eye"
          }
        ]);
        const c = e.tunnelFeatures ? {
          elevation: !!((s = e.tunnelFeatures) != null && s.elevation),
          public: !!((o = e.tunnelFeatures) != null && o.public),
          privacyOptions: l,
          protocol: !0
        } : void 0;
        this._proxy.$setTunnelProvider(c, !!e.tunnelFactory);
      }
    } else
      this._forwardPortProvider = void 0;
    return Ie(() => {
      this._forwardPortProvider = void 0;
    });
  }
  makeManagedTunnelFactory(e) {
  }
  async $closeTunnel(e, t) {
    if (this._extensionTunnels.has(e.host)) {
      const n = this._extensionTunnels.get(e.host);
      n.has(e.port) && (t && n.get(e.port).disposeListener.dispose(), await n.get(e.port).tunnel.dispose(), n.delete(e.port));
    }
  }
  async $onDidTunnelsChange() {
    this._onDidChangeTunnels.fire();
  }
  async $forwardPort(e, t) {
    if (this._forwardPortProvider)
      try {
        this.logService.trace("ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.");
        const n = this._forwardPortProvider(e, t);
        if (this.logService.trace("ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider."), n !== void 0) {
          const r = await n;
          if (this.logService.trace("ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider."), r === void 0) {
            this.logService.error("ForwardedPorts: (ExtHostTunnelService) Resolved tunnel is undefined");
            return;
          }
          this._extensionTunnels.has(e.remoteAddress.host) || this._extensionTunnels.set(e.remoteAddress.host, /* @__PURE__ */ new Map());
          const s = this._register(r.onDidDispose(() => (this.logService.trace("ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel's onDidDispose."), this._proxy.$closeTunnel(r.remoteAddress))));
          return this._extensionTunnels.get(e.remoteAddress.host).set(e.remoteAddress.port, { tunnel: r, disposeListener: s }), B0.fromApiTunnel(r);
        } else
          this.logService.trace("ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined");
      } catch (n) {
        if (this.logService.trace("ForwardedPorts: (ExtHostTunnelService) tunnel provider error"), n instanceof Error)
          return n.message;
      }
  }
  async $applyCandidateFilter(e) {
    const t = await Promise.all(e.map(
      (r) => this._showCandidatePort(r.host, r.port, r.detail ?? "")
    )), n = e.filter((r, s) => t[s]);
    return this.logService.trace(`ForwardedPorts: (ExtHostTunnelService) filtered from ${e.map((r) => r.port).join(", ")} to ${n.map((r) => r.port).join(", ")}`), n;
  }
};
W0 = z([
  O(0, tt),
  O(1, _i),
  O(2, ot)
], W0);
function cO(i) {
  return [...i.entries()];
}
function uO(i) {
  return i ? [...i.entries()] : [];
}
var tC;
(function(i) {
  i.AutomationProfile = "terminal.integrated.automationProfile.", i.DefaultProfile = "terminal.integrated.defaultProfile.", i.Profiles = "terminal.integrated.profiles.";
})(tC || (tC = {}));
var iC;
(function(i) {
  i.SendKeybindingsToShell = "terminal.integrated.sendKeybindingsToShell", i.AutomationProfileLinux = "terminal.integrated.automationProfile.linux", i.AutomationProfileMacOs = "terminal.integrated.automationProfile.osx", i.AutomationProfileWindows = "terminal.integrated.automationProfile.windows", i.ProfilesWindows = "terminal.integrated.profiles.windows", i.ProfilesMacOs = "terminal.integrated.profiles.osx", i.ProfilesLinux = "terminal.integrated.profiles.linux", i.DefaultProfileLinux = "terminal.integrated.defaultProfile.linux", i.DefaultProfileMacOs = "terminal.integrated.defaultProfile.osx", i.DefaultProfileWindows = "terminal.integrated.defaultProfile.windows", i.UseWslProfiles = "terminal.integrated.useWslProfiles", i.TabsDefaultColor = "terminal.integrated.tabs.defaultColor", i.TabsDefaultIcon = "terminal.integrated.tabs.defaultIcon", i.TabsEnabled = "terminal.integrated.tabs.enabled", i.TabsEnableAnimation = "terminal.integrated.tabs.enableAnimation", i.TabsHideCondition = "terminal.integrated.tabs.hideCondition", i.TabsShowActiveTerminal = "terminal.integrated.tabs.showActiveTerminal", i.TabsShowActions = "terminal.integrated.tabs.showActions", i.TabsLocation = "terminal.integrated.tabs.location", i.TabsFocusMode = "terminal.integrated.tabs.focusMode", i.MacOptionIsMeta = "terminal.integrated.macOptionIsMeta", i.MacOptionClickForcesSelection = "terminal.integrated.macOptionClickForcesSelection", i.AltClickMovesCursor = "terminal.integrated.altClickMovesCursor", i.CopyOnSelection = "terminal.integrated.copyOnSelection", i.EnableMultiLinePasteWarning = "terminal.integrated.enableMultiLinePasteWarning", i.DrawBoldTextInBrightColors = "terminal.integrated.drawBoldTextInBrightColors", i.FontFamily = "terminal.integrated.fontFamily", i.FontSize = "terminal.integrated.fontSize", i.LetterSpacing = "terminal.integrated.letterSpacing", i.LineHeight = "terminal.integrated.lineHeight", i.MinimumContrastRatio = "terminal.integrated.minimumContrastRatio", i.TabStopWidth = "terminal.integrated.tabStopWidth", i.FastScrollSensitivity = "terminal.integrated.fastScrollSensitivity", i.MouseWheelScrollSensitivity = "terminal.integrated.mouseWheelScrollSensitivity", i.BellDuration = "terminal.integrated.bellDuration", i.FontWeight = "terminal.integrated.fontWeight", i.FontWeightBold = "terminal.integrated.fontWeightBold", i.CursorBlinking = "terminal.integrated.cursorBlinking", i.CursorStyle = "terminal.integrated.cursorStyle", i.CursorStyleInactive = "terminal.integrated.cursorStyleInactive", i.CursorWidth = "terminal.integrated.cursorWidth", i.Scrollback = "terminal.integrated.scrollback", i.DetectLocale = "terminal.integrated.detectLocale", i.DefaultLocation = "terminal.integrated.defaultLocation", i.GpuAcceleration = "terminal.integrated.gpuAcceleration", i.TerminalTitleSeparator = "terminal.integrated.tabs.separator", i.TerminalTitle = "terminal.integrated.tabs.title", i.TerminalDescription = "terminal.integrated.tabs.description", i.RightClickBehavior = "terminal.integrated.rightClickBehavior", i.MiddleClickBehavior = "terminal.integrated.middleClickBehavior", i.Cwd = "terminal.integrated.cwd", i.ConfirmOnExit = "terminal.integrated.confirmOnExit", i.ConfirmOnKill = "terminal.integrated.confirmOnKill", i.EnableBell = "terminal.integrated.enableBell", i.EnableVisualBell = "terminal.integrated.enableVisualBell", i.CommandsToSkipShell = "terminal.integrated.commandsToSkipShell", i.AllowChords = "terminal.integrated.allowChords", i.AllowMnemonics = "terminal.integrated.allowMnemonics", i.TabFocusMode = "terminal.integrated.tabFocusMode", i.EnvMacOs = "terminal.integrated.env.osx", i.EnvLinux = "terminal.integrated.env.linux", i.EnvWindows = "terminal.integrated.env.windows", i.EnvironmentChangesIndicator = "terminal.integrated.environmentChangesIndicator", i.EnvironmentChangesRelaunch = "terminal.integrated.environmentChangesRelaunch", i.ShowExitAlert = "terminal.integrated.showExitAlert", i.SplitCwd = "terminal.integrated.splitCwd", i.WindowsEnableConpty = "terminal.integrated.windowsEnableConpty", i.WindowsUseConptyDll = "terminal.integrated.windowsUseConptyDll", i.WordSeparators = "terminal.integrated.wordSeparators", i.EnableFileLinks = "terminal.integrated.enableFileLinks", i.AllowedLinkSchemes = "terminal.integrated.allowedLinkSchemes", i.UnicodeVersion = "terminal.integrated.unicodeVersion", i.EnablePersistentSessions = "terminal.integrated.enablePersistentSessions", i.PersistentSessionReviveProcess = "terminal.integrated.persistentSessionReviveProcess", i.HideOnStartup = "terminal.integrated.hideOnStartup", i.HideOnLastClosed = "terminal.integrated.hideOnLastClosed", i.CustomGlyphs = "terminal.integrated.customGlyphs", i.RescaleOverlappingGlyphs = "terminal.integrated.rescaleOverlappingGlyphs", i.PersistentSessionScrollback = "terminal.integrated.persistentSessionScrollback", i.InheritEnv = "terminal.integrated.inheritEnv", i.ShowLinkHover = "terminal.integrated.showLinkHover", i.IgnoreProcessNames = "terminal.integrated.ignoreProcessNames", i.ShellIntegrationEnabled = "terminal.integrated.shellIntegration.enabled", i.ShellIntegrationShowWelcome = "terminal.integrated.shellIntegration.showWelcome", i.ShellIntegrationDecorationsEnabled = "terminal.integrated.shellIntegration.decorationsEnabled", i.ShellIntegrationEnvironmentReporting = "terminal.integrated.shellIntegration.environmentReporting", i.EnableImages = "terminal.integrated.enableImages", i.SmoothScrolling = "terminal.integrated.smoothScrolling", i.IgnoreBracketedPasteMode = "terminal.integrated.ignoreBracketedPasteMode", i.FocusAfterRun = "terminal.integrated.focusAfterRun", i.FontLigaturesEnabled = "terminal.integrated.fontLigatures.enabled", i.FontLigaturesFeatureSettings = "terminal.integrated.fontLigatures.featureSettings", i.FontLigaturesFallbackLigatures = "terminal.integrated.fontLigatures.fallbackLigatures", i.DeveloperPtyHostLatency = "terminal.integrated.developer.ptyHost.latency", i.DeveloperPtyHostStartupDelay = "terminal.integrated.developer.ptyHost.startupDelay", i.DevMode = "terminal.integrated.developer.devMode";
})(iC || (iC = {}));
var nC;
(function(i) {
  i.Bash = "bash", i.Fish = "fish", i.Sh = "sh", i.Csh = "csh", i.Ksh = "ksh", i.Zsh = "zsh";
})(nC || (nC = {}));
var V0;
(function(i) {
  i.CommandPrompt = "cmd", i.Wsl = "wsl", i.GitBash = "gitbash";
})(V0 || (V0 = {}));
var rC;
(function(i) {
  i.PowerShell = "pwsh", i.Python = "python", i.Julia = "julia", i.NuShell = "nu", i.Node = "node";
})(rC || (rC = {}));
var sC;
(function(i) {
  i[i.Api = 0] = "Api", i[i.Process = 1] = "Process", i[i.Sequence = 2] = "Sequence", i[i.Config = 3] = "Config";
})(sC || (sC = {}));
var oC;
(function(i) {
  i.LocalPty = "localPty", i.PtyHost = "ptyHost", i.PtyHostWindow = "ptyHostWindow", i.Logger = "logger", i.Heartbeat = "heartbeat";
})(oC || (oC = {}));
var pd;
(function(i) {
  i.Cwd = "cwd", i.InitialCwd = "initialCwd", i.FixedDimensions = "fixedDimensions", i.Title = "title", i.ShellType = "shellType", i.HasChildProcesses = "hasChildProcesses", i.ResolvedShellLaunchConfig = "resolvedShellLaunchConfig", i.OverrideDimensions = "overrideDimensions", i.FailedShellIntegrationActivation = "failedShellIntegrationActivation", i.UsedShellIntegrationInjection = "usedShellIntegrationInjection", i.ShellIntegrationInjectionFailureReason = "shellIntegrationInjectionFailureReason";
})(pd || (pd = {}));
var aC;
(function(i) {
  i[i.BeatInterval = 5e3] = "BeatInterval", i[i.ConnectingBeatInterval = 2e4] = "ConnectingBeatInterval", i[i.FirstWaitMultiplier = 1.2] = "FirstWaitMultiplier", i[i.SecondWaitMultiplier = 1] = "SecondWaitMultiplier", i[i.CreateProcessTimeout = 5e3] = "CreateProcessTimeout";
})(aC || (aC = {}));
var lC;
(function(i) {
  i[i.Panel = 1] = "Panel", i[i.Editor = 2] = "Editor";
})(lC || (lC = {}));
var cC;
(function(i) {
  i.TerminalView = "view", i.Editor = "editor";
})(cC || (cC = {}));
var uC;
(function(i) {
  i[i.GraceTime = 6e4] = "GraceTime", i[i.ShortGraceTime = 6e3] = "ShortGraceTime";
})(uC || (uC = {}));
var dC;
(function(i) {
  i[i.HighWatermarkChars = 1e5] = "HighWatermarkChars", i[i.LowWatermarkChars = 5e3] = "LowWatermarkChars", i[i.CharCountAckSize = 5e3] = "CharCountAckSize";
})(dC || (dC = {}));
var hC;
(function(i) {
  i.GitBash = "Git Bash", i.Pwsh = "PowerShell";
})(hC || (hC = {}));
var fC;
(function(i) {
  i[i.Off = 0] = "Off", i[i.FinalTerm = 1] = "FinalTerm", i[i.VSCode = 2] = "VSCode";
})(fC || (fC = {}));
var pC;
(function(i) {
  i.InjectionSettingDisabled = "injectionSettingDisabled", i.NoExecutable = "noExecutable", i.FeatureTerminal = "featureTerminal", i.IgnoreShellIntegrationFlag = "ignoreShellIntegrationFlag", i.Winpty = "winpty", i.UnsupportedArgs = "unsupportedArgs", i.UnsupportedShell = "unsupportedShell", i.FailedToSetStickyBit = "failedToSetStickyBit", i.FailedToCreateTmpDir = "failedToCreateTmpDir";
})(pC || (pC = {}));
var gC;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Shutdown = 1] = "Shutdown", i[i.Process = 2] = "Process", i[i.User = 3] = "User", i[i.Extension = 4] = "Extension";
})(gC || (gC = {}));
const dO = {
  Backend: "workbench.contributions.terminal.processBackend"
};
function z0(i) {
  return (i == null ? void 0 : i.toLowerCase()) ?? "";
}
class hO {
  constructor(e) {
    this.remoteAuthority = e;
  }
  affects(e) {
    return z0(e) === this.remoteAuthority;
  }
}
class fO {
  constructor() {
    this._backends = /* @__PURE__ */ new Map(), this._onDidChangeBackends = new M(), this.onDidChangeBackends = this._onDidChangeBackends.event;
  }
  get backends() {
    return this._backends;
  }
  registerTerminalBackend(e) {
    const t = z0(e.remoteAuthority);
    if (this._backends.has(t))
      throw new Error(
        `A terminal backend with remote authority '${t}' was already registered.`
      );
    this._backends.set(t, e), this._onDidChangeBackends.fire(new hO(t));
  }
  getTerminalBackend(e) {
    return this._backends.get(z0(e));
  }
}
ui.add(dO.Backend, new fO());
class pO {
  constructor(e) {
    this._callback = e, this._terminalBufferMap = /* @__PURE__ */ new Map();
  }
  dispose() {
    for (const e of this._terminalBufferMap.values())
      e.dispose();
  }
  startBuffering(e, t, n = 5) {
    const r = t((s) => {
      const o = typeof s == "string" ? s : s.data;
      let a = this._terminalBufferMap.get(e);
      if (a) {
        a.data.push(o);
        return;
      }
      const l = setTimeout(() => this.flushBuffer(e), n);
      a = {
        data: [o],
        timeoutId: l,
        dispose: () => {
          clearTimeout(l), this.flushBuffer(e), r.dispose();
        }
      }, this._terminalBufferMap.set(e, a);
    });
    return r;
  }
  stopBuffering(e) {
    const t = this._terminalBufferMap.get(e);
    t == null || t.dispose();
  }
  flushBuffer(e) {
    const t = this._terminalBufferMap.get(e);
    t && (this._terminalBufferMap.delete(e), this._callback(e, t.data.join("")));
  }
}
const ca = (i, e, t, n) => {
  let r = e;
  return {
    enumerable: !0,
    configurable: !1,
    get() {
      return r;
    },
    set(s) {
      var o;
      if (!t(r, s)) {
        const a = r;
        r = s, (o = i.listener) == null || o.call(i, n(s, a));
      }
    }
  };
}, _c = (i, e) => i === e, lo = {
  range: (i, e) => i === e ? !0 : !i || !e ? !1 : i.isEqual(e),
  label: _c,
  description: _c,
  sortText: _c,
  busy: _c,
  error: _c,
  canResolveChildren: _c,
  tags: (i, e) => !(i.length !== e.length || i.some((t) => !e.find((n) => t.id === n.id)))
}, vc = (i) => (e) => ({ op: Si.SetProp, update: i(e) }), gO = (i, e) => ({
  range: (() => {
    let t;
    const n = vc((r) => ({ range: ft.lift(j.from(r)) }));
    return {
      enumerable: !0,
      configurable: !1,
      get() {
        return t;
      },
      set(r) {
        var s, o;
        (s = i.listener) == null || s.call(i, { op: Si.DocumentSynced }), lo.range(t, r) || (t = r, (o = i.listener) == null || o.call(i, n(r)));
      }
    };
  })(),
  label: ca(i, e, lo.label, vc((t) => ({ label: t }))),
  description: ca(i, void 0, lo.description, vc((t) => ({ description: t }))),
  sortText: ca(i, void 0, lo.sortText, vc((t) => ({ sortText: t }))),
  canResolveChildren: ca(i, !1, lo.canResolveChildren, (t) => ({
    op: Si.UpdateCanResolveChildren,
    state: t
  })),
  busy: ca(i, !1, lo.busy, vc((t) => ({ busy: t }))),
  error: ca(i, void 0, lo.error, vc((t) => ({ error: Ne.fromStrict(t) || null }))),
  tags: ca(i, [], lo.tags, (t, n) => ({
    op: Si.SetTags,
    new: t.map(Tr.from),
    old: n.map(Tr.from)
  }))
}), mO = (i) => {
  const e = Fe.fromString(i.extId), t = new tc(
    e.controllerId,
    e.localId,
    i.label,
    x.revive(i.uri) || void 0
  );
  return t.range = j.to(i.range || void 0), t.description = i.description || void 0, t.sortText = i.sortText || void 0, t.tags = i.tags.map((n) => Tr.to({ id: d5(n).tagId })), t;
}, mC = (i) => {
  let e;
  for (const t of i.tests) {
    const n = mO(t.item);
    cv(n).parent = e, e = n;
  }
  return e;
};
class tc {
  constructor(e, t, n, r) {
    if (t.includes(Tn.Delimiter))
      throw new Error(`Test IDs may not include the ${JSON.stringify(t)} symbol`);
    const s = dN(this, e);
    Object.defineProperties(this, {
      id: {
        value: t,
        enumerable: !0,
        writable: !1
      },
      uri: {
        value: r,
        enumerable: !0,
        writable: !1
      },
      parent: {
        enumerable: !1,
        get() {
          return s.parent instanceof LS ? void 0 : s.parent;
        }
      },
      children: {
        value: uN(s, cv, tc),
        enumerable: !0,
        writable: !1
      },
      ...gO(s, n)
    });
  }
}
class LS extends tc {
  constructor(e, t) {
    super(e, e, t, void 0), this._isRoot = !0;
  }
}
class _O extends aN {
  constructor(e, t, n) {
    super({
      controllerId: e,
      getDocumentVersion: (r) => {
        var s;
        return r && ((s = n.getDocument(r)) == null ? void 0 : s.version);
      },
      getApiFor: cv,
      getChildren: (r) => r.children,
      root: new LS(e, t),
      toITestItem: Zo.from
    });
  }
}
let q0 = class extends xe {
  constructor(e, t, n) {
    super(), this.initData = t, this._onDidChangeTelemetryEnabled = this._register(new M()), this.onDidChangeTelemetryEnabled = this._onDidChangeTelemetryEnabled.event, this._onDidChangeTelemetryConfiguration = this._register(new M()), this.onDidChangeTelemetryConfiguration = this._onDidChangeTelemetryConfiguration.event, this._productConfig = { usage: !0, error: !0 }, this._level = So.NONE, this._inLoggingOnlyMode = !1, this._telemetryLoggers = /* @__PURE__ */ new Map(), this._inLoggingOnlyMode = this.initData.environment.isExtensionTelemetryLoggingOnly;
    const r = t.remote.isRemote ? "remoteExtHostTelemetry" : e ? "workerExtHostTelemetry" : "extHostTelemetry";
    this._outputLogger = this._register(n.createLogger(r, {
      name: h(
        2635,
        "Extension Telemetry{0}",
        this._inLoggingOnlyMode ? " (Not Sent)" : ""
      ),
      hidden: !0,
      group: X9
    }));
  }
  getTelemetryConfiguration() {
    return this._level === So.USAGE;
  }
  getTelemetryDetails() {
    return {
      isCrashEnabled: this._level >= So.CRASH,
      isErrorsEnabled: this._productConfig.error ? this._level >= So.ERROR : !1,
      isUsageEnabled: this._productConfig.usage ? this._level >= So.USAGE : !1
    };
  }
  instantiateLogger(e, t, n) {
    const r = this.getTelemetryDetails(), s = new mA(
      t,
      n,
      e,
      this._outputLogger,
      this._inLoggingOnlyMode,
      this.getBuiltInCommonProperties(e),
      { isUsageEnabled: r.isUsageEnabled, isErrorsEnabled: r.isErrorsEnabled }
    ), o = this._telemetryLoggers.get(e.identifier.value) ?? [];
    return this._telemetryLoggers.set(e.identifier.value, [...o, s]), s.apiTelemetryLogger;
  }
  $initializeTelemetryLevel(e, t, n) {
    this._level = e, this._productConfig = n ?? { usage: !0, error: !0 };
  }
  getBuiltInCommonProperties(e) {
    const t = /* @__PURE__ */ Object.create(null);
    switch (t["common.extname"] = `${e.publisher}.${e.name}`, t["common.extversion"] = e.version, t["common.vscodemachineid"] = this.initData.telemetryInfo.machineId, t["common.vscodesessionid"] = this.initData.telemetryInfo.sessionId, t["common.vscodecommithash"] = this.initData.commit, t["common.sqmid"] = this.initData.telemetryInfo.sqmId, t["common.devDeviceId"] = this.initData.telemetryInfo.devDeviceId, t["common.vscodeversion"] = this.initData.version, t["common.vscodereleasedate"] = this.initData.date, t["common.isnewappinstall"] = _A(this.initData.telemetryInfo.firstSessionDate), t["common.product"] = this.initData.environment.appHost, this.initData.uiKind) {
      case $h.Web:
        t["common.uikind"] = "web";
        break;
      case $h.Desktop:
        t["common.uikind"] = "desktop";
        break;
      default:
        t["common.uikind"] = "unknown";
    }
    return t["common.remotename"] = VE(e6(this.initData.remote.authority)), t;
  }
  $onDidChangeTelemetryLevel(e) {
    this._oldTelemetryEnablement = this.getTelemetryConfiguration(), this._level = e;
    const t = this.getTelemetryDetails();
    this._telemetryLoggers.forEach((n, r) => {
      const s = n.filter((o) => !o.isDisposed);
      s.length === 0 ? this._telemetryLoggers.delete(r) : this._telemetryLoggers.set(r, s);
    }), this._telemetryLoggers.forEach((n) => {
      for (const r of n)
        r.updateTelemetryEnablements(t.isUsageEnabled, t.isErrorsEnabled);
    }), this._oldTelemetryEnablement !== this.getTelemetryConfiguration() && this._onDidChangeTelemetryEnabled.fire(this.getTelemetryConfiguration()), this._onDidChangeTelemetryConfiguration.fire(this.getTelemetryDetails());
  }
  onExtensionError(e, t) {
    const n = this._telemetryLoggers.get(e.value), r = n == null ? void 0 : n.filter((o) => !o.isDisposed);
    if (!r)
      return this._telemetryLoggers.delete(e.value), !1;
    let s = !1;
    for (const o of r)
      o.ignoreUnhandledExtHostErrors || (o.logError(t), s = !0);
    return s;
  }
};
q0 = z([
  O(1, _i),
  O(2, ta)
], q0);
class mA {
  static validateSender(e) {
    if (typeof e != "object")
      throw new TypeError("TelemetrySender argument is invalid");
    if (typeof e.sendEventData != "function")
      throw new TypeError("TelemetrySender.sendEventData must be a function");
    if (typeof e.sendErrorData != "function")
      throw new TypeError("TelemetrySender.sendErrorData must be a function");
    if (typeof e.flush < "u" && typeof e.flush != "function")
      throw new TypeError("TelemetrySender.flush must be a function or undefined");
  }
  constructor(e, t, n, r, s, o, a) {
    this._extension = n, this._logger = r, this._inLoggingOnlyMode = s, this._commonProperties = o, this._onDidChangeEnableStates = new M(), this.ignoreUnhandledExtHostErrors = (t == null ? void 0 : t.ignoreUnhandledErrors) ?? !1, this._ignoreBuiltinCommonProperties = (t == null ? void 0 : t.ignoreBuiltInCommonProperties) ?? !1, this._additionalCommonProperties = t == null ? void 0 : t.additionalCommonProperties, this._sender = e, this._telemetryEnablements = { isUsageEnabled: a.isUsageEnabled, isErrorsEnabled: a.isErrorsEnabled };
  }
  updateTelemetryEnablements(e, t) {
    this._apiObject && (this._telemetryEnablements = { isUsageEnabled: e, isErrorsEnabled: t }, this._onDidChangeEnableStates.fire(this._apiObject));
  }
  mixInCommonPropsAndCleanData(e) {
    let t = "properties" in e ? e.properties ?? {} : e;
    return t = uk(t, []), this._additionalCommonProperties && (t = Fl(t, this._additionalCommonProperties)), this._ignoreBuiltinCommonProperties || (t = Fl(t, this._commonProperties)), "properties" in e ? e.properties = t : e = t, e;
  }
  logEvent(e, t) {
    var n;
    this._sender && (this._extension.publisher === "vscode" ? e = this._extension.name + "/" + e : e = this._extension.identifier.value + "/" + e, t = this.mixInCommonPropsAndCleanData(t || {}), this._inLoggingOnlyMode || (n = this._sender) == null || n.sendEventData(e, t), this._logger.trace(e, t));
  }
  logUsage(e, t) {
    this._telemetryEnablements.isUsageEnabled && this.logEvent(e, t);
  }
  logError(e, t) {
    if (!(!this._telemetryEnablements.isErrorsEnabled || !this._sender))
      if (typeof e == "string")
        this.logEvent(e, t);
      else {
        const n = {
          name: e.name,
          message: e.message,
          stack: e.stack,
          cause: e.cause
        }, r = uk(n, []), s = new Error(r.message, {
          cause: r.cause
        });
        s.stack = r.stack, s.name = r.name, t = this.mixInCommonPropsAndCleanData(t || {}), this._inLoggingOnlyMode || this._sender.sendErrorData(s, t), this._logger.trace("exception", t);
      }
  }
  get apiTelemetryLogger() {
    if (!this._apiObject) {
      const e = this, t = {
        logUsage: e.logUsage.bind(e),
        get isUsageEnabled() {
          return e._telemetryEnablements.isUsageEnabled;
        },
        get isErrorsEnabled() {
          return e._telemetryEnablements.isErrorsEnabled;
        },
        logError: e.logError.bind(e),
        dispose: e.dispose.bind(e),
        onDidChangeEnableStates: e._onDidChangeEnableStates.event.bind(e)
      };
      this._apiObject = Object.freeze(t);
    }
    return this._apiObject;
  }
  get isDisposed() {
    return !this._sender;
  }
  dispose() {
    var e;
    if ((e = this._sender) != null && e.flush) {
      let t = this._sender;
      this._sender = void 0, Promise.resolve(t.flush()).then(t = void 0), this._apiObject = void 0;
    } else
      this._sender = void 0;
  }
}
function _A(i) {
  const e = Date.now() - new Date(i).getTime();
  return isNaN(e) ? !1 : e < 1e3 * 60 * 60 * 24;
}
const Ev = me("IExtHostTelemetry");
var Ms, ap, lp, wT;
let j0 = (wT = class {
  constructor(e, t, n) {
    ye(this, Ms);
    ye(this, ap);
    ye(this, lp);
    this._commands = /* @__PURE__ */ new Map(), this._apiCommands = /* @__PURE__ */ new Map(), le(this, Ms, e.getProxy(ie.MainThreadCommands)), this._logService = t, le(this, lp, n), le(this, ap, e.getProxy(ie.MainThreadTelemetry)), this.converter = new vO(this, (r) => {
      const s = this._apiCommands.get(r);
      return (s == null ? void 0 : s.result) === Ce.Void ? s : void 0;
    }, t), this._argumentProcessors = [
      {
        processArgument(r) {
          return Wi(r);
        }
      },
      {
        processArgument(r) {
          return $u(r, function(s) {
            if (ft.isIRange(s))
              return j.to(s);
            if (On.isIPosition(s))
              return ut.to(s);
            if (ft.isIRange(s.range) && x.isUri(s.uri))
              return hn.to(s);
            if (s instanceof he)
              return s.buffer.buffer;
            if (!Array.isArray(s))
              return s;
          });
        }
      }
    ];
  }
  registerArgumentProcessor(e) {
    this._argumentProcessors.push(e);
  }
  registerApiCommand(e) {
    const t = this.registerCommand(!1, e.id, async (...n) => {
      const r = e.args.map((o, a) => {
        if (!o.validate(n[a]))
          throw new Error(
            `Invalid argument '${o.name}' when running '${e.id}', received: ${typeof n[a] == "object" ? JSON.stringify(n[a], null, "	") : n[a]} `
          );
        return o.convert(n[a]);
      }), s = await this.executeCommand(e.internalId, ...r);
      return e.result.convert(s, n, this.converter);
    }, void 0, {
      description: e.description,
      args: e.args,
      returns: e.result.description
    });
    return this._apiCommands.set(e.id, e), new je(() => {
      t.dispose(), this._apiCommands.delete(e.id);
    });
  }
  registerCommand(e, t, n, r, s, o) {
    if (this._logService.trace("ExtHostCommands#registerCommand", t), !t.trim().length)
      throw new Error("invalid id");
    if (this._commands.has(t))
      throw new Error(`command '${t}' already exists`);
    return this._commands.set(t, { callback: n, thisArg: r, metadata: s, extension: o }), e && N(this, Ms).$registerCommand(t), new je(() => {
      this._commands.delete(t) && e && N(this, Ms).$unregisterCommand(t);
    });
  }
  executeCommand(e, ...t) {
    return this._logService.trace("ExtHostCommands#executeCommand", e), this._doExecuteCommand(e, t, !0);
  }
  async _doExecuteCommand(e, t, n) {
    if (this._commands.has(e))
      return N(this, Ms).$fireCommandActivationEvent(e), this._executeContributedCommand(e, t, !1);
    {
      let r = !1;
      const s = $u(t, function(o) {
        if (o instanceof Ke)
          return ut.from(o);
        if (o instanceof $e)
          return j.from(o);
        if (o instanceof $n)
          return hn.from(o);
        if (es.isNotebookRange(o))
          return ls.from(o);
        if (o instanceof ArrayBuffer)
          return r = !0, he.wrap(new Uint8Array(o));
        if (o instanceof Uint8Array)
          return r = !0, he.wrap(o);
        if (o instanceof he)
          return r = !0, o;
        if (!Array.isArray(o))
          return o;
      });
      try {
        const o = await N(this, Ms).$executeCommand(e, r ? new Ki(s) : s, n);
        return Wi(o);
      } catch (o) {
        if (o instanceof Error && o.message === "$executeCommand:retry")
          return this._doExecuteCommand(e, t, !1);
        throw o;
      }
    }
  }
  async _executeContributedCommand(e, t, n) {
    var c, u, d;
    const r = this._commands.get(e);
    if (!r)
      throw new Error("Unknown command");
    const { callback: s, thisArg: o, metadata: a } = r;
    if (a != null && a.args)
      for (let f = 0; f < a.args.length; f++)
        try {
          IT(t[f], a.args[f].constraint);
        } catch {
          throw new Error(
            `Running the contributed command: '${e}' failed. Illegal argument '${a.args[f].name}' - ${a.args[f].description}`
          );
        }
    const l = Js.create();
    try {
      return await s.apply(o, t);
    } catch (f) {
      if (e === this.converter.delegatingCommandId) {
        const p = this.converter.getActualCommand(...t);
        p && (e = p.command);
      }
      if (cs(f) || this._logService.error(f, e, (c = r.extension) == null ? void 0 : c.identifier), !n)
        throw f;
      if ((u = r.extension) != null && u.identifier) {
        const p = N(this, lp).onExtensionError(r.extension.identifier, f);
        this._logService.trace("forwarded error to extension?", p, (d = r.extension) == null ? void 0 : d.identifier);
      }
      throw new class extends Error {
        constructor() {
          var v, _;
          super(wd(f)), this.id = e, this.source = ((v = r.extension) == null ? void 0 : v.displayName) ?? ((_ = r.extension) == null ? void 0 : _.name);
        }
      }();
    } finally {
      this._reportTelemetry(r, e, l.elapsed());
    }
  }
  _reportTelemetry(e, t, n) {
    e.extension && (t.startsWith("code.copilot.logStructured") || N(this, ap).$publicLog2("Extension:ActionExecuted", {
      extensionId: e.extension.identifier.value,
      id: new sS(t),
      duration: n
    }));
  }
  $executeContributedCommand(e, ...t) {
    this._logService.trace("ExtHostCommands#$executeContributedCommand", e);
    const n = this._commands.get(e);
    return n ? (t = t.map(
      (r) => this._argumentProcessors.reduce((s, o) => o.processArgument(s, n.extension), r)
    ), this._executeContributedCommand(e, t, !0)) : Promise.reject(new Error(`Contributed command '${e}' does not exist.`));
  }
  getCommands(e = !1) {
    return this._logService.trace("ExtHostCommands#getCommands", e), N(this, Ms).$getCommands().then((t) => (e && (t = t.filter((n) => n[0] !== "_")), t));
  }
  $getContributedCommandMetadata() {
    const e = /* @__PURE__ */ Object.create(null);
    for (const [t, n] of this._commands) {
      const { metadata: r } = n;
      r && (e[t] = r);
    }
    return Promise.resolve(e);
  }
}, Ms = new WeakMap(), ap = new WeakMap(), lp = new WeakMap(), wT);
j0 = z([
  O(0, tt),
  O(1, ot),
  O(2, Ev)
], j0);
const ic = me("IExtHostCommands");
class vO {
  constructor(e, t, n) {
    this._commands = e, this._lookupApiCommand = t, this._logService = n, this.delegatingCommandId = `__vsc${dn()}`, this._cache = /* @__PURE__ */ new Map(), this._cachIdPool = 0, this._commands.registerCommand(!0, this.delegatingCommandId, this._executeConvertedCommand, this);
  }
  toInternal(e, t) {
    if (!e)
      return;
    const n = {
      $ident: void 0,
      id: e.command,
      title: e.title,
      tooltip: e.tooltip
    };
    if (!e.command)
      return n;
    const r = this._lookupApiCommand(e.command);
    if (r)
      n.id = r.internalId, n.arguments = r.args.map((s, o) => s.convert(e.arguments && e.arguments[o]));
    else if (yp(e.arguments)) {
      const s = `${e.command} /${++this._cachIdPool}`;
      this._cache.set(s, e), t.add(Ie(() => {
        this._cache.delete(s), this._logService.trace("CommandsConverter#DISPOSE", s);
      })), n.$ident = s, n.id = this.delegatingCommandId, n.arguments = [s], this._logService.trace("CommandsConverter#CREATE", e.command, s);
    }
    return n;
  }
  fromInternal(e) {
    return typeof e.$ident == "string" ? this._cache.get(e.$ident) : {
      command: e.id,
      title: e.title,
      arguments: e.arguments
    };
  }
  getActualCommand(...e) {
    return this._cache.get(e[0]);
  }
  _executeConvertedCommand(...e) {
    const t = this.getActualCommand(...e);
    return this._logService.trace("CommandsConverter#EXECUTE", e[0], t ? t.command : "MISSING"), t ? this._commands.executeCommand(t.command, ...t.arguments || []) : Promise.reject(`Actual command not found, wanted to execute ${e[0]}`);
  }
}
const Ht = class Ht {
  static Arr(e) {
    return new Ht(
      `${e.name}_array`,
      `Array of ${e.name}, ${e.description}`,
      (t) => Array.isArray(t) && t.every((n) => e.validate(n)),
      (t) => t.map((n) => e.convert(n))
    );
  }
  constructor(e, t, n, r) {
    this.name = e, this.description = t, this.validate = n, this.convert = r;
  }
  optional() {
    return new Ht(
      this.name,
      `(optional) ${this.description}`,
      (e) => e == null || this.validate(e),
      (e) => e === void 0 ? void 0 : e === null ? null : this.convert(e)
    );
  }
  with(e, t) {
    return new Ht(
      e ?? this.name,
      t ?? this.description,
      this.validate,
      this.convert
    );
  }
};
Ht.Uri = new Ht("uri", "Uri of a text document", (e) => x.isUri(e), (e) => e), Ht.Position = new Ht(
  "position",
  "A position in a text document",
  (e) => Ke.isPosition(e),
  ut.from
), Ht.Range = new Ht(
  "range",
  "A range in a text document",
  (e) => $e.isRange(e),
  j.from
), Ht.Selection = new Ht(
  "selection",
  "A selection in a text document",
  (e) => os.isSelection(e),
  Cr.from
), Ht.Number = new Ht("number", "", (e) => typeof e == "number", (e) => e), Ht.String = new Ht("string", "", (e) => typeof e == "string", (e) => e), Ht.CallHierarchyItem = new Ht(
  "item",
  "A call hierarchy item",
  (e) => e instanceof uS,
  ql.from
), Ht.TypeHierarchyItem = new Ht(
  "item",
  "A type hierarchy item",
  (e) => e instanceof fS,
  vl.from
), Ht.TestItem = new Ht(
  "testItem",
  "A VS Code TestItem",
  (e) => e instanceof tc,
  Zo.from
), Ht.TestProfile = new Ht(
  "testProfile",
  "A VS Code test profile",
  (e) => e instanceof D5,
  a0.from
);
let Q = Ht;
const L1 = class L1 {
  constructor(e, t) {
    this.description = e, this.convert = t;
  }
};
L1.Void = new L1("no result", (e) => e);
let Ce = L1;
class Le {
  constructor(e, t, n, r, s) {
    this.id = e, this.internalId = t, this.description = n, this.args = r, this.result = s;
  }
}
const bd = me("IExtHostTerminalService");
class _C extends xe {
  constructor(e, t, n, r) {
    super(), this._proxy = e, this._id = t, this._creationOptions = n, this._name = r, this._disposed = !1, this._state = { isInteractedWith: !1, shell: void 0 }, this.isOpen = !1, this._onWillDispose = this._register(new M()), this.onWillDispose = this._onWillDispose.event, this._creationOptions = Object.freeze(this._creationOptions), this._pidPromise = new Promise((o) => this._pidPromiseComplete = o);
    const s = this;
    this.value = {
      get name() {
        return s._name || "";
      },
      get processId() {
        return s._pidPromise;
      },
      get creationOptions() {
        return s._creationOptions;
      },
      get exitStatus() {
        return s._exitStatus;
      },
      get state() {
        return s._state;
      },
      get selection() {
        return s._selection;
      },
      get shellIntegration() {
        return s.shellIntegration;
      },
      sendText(o, a = !0) {
        s._checkDisposed(), s._proxy.$sendText(s._id, o, a);
      },
      show(o) {
        s._checkDisposed(), s._proxy.$show(s._id, o);
      },
      hide() {
        s._checkDisposed(), s._proxy.$hide(s._id);
      },
      dispose() {
        s._disposed || (s._disposed = !0, s._proxy.$dispose(s._id));
      },
      get dimensions() {
        if (!(s._cols === void 0 || s._rows === void 0))
          return {
            columns: s._cols,
            rows: s._rows
          };
      }
    };
  }
  dispose() {
    this._onWillDispose.fire(), super.dispose();
  }
  async create(e, t) {
    if (typeof this._id != "string")
      throw new Error("Terminal has already been created");
    await this._proxy.$createTerminal(this._id, {
      name: e.name,
      shellPath: e.shellPath ?? void 0,
      shellArgs: e.shellArgs ?? void 0,
      cwd: e.cwd ?? (t == null ? void 0 : t.cwd) ?? void 0,
      env: e.env ?? void 0,
      icon: vA(e.iconPath) ?? void 0,
      color: Bu.isThemeColor(e.color) ? e.color.id : void 0,
      initialText: e.message ?? void 0,
      strictEnv: e.strictEnv ?? void 0,
      hideFromUser: e.hideFromUser ?? void 0,
      forceShellIntegration: (t == null ? void 0 : t.forceShellIntegration) ?? void 0,
      isFeatureTerminal: (t == null ? void 0 : t.isFeatureTerminal) ?? void 0,
      isExtensionOwnedTerminal: !0,
      useShellEnvironment: (t == null ? void 0 : t.useShellEnvironment) ?? void 0,
      location: (t == null ? void 0 : t.location) || this._serializeParentTerminal(e.location, t == null ? void 0 : t.resolvedExtHostIdentifier),
      isTransient: e.isTransient ?? void 0
    });
  }
  async createExtensionTerminal(e, t, n, r, s) {
    if (typeof this._id != "string")
      throw new Error("Terminal has already been created");
    if (await this._proxy.$createTerminal(this._id, {
      name: this._name,
      isExtensionCustomPtyTerminal: !0,
      icon: r,
      color: Bu.isThemeColor(s) ? s.id : void 0,
      location: (t == null ? void 0 : t.location) || this._serializeParentTerminal(e, n),
      isTransient: !0
    }), typeof this._id == "string")
      throw new Error("Terminal creation failed");
    return this._id;
  }
  _serializeParentTerminal(e, t) {
    return typeof e == "object" ? "parentTerminal" in e && e.parentTerminal && t ? { parentTerminal: t } : "viewColumn" in e ? { viewColumn: li.from(e.viewColumn), preserveFocus: e.preserveFocus } : void 0 : e;
  }
  _checkDisposed() {
    if (this._disposed)
      throw new Error("Terminal has already been disposed");
  }
  set name(e) {
    this._name = e;
  }
  setExitStatus(e, t) {
    this._exitStatus = Object.freeze({ code: e, reason: t });
  }
  setDimensions(e, t) {
    return e === this._cols && t === this._rows || e === 0 || t === 0 ? !1 : (this._cols = e, this._rows = t, !0);
  }
  setInteractedWith() {
    return this._state.isInteractedWith ? !1 : (this._state = {
      ...this._state,
      isInteractedWith: !0
    }, !0);
  }
  setShellType(e) {
    return this._state.shell !== e ? (this._state = {
      ...this._state,
      shell: e
    }, !0) : !1;
  }
  setSelection(e) {
    this._selection = e;
  }
  _setProcessId(e) {
    this._pidPromiseComplete ? (this._pidPromiseComplete(e), this._pidPromiseComplete = void 0) : this._pidPromise.then((t) => {
      t !== e && (this._pidPromise = Promise.resolve(e));
    });
  }
}
class cw {
  get onProcessReady() {
    return this._onProcessReady.event;
  }
  constructor(e) {
    this._pty = e, this.id = 0, this.shouldPersist = !1, this._onProcessData = new M(), this.onProcessData = this._onProcessData.event, this._onProcessReady = new M(), this._onDidChangeProperty = new M(), this.onDidChangeProperty = this._onDidChangeProperty.event, this._onProcessExit = new M(), this.onProcessExit = this._onProcessExit.event;
  }
  refreshProperty(e) {
    throw new Error(
      `refreshProperty is not suppported in extension owned terminals. property: ${e}`
    );
  }
  updateProperty(e, t) {
    throw new Error(
      `updateProperty is not suppported in extension owned terminals. property: ${e}, value: ${t}`
    );
  }
  async start() {
  }
  shutdown() {
    this._pty.close();
  }
  input(e) {
    var t, n;
    (n = (t = this._pty).handleInput) == null || n.call(t, e);
  }
  sendSignal(e) {
  }
  resize(e, t) {
    var n, r;
    (r = (n = this._pty).setDimensions) == null || r.call(n, { columns: e, rows: t });
  }
  clearBuffer() {
  }
  async processBinary(e) {
  }
  acknowledgeDataEvent(e) {
  }
  async setUnicodeVersion(e) {
  }
  getInitialCwd() {
    return Promise.resolve("");
  }
  getCwd() {
    return Promise.resolve("");
  }
  startSendingEvents(e) {
    var t, n, r, s, o, a, l, c;
    this._pty.onDidWrite((u) => this._onProcessData.fire(u)), (n = (t = this._pty).onDidClose) == null || n.call(t, (u = void 0) => {
      this._onProcessExit.fire(u === void 0 ? void 0 : u);
    }), (s = (r = this._pty).onDidOverrideDimensions) == null || s.call(r, (u) => {
      u && this._onDidChangeProperty.fire({ type: pd.OverrideDimensions, value: { cols: u.columns, rows: u.rows } });
    }), (a = (o = this._pty).onDidChangeName) == null || a.call(o, (u) => {
      this._onDidChangeProperty.fire({ type: pd.Title, value: u });
    }), this._pty.open(e || void 0), e && ((c = (l = this._pty).setDimensions) == null || c.call(l, e)), this._onProcessReady.fire({ pid: -1, cwd: "", windowsPty: void 0 });
  }
}
let wO = 1, G0 = class extends xe {
  get activeTerminal() {
    var e;
    return (e = this._activeTerminal) == null ? void 0 : e.value;
  }
  get terminals() {
    return this._terminals.map((e) => e.value);
  }
  constructor(e, t, n) {
    super(), this._extHostCommands = t, this._terminals = [], this._terminalProcesses = /* @__PURE__ */ new Map(), this._terminalProcessDisposables = {}, this._extensionTerminalAwaitingStart = {}, this._getTerminalPromises = {}, this._environmentVariableCollections = /* @__PURE__ */ new Map(), this._lastQuickFixCommands = this._register(new $s()), this._linkProviders = /* @__PURE__ */ new Set(), this._completionProviders = /* @__PURE__ */ new Map(), this._profileProviders = /* @__PURE__ */ new Map(), this._quickFixProviders = /* @__PURE__ */ new Map(), this._terminalLinkCache = /* @__PURE__ */ new Map(), this._terminalLinkCancellationSource = /* @__PURE__ */ new Map(), this._onDidCloseTerminal = new M(), this.onDidCloseTerminal = this._onDidCloseTerminal.event, this._onDidOpenTerminal = new M(), this.onDidOpenTerminal = this._onDidOpenTerminal.event, this._onDidChangeActiveTerminal = new M(), this.onDidChangeActiveTerminal = this._onDidChangeActiveTerminal.event, this._onDidChangeTerminalDimensions = new M(), this.onDidChangeTerminalDimensions = this._onDidChangeTerminalDimensions.event, this._onDidChangeTerminalState = new M(), this.onDidChangeTerminalState = this._onDidChangeTerminalState.event, this._onDidChangeShell = new M(), this.onDidChangeShell = this._onDidChangeShell.event, this._onDidWriteTerminalData = new M({
      onWillAddFirstListener: () => this._proxy.$startSendingDataEvents(),
      onDidRemoveLastListener: () => this._proxy.$stopSendingDataEvents()
    }), this.onDidWriteTerminalData = this._onDidWriteTerminalData.event, this._onDidExecuteCommand = new M({
      onWillAddFirstListener: () => this._proxy.$startSendingCommandEvents(),
      onDidRemoveLastListener: () => this._proxy.$stopSendingCommandEvents()
    }), this.onDidExecuteTerminalCommand = this._onDidExecuteCommand.event, this._proxy = n.getProxy(ie.MainThreadTerminalService), this._bufferer = new pO(this._proxy.$sendProcessData), this._proxy.$registerProcessSupport(e), this._extHostCommands.registerArgumentProcessor({
      processArgument: (r) => {
        const s = (o) => {
          var l;
          const a = o;
          return (l = this.getTerminalById(a.instanceId)) == null ? void 0 : l.value;
        };
        switch (r == null ? void 0 : r.$mid) {
          case rt.TerminalContext:
            return s(r);
          default: {
            if (Array.isArray(r))
              for (let o = 0; o < r.length && r[o].$mid === rt.TerminalContext; o++)
                r[o] = s(r[o]);
            return r;
          }
        }
      }
    }), this._register({
      dispose: () => {
        for (const [r, s] of this._terminalProcesses)
          s.shutdown(!0);
      }
    });
  }
  getDefaultShell(e) {
    const t = e ? this._defaultAutomationProfile : this._defaultProfile;
    return (t == null ? void 0 : t.path) || "";
  }
  getDefaultShellArgs(e) {
    const t = e ? this._defaultAutomationProfile : this._defaultProfile;
    return (t == null ? void 0 : t.args) || [];
  }
  createExtensionTerminal(e, t) {
    const n = new _C(this._proxy, dn(), e, e.name), r = new cw(e.pty);
    return n.createExtensionTerminal(e.location, t, this._serializeParentTerminal(e, t).resolvedExtHostIdentifier, vA(e.iconPath), yO(e.color)).then((s) => {
      const o = this._setupExtHostProcessListeners(s, r);
      this._terminalProcessDisposables[s] = o;
    }), this._terminals.push(n), n.value;
  }
  _serializeParentTerminal(e, t) {
    if (t = t || {}, e.location && typeof e.location == "object" && "parentTerminal" in e.location) {
      const n = e.location.parentTerminal;
      if (n) {
        const r = this._terminals.find((s) => s.value === n);
        r && (t.resolvedExtHostIdentifier = r._id);
      }
    } else e.location && typeof e.location != "object" ? t.location = e.location : t.location && typeof t.location == "object" && "splitActiveTerminal" in t.location && (t.location = { splitActiveTerminal: !0 });
    return t;
  }
  attachPtyToTerminal(e, t) {
    if (!this.getTerminalById(e))
      throw new Error(`Cannot resolve terminal with id ${e} for virtual process`);
    const r = new cw(t), s = this._setupExtHostProcessListeners(e, r);
    this._terminalProcessDisposables[e] = s;
  }
  async $acceptActiveTerminalChanged(e) {
    const t = this._activeTerminal;
    if (e === null) {
      this._activeTerminal = void 0, t !== this._activeTerminal && this._onDidChangeActiveTerminal.fire(this._activeTerminal);
      return;
    }
    const n = this.getTerminalById(e);
    n && (this._activeTerminal = n, t !== this._activeTerminal && this._onDidChangeActiveTerminal.fire(this._activeTerminal.value));
  }
  async $acceptTerminalProcessData(e, t) {
    const n = this.getTerminalById(e);
    n && this._onDidWriteTerminalData.fire({ terminal: n.value, data: t });
  }
  async $acceptTerminalDimensions(e, t, n) {
    const r = this.getTerminalById(e);
    r && r.setDimensions(t, n) && this._onDidChangeTerminalDimensions.fire({
      terminal: r.value,
      dimensions: r.value.dimensions
    });
  }
  async $acceptDidExecuteCommand(e, t) {
    const n = this.getTerminalById(e);
    n && this._onDidExecuteCommand.fire({ terminal: n.value, ...t });
  }
  async $acceptTerminalMaximumDimensions(e, t, n) {
    var r;
    (r = this._terminalProcesses.get(e)) == null || r.resize(t, n);
  }
  async $acceptTerminalTitleChange(e, t) {
    const n = this.getTerminalById(e);
    n && (n.name = t);
  }
  async $acceptTerminalClosed(e, t, n) {
    const r = this._getTerminalObjectIndexById(this._terminals, e);
    if (r !== null) {
      const s = this._terminals.splice(r, 1)[0];
      s.setExitStatus(t, n), this._onDidCloseTerminal.fire(s.value);
    }
  }
  $acceptTerminalOpened(e, t, n, r) {
    if (t) {
      const a = this._getTerminalObjectIndexById(this._terminals, t);
      if (a !== null) {
        this._terminals[a]._id = e, this._onDidOpenTerminal.fire(this.terminals[a]), this._terminals[a].isOpen = !0;
        return;
      }
    }
    const s = {
      name: r.name,
      shellPath: r.executable,
      shellArgs: r.args,
      cwd: typeof r.cwd == "string" ? r.cwd : x.revive(r.cwd),
      env: r.env,
      hideFromUser: r.hideFromUser
    }, o = new _C(this._proxy, e, s, n);
    this._terminals.push(o), this._onDidOpenTerminal.fire(o.value), o.isOpen = !0;
  }
  async $acceptTerminalProcessId(e, t) {
    const n = this.getTerminalById(e);
    n == null || n._setProcessId(t);
  }
  async $startExtensionTerminal(e, t) {
    const n = this.getTerminalById(e);
    if (!n)
      return { message: h(2636, "Could not find the terminal with id {0} on the extension host", e) };
    n.isOpen || await new Promise((s) => {
      const o = this.onDidOpenTerminal(async (a) => {
        a === n.value && (o.dispose(), s());
      });
    });
    const r = this._terminalProcesses.get(e);
    r ? r.startSendingEvents(t) : this._extensionTerminalAwaitingStart[e] = { initialDimensions: t };
  }
  _setupExtHostProcessListeners(e, t) {
    const n = new Te();
    n.add(t.onProcessReady((s) => this._proxy.$sendProcessReady(e, s.pid, s.cwd, s.windowsPty))), n.add(t.onDidChangeProperty((s) => this._proxy.$sendProcessProperty(e, s))), this._bufferer.startBuffering(e, t.onProcessData), n.add(t.onProcessExit((s) => this._onProcessExit(e, s))), this._terminalProcesses.set(e, t);
    const r = this._extensionTerminalAwaitingStart[e];
    return r && t instanceof cw && (t.startSendingEvents(r.initialDimensions), delete this._extensionTerminalAwaitingStart[e]), n;
  }
  $acceptProcessAckDataEvent(e, t) {
    var n;
    (n = this._terminalProcesses.get(e)) == null || n.acknowledgeDataEvent(t);
  }
  $acceptProcessInput(e, t) {
    var n;
    (n = this._terminalProcesses.get(e)) == null || n.input(t);
  }
  $acceptTerminalInteraction(e) {
    const t = this.getTerminalById(e);
    t != null && t.setInteractedWith() && this._onDidChangeTerminalState.fire(t.value);
  }
  $acceptTerminalSelection(e, t) {
    var n;
    (n = this.getTerminalById(e)) == null || n.setSelection(t);
  }
  $acceptProcessResize(e, t, n) {
    var r;
    try {
      (r = this._terminalProcesses.get(e)) == null || r.resize(t, n);
    } catch (s) {
      if (s.code !== "EPIPE" && s.code !== "ERR_IPC_CHANNEL_CLOSED")
        throw s;
    }
  }
  $acceptProcessShutdown(e, t) {
    var n;
    (n = this._terminalProcesses.get(e)) == null || n.shutdown(t);
  }
  $acceptProcessRequestInitialCwd(e) {
    var t;
    (t = this._terminalProcesses.get(e)) == null || t.getInitialCwd().then((n) => this._proxy.$sendProcessProperty(e, { type: pd.InitialCwd, value: n }));
  }
  $acceptProcessRequestCwd(e) {
    var t;
    (t = this._terminalProcesses.get(e)) == null || t.getCwd().then((n) => this._proxy.$sendProcessProperty(e, { type: pd.Cwd, value: n }));
  }
  $acceptProcessRequestLatency(e) {
    return Promise.resolve(e);
  }
  registerProfileProvider(e, t, n) {
    if (this._profileProviders.has(t))
      throw new Error(`Terminal profile provider "${t}" already registered`);
    return this._profileProviders.set(t, n), this._proxy.$registerProfileProvider(t, e.identifier.value), new je(() => {
      this._profileProviders.delete(t), this._proxy.$unregisterProfileProvider(t);
    });
  }
  registerTerminalCompletionProvider(e, t, ...n) {
    if (this._completionProviders.has(t.id))
      throw new Error(`Terminal completion provider "${t.id}" already registered`);
    return this._completionProviders.set(t.id, t), this._proxy.$registerCompletionProvider(t.id, e.identifier.value, ...n), new je(() => {
      this._completionProviders.delete(t.id), this._proxy.$unregisterCompletionProvider(t.id);
    });
  }
  async $provideTerminalCompletions(e, t) {
    var a;
    const n = new Lt().token;
    if (n.isCancellationRequested || !this.activeTerminal)
      return;
    const r = this._completionProviders.get(e);
    if (!r)
      return;
    const s = await r.provideTerminalCompletions(this.activeTerminal, t, n);
    if (s == null)
      return;
    const o = !Yi || ((a = this.activeTerminal.state) == null ? void 0 : a.shell) === V0.GitBash ? "/" : "\\";
    return w0.from(s, o);
  }
  $acceptTerminalShellType(e, t) {
    const n = this.getTerminalById(e);
    n != null && n.setShellType(t) && this._onDidChangeTerminalState.fire(n.value);
  }
  registerTerminalQuickFixProvider(e, t, n) {
    if (this._quickFixProviders.has(e))
      throw new Error(`Terminal quick fix provider "${e}" is already registered`);
    return this._quickFixProviders.set(e, n), this._proxy.$registerQuickFixProvider(e, t), new je(() => {
      this._quickFixProviders.delete(e), this._proxy.$unregisterQuickFixProvider(e);
    });
  }
  async $provideTerminalQuickFixes(e, t) {
    const n = new Lt().token;
    if (n.isCancellationRequested)
      return;
    const r = this._quickFixProviders.get(e);
    if (!r)
      return;
    const s = await r.provideTerminalQuickFixes(t, n);
    if (s === null || Array.isArray(s) && s.length === 0)
      return;
    const o = new Te();
    if (this._lastQuickFixCommands.value = o, !Array.isArray(s))
      return s ? Y_.from(s, this._extHostCommands.converter, o) : void 0;
    const a = [];
    for (const l of s) {
      const c = Y_.from(l, this._extHostCommands.converter, o);
      c && a.push(c);
    }
    return a;
  }
  async $createContributedProfileTerminal(e, t) {
    var s;
    const n = new Lt().token;
    let r = await ((s = this._profileProviders.get(e)) == null ? void 0 : s.provideTerminalProfile(n));
    if (!n.isCancellationRequested) {
      if (r && !("options" in r) && (r = { options: r }), !r || !("options" in r))
        throw new Error(`No terminal profile options provided for id "${e}"`);
      if ("pty" in r.options) {
        this.createExtensionTerminal(r.options, t);
        return;
      }
      this.createTerminalFromOptions(r.options, t);
    }
  }
  registerLinkProvider(e) {
    return this._linkProviders.add(e), this._linkProviders.size === 1 && this._proxy.$startLinkProvider(), new je(() => {
      this._linkProviders.delete(e), this._linkProviders.size === 0 && this._proxy.$stopLinkProvider();
    });
  }
  async $provideLinks(e, t) {
    const n = this.getTerminalById(e);
    if (!n)
      return [];
    this._terminalLinkCache.delete(e);
    const r = this._terminalLinkCancellationSource.get(e);
    r == null || r.dispose(!0);
    const s = new Lt();
    this._terminalLinkCancellationSource.set(e, s);
    const o = [], a = { terminal: n.value, line: t }, l = [];
    for (const d of this._linkProviders)
      l.push(Uu.withAsyncBody(async (f) => {
        s.token.onCancellationRequested(() => f({ provider: d, links: [] }));
        const p = await d.provideTerminalLinks(a, s.token) || [];
        s.token.isCancellationRequested || f({ provider: d, links: p });
      }));
    const c = await Promise.all(l);
    if (s.token.isCancellationRequested)
      return [];
    const u = /* @__PURE__ */ new Map();
    for (const d of c)
      d && d.links.length > 0 && o.push(...d.links.map((f) => {
        const p = {
          id: wO++,
          startIndex: f.startIndex,
          length: f.length,
          label: f.tooltip
        };
        return u.set(p.id, {
          provider: d.provider,
          link: f
        }), p;
      }));
    return this._terminalLinkCache.set(e, u), o;
  }
  $activateLink(e, t) {
    var r;
    const n = (r = this._terminalLinkCache.get(e)) == null ? void 0 : r.get(t);
    n && n.provider.handleTerminalLink(n.link);
  }
  _onProcessExit(e, t) {
    this._bufferer.stopBuffering(e), this._terminalProcesses.delete(e), delete this._extensionTerminalAwaitingStart[e];
    const n = this._terminalProcessDisposables[e];
    n && (n.dispose(), delete this._terminalProcessDisposables[e]), this._proxy.$sendProcessExit(e, t);
  }
  getTerminalById(e) {
    return this._getTerminalObjectById(this._terminals, e);
  }
  getTerminalIdByApiObject(e) {
    const t = this._terminals.findIndex((n) => n.value === e);
    return t >= 0 ? t : null;
  }
  _getTerminalObjectById(e, t) {
    const n = this._getTerminalObjectIndexById(e, t);
    return n !== null ? e[n] : null;
  }
  _getTerminalObjectIndexById(e, t) {
    const n = e.findIndex((r) => r._id === t);
    return n >= 0 ? n : null;
  }
  getEnvironmentVariableCollection(e) {
    let t = this._environmentVariableCollections.get(e.identifier.value);
    return t || (t = this._register(new vC()), this._setEnvironmentVariableCollection(e.identifier.value, t)), t.getScopedEnvironmentVariableCollection(void 0);
  }
  _syncEnvironmentVariableCollection(e, t) {
    const n = cO(t.map), r = uO(t.descriptionMap);
    this._proxy.$setEnvironmentVariableCollection(e, t.persistent, n.length === 0 ? void 0 : n, r);
  }
  $initEnvironmentVariableCollections(e) {
    e.forEach((t) => {
      const n = t[0], r = this._register(new vC(t[1]));
      this._setEnvironmentVariableCollection(n, r);
    });
  }
  $acceptDefaultProfile(e, t) {
    const n = this._defaultProfile;
    this._defaultProfile = e, this._defaultAutomationProfile = t, (n == null ? void 0 : n.path) !== e.path && this._onDidChangeShell.fire(e.path);
  }
  _setEnvironmentVariableCollection(e, t) {
    this._environmentVariableCollections.set(e, t), this._register(t.onDidChangeCollection(() => {
      this._syncEnvironmentVariableCollection(e, t);
    }));
  }
};
G0 = z([
  O(1, ic),
  O(2, tt)
], G0);
class vC extends xe {
  get persistent() {
    return this._persistent;
  }
  set persistent(e) {
    this._persistent = e, this._onDidChangeCollection.fire();
  }
  get onDidChangeCollection() {
    return this._onDidChangeCollection && this._onDidChangeCollection.event;
  }
  constructor(e) {
    super(), this.map = /* @__PURE__ */ new Map(), this.scopedCollections = /* @__PURE__ */ new Map(), this.descriptionMap = /* @__PURE__ */ new Map(), this._persistent = !0, this._onDidChangeCollection = new M(), this.map = new Map(e);
  }
  getScopedEnvironmentVariableCollection(e) {
    const t = this.getScopeKey(e);
    let n = this.scopedCollections.get(t);
    return n || (n = new bO(this, e), this.scopedCollections.set(t, n), this._register(n.onDidChangeCollection(() => this._onDidChangeCollection.fire()))), n;
  }
  replace(e, t, n, r) {
    this._setIfDiffers(e, { value: t, type: Yc.Replace, options: n ?? { applyAtProcessCreation: !0 }, scope: r });
  }
  append(e, t, n, r) {
    this._setIfDiffers(e, { value: t, type: Yc.Append, options: n ?? { applyAtProcessCreation: !0 }, scope: r });
  }
  prepend(e, t, n, r) {
    this._setIfDiffers(e, { value: t, type: Yc.Prepend, options: n ?? { applyAtProcessCreation: !0 }, scope: r });
  }
  _setIfDiffers(e, t) {
    var o, a, l, c, u, d;
    if (t.options && t.options.applyAtProcessCreation === !1 && !t.options.applyAtShellIntegration)
      throw new Error(
        "EnvironmentVariableMutatorOptions must apply at either process creation or shell integration"
      );
    const n = this.getKey(e, t.scope), r = this.map.get(n), s = t.options ? {
      applyAtProcessCreation: t.options.applyAtProcessCreation ?? !1,
      applyAtShellIntegration: t.options.applyAtShellIntegration ?? !1
    } : {
      applyAtProcessCreation: !0
    };
    if (!r || r.value !== t.value || r.type !== t.type || ((o = r.options) == null ? void 0 : o.applyAtProcessCreation) !== s.applyAtProcessCreation || ((a = r.options) == null ? void 0 : a.applyAtShellIntegration) !== s.applyAtShellIntegration || ((c = (l = r.scope) == null ? void 0 : l.workspaceFolder) == null ? void 0 : c.index) !== ((d = (u = t.scope) == null ? void 0 : u.workspaceFolder) == null ? void 0 : d.index)) {
      const f = this.getKey(e, t.scope), p = {
        variable: e,
        ...t,
        options: s
      };
      this.map.set(f, p), this._onDidChangeCollection.fire();
    }
  }
  get(e, t) {
    const n = this.getKey(e, t), r = this.map.get(n);
    return r ? wC(r) : void 0;
  }
  getKey(e, t) {
    const n = this.getScopeKey(t);
    return n.length ? `${e}:::${n}` : e;
  }
  getScopeKey(e) {
    return this.getWorkspaceKey(e == null ? void 0 : e.workspaceFolder) ?? "";
  }
  getWorkspaceKey(e) {
    return e ? e.uri.toString() : void 0;
  }
  getVariableMap(e) {
    const t = /* @__PURE__ */ new Map();
    for (const [n, r] of this.map)
      this.getScopeKey(r.scope) === this.getScopeKey(e) && t.set(r.variable, wC(r));
    return t;
  }
  delete(e, t) {
    const n = this.getKey(e, t);
    this.map.delete(n), this._onDidChangeCollection.fire();
  }
  clear(e) {
    var t, n;
    if (e != null && e.workspaceFolder) {
      for (const [r, s] of this.map)
        ((n = (t = s.scope) == null ? void 0 : t.workspaceFolder) == null ? void 0 : n.index) === e.workspaceFolder.index && this.map.delete(r);
      this.clearDescription(e);
    } else
      this.map.clear(), this.descriptionMap.clear();
    this._onDidChangeCollection.fire();
  }
  setDescription(e, t) {
    const n = this.getScopeKey(t), r = this.descriptionMap.get(n);
    if (!r || r.description !== e) {
      let s;
      typeof e == "string" ? s = e : s = e == null ? void 0 : e.value.split(`

`)[0];
      const o = { description: s, scope: t };
      this.descriptionMap.set(n, o), this._onDidChangeCollection.fire();
    }
  }
  getDescription(e) {
    var n;
    const t = this.getScopeKey(e);
    return (n = this.descriptionMap.get(t)) == null ? void 0 : n.description;
  }
  clearDescription(e) {
    const t = this.getScopeKey(e);
    this.descriptionMap.delete(t);
  }
}
class bO {
  get persistent() {
    return this.collection.persistent;
  }
  set persistent(e) {
    this.collection.persistent = e;
  }
  get onDidChangeCollection() {
    return this._onDidChangeCollection && this._onDidChangeCollection.event;
  }
  constructor(e, t) {
    this.collection = e, this.scope = t, this._onDidChangeCollection = new M();
  }
  getScoped(e) {
    return this.collection.getScopedEnvironmentVariableCollection(e);
  }
  replace(e, t, n) {
    this.collection.replace(e, t, n, this.scope);
  }
  append(e, t, n) {
    this.collection.append(e, t, n, this.scope);
  }
  prepend(e, t, n) {
    this.collection.prepend(e, t, n, this.scope);
  }
  get(e) {
    return this.collection.get(e, this.scope);
  }
  forEach(e, t) {
    this.collection.getVariableMap(this.scope).forEach((n, r) => e.call(t, r, n, this), this.scope);
  }
  [Symbol.iterator]() {
    return this.collection.getVariableMap(this.scope).entries();
  }
  delete(e) {
    this.collection.delete(e, this.scope), this._onDidChangeCollection.fire(void 0);
  }
  clear() {
    this.collection.clear(this.scope);
  }
  set description(e) {
    this.collection.setDescription(e, this.scope);
  }
  get description() {
    return this.collection.getDescription(this.scope);
  }
}
let Q0 = class extends G0 {
  constructor(e, t) {
    super(!1, e, t);
  }
  createTerminal(e, t, n) {
    throw new Tw();
  }
  createTerminalFromOptions(e, t) {
    throw new Tw();
  }
};
Q0 = z([
  O(0, ic),
  O(1, tt)
], Q0);
function vA(i) {
  if (!(!i || typeof i == "string"))
    return "id" in i ? {
      id: i.id,
      color: i.color
    } : i;
}
function yO(i) {
  return Bu.isThemeColor(i) ? i : void 0;
}
function wC(i) {
  const e = { ...i };
  return delete e.scope, e.options = e.options ?? void 0, delete e.variable, e;
}
const wA = "__", bA = "/.well-known", xO = `${bA}/oauth-authorization-server`, bC = `${bA}/openid-configuration`, EO = " ";
var s1;
(function(i) {
  i.InvalidRequest = "invalid_request", i.InvalidClient = "invalid_client", i.InvalidGrant = "invalid_grant", i.UnauthorizedClient = "unauthorized_client", i.UnsupportedGrantType = "unsupported_grant_type", i.InvalidScope = "invalid_scope";
})(s1 || (s1 = {}));
var yC;
(function(i) {
  i.AuthorizationPending = "authorization_pending", i.SlowDown = "slow_down", i.AccessDenied = "access_denied", i.ExpiredToken = "expired_token";
})(yC || (yC = {}));
var xC;
(function(i) {
  i.InvalidRedirectUri = "invalid_redirect_uri", i.InvalidClientMetadata = "invalid_client_metadata", i.InvalidSoftwareStatement = "invalid_software_statement", i.UnapprovedSoftwareStatement = "unapproved_software_statement";
})(xC || (xC = {}));
function SO(i) {
  return typeof i != "object" || i === null ? !1 : i.resource !== void 0;
}
function DO(i) {
  return typeof i != "object" || i === null ? !1 : i.issuer !== void 0;
}
function kO(i) {
  return typeof i != "object" || i === null ? !1 : i.client_id !== void 0;
}
function EC(i) {
  if (typeof i != "object" || i === null)
    return !1;
  const e = i;
  return e.access_token !== void 0 && e.token_type !== void 0;
}
function SC(i) {
  return typeof i != "object" || i === null ? !1 : i.error !== void 0;
}
function IO(i) {
  return typeof i != "object" || i === null ? !1 : i.error !== void 0;
}
function CO(i) {
  return {
    issuer: i.toString(),
    authorization_endpoint: new URL("/authorize", i).toString(),
    token_endpoint: new URL("/token", i).toString(),
    registration_endpoint: new URL("/register", i).toString(),
    response_types_supported: ["code", "id_token", "id_token token"]
  };
}
const DC = ["authorization_code", "refresh_token", "urn:ietf:params:oauth:grant-type:device_code"], kC = 33418;
async function yA(i, e, t) {
  if (!i.registration_endpoint)
    throw new Error("Server does not support dynamic registration");
  const n = await fetch(i.registration_endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      client_name: e,
      client_uri: "https://code.visualstudio.com",
      grant_types: i.grant_types_supported ? i.grant_types_supported.filter((s) => DC.includes(s)) : DC,
      response_types: ["code"],
      redirect_uris: [
        "https://insiders.vscode.dev/redirect",
        "https://vscode.dev/redirect",
        "http://localhost",
        "http://127.0.0.1",
        `http://localhost:${kC}`,
        `http://127.0.0.1:${kC}`
      ],
      scope: t == null ? void 0 : t.join(EO),
      token_endpoint_auth_method: "none",
      application_type: "native"
    })
  });
  if (!n.ok) {
    const s = await n.text();
    let o = s;
    try {
      const a = JSON.parse(s);
      IO(a) && (o = `${a.error}${a.error_description ? `: ${a.error_description}` : ""}`);
    } catch {
    }
    throw new Error(
      `Registration to ${i.registration_endpoint} failed: ${o}`
    );
  }
  const r = await n.json();
  if (kO(r))
    return r;
  throw new Error(
    `Invalid authorization dynamic client registration response: ${JSON.stringify(r)}`
  );
}
function TO(i) {
  const e = i.split(" "), t = e[0], n = {};
  return e.length > 1 && e.slice(1).join(" ").split(",").forEach((s) => {
    const [o, a] = s.split("=").map((l) => l.trim().replace(/"/g, ""));
    n[o] = a;
  }), { scheme: t, params: n };
}
function IC(i) {
  const e = i.split(".");
  if (e.length !== 3)
    throw new Error("Invalid JWT token format: token must have three parts separated by dots");
  const [t, n, r] = e;
  try {
    if (typeof JSON.parse(Mu(t).toString()) != "object")
      throw new Error("Invalid JWT token format: header is not a JSON object");
    const o = JSON.parse(Mu(n).toString());
    if (typeof o != "object")
      throw new Error("Invalid JWT token format: payload is not a JSON object");
    return o;
  } catch (s) {
    throw s instanceof Error ? new Error(`Failed to parse JWT token: ${s.message}`) : new Error("Failed to parse JWT token");
  }
}
var K0, Tl;
let J0 = (Tl = class {
  getState() {
    const e = this._state;
    return {
      get focused() {
        return e.focused;
      },
      get active() {
        return e.active;
      }
    };
  }
  constructor(e, t) {
    this._onDidChangeWindowState = new M(), this.onDidChangeWindowState = this._onDidChangeWindowState.event, this._state = K0.InitialState, e.handle && (this._nativeHandle = Mu(e.handle).buffer), this._proxy = t.getProxy(ie.MainThreadWindow), this._proxy.$getInitialState().then(({ isFocused: n, isActive: r }) => {
      this.onDidChangeWindowProperty("focused", n), this.onDidChangeWindowProperty("active", r);
    });
  }
  get nativeHandle() {
    return this._nativeHandle;
  }
  $onDidChangeActiveNativeWindowHandle(e) {
    this._nativeHandle = e ? Mu(e).buffer : void 0;
  }
  $onDidChangeWindowFocus(e) {
    this.onDidChangeWindowProperty("focused", e);
  }
  $onDidChangeWindowActive(e) {
    this.onDidChangeWindowProperty("active", e);
  }
  onDidChangeWindowProperty(e, t) {
    t !== this._state[e] && (this._state = { ...this._state, [e]: t }, this._onDidChangeWindowState.fire(this._state));
  }
  openUri(e, t) {
    let n;
    if (typeof e == "string") {
      n = e;
      try {
        e = x.parse(e);
      } catch {
        return Promise.reject(`Invalid uri - '${e}'`);
      }
    }
    return qh(e.scheme) ? Promise.reject("Invalid scheme - cannot be empty") : e.scheme === fe.command ? Promise.reject(`Invalid scheme '${e.scheme}'`) : this._proxy.$openUri(e, n, t);
  }
  async asExternalUri(e, t) {
    if (qh(e.scheme))
      return Promise.reject("Invalid scheme - cannot be empty");
    const n = await this._proxy.$asExternalUri(e, t);
    return x.from(n);
  }
}, K0 = Tl, Tl.InitialState = {
  focused: !0,
  active: !0
}, Tl);
J0 = K0 = z([
  O(0, _i),
  O(1, tt)
], J0);
const Sv = me("IExtHostWindow");
var Y0, Pl;
let X0 = (Pl = class {
  constructor(e) {
    this.handles = new Ql(), this.handlers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadUrls);
  }
  registerUriHandler(e, t) {
    const n = e.identifier;
    if (this.handles.has(n))
      throw new Error(`Protocol handler already registered for extension ${n}`);
    const r = Y0.HandlePool++;
    return this.handles.add(n), this.handlers.set(r, t), this._proxy.$registerUriHandler(r, n, e.displayName || e.name), Ie(() => {
      this.handles.delete(n), this.handlers.delete(r), this._proxy.$unregisterUriHandler(r);
    });
  }
  $handleExternalUri(e, t) {
    const n = this.handlers.get(e);
    if (!n)
      return Promise.resolve(void 0);
    try {
      n.handleUri(x.revive(t));
    } catch (r) {
      Fi(r);
    }
    return Promise.resolve(void 0);
  }
  async createAppUri(e) {
    return x.revive(await this._proxy.$createAppUri(e));
  }
}, Y0 = Pl, Pl.HandlePool = 0, Pl);
X0 = Y0 = z([
  O(0, tt)
], X0);
const Dv = me("IExtHostUrlsService");
function xA(i) {
  return (e, t, n) => {
    let r = null, s = null;
    if (typeof n.value == "function" ? (r = "value", s = n.value) : typeof n.get == "function" && (r = "get", s = n.get), !s || typeof t == "symbol")
      throw new Error("not supported");
    n[r] = i(s, t);
  };
}
function EA(i, e, t) {
  return xA((n, r) => {
    const s = `$debounce$${r}`, o = `$debounce$result$${r}`;
    return function(...a) {
      this[o] || (this[o] = void 0), clearTimeout(this[s]), this[s] = setTimeout(() => {
        n.apply(this, a), this[o] = void 0;
      }, i);
    };
  });
}
function PO(i, e, t) {
  return xA((n, r) => {
    const s = `$throttle$timer$${r}`, o = `$throttle$result$${r}`, a = `$throttle$lastRun$${r}`, l = `$throttle$pending$${r}`;
    return function(...c) {
      if (this[o] || (this[o] = t ? t() : void 0), (this[a] === null || this[a] === void 0) && (this[a] = -Number.MAX_VALUE), e && (this[o] = e(this[o], ...c)), this[l])
        return;
      const u = this[a] + i;
      u <= Date.now() ? (this[a] = Date.now(), n.apply(this, [this[o]]), this[o] = t ? t() : void 0) : (this[l] = !0, this[s] = setTimeout(() => {
        this[l] = !1, this[a] = Date.now(), n.apply(this, [this[o]]), this[o] = t ? t() : void 0;
      }, u - Date.now()));
    };
  });
}
const kv = me("IExtHostProgress");
let Z0 = class {
  constructor(e) {
    this._handles = 0, this._mapHandleToCancellationSource = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadProgress);
  }
  async withProgress(e, t, n) {
    const r = this._handles++, { title: s, location: o, cancellable: a } = t, l = { label: e.displayName || e.name, id: e.identifier.value };
    return this._proxy.$startProgress(r, { location: L_.from(o), title: s, source: l, cancellable: a }, e.isUnderDevelopment ? void 0 : e.identifier.value).catch(Cw), this._withProgress(r, n, !!a);
  }
  async withProgressFromSource(e, t, n) {
    const r = this._handles++, { title: s, location: o, cancellable: a } = t;
    return this._proxy.$startProgress(r, { location: L_.from(o), title: s, source: e, cancellable: a }, void 0).catch(Cw), this._withProgress(r, n, !!a);
  }
  _withProgress(e, t, n) {
    let r;
    n && (r = new Lt(), this._mapHandleToCancellationSource.set(e, r));
    const s = (a) => {
      this._proxy.$progressEnd(a), this._mapHandleToCancellationSource.delete(a), r == null || r.dispose();
    };
    let o;
    try {
      o = t(new ex(this._proxy, e), n && r ? r.token : Dt.None);
    } catch (a) {
      throw s(e), a;
    }
    return o.then((a) => s(e), (a) => s(e)), o;
  }
  $acceptProgressCanceled(e) {
    const t = this._mapHandleToCancellationSource.get(e);
    t && (t.cancel(), this._mapHandleToCancellationSource.delete(e));
  }
};
Z0 = z([
  O(0, tt)
], Z0);
function AO(i, e) {
  return i.message = e.message, typeof e.increment == "number" && (typeof i.increment == "number" ? i.increment += e.increment : i.increment = e.increment), i;
}
class ex extends Jh {
  constructor(e, t) {
    super((n) => this.throttledReport(n)), this._proxy = e, this._handle = t;
  }
  throttledReport(e) {
    this._proxy.$progressReport(this._handle, e);
  }
}
ex.__decorator = z([
  PO(100, (i, e) => AO(i, e), () => /* @__PURE__ */ Object.create(null))
], ex.prototype, "throttledReport", null);
const NS = me("IExtHostAuthentication");
let tx = class {
  constructor(e, t, n, r, s, o, a) {
    this._initData = t, this._extHostWindow = n, this._extHostUrls = r, this._extHostProgress = s, this._extHostLoggerService = o, this._logService = a, this._dynamicAuthProviderCtor = ix, this._authenticationProviders = /* @__PURE__ */ new Map(), this._providerOperations = new bL(), this._onDidChangeSessions = new M(), this._getSessionTaskSingler = new RO(), this._onDidDynamicAuthProviderTokensChange = new M(), this._proxy = e.getProxy(ie.MainThreadAuthentication);
  }
  getExtensionScopedSessionsEvent(e) {
    const t = e.toLowerCase();
    return Pt.chain(this._onDidChangeSessions.event, (n) => n.filter((r) => !r.extensionIdFilter || r.extensionIdFilter.includes(t)).map((r) => ({ provider: r.provider })));
  }
  async getSession(e, t, n, r = {}) {
    const s = gt.toKey(e.identifier), o = [...n].sort().join(" "), l = Object.keys(r).sort().map((c) => `${c}:${!!r[c]}`).join(", ");
    return await this._getSessionTaskSingler.getOrCreate(`${s} ${t} ${o} ${l}`, async () => {
      await this._proxy.$ensureProvider(t);
      const c = e.displayName || e.name;
      return this._proxy.$getSession(t, n, s, c, r);
    });
  }
  async getAccounts(e) {
    return await this._proxy.$ensureProvider(e), await this._proxy.$getAccounts(e);
  }
  registerAuthenticationProvider(e, t, n, r) {
    return this._providerOperations.queue(e, async () => {
      if (this._authenticationProviders.get(e)) {
        this._logService.error(`An authentication provider with id '${e}' is already registered. The existing provider will not be replaced.`);
        return;
      }
      const s = n.onDidChangeSessions((o) => this._proxy.$sendDidChangeSessions(e, o));
      this._authenticationProviders.set(e, { label: t, provider: n, disposable: s, options: r ?? { supportsMultipleAccounts: !1 } }), await this._proxy.$registerAuthenticationProvider(e, t, (r == null ? void 0 : r.supportsMultipleAccounts) ?? !1, r == null ? void 0 : r.supportedAuthorizationServers);
    }), new je(() => {
      this._providerOperations.queue(e, async () => {
        var o;
        const s = this._authenticationProviders.get(e);
        s && ((o = s.disposable) == null || o.dispose(), this._authenticationProviders.delete(e), await this._proxy.$unregisterAuthenticationProvider(e));
      });
    });
  }
  $createSession(e, t, n) {
    return this._providerOperations.queue(e, async () => {
      const r = this._authenticationProviders.get(e);
      if (r)
        return n.authorizationServer = x.revive(n.authorizationServer), await r.provider.createSession(t, n);
      throw new Error(`Unable to find authentication provider with handle: ${e}`);
    });
  }
  $removeSession(e, t) {
    return this._providerOperations.queue(e, async () => {
      const n = this._authenticationProviders.get(e);
      if (n)
        return await n.provider.removeSession(t);
      throw new Error(`Unable to find authentication provider with handle: ${e}`);
    });
  }
  $getSessions(e, t, n) {
    return this._providerOperations.queue(e, async () => {
      const r = this._authenticationProviders.get(e);
      if (r)
        return n.authorizationServer = x.revive(n.authorizationServer), await r.provider.getSessions(t, n);
      throw new Error(`Unable to find authentication provider with handle: ${e}`);
    });
  }
  $onDidChangeAuthenticationSessions(e, t, n) {
    return e.startsWith(wA) || this._onDidChangeSessions.fire({ provider: { id: e, label: t }, extensionIdFilter: n }), Promise.resolve();
  }
  $onDidUnregisterAuthenticationProvider(e) {
    return this._providerOperations.queue(e, async () => {
      var n;
      const t = this._authenticationProviders.get(e);
      t && ((n = t.disposable) == null || n.dispose(), this._authenticationProviders.delete(e));
    });
  }
  async $registerDynamicAuthProvider(e, t, n, r, s, o) {
    if (!r) {
      const l = x.revive(e);
      if (t.registration_endpoint)
        try {
          const c = await yA(t, this._initData.environment.appName, n == null ? void 0 : n.scopes_supported);
          r = c.client_id, s = c.client_secret;
        } catch (c) {
          this._logService.warn(`Dynamic registration failed for ${l.toString()}: ${c.message}. Prompting user for client ID and client secret...`);
        }
      if (!r) {
        this._logService.info(`Prompting user for client registration details for ${l.toString()}`);
        const c = await this._proxy.$promptForClientRegistration(l.toString());
        if (!c)
          throw new Error("User did not provide client details");
        r = c.clientId, s = c.clientSecret, this._logService.info(`User provided client registration for ${l.toString()}`), s ? this._logService.trace(`User provided client secret for ${l.toString()}`) : this._logService.trace(`User did not provide client secret for ${l.toString()}`);
      }
    }
    const a = new this._dynamicAuthProviderCtor(this._extHostWindow, this._extHostUrls, this._initData, this._extHostProgress, this._extHostLoggerService, this._proxy, x.revive(e), t, n, r, s, this._onDidDynamicAuthProviderTokensChange, o || []);
    return await this._providerOperations.queue(a.id, async () => {
      this._authenticationProviders.set(a.id, {
        label: a.label,
        provider: a,
        disposable: je.from(a, a.onDidChangeSessions((l) => this._proxy.$sendDidChangeSessions(a.id, l)), a.onDidChangeClientId(() => this._proxy.$sendDidChangeDynamicProviderInfo({
          providerId: a.id,
          clientId: a.clientId,
          clientSecret: a.clientSecret
        }))),
        options: { supportsMultipleAccounts: !1 }
      }), await this._proxy.$registerDynamicAuthenticationProvider(a.id, a.label, a.authorizationServer, a.clientId, a.clientSecret);
    }), a.id;
  }
  async $onDidChangeDynamicAuthProviderTokens(e, t, n) {
    this._onDidDynamicAuthProviderTokensChange.fire({ authProviderId: e, clientId: t, tokens: n });
  }
};
tx = z([
  O(0, tt),
  O(1, _i),
  O(2, Sv),
  O(3, Dv),
  O(4, kv),
  O(5, ta),
  O(6, ot)
], tx);
class RO {
  constructor() {
    this._inFlightPromises = /* @__PURE__ */ new Map();
  }
  getOrCreate(e, t) {
    const n = this._inFlightPromises.get(e);
    if (n)
      return n;
    const r = t().finally(() => this._inFlightPromises.delete(e));
    return this._inFlightPromises.set(e, r), r;
  }
}
let ix = class {
  constructor(e, t, n, r, s, o, a, l, c, u, d, f, p) {
    this._extHostWindow = e, this._extHostUrls = t, this._initData = n, this._extHostProgress = r, this._proxy = o, this.authorizationServer = a, this._serverMetadata = l, this._resourceMetadata = c, this._clientId = u, this._clientSecret = d, this._onDidChangeSessions = new M(), this.onDidChangeSessions = this._onDidChangeSessions.event, this._onDidChangeClientId = new M(), this.onDidChangeClientId = this._onDidChangeClientId.event;
    const v = a.toString(!0);
    this.id = c != null && c.resource ? v + " " + (c == null ? void 0 : c.resource) : v, this.label = (c == null ? void 0 : c.resource_name) ?? this.authorizationServer.authority, this._logger = s.createLogger(this.id, { name: this.label }), this._disposable = new Te(), this._disposable.add(this._onDidChangeSessions);
    const _ = Pt.chain(f.event, (m) => m.filter((E) => E.authProviderId === this.id && E.clientId === u).map((E) => E.tokens));
    this._tokenStore = this._disposable.add(new LO({
      onDidChange: _,
      set: (m) => o.$setSessionsForDynamicAuthProvider(this.id, this.clientId, m)
    }, p, this._logger)), this._disposable.add(this._tokenStore.onDidChangeSessions((m) => this._onDidChangeSessions.fire(m))), this._createFlows = [], l.authorization_endpoint && this._createFlows.push({
      label: h(2617, "URL Handler"),
      handler: (m, E, S) => this._createWithUrlHandler(m, E, S)
    });
  }
  get clientId() {
    return this._clientId;
  }
  get clientSecret() {
    return this._clientSecret;
  }
  async getSessions(e, t) {
    if (this._logger.info(`Getting sessions for scopes: ${(e == null ? void 0 : e.join(" ")) ?? "all"}`), !e)
      return this._tokenStore.sessions;
    const n = [...e].sort(), r = e.join(" ");
    let s = this._tokenStore.sessions.filter((o) => Fn([...o.scopes].sort(), n));
    if (this._logger.info(`Found ${s.length} sessions for scopes: ${r}`), s.length) {
      const o = [], a = [], l = new Map(this._tokenStore.tokens.map((c) => [c.access_token, c]));
      for (const c of s) {
        const u = l.get(c.accessToken);
        if (u && u.expires_in) {
          const d = Date.now(), f = u.expires_in * 1e3;
          if (d > u.created_at + f - 300 * 1e3) {
            if (this._logger.info(`Token for session ${c.id} is about to expire, refreshing...`), a.push(u), !u.refresh_token) {
              this._logger.warn(`No refresh token available for scopes ${c.scopes.join(" ")}. Throwing away token.`);
              continue;
            }
            try {
              const p = await this.exchangeRefreshTokenForToken(u.refresh_token);
              p.scope !== r && (this._logger.warn(`Token scopes '${p.scope}' do not match requested scopes '${r}'. Overwriting token with what was requested...`), p.scope = r), this._logger.info(`Successfully created a new token for scopes ${c.scopes.join(" ")}.`), o.push(p);
            } catch (p) {
              this._logger.error(`Failed to refresh token: ${p}`);
            }
          }
        }
      }
      return (o.length || a.length) && (this._tokenStore.update({ added: o, removed: a }), s = this._tokenStore.sessions.filter((c) => Fn([...c.scopes].sort(), n))), this._logger.info(`Found ${s.length} sessions for scopes: ${r}`), s;
    }
    return [];
  }
  async createSession(e, t) {
    var s;
    this._logger.info(`Creating session for scopes: ${e.join(" ")}`);
    let n;
    for (let o = 0; o < this._createFlows.length; o++) {
      const { handler: a } = this._createFlows[o];
      try {
        if (n = await this._extHostProgress.withProgressFromSource({ label: this.label, id: this.id }, {
          location: zo.Notification,
          title: h(2618, "Authenticating to '{0}'", this.label),
          cancellable: !0
        }, (l, c) => a(e, l, c)), n)
          break;
      } catch (l) {
        const c = (s = this._createFlows[o + 1]) == null ? void 0 : s.label;
        if (!c)
          break;
        const u = cs(l) ? h(
          2619,
          "Having trouble authenticating to '{0}'? Would you like to try a different way? ({1})",
          this.label,
          c
        ) : h(
          2620,
          "You have not yet finished authenticating to '{0}'. Would you like to try a different way? ({1})",
          this.label,
          c
        );
        if (!await this._proxy.$showContinueNotification(u))
          throw new Yn();
        this._logger.error(`Failed to create token via flow '${c}': ${l}`);
      }
    }
    if (!n)
      throw new Error("Failed to create authentication token");
    n.scope !== e.join(" ") && (this._logger.warn(`Token scopes '${n.scope}' do not match requested scopes '${e.join(" ")}'. Overwriting token with what was requested...`), n.scope = e.join(" ")), this._tokenStore.update({ added: [{ ...n, created_at: Date.now() }], removed: [] });
    const r = this._tokenStore.sessions.find((o) => o.accessToken === n.access_token);
    return this._logger.info(`Created session for scopes: ${n.scope}`), r;
  }
  async removeSession(e) {
    this._logger.info(`Removing session with id: ${e}`);
    const t = this._tokenStore.sessions.find((r) => r.id === e);
    if (!t) {
      this._logger.error(`Session with id ${e} not found`);
      return;
    }
    const n = this._tokenStore.tokens.find((r) => r.access_token === t.accessToken);
    if (!n) {
      this._logger.error(`Failed to retrieve token for removed session: ${t.id}`);
      return;
    }
    this._tokenStore.update({ added: [], removed: [n] }), this._logger.info(`Removed token for session: ${t.id} with scopes: ${t.scopes.join(" ")}`);
  }
  dispose() {
    this._disposable.dispose();
  }
  async _createWithUrlHandler(e, t, n) {
    var m;
    if (!this._serverMetadata.authorization_endpoint)
      throw new Error("Authorization Endpoint required");
    if (!this._serverMetadata.token_endpoint)
      throw new Error("Token endpoint not available in server metadata");
    const r = this.generateRandomString(64), s = await this.generateCodeChallenge(r), o = this.generateRandomString(32), a = x.parse(
      `${this._initData.environment.appUriScheme}://dynamicauthprovider/${this.authorizationServer.authority}/authorize?nonce=${o}`
    );
    let l;
    try {
      l = await this._extHostUrls.createAppUri(a);
    } catch (E) {
      throw new Error(`Failed to create external URI: ${E}`);
    }
    const c = new URL(this._serverMetadata.authorization_endpoint);
    c.searchParams.append("client_id", this._clientId), c.searchParams.append("response_type", "code"), c.searchParams.append("state", l.toString()), c.searchParams.append("code_challenge", s), c.searchParams.append("code_challenge_method", "S256");
    const u = e.join(" ");
    u && c.searchParams.append("scope", u), (m = this._resourceMetadata) != null && m.resource && c.searchParams.append("resource", this._resourceMetadata.resource);
    const d = "https://vscode.dev/redirect";
    c.searchParams.append("redirect_uri", d);
    const f = this.waitForAuthorizationCode(a);
    if (this._logger.info(`Opening authorization URL for scopes: ${u}`), this._logger.trace(`Authorization URL: ${c.toString()}`), !await this._extHostWindow.openUri(c.toString(), {}))
      throw new Yn();
    t.report({
      message: h(2621, "Complete the authentication in the browser window that has opened.")
    });
    let v;
    try {
      v = (await BE(f, n)).code;
    } catch (E) {
      throw cs(E) ? (this._logger.info("Authorization code request was cancelled by the user."), E) : (this._logger.error(`Failed to receive authorization code: ${E}`), new Error(`Failed to receive authorization code: ${E}`));
    }
    return this._logger.info(`Authorization code received for scopes: ${u}`), await this.exchangeCodeForToken(v, r, d);
  }
  generateRandomString(e) {
    const t = new Uint8Array(e);
    return crypto.getRandomValues(t), Array.from(t).map((n) => n.toString(16).padStart(2, "0")).join("").substring(0, e);
  }
  async generateCodeChallenge(e) {
    const n = new TextEncoder().encode(e), r = await crypto.subtle.digest("SHA-256", n);
    return Y1(he.wrap(new Uint8Array(r)), !1, !1).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
  }
  async waitForAuthorizationCode(e) {
    const t = await this._proxy.$waitForUriHandler(e), n = /[?&]code=([^&]+)/.exec(t.query || "");
    if (!n || n.length < 2)
      throw new Error("Authentication failed: No authorization code received");
    return { code: n[1] };
  }
  async exchangeCodeForToken(e, t, n) {
    if (!this._serverMetadata.token_endpoint)
      throw new Error("Token endpoint not available in server metadata");
    const r = new URLSearchParams();
    r.append("client_id", this._clientId), r.append("grant_type", "authorization_code"), r.append("code", e), r.append("redirect_uri", n), r.append("code_verifier", t), this._clientSecret && r.append("client_secret", this._clientSecret), this._logger.info("Exchanging authorization code for token..."), this._logger.trace(`Url: ${this._serverMetadata.token_endpoint}`), this._logger.trace(`Token request body: ${r.toString()}`);
    let s;
    try {
      s = await fetch(this._serverMetadata.token_endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Accept: "application/json"
        },
        body: r.toString()
      });
    } catch (a) {
      throw this._logger.error(`Failed to exchange authorization code for token: ${a}`), new Error(`Failed to exchange authorization code for token: ${a}`);
    }
    if (!s.ok) {
      const a = await s.text();
      throw new Error(
        `Token exchange failed: ${s.status} ${s.statusText} - ${a}`
      );
    }
    const o = await s.json();
    if (EC(o))
      return this._logger.info("Successfully exchanged authorization code for token."), o;
    throw SC(o) && o.error === s1.InvalidClient ? (this._logger.warn(`Client ID (${this._clientId}) was invalid, generated a new one.`), await this._generateNewClientId(), new Error("Client ID was invalid, generated a new one. Please try again.")) : new Error(`Invalid authorization token response: ${JSON.stringify(o)}`);
  }
  async exchangeRefreshTokenForToken(e) {
    if (!this._serverMetadata.token_endpoint)
      throw new Error("Token endpoint not available in server metadata");
    const t = new URLSearchParams();
    t.append("client_id", this._clientId), t.append("grant_type", "refresh_token"), t.append("refresh_token", e), this._clientSecret && t.append("client_secret", this._clientSecret);
    const r = await (await fetch(this._serverMetadata.token_endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        Accept: "application/json"
      },
      body: t.toString()
    })).json();
    if (EC(r))
      return {
        ...r,
        created_at: Date.now()
      };
    throw SC(r) && r.error === s1.InvalidClient ? (this._logger.warn(`Client ID (${this._clientId}) was invalid, generated a new one.`), await this._generateNewClientId(), new Error("Client ID was invalid, generated a new one. Please try again.")) : new Error(`Invalid authorization token response: ${JSON.stringify(r)}`);
  }
  async _generateNewClientId() {
    var e;
    try {
      const t = await yA(this._serverMetadata, this._initData.environment.appName, (e = this._resourceMetadata) == null ? void 0 : e.scopes_supported);
      this._clientId = t.client_id, this._clientSecret = t.client_secret, this._onDidChangeClientId.fire();
    } catch (t) {
      this._logger.info(`Dynamic registration failed for ${this.authorizationServer.toString()}: ${t}. Prompting user for client ID and client secret.`);
      try {
        const n = await this._proxy.$promptForClientRegistration(this.authorizationServer.toString());
        if (!n)
          throw new Error("User did not provide client details");
        this._clientId = n.clientId, this._clientSecret = n.clientSecret, this._logger.info(`User provided client ID for ${this.authorizationServer.toString()}`), n.clientSecret ? this._logger.info(`User provided client secret for ${this.authorizationServer.toString()}`) : this._logger.info(`User did not provide client secret for ${this.authorizationServer.toString()} (optional)`), this._onDidChangeClientId.fire();
      } catch {
        throw this._logger.error(`Failed to fetch new client ID and user did not provide one: ${t}`), new Error(`Failed to fetch new client ID and user did not provide one: ${t}`);
      }
    }
  }
};
ix = z([
  O(0, Sv),
  O(1, Dv),
  O(2, _i),
  O(3, kv),
  O(4, ta)
], ix);
class LO {
  constructor(e, t, n) {
    this._persistence = e, this._logger = n, this._onDidChangeSessions = new M(), this.onDidChangeSessions = this._onDidChangeSessions.event, this._disposable = new Te(), this._tokensObservable = XN("tokens", t), this._sessionsObservable = K5({ equalsFn: (r, s) => Fn(r, s, (o, a) => o.accessToken === a.accessToken) }, (r) => this._tokensObservable.read(r).map((s) => this._getSessionFromToken(s))), this._disposable.add(this._registerChangeEventAutorun()), this._disposable.add(this._persistence.onDidChange((r) => this._tokensObservable.set(r, void 0)));
  }
  get tokens() {
    return this._tokensObservable.get();
  }
  get sessions() {
    return this._sessionsObservable.get();
  }
  dispose() {
    this._disposable.dispose();
  }
  update({ added: e, removed: t }) {
    this._logger.trace(`Updating tokens: added ${e.length}, removed ${t.length}`);
    const n = [...this._tokensObservable.get()];
    for (const r of t) {
      const s = n.findIndex((o) => o.access_token === r.access_token);
      s !== -1 && n.splice(s, 1);
    }
    for (const r of e) {
      const s = n.findIndex((o) => o.access_token === r.access_token);
      s === -1 ? n.push(r) : n[s] = r;
    }
    (e.length || t.length) && (this._tokensObservable.set(n, void 0), this._persistence.set(n)), this._logger.trace(`Tokens updated: ${n.length} tokens stored.`);
  }
  _registerChangeEventAutorun() {
    let e = [];
    return J5((t) => {
      this._logger.trace("Checking for session changes...");
      const n = this._sessionsObservable.read(t);
      if (e === n) {
        this._logger.trace("No session changes detected.");
        return;
      }
      if (!n || n.length === 0) {
        this._logger.trace("All sessions removed."), e.length > 0 && (this._onDidChangeSessions.fire({
          added: [],
          removed: e,
          changed: []
        }), e = []);
        return;
      }
      const r = [], s = [];
      for (const o of n)
        e.some((l) => l.accessToken === o.accessToken) || r.push(o);
      for (const o of e)
        n.some((l) => l.accessToken === o.accessToken) || s.push(o);
      (r.length > 0 || s.length > 0) && (this._logger.trace(`Sessions changed: added ${r.length}, removed ${s.length}`), this._onDidChangeSessions.fire({ added: r, removed: s, changed: [] })), e = n;
    });
  }
  _getSessionFromToken(e) {
    let t;
    if (e.id_token)
      try {
        t = IC(e.id_token);
      } catch {
      }
    if (!t)
      try {
        t = IC(e.access_token);
      } catch {
      }
    const n = e.scope ? e.scope.split(" ") : t != null && t.scope ? t.scope.split(" ") : [];
    return {
      id: rS(e.access_token, 0).toString(),
      accessToken: e.access_token,
      account: {
        id: (t == null ? void 0 : t.sub) || "unknown",
        label: (t == null ? void 0 : t.preferred_username) || (t == null ? void 0 : t.name) || (t == null ? void 0 : t.email) || "MCP"
      },
      scopes: n,
      idToken: e.id_token
    };
  }
}
const NO = { label: h(5437, "Other Models"), order: Number.MAX_SAFE_INTEGER };
var nx;
const MS = me("IExtHostLanguageModels");
class CC {
  constructor(e, t) {
    this.option = e, this.stream = new jw(), this.stream = t ?? new jw();
  }
}
class MO {
  constructor() {
    this._responseStreams = /* @__PURE__ */ new Map(), this._defaultStream = new jw(), this._isDone = !1;
    const e = this;
    this.apiObject = {
      get stream() {
        return e._defaultStream.asyncIterable;
      },
      get text() {
        return Ol.map(e._defaultStream.asyncIterable, (t) => {
          if (t instanceof Vt)
            return t.value;
        }).coalesce();
      }
    };
  }
  *_streams() {
    if (this._responseStreams.size > 0)
      for (const [, e] of this._responseStreams)
        yield e.stream;
    else
      yield this._defaultStream;
  }
  handleFragment(e) {
    if (this._isDone)
      return;
    const t = /* @__PURE__ */ new Map();
    for (const n of Bi.wrap(e)) {
      let r;
      n.part.type === "text" ? r = new Vt(n.part.value, n.part.audience) : n.part.type === "data" ? r = new Vt("") : r = new Wl(n.part.toolCallId, n.part.name, n.part.parameters);
      const s = t.get(n.index);
      s ? s.push(r) : t.set(n.index, [r]);
    }
    for (const [n, r] of t) {
      let s = this._responseStreams.get(n);
      s || (this._responseStreams.size === 0 ? s = new CC(n, this._defaultStream) : s = new CC(n), this._responseStreams.set(n, s)), s.stream.emitMany(r);
    }
  }
  reject(e) {
    this._isDone = !0;
    for (const t of this._streams())
      t.reject(e);
  }
  resolve() {
    this._isDone = !0;
    for (const e of this._streams())
      e.resolve();
  }
}
var Al;
let rx = (Al = class {
  constructor(e, t, n) {
    this._logService = t, this._extHostAuthentication = n, this._onDidChangeModelAccess = new M(), this._onDidChangeProviders = new M(), this.onDidChangeProviders = this._onDidChangeProviders.event, this._languageModelProviders = /* @__PURE__ */ new Map(), this._localModels = /* @__PURE__ */ new Map(), this._modelAccessList = new Ko(), this._pendingRequest = /* @__PURE__ */ new Map(), this._ignoredFileProviders = /* @__PURE__ */ new Map(), this._languageAccessInformationExtensions = /* @__PURE__ */ new Set(), this._proxy = e.getProxy(ie.MainThreadLanguageModels);
  }
  dispose() {
    this._onDidChangeModelAccess.dispose(), this._onDidChangeProviders.dispose();
  }
  registerLanguageModelProvider(e, t, n) {
    this._languageModelProviders.set(t, { extension: e.identifier, extensionName: e.displayName || e.name, provider: n }), this._proxy.$registerLanguageModelProvider(t);
    let r;
    return n.onDidChange && (r = n.onDidChange(() => {
      this._proxy.$onLMProviderChange(t);
    })), Ie(() => {
      this._languageModelProviders.delete(t), this._clearModelCache(t), r == null || r.dispose(), this._proxy.$unregisterProvider(t);
    });
  }
  _clearModelCache(e) {
    this._localModels.forEach((t, n) => {
      t.metadata.vendor === e && this._localModels.delete(n);
    });
  }
  async $prepareLanguageModelProvider(e, t, n) {
    const r = this._languageModelProviders.get(e);
    if (!r)
      return [];
    this._clearModelCache(e);
    const s = await r.provider.prepareLanguageModelChat(t, n) ?? [], o = s.map((a) => {
      let l;
      return a.auth && (l = {
        providerLabel: r.extensionName,
        accountLabel: typeof a.auth == "object" ? a.auth.label : void 0
      }), {
        metadata: {
          extension: r.extension,
          id: a.id,
          vendor: e,
          name: a.name ?? "",
          family: a.family ?? "",
          cost: a.cost,
          description: a.description,
          version: a.version,
          maxInputTokens: a.maxInputTokens,
          maxOutputTokens: a.maxOutputTokens,
          auth: l,
          isDefault: a.isDefault,
          isUserSelectable: a.isUserSelectable,
          modelPickerCategory: a.category ?? NO,
          capabilities: a.capabilities ? {
            vision: a.capabilities.vision,
            toolCalling: !!a.capabilities.toolCalling,
            agentMode: !!a.capabilities.toolCalling
          } : void 0
        },
        identifier: `${e}/${a.id}`
      };
    });
    for (let a = 0; a < o.length; a++)
      this._localModels.set(o[a].identifier, {
        metadata: o[a].metadata,
        info: s[a]
      });
    return o;
  }
  async $startChatRequest(e, t, n, r, s, o) {
    const a = this._localModels.get(e);
    if (!a)
      throw new Error("Model not found");
    const l = this._languageModelProviders.get(a.metadata.vendor);
    if (!l)
      throw new Error(`Language model provider for '${a.metadata.id}' not found.`);
    const c = [], u = () => {
      c.length > 0 && (this._proxy.$reportResponsePart(t, c), c.length = 0);
    }, d = new Gl(u, 30), f = (_) => {
      c.push(_) > 30 ? (u(), d.cancel()) : d.schedule();
    }, p = new Jh(async (_) => {
      if (o.isCancellationRequested) {
        this._logService.warn(`[CHAT](${l.extension.value}) CANNOT send progress because the REQUEST IS CANCELLED`);
        return;
      }
      let m;
      if (_.part instanceof Wl ? m = { type: "tool_use", name: _.part.name, parameters: _.part.input, toolCallId: _.part.callId } : _.part instanceof Vt ? m = { type: "text", value: _.part.value, audience: _.part.audience } : _.part instanceof Sn && (m = { type: "data", value: { mimeType: _.part.mimeType, data: he.wrap(_.part.data) }, audience: _.part.audience }), !m) {
        this._logService.warn(`[CHAT](${l.extension.value}) UNKNOWN part ${JSON.stringify(_)}`);
        return;
      }
      f({ index: _.index, part: m });
    });
    let v;
    try {
      v = l.provider.provideLanguageModelChatResponse(a.info, r.value.map(H_.to), { ...s, modelOptions: s.modelOptions ?? {}, extensionId: gt.toKey(n) }, p, o);
    } catch (_) {
      throw _;
    }
    Promise.resolve(v).then(() => {
      u(), this._proxy.$reportResponseDone(t, void 0);
    }, (_) => {
      u(), this._proxy.$reportResponseDone(t, Lu(_));
    });
  }
  $provideTokenLength(e, t, n) {
    const r = this._localModels.get(e);
    if (!r)
      return Promise.resolve(0);
    const s = this._languageModelProviders.get(r.metadata.vendor);
    return s ? Promise.resolve(s.provider.provideTokenCount(r.info, t, n)) : Promise.resolve(0);
  }
  async getDefaultLanguageModel(e, t) {
    let n;
    t && await this.selectLanguageModels(e, {});
    for (const [r, s] of this._localModels)
      if (s.metadata.isDefault) {
        n = r;
        break;
      }
    return n ? this.getLanguageModelByIdentifier(e, n) : this.getDefaultLanguageModel(e, !0);
  }
  async getLanguageModelByIdentifier(e, t) {
    var s, o;
    const n = this._localModels.get(t);
    if (!n)
      return;
    this._isUsingAuth(e.identifier, n.metadata) && await this._fakeAuthPopulate(n.metadata);
    let r;
    if (!r) {
      const a = this;
      r = {
        id: n.info.id,
        vendor: n.metadata.vendor,
        family: n.info.family,
        version: n.info.version,
        name: n.info.name,
        capabilities: {
          supportsImageToText: ((s = n.metadata.capabilities) == null ? void 0 : s.vision) ?? !1,
          supportsToolCalling: !!((o = n.metadata.capabilities) != null && o.toolCalling)
        },
        maxInputTokens: n.metadata.maxInputTokens,
        countTokens(l, c) {
          if (!a._localModels.has(t))
            throw mr.NotFound(t);
          return a._computeTokenLength(t, l, c ?? Dt.None);
        },
        sendRequest(l, c, u) {
          if (!a._localModels.has(t))
            throw mr.NotFound(t);
          return a._sendChatRequest(e, t, l, c ?? {}, u ?? Dt.None);
        }
      };
    }
    return r;
  }
  async selectLanguageModels(e, t) {
    const n = await this._proxy.$selectChatModels({ ...t, extension: e.identifier }), r = [];
    for (const s of n) {
      const o = await this.getLanguageModelByIdentifier(e, s);
      o && r.push(o);
    }
    return r;
  }
  async _sendChatRequest(e, t, n, r, s) {
    var d, f;
    const o = this._convertMessages(e, n), a = e.identifier, l = (d = this._localModels.get(t)) == null ? void 0 : d.metadata;
    if (!l || !this._localModels.has(t))
      throw mr.NotFound(`Language model '${t}' is unknown.`);
    if (this._isUsingAuth(a, l) && (!await this._getAuthAccess(e, { identifier: l.extension, displayName: l.auth.providerLabel }, r.justification, !1) || !((f = this._modelAccessList.get(a)) != null && f.has(l.extension))))
      throw mr.NoPermissions(`Language model '${t}' cannot be used by '${a.value}'.`);
    const c = Math.random() * 1e6 | 0, u = new MO();
    this._pendingRequest.set(c, { languageModelId: t, res: u });
    try {
      await this._proxy.$tryStartChatRequest(a, t, c, new Ki(o), r, s);
    } catch (p) {
      throw this._pendingRequest.delete(c), mr.tryDeserialize(p) ?? p;
    }
    return u.apiObject;
  }
  _convertMessages(e, t) {
    const n = [];
    for (const r of t)
      r.role === xn.System && H(e, "languageModelSystem"), n.push(H_.from(r));
    return n;
  }
  async $acceptResponsePart(e, t) {
    const n = this._pendingRequest.get(e);
    n && n.res.handleFragment(t);
  }
  async $acceptResponseDone(e, t) {
    const n = this._pendingRequest.get(e);
    n && (this._pendingRequest.delete(e), t ? n.res.reject(mr.tryDeserialize(t) ?? bT(t)) : n.res.resolve());
  }
  async _getAuthAccess(e, t, n, r) {
    const s = wA + t.identifier.value;
    if (await this._extHostAuthentication.getSession(e, s, [], { silent: !0 }))
      return this.$updateModelAccesslist([{ from: e.identifier, to: t.identifier, enabled: !0 }]), !0;
    if (r)
      return !1;
    try {
      const a = n ? h(2627, "Justification: {1}", t.displayName, n) : void 0;
      return await this._extHostAuthentication.getSession(e, s, [], { forceNewSession: { detail: a } }), this.$updateModelAccesslist([{ from: e.identifier, to: t.identifier, enabled: !0 }]), !0;
    } catch {
      return !1;
    }
  }
  _isUsingAuth(e, t) {
    return !!t.auth && !gt.equals(t.extension, e);
  }
  async _fakeAuthPopulate(e) {
    if (e.auth)
      for (const t of this._languageAccessInformationExtensions)
        try {
          await this._getAuthAccess(t, { identifier: e.extension, displayName: "" }, void 0, !0);
        } catch (n) {
          this._logService.error("Fake Auth request failed"), this._logService.error(n);
        }
  }
  async _computeTokenLength(e, t, n) {
    var s;
    const r = this._localModels.get(e);
    if (!r)
      throw mr.NotFound(`Language model '${e}' is unknown.`);
    return ((s = this._languageModelProviders.get(r.metadata.vendor)) == null ? void 0 : s.provider.provideTokenCount(r.info, t, n)) ?? 0;
  }
  $updateModelAccesslist(e) {
    const t = new Array();
    for (const { from: n, to: r, enabled: s } of e) {
      const o = this._modelAccessList.get(n) ?? new Ql();
      if (o.has(r) !== s) {
        s ? o.add(r) : o.delete(r), this._modelAccessList.set(n, o);
        const l = { from: n, to: r };
        t.push(l), this._onDidChangeModelAccess.fire(l);
      }
    }
  }
  createLanguageModelAccessInformation(e) {
    this._languageAccessInformationExtensions.add(e);
    const t = Pt.signal(Pt.filter(this._onDidChangeModelAccess.event, (r) => gt.equals(r.from, e.identifier))), n = Pt.signal(this._onDidChangeProviders.event);
    return {
      get onDidChange() {
        return Pt.any(t, n);
      },
      canSendRequest(r) {
        return !0;
      }
    };
  }
  fileIsIgnored(e, t, n = Dt.None) {
    return H(e, "chatParticipantAdditions"), this._proxy.$fileIsIgnored(t, n);
  }
  async $isFileIgnored(e, t, n) {
    const r = this._ignoredFileProviders.get(e);
    if (!r)
      throw new Error("Unknown LanguageModelIgnoredFileProvider");
    return await r.provideFileIgnored(x.revive(t), n) ?? !1;
  }
  registerIgnoredFileProvider(e, t) {
    H(e, "chatParticipantPrivate");
    const n = nx._idPool++;
    return this._proxy.$registerFileIgnoreProvider(n), this._ignoredFileProviders.set(n, t), Ie(() => {
      this._proxy.$unregisterFileIgnoreProvider(n), this._ignoredFileProviders.delete(n);
    });
  }
}, nx = Al, Al._idPool = 1, Al);
rx = nx = z([
  O(0, tt),
  O(1, ot),
  O(2, NS)
], rx);
function OO(i) {
  return i.getFullYear() + "-" + String(i.getMonth() + 1).padStart(2, "0") + "-" + String(i.getDate()).padStart(2, "0") + "T" + String(i.getHours()).padStart(2, "0") + ":" + String(i.getMinutes()).padStart(2, "0") + ":" + String(i.getSeconds()).padStart(2, "0") + "." + (i.getMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
}
const SA = {
  DateTimeFormat(i, e) {
    return new Qi(() => {
      try {
        return new Intl.DateTimeFormat(i, e);
      } catch {
        return new Intl.DateTimeFormat(void 0, e);
      }
    });
  },
  Collator(i, e) {
    return new Qi(() => {
      try {
        return new Intl.Collator(i, e);
      } catch {
        return new Intl.Collator(void 0, e);
      }
    });
  },
  Segmenter(i, e) {
    return new Qi(() => {
      try {
        return new Intl.Segmenter(i, e);
      } catch {
        return new Intl.Segmenter(void 0, e);
      }
    });
  },
  Locale(i, e) {
    return new Qi(() => {
      try {
        return new Intl.Locale(i, e);
      } catch {
        return new Intl.Locale(No, e);
      }
    });
  },
  NumberFormat(i, e) {
    return new Qi(() => {
      try {
        return new Intl.NumberFormat(i, e);
      } catch {
        return new Intl.NumberFormat(void 0, e);
      }
    });
  }
};
class Iv {
  constructor(e) {
    const t = x2(e);
    this._defaultValue = t, this._asciiMap = Iv._createAsciiMap(t), this._map = /* @__PURE__ */ new Map();
  }
  static _createAsciiMap(e) {
    const t = new Uint8Array(256);
    return t.fill(e), t;
  }
  set(e, t) {
    const n = x2(t);
    e >= 0 && e < 256 ? this._asciiMap[e] = n : this._map.set(e, n);
  }
  get(e) {
    return e >= 0 && e < 256 ? this._asciiMap[e] : this._map.get(e) || this._defaultValue;
  }
  clear() {
    this._asciiMap.fill(this._defaultValue), this._map.clear();
  }
}
var TC;
(function(i) {
  i[i.False = 0] = "False", i[i.True = 1] = "True";
})(TC || (TC = {}));
var ts;
(function(i) {
  i[i.Regular = 0] = "Regular", i[i.Whitespace = 1] = "Whitespace", i[i.WordSeparator = 2] = "WordSeparator";
})(ts || (ts = {}));
class FO extends Iv {
  constructor(e, t) {
    super(ts.Regular), this._segmenter = null, this._cachedLine = null, this._cachedSegments = [], this.intlSegmenterLocales = t, this.intlSegmenterLocales.length > 0 ? this._segmenter = SA.Segmenter(this.intlSegmenterLocales, { granularity: "word" }) : this._segmenter = null;
    for (let n = 0, r = e.length; n < r; n++)
      this.set(e.charCodeAt(n), ts.WordSeparator);
    this.set(L.Space, ts.Whitespace), this.set(L.Tab, ts.Whitespace);
  }
  findPrevIntlWordBeforeOrAtOffset(e, t) {
    let n = null;
    for (const r of this._getIntlSegmenterWordsOnLine(e)) {
      if (r.index > t)
        break;
      n = r;
    }
    return n;
  }
  findNextIntlWordAtOrAfterOffset(e, t) {
    for (const n of this._getIntlSegmenterWordsOnLine(e))
      if (!(n.index < t))
        return n;
    return null;
  }
  _getIntlSegmenterWordsOnLine(e) {
    return this._segmenter ? this._cachedLine === e ? this._cachedSegments : (this._cachedLine = e, this._cachedSegments = this._filterWordSegments(this._segmenter.value.segment(e)), this._cachedSegments) : [];
  }
  _filterWordSegments(e) {
    const t = [];
    for (const n of e)
      this._isWordLike(n) && t.push(n);
    return t;
  }
  _isWordLike(e) {
    return !!e.isWordLike;
  }
}
const PC = new AE(10);
function UO(i, e) {
  const t = `${i}/${e.join(",")}`;
  let n = PC.get(t);
  return n || (n = new FO(i, e), PC.set(t, n)), n;
}
class AC {
  constructor(e, t, n, r) {
    this.searchString = e, this.isRegex = t, this.matchCase = n, this.wordSeparators = r;
  }
  parseSearchRequest() {
    if (this.searchString === "")
      return null;
    let e;
    this.isRegex ? e = DA(this.searchString) : e = this.searchString.indexOf(`
`) >= 0;
    let t = null;
    try {
      t = W8(this.searchString, this.isRegex, {
        matchCase: this.matchCase,
        wholeWord: !1,
        multiline: e,
        global: !0,
        unicode: !0
      });
    } catch {
      return null;
    }
    if (!t)
      return null;
    let n = !this.isRegex && !e;
    return n && this.searchString.toLowerCase() !== this.searchString.toUpperCase() && (n = this.matchCase), new g9(
      t,
      this.wordSeparators ? UO(this.wordSeparators, []) : null,
      n ? this.searchString : null
    );
  }
}
function DA(i) {
  if (!i || i.length === 0)
    return !1;
  for (let e = 0, t = i.length; e < t; e++) {
    const n = i.charCodeAt(e);
    if (n === L.LineFeed)
      return !0;
    if (n === L.Backslash) {
      if (e++, e >= t)
        break;
      const r = i.charCodeAt(e);
      if (r === L.n || r === L.r || r === L.W)
        return !0;
    }
  }
  return !1;
}
function RC(i, e, t) {
  if (!t)
    return new cb(i, null);
  const n = [];
  for (let r = 0, s = e.length; r < s; r++)
    n[r] = e[r];
  return new cb(i, n);
}
function $O(i, e, t, n, r) {
  if (n === 0)
    return !0;
  const s = e.charCodeAt(n - 1);
  if (i.get(s) !== ts.Regular || s === L.CarriageReturn || s === L.LineFeed)
    return !0;
  if (r > 0) {
    const o = e.charCodeAt(n);
    if (i.get(o) !== ts.Regular)
      return !0;
  }
  return !1;
}
function HO(i, e, t, n, r) {
  if (n + r === t)
    return !0;
  const s = e.charCodeAt(n + r);
  if (i.get(s) !== ts.Regular || s === L.CarriageReturn || s === L.LineFeed)
    return !0;
  if (r > 0) {
    const o = e.charCodeAt(n + r - 1);
    if (i.get(o) !== ts.Regular)
      return !0;
  }
  return !1;
}
function kA(i, e, t, n, r) {
  return $O(i, e, t, n, r) && HO(i, e, t, n, r);
}
class BO {
  constructor(e, t) {
    this._wordSeparators = e, this._searchRegex = t, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  reset(e) {
    this._searchRegex.lastIndex = e, this._prevMatchStartIndex = -1, this._prevMatchLength = 0;
  }
  next(e) {
    const t = e.length;
    let n;
    do {
      if (this._prevMatchStartIndex + this._prevMatchLength === t || (n = this._searchRegex.exec(e), !n))
        return null;
      const r = n.index, s = n[0].length;
      if (r === this._prevMatchStartIndex && s === this._prevMatchLength) {
        if (s === 0) {
          ZT(e, t, this._searchRegex.lastIndex) > 65535 ? this._searchRegex.lastIndex += 2 : this._searchRegex.lastIndex += 1;
          continue;
        }
        return null;
      }
      if (this._prevMatchStartIndex = r, this._prevMatchLength = s, !this._wordSeparators || kA(this._wordSeparators, e, t, r, s))
        return n;
    } while (n);
    return null;
  }
}
const IA = me("contextService"), WO = me("editorGroupsService"), VO = me("pathService");
function zO(i) {
  return typeof i == "object" && "uri" in i && "pattern" in i;
}
let LC = class {
  constructor(e, t, n, r, s, o) {
    this.configurationService = e, this.workspaceContextService = t, this.editorGroupsService = n, this.logService = r, this.pathService = s, this.uriIdentityService = o;
  }
  aiText(e, t, n = {}) {
    return {
      ...this.commonQuery(t == null ? void 0 : t.map(Zv), n),
      type: yl.aiText,
      contentPattern: e
    };
  }
  text(e, t, n = {}) {
    e = this.getContentPattern(e, n);
    const r = this.configurationService.getValue(), s = t && t.some((a) => !this.configurationService.getValue({ resource: a }).search.useRipgrep);
    return {
      ...this.commonQuery(t == null ? void 0 : t.map(Zv), n),
      type: yl.Text,
      contentPattern: e,
      previewOptions: n.previewOptions,
      maxFileSize: n.maxFileSize,
      usePCRE2: r.search.usePCRE2 || s || !1,
      surroundingContext: n.surroundingContext,
      userDisabledExcludesAndIgnoreFiles: n.disregardExcludeSettings && n.disregardIgnoreFiles
    };
  }
  getContentPattern(e, t) {
    var s, o, a, l;
    const n = this.configurationService.getValue();
    e.isRegExp && (e.pattern = e.pattern.replace(/\r?\n/g, "\\n"));
    const r = {
      ...e,
      wordSeparators: n.editor.wordSeparators
    };
    return this.isCaseSensitive(e, t) && (r.isCaseSensitive = !0), this.isMultiline(e) && (r.isMultiline = !0), (s = t.notebookSearchConfig) != null && s.includeMarkupInput && (r.notebookInfo || (r.notebookInfo = {}), r.notebookInfo.isInNotebookMarkdownInput = t.notebookSearchConfig.includeMarkupInput), (o = t.notebookSearchConfig) != null && o.includeMarkupPreview && (r.notebookInfo || (r.notebookInfo = {}), r.notebookInfo.isInNotebookMarkdownPreview = t.notebookSearchConfig.includeMarkupPreview), (a = t.notebookSearchConfig) != null && a.includeCodeInput && (r.notebookInfo || (r.notebookInfo = {}), r.notebookInfo.isInNotebookCellInput = t.notebookSearchConfig.includeCodeInput), (l = t.notebookSearchConfig) != null && l.includeOutput && (r.notebookInfo || (r.notebookInfo = {}), r.notebookInfo.isInNotebookCellOutput = t.notebookSearchConfig.includeOutput), r;
  }
  file(e, t = {}) {
    return {
      ...this.commonQuery(e, t),
      type: yl.File,
      filePattern: t.filePattern ? t.filePattern.trim() : t.filePattern,
      exists: t.exists,
      sortByScore: t.sortByScore,
      cacheKey: t.cacheKey,
      shouldGlobMatchFilePattern: t.shouldGlobSearch
    };
  }
  handleIncludeExclude(e, t) {
    if (!e)
      return {};
    if (Array.isArray(e)) {
      if (e = e.filter((n) => n.length > 0).map(Rg), !e.length)
        return {};
    } else
      e = Rg(e);
    return t ? this.parseSearchPaths(e) : { pattern: uw(...Array.isArray(e) ? e : [e]) };
  }
  commonQuery(e = [], t = {}) {
    let n = Array.isArray(t.excludePattern) ? t.excludePattern.map((u) => u.pattern).flat() : t.excludePattern;
    n = (n == null ? void 0 : n.length) === 1 ? n[0] : n;
    const r = this.handleIncludeExclude(t.includePattern, t.expandPatterns), s = this.handleIncludeExclude(n, t.expandPatterns), o = e.length > 1, a = (r.searchPaths && r.searchPaths.length ? r.searchPaths.map(
      (u) => this.getFolderQueryForSearchPath(u, t, s)
    ) : e.map(
      (u) => this.getFolderQueryForRoot(u, t, s, o)
    )).filter((u) => !!u), l = {
      _reason: t._reason,
      folderQueries: a,
      usingSearchPaths: !!(r.searchPaths && r.searchPaths.length),
      extraFileResources: t.extraFileResources,
      excludePattern: s.pattern,
      includePattern: r.pattern,
      onlyOpenEditors: t.onlyOpenEditors,
      maxResults: t.maxResults,
      onlyFileScheme: t.onlyFileScheme
    };
    if (t.onlyOpenEditors) {
      const u = Xt(this.editorGroupsService.groups.flatMap((p) => p.editors.map((v) => v.resource)));
      this.logService.trace("QueryBuilder#commonQuery - openEditor URIs", JSON.stringify(u));
      const d = u.filter((p) => HI(l, p.fsPath)), f = this.commonQueryFromFileList(d);
      return this.logService.trace("QueryBuilder#commonQuery - openEditor Query", JSON.stringify(f)), { ...l, ...f };
    }
    const c = t.extraFileResources && t.extraFileResources.filter((u) => HI(l, u.fsPath));
    return l.extraFileResources = c && c.length ? c : void 0, l;
  }
  commonQueryFromFileList(e) {
    const t = [], n = new mi(), r = {};
    let s = !1;
    return e.forEach((o) => {
      var l;
      if (o.scheme === fe.walkThrough)
        return;
      if (fL(o)) {
        const c = ((l = this.workspaceContextService.getWorkspaceFolder(o)) == null ? void 0 : l.uri) ?? this.uriIdentityService.extUri.dirname(o);
        let u = n.get(c);
        u || (s = !0, u = { folder: c, includePattern: {} }, t.push(u), n.set(c, u));
        const d = zh(c.fsPath, o.fsPath);
        Nu(u.includePattern)[d.replace(/\\/g, "/")] = !0;
      } else
        o.fsPath && (s = !0, r[o.fsPath] = !0);
    }), {
      folderQueries: t,
      includePattern: r,
      usingSearchPaths: !0,
      excludePattern: s ? void 0 : { "**/*": !0 }
    };
  }
  isCaseSensitive(e, t) {
    if (t.isSmartCase) {
      if (e.isRegExp) {
        if (k2(e.pattern, !0))
          return !0;
      } else if (k2(e.pattern))
        return !0;
    }
    return !!e.isCaseSensitive;
  }
  isMultiline(e) {
    return e.isMultiline || e.isRegExp && DA(e.pattern) || e.pattern.indexOf(`
`) >= 0 ? !0 : !!e.isMultiline;
  }
  parseSearchPaths(e) {
    const t = (d) => Gg(d) || /^\.\.?([\/\\]|$)/.test(d), r = (Array.isArray(e) ? e : jO(e)).map((d) => {
      const f = this.pathService.resolvedUserHome;
      return f ? y6(d, f.scheme === fe.file ? f.fsPath : f.path) : d;
    }), s = _R(r, (d) => t(d) ? "searchPaths" : "exprSegments"), o = (s.exprSegments || []).map((d) => Bw(d, "/")).map((d) => Bw(d, "\\")).map((d) => (d[0] === "." && (d = "*" + d), GO(d))), a = {}, l = this.expandSearchPathPatterns(s.searchPaths || []);
    l && l.length && (a.searchPaths = l);
    const c = o.flat(), u = uw(...c);
    return u && (a.pattern = u), a;
  }
  getExcludesForFolder(e, t) {
    return t.disregardExcludeSettings ? void 0 : yM(e, !t.disregardSearchExcludeSettings);
  }
  expandSearchPathPatterns(e) {
    if (!e || !e.length)
      return [];
    const t = e.flatMap((r) => {
      let { pathPortion: s, globPortion: o } = qO(r);
      return o && (o = dw(o)), this.expandOneSearchPath(s).flatMap((l) => this.resolveOneSearchPathPattern(l, o));
    }), n = /* @__PURE__ */ new Map();
    return t.forEach((r) => {
      const s = r.searchPath.toString(), o = n.get(s);
      o ? r.pattern && (o.pattern = o.pattern || {}, o.pattern[r.pattern] = !0) : n.set(s, {
        searchPath: r.searchPath,
        pattern: r.pattern ? uw(r.pattern) : void 0
      });
    }), Array.from(n.values());
  }
  expandOneSearchPath(e) {
    if (Gg(e)) {
      const t = this.workspaceContextService.getWorkspace().folders;
      return t[0] && t[0].uri.scheme !== fe.file ? [{
        searchPath: t[0].uri.with({ path: e })
      }] : [{
        searchPath: x.file(Fu(e))
      }];
    }
    if (this.workspaceContextService.getWorkbenchState() === tm.FOLDER) {
      const t = this.workspaceContextService.getWorkspace().folders[0].uri;
      if (e = Rg(e), e.startsWith("../") || e === "..") {
        const r = pt.resolve(t.path, e);
        return [{
          searchPath: t.with({ path: r })
        }];
      }
      const n = dw(e);
      return [{
        searchPath: t,
        pattern: n
      }];
    } else {
      if (e === "./" || e === ".\\")
        return [];
      {
        const t = e.replace(/^\.[\/\\]/, ""), r = this.workspaceContextService.getWorkspace().folders.map((s) => {
          const o = t.match(new RegExp(`^${Nl(s.name)}(?:/(.*)|$)`));
          return o ? {
            match: o,
            folder: s
          } : null;
        }).filter(Mn);
        if (r.length)
          return r.map((s) => {
            const o = s.match[1];
            return {
              searchPath: s.folder.uri,
              pattern: o && dw(o)
            };
          });
        {
          const s = e.match(/\.[\/\\](.+)[\/\\]?/), o = s ? s[1] : e, a = h(13385, "Workspace folder does not exist: {0}", o);
          throw new Error(a);
        }
      }
    }
  }
  resolveOneSearchPathPattern(e, t) {
    const n = e.pattern && t ? `${e.pattern}/${t}` : e.pattern || t, r = [
      {
        searchPath: e.searchPath,
        pattern: n
      }
    ];
    return n && !n.endsWith("**") && r.push({
      searchPath: e.searchPath,
      pattern: n + "/**"
    }), r;
  }
  getFolderQueryForSearchPath(e, t, n) {
    const r = this.getFolderQueryForRoot(Zv(e.searchPath), t, n, !1);
    return r ? {
      ...r,
      includePattern: e.pattern
    } : null;
  }
  getFolderQueryForRoot(e, t, n, r) {
    var p, v, _, m, E;
    let s;
    const o = x.isUri(e) ? e : e.uri;
    let a = (p = t.excludePattern) == null ? void 0 : p.map((S) => {
      const k = t.excludePattern && zO(S) ? S.uri : void 0;
      return !k || !(x.isUri(e) && this.uriIdentityService.extUri.isEqual(e, k)) ? k : void 0;
    });
    if (a != null && a.length || (a = [void 0]), n.searchPaths) {
      const S = n.searchPaths.filter((k) => Kc(k.searchPath, o))[0];
      if (S && !S.pattern)
        return null;
      S && (s = S.pattern);
    }
    const l = this.configurationService.getValue({ resource: o }), u = {
      ...this.getExcludesForFolder(l, t) || {},
      ...s || {}
    }, d = x.isUri(e) ? Xs(e) : e.name, f = a.map((S) => Object.keys(u).length > 0 ? {
      folder: S,
      pattern: u
    } : void 0).filter((S) => S);
    return {
      folder: o,
      folderName: r ? d : void 0,
      excludePattern: f,
      fileEncoding: l.files && l.files.encoding,
      disregardIgnoreFiles: typeof t.disregardIgnoreFiles == "boolean" ? t.disregardIgnoreFiles : !((v = l.search) != null && v.useIgnoreFiles),
      disregardGlobalIgnoreFiles: typeof t.disregardGlobalIgnoreFiles == "boolean" ? t.disregardGlobalIgnoreFiles : !((_ = l.search) != null && _.useGlobalIgnoreFiles),
      disregardParentIgnoreFiles: typeof t.disregardParentIgnoreFiles == "boolean" ? t.disregardParentIgnoreFiles : !((m = l.search) != null && m.useParentIgnoreFiles),
      ignoreSymlinks: typeof t.ignoreSymlinks == "boolean" ? t.ignoreSymlinks : !((E = l.search) != null && E.followSymlinks)
    };
  }
};
LC = z([
  O(0, xv),
  O(1, IA),
  O(2, WO),
  O(3, ot),
  O(4, VO),
  O(5, jP)
], LC);
function qO(i) {
  const e = i.match(/[\*\{\}\(\)\[\]\?]/);
  if (e) {
    const t = e.index, n = i.substr(0, t).match(/[/|\\][^/\\]*$/);
    if (n) {
      let r = i.substr(0, n.index);
      return r.match(/[/\\]/) || (r += "/"), {
        pathPortion: r,
        globPortion: i.substr((n.index || 0) + 1)
      };
    }
  }
  return {
    pathPortion: i
  };
}
function uw(...i) {
  return i.length ? i.reduce((e, t) => (e[t] = !0, e), /* @__PURE__ */ Object.create(null)) : void 0;
}
function jO(i) {
  return wb(i, ",").map((e) => e.trim()).filter((e) => !!e.length);
}
function GO(i) {
  return [
    `**/${i}/**`,
    `**/${i}`
  ].map((t) => t.replace(/\*\*\/\*\*/g, "**"));
}
function Rg(i) {
  return i.replace(/\\/g, "/");
}
function dw(i) {
  return Rg(i).replace(/^\.\//, "").replace(/\/+$/g, "");
}
me("searchService");
const QO = 7e3;
function KO(i, e) {
  const t = e.activationEvents;
  if (!t)
    return Promise.resolve(void 0);
  const n = [], r = [];
  for (const u of t)
    if (/^workspaceContains:/.test(u)) {
      const d = u.substr(18);
      d.indexOf("*") >= 0 || d.indexOf("?") >= 0 || i.forceUsingSearch ? r.push(d) : n.push(d);
    }
  if (n.length === 0 && r.length === 0)
    return Promise.resolve(void 0);
  const { promise: s, resolve: o } = _L(), a = (u) => o({ activationEvent: u }), l = Promise.all(n.map((u) => JO(i, u, a))).then(() => {
  }), c = YO(i, e.identifier, r, a);
  return Promise.all([l, c]).then(() => {
    o(void 0);
  }), s;
}
async function JO(i, e, t) {
  for (const n of i.folders)
    if (await i.exists(Ei(x.revive(n), e))) {
      t(`workspaceContains:${e}`);
      return;
    }
}
async function YO(i, e, t, n) {
  if (t.length === 0)
    return Promise.resolve(void 0);
  const r = new Lt(), s = i.checkExists(i.folders, t, r.token), o = setTimeout(async () => {
    r.cancel(), i.logService.info(`Not activating extension '${e.value}': Timed out while searching for 'workspaceContains' pattern ${t.join(",")}`);
  }, QO);
  let a = !1;
  try {
    a = await s;
  } catch (l) {
    cs(l) || Fi(l);
  }
  r.dispose(), clearTimeout(o), a && n(`workspaceContains:${t.join(",")}`);
}
class CA {
  constructor(e) {
    this._onDidChangePassword = new M(), this.onDidChangePassword = this._onDidChangePassword.event, this._proxy = e.getProxy(ie.MainThreadSecretState);
  }
  async $onDidChangePassword(e) {
    this._onDidChangePassword.fire(e);
  }
  get(e, t) {
    return this._proxy.$getPassword(e, t);
  }
  store(e, t, n) {
    return this._proxy.$setPassword(e, t, n);
  }
  delete(e, t) {
    return this._proxy.$deletePassword(e, t);
  }
  keys(e) {
    return this._proxy.$getKeys(e);
  }
}
const OS = me("IExtHostSecretState");
var Os;
class XO {
  constructor(e, t) {
    ye(this, Os);
    this.disposables = new Te(), this._extensionDescription = e, this._id = gt.toKey(e.identifier), le(this, Os, t), this.onDidChange = Pt.map(
      Pt.filter(N(this, Os).onDidChangePassword, (n) => n.extensionId === this._id),
      (n) => ({ key: n.key }),
      this.disposables
    );
  }
  dispose() {
    this.disposables.dispose();
  }
  get(e) {
    return N(this, Os).get(this._id, e);
  }
  store(e, t) {
    return N(this, Os).store(this._id, e, t);
  }
  delete(e) {
    return N(this, Os).delete(this._id, e);
  }
  keys() {
    return H(this._extensionDescription, "secretStorageKeys"), N(this, Os).keys(this._id) || [];
  }
}
Os = new WeakMap();
let sx = class {
  constructor(e, t, n) {
    this.logService = n, this.bundleCache = /* @__PURE__ */ new Map(), this._proxy = t.getProxy(ie.MainThreadLocalization), this.currentLanguage = e.environment.appLanguage, this.isDefaultLanguage = this.currentLanguage === No;
  }
  getMessage(e, t) {
    var l;
    const { message: n, args: r, comment: s } = t;
    if (this.isDefaultLanguage)
      return E2(n, r ?? {});
    let o = n;
    s && s.length > 0 && (o += `/${Array.isArray(s) ? s.join("") : s}`);
    const a = (l = this.bundleCache.get(e)) == null ? void 0 : l.contents[o];
    return a || this.logService.warn(`Using default string since no string found in i18n bundle that has the key: ${o}`), E2(a ?? n, r ?? {});
  }
  getBundle(e) {
    var t;
    return (t = this.bundleCache.get(e)) == null ? void 0 : t.contents;
  }
  getBundleUri(e) {
    var t;
    return (t = this.bundleCache.get(e)) == null ? void 0 : t.uri;
  }
  async initializeLocalizedMessages(e) {
    var r;
    if (this.isDefaultLanguage || !e.l10n && !e.isBuiltin || this.bundleCache.has(e.identifier.value))
      return;
    let t;
    const n = await this.getBundleLocation(e);
    if (!n) {
      this.logService.error(`No bundle location found for extension ${e.identifier.value}`);
      return;
    }
    try {
      const s = await this._proxy.$fetchBundleContents(n), o = JSON.parse(s);
      t = e.isBuiltin ? (r = o.contents) == null ? void 0 : r.bundle : o;
    } catch (s) {
      this.logService.error(`Failed to load translations for ${e.identifier.value} from ${n}: ${s.message}`);
      return;
    }
    t && this.bundleCache.set(e.identifier.value, {
      contents: t,
      uri: n
    });
  }
  async getBundleLocation(e) {
    if (e.isBuiltin) {
      const t = await this._proxy.$fetchBuiltInBundleUri(e.identifier.value, this.currentLanguage);
      return x.revive(t);
    }
    return e.l10n ? x.joinPath(e.extensionLocation, e.l10n, `bundle.l10n.${this.currentLanguage}.json`) : void 0;
  }
};
sx = z([
  O(0, _i),
  O(1, tt),
  O(2, ot)
], sx);
const FS = me("IExtHostLocalizationService"), US = me("IExtHostManagedSockets");
let ox = class {
  constructor(e) {
    this._remoteSocketIdCounter = 0, this._factory = null, this._managedRemoteSockets = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadManagedSockets);
  }
  setFactory(e, t) {
    for (const n of this._managedRemoteSockets.values())
      n.dispose();
    this._factory && this._proxy.$unregisterSocketFactory(this._factory.socketFactoryId), this._factory = new ZO(e, t), this._proxy.$registerSocketFactory(this._factory.socketFactoryId);
  }
  async $openRemoteSocket(e) {
    if (!this._factory || this._factory.socketFactoryId !== e)
      throw new Error(`No socket factory with id ${e}`);
    const t = ++this._remoteSocketIdCounter, n = await this._factory.makeConnection(), r = new Te();
    return this._managedRemoteSockets.set(t, new eF(t, n, r)), r.add(Ie(() => this._managedRemoteSockets.delete(t))), r.add(n.onDidEnd(() => {
      this._proxy.$onDidManagedSocketEnd(t), r.dispose();
    })), r.add(n.onDidClose((s) => {
      this._proxy.$onDidManagedSocketClose(t, (s == null ? void 0 : s.stack) ?? (s == null ? void 0 : s.message)), r.dispose();
    })), r.add(n.onDidReceiveMessage((s) => this._proxy.$onDidManagedSocketHaveData(t, he.wrap(s)))), t;
  }
  $remoteSocketWrite(e, t) {
    var n;
    (n = this._managedRemoteSockets.get(e)) == null || n.actual.send(t.buffer);
  }
  $remoteSocketEnd(e) {
    const t = this._managedRemoteSockets.get(e);
    t && (t.actual.end(), t.dispose());
  }
  async $remoteSocketDrain(e) {
    var t, n, r;
    await ((r = (t = this._managedRemoteSockets.get(e)) == null ? void 0 : (n = t.actual).drain) == null ? void 0 : r.call(n));
  }
};
ox = z([
  O(0, tt)
], ox);
class ZO {
  constructor(e, t) {
    this.socketFactoryId = e, this.makeConnection = t;
  }
}
class eF extends xe {
  constructor(e, t, n) {
    super(), this.socketId = e, this.actual = t, this._register(n);
  }
}
var ax;
const TA = me("IHostUtils");
let lx = ax = class extends xe {
  constructor(e, t, n, r, s, o, a, l, c, u, d, f, p) {
    super(), this._extHostManagedSockets = f, this._extHostLanguageModels = p, this._onDidChangeRemoteConnectionData = this._register(new M()), this.onDidChangeRemoteConnectionData = this._onDidChangeRemoteConnectionData.event, this._realPathCache = /* @__PURE__ */ new Map(), this._isTerminating = !1, this._hostUtils = t, this._extHostContext = n, this._initData = a, this._extHostWorkspace = r, this._extHostConfiguration = s, this._logService = o, this._extHostTunnelService = c, this._extHostTerminalService = u, this._extHostLocalizationService = d, this._mainThreadWorkspaceProxy = this._extHostContext.getProxy(ie.MainThreadWorkspace), this._mainThreadTelemetryProxy = this._extHostContext.getProxy(ie.MainThreadTelemetry), this._mainThreadExtensionsProxy = this._extHostContext.getProxy(ie.MainThreadExtensionService), this._almostReadyToRunExtensions = new Jr(), this._readyToStartExtensionHost = new Jr(), this._readyToRunExtensions = new Jr(), this._eagerExtensionsActivated = new Jr(), this._activationEventsReader = new iF(this._initData.extensions.activationEvents), this._globalRegistry = new xl(this._activationEventsReader, this._initData.extensions.allExtensions);
    const v = new Ql(this._initData.extensions.myExtensions);
    this._myRegistry = new xl(
      this._activationEventsReader,
      PA(this._globalRegistry, v)
    ), aa && (this._logService.info(`Creating extension host with the following global extensions: ${wc(this._globalRegistry)}`), this._logService.info(`Creating extension host with the following local extensions: ${wc(this._myRegistry)}`)), this._storage = new pA(this._extHostContext, this._logService), this._secretState = new CA(this._extHostContext), this._storagePath = l, this._instaService = this._store.add(e.createChild(new zE([PS, this._storage], [OS, this._secretState]))), this._activator = this._register(new M0(this._myRegistry, this._globalRegistry, {
      onExtensionActivationError: (_, m, E) => {
        this._mainThreadExtensionsProxy.$onExtensionActivationError(_, Lu(m), E);
      },
      actualActivateExtension: async (_, m) => {
        if (xl.isHostExtension(_, this._myRegistry, this._globalRegistry))
          return await this._mainThreadExtensionsProxy.$activateExtension(_, m), new rO();
        const E = this._myRegistry.getExtensionDescription(_);
        return this._activateExtension(E, m);
      }
    }, this._logService)), this._extensionPathIndex = null, this._resolvers = /* @__PURE__ */ Object.create(null), this._started = !1, this._remoteConnectionData = this._initData.remote.connectionData;
  }
  getRemoteConnectionData() {
    return this._remoteConnectionData;
  }
  async initialize() {
    try {
      await this._beforeAlmostReadyToRunExtensions(), this._almostReadyToRunExtensions.open(), await this._extHostWorkspace.waitForInitializeCall(), an("code/extHost/ready"), this._readyToStartExtensionHost.open(), this._initData.autoStart && this._startExtensionHost();
    } catch (e) {
      Fi(e);
    }
  }
  async _deactivateAll() {
    this._storagePath.onWillDeactivateAll();
    let e = [];
    try {
      e = this._myRegistry.getAllExtensionDescriptions().map((s) => s.identifier).filter((s) => this.isActivated(s)).map((s) => this._deactivate(s));
    } catch {
    }
    await Promise.all(e);
  }
  terminate(e, t = 0) {
    if (this._isTerminating)
      return;
    this._isTerminating = !0, this._logService.info(`Extension host terminating: ${e}`), this._logService.flush(), this._extHostTerminalService.dispose(), this._activator.dispose(), Wh && Iw((r) => {
      this._logService.error(r);
    }), this._extHostContext.dispose();
    const n = this._deactivateAll();
    Promise.race([ns(5e3), n]).finally(() => {
      this._hostUtils.pid ? this._logService.info(`Extension host with pid ${this._hostUtils.pid} exiting with code ${t}`) : this._logService.info(`Extension host exiting with code ${t}`), this._logService.flush(), this._logService.dispose(), this._hostUtils.exit(t);
    });
  }
  isActivated(e) {
    return this._readyToRunExtensions.isOpen() ? this._activator.isActivated(e) : !1;
  }
  async getExtension(e) {
    const t = await this._mainThreadExtensionsProxy.$getExtension(e);
    return t && {
      ...t,
      identifier: new gt(t.identifier.value),
      extensionLocation: x.revive(t.extensionLocation)
    };
  }
  _activateByEvent(e, t) {
    return this._activator.activateByEvent(e, t);
  }
  _activateById(e, t) {
    return this._activator.activateById(e, t);
  }
  activateByIdWithErrors(e, t) {
    return this._activateById(e, t).then(() => {
      const n = this._activator.getActivatedExtension(e);
      if (n.activationFailed)
        return Promise.reject(n.activationFailedError);
    });
  }
  getExtensionRegistry() {
    return this._readyToRunExtensions.wait().then((e) => this._myRegistry);
  }
  getExtensionExports(e) {
    if (this._readyToRunExtensions.isOpen())
      return this._activator.getActivatedExtension(e).exports;
    try {
      return this._activator.getActivatedExtension(e).exports;
    } catch {
      return null;
    }
  }
  async _realPathExtensionUri(e) {
    if (e.scheme === fe.file && this._hostUtils.fsRealpath) {
      const t = e.fsPath;
      this._realPathCache.has(t) || this._realPathCache.set(t, this._hostUtils.fsRealpath(t));
      const n = await this._realPathCache.get(t);
      return x.file(n);
    }
    return e;
  }
  async getExtensionPathIndex() {
    return this._extensionPathIndex || (this._extensionPathIndex = this._createExtensionPathIndex(this._myRegistry.getAllExtensionDescriptions()).then((e) => new tF(e))), this._extensionPathIndex;
  }
  async _createExtensionPathIndex(e) {
    const t = Yr.forUris((n) => uL.ignorePathCasing(n));
    return await Promise.all(e.map(async (n) => {
      if (this._getEntryPoint(n)) {
        const r = await this._realPathExtensionUri(n.extensionLocation);
        t.set(r, n);
      }
    })), t;
  }
  _deactivate(e) {
    let t = Promise.resolve(void 0);
    if (!this._readyToRunExtensions.isOpen() || !this._activator.isActivated(e))
      return t;
    const n = this._activator.getActivatedExtension(e);
    if (!n)
      return t;
    try {
      typeof n.module.deactivate == "function" && (t = Promise.resolve(n.module.deactivate()).then(void 0, (r) => (this._logService.error(r), Promise.resolve(void 0))));
    } catch (r) {
      this._logService.error(`An error occurred when deactivating the extension '${e.value}':`), this._logService.error(r);
    }
    try {
      n.disposable.dispose();
    } catch (r) {
      this._logService.error(`An error occurred when disposing the subscriptions for extension '${e.value}':`), this._logService.error(r);
    }
    return t;
  }
  async _activateExtension(e, t) {
    return this._initData.remote.isRemote ? this._mainThreadExtensionsProxy.$onWillActivateExtension(e.identifier) : await this._mainThreadExtensionsProxy.$onWillActivateExtension(e.identifier), this._doActivateExtension(e, t).then((n) => {
      const r = n.activationTimes;
      return this._mainThreadExtensionsProxy.$onDidActivateExtension(e.identifier, r.codeLoadingTime, r.activateCallTime, r.activateResolvedTime, t), this._logExtensionActivationTimes(e, t, "success", r), n;
    }, (n) => {
      throw this._logExtensionActivationTimes(e, t, "failure"), n;
    });
  }
  _logExtensionActivationTimes(e, t, n, r) {
    const s = MC(e, t);
    this._mainThreadTelemetryProxy.$publicLog2("extensionActivationTimes", {
      ...s,
      ...r || {},
      outcome: n
    });
  }
  _doActivateExtension(e, t) {
    const n = MC(e, t);
    this._mainThreadTelemetryProxy.$publicLog2("activatePlugin", n);
    const r = this._getEntryPoint(e);
    if (!r)
      return Promise.resolve(new nO(fd.NONE));
    this._logService.info(`ExtensionService#_doActivateExtension ${e.identifier.value}, startup: ${t.startup}, activationEvent: '${t.activationEvent}'${e.identifier.value !== t.extensionId.value ? `, root cause: ${t.extensionId.value}` : ""}`), this._logService.flush();
    const s = this._isESM(e), o = new Te(), a = new lw(t.startup);
    return Promise.all([
      s ? this._loadESMModule(e, Ei(e.extensionLocation, r), a) : this._loadCommonJSModule(e, Ei(e.extensionLocation, r), a),
      this._loadExtensionContext(e, o)
    ]).then((l) => (an(`code/extHost/willActivateExtension/${e.identifier.value}`), ax._callActivate(this._logService, e.identifier, l[0], l[1], o, a))).then((l) => (an(`code/extHost/didActivateExtension/${e.identifier.value}`), l));
  }
  _loadExtensionContext(e, t) {
    const n = this._extHostLanguageModels.createLanguageModelAccessInformation(e), r = t.add(new sO(e, this._storage)), s = t.add(new gA(e.identifier.value, !1, this._storage)), o = t.add(new XO(e, this._secretState)), a = e.isUnderDevelopment ? this._initData.environment.extensionTestsLocationURI ? au.Test : au.Development : au.Production, l = this._initData.remote.isRemote ? gl.Workspace : gl.UI;
    return this._logService.trace(`ExtensionService#loadExtensionContext ${e.identifier.value}`), Promise.all([
      r.whenReady,
      s.whenReady,
      this._storagePath.whenReady
    ]).then(() => {
      var p;
      const c = this;
      let u, d;
      const f = dt(e, "ipc") ? (p = this._initData.messagePorts) == null ? void 0 : p.get(gt.toKey(e.identifier)) : void 0;
      return Object.freeze({
        globalState: r,
        workspaceState: s,
        secrets: o,
        subscriptions: [],
        get languageModelAccessInformation() {
          return n;
        },
        get extensionUri() {
          return e.extensionLocation;
        },
        get extensionPath() {
          return e.extensionLocation.fsPath;
        },
        asAbsolutePath(v) {
          return Fw(e.extensionLocation.fsPath, v);
        },
        get storagePath() {
          var v;
          return (v = c._storagePath.workspaceValue(e)) == null ? void 0 : v.fsPath;
        },
        get globalStoragePath() {
          return c._storagePath.globalValue(e).fsPath;
        },
        get logPath() {
          return Fw(c._initData.logsLocation.fsPath, e.identifier.value);
        },
        get logUri() {
          return x.joinPath(c._initData.logsLocation, e.identifier.value);
        },
        get storageUri() {
          return c._storagePath.workspaceValue(e);
        },
        get globalStorageUri() {
          return c._storagePath.globalValue(e);
        },
        get extensionMode() {
          return a;
        },
        get extension() {
          return u === void 0 && (u = new Xd(
            c,
            e.identifier,
            e,
            l,
            !1
          )), u;
        },
        get extensionRuntime() {
          return H(e, "extensionRuntime"), c.extensionRuntime;
        },
        get environmentVariableCollection() {
          return c._extHostTerminalService.getEnvironmentVariableCollection(e);
        },
        get messagePassingProtocol() {
          if (!d) {
            if (!f)
              return;
            const v = Pt.buffer(Pt.fromDOMEventEmitter(f, "message", (_) => _.data));
            f.start(), d = {
              onDidReceiveMessage: v,
              postMessage: f.postMessage.bind(f)
            };
          }
          return d;
        }
      });
    });
  }
  static _callActivate(e, t, n, r, s, o) {
    return n = n || {
      activate: void 0,
      deactivate: void 0
    }, this._callActivateOptional(e, t, n, r, o).then((a) => new bv(
      !1,
      null,
      o.build(),
      n,
      a,
      Ie(() => {
        s.dispose(), Kn(r.subscriptions);
      })
    ));
  }
  static _callActivateOptional(e, t, n, r, s) {
    if (typeof n.activate == "function")
      try {
        s.activateCallStart(), e.trace(`ExtensionService#_callActivateOptional ${t.value}`);
        const o = n.activate.apply(globalThis, [r]);
        return s.activateCallStop(), s.activateResolveStart(), Promise.resolve(o).then((a) => (s.activateResolveStop(), a));
      } catch (o) {
        return Promise.reject(o);
      }
    else
      return Promise.resolve(n);
  }
  _activateOneStartupFinished(e, t) {
    this._activateById(e.identifier, {
      startup: !1,
      extensionId: e.identifier,
      activationEvent: t
    }).then(void 0, (n) => {
      this._logService.error(n);
    });
  }
  _activateAllStartupFinishedDeferred(e, t = 0) {
    const r = Date.now();
    $T(() => {
      for (let s = t; s < e.length; s += 1) {
        const o = e[s];
        for (const a of o.activationEvents ?? [])
          if (a === "onStartupFinished")
            if (Date.now() - r > 50) {
              this._activateAllStartupFinishedDeferred(e, s);
              break;
            } else
              this._activateOneStartupFinished(o, a);
      }
    });
  }
  _activateAllStartupFinished() {
    this._mainThreadExtensionsProxy.$setPerformanceMarks(o8()), this._extHostConfiguration.getConfigProvider().then((e) => {
      const t = e.getConfiguration("extensions.experimental").get("deferredStartupFinishedActivation"), n = this._myRegistry.getAllExtensionDescriptions();
      if (t)
        this._activateAllStartupFinishedDeferred(n);
      else
        for (const r of n)
          if (r.activationEvents)
            for (const s of r.activationEvents)
              s === "onStartupFinished" && this._activateOneStartupFinished(r, s);
    });
  }
  _handleEagerExtensions() {
    const e = this._activateByEvent("*", !0).then(void 0, (o) => {
      this._logService.error(o);
    });
    this._register(this._extHostWorkspace.onDidChangeWorkspace((o) => this._handleWorkspaceContainsEagerExtensions(o.added)));
    const t = this._extHostWorkspace.workspace ? this._extHostWorkspace.workspace.folders : [], n = this._handleWorkspaceContainsEagerExtensions(t), r = this._handleRemoteResolverEagerExtensions(), s = Promise.all([r, e, n]).then(() => {
    });
    return Promise.race([s, ns(1e4)]).then(() => {
      this._activateAllStartupFinished();
    }), s;
  }
  _handleWorkspaceContainsEagerExtensions(e) {
    return e.length === 0 ? Promise.resolve(void 0) : Promise.all(this._myRegistry.getAllExtensionDescriptions().map((t) => this._handleWorkspaceContainsEagerExtension(e, t))).then(() => {
    });
  }
  async _handleWorkspaceContainsEagerExtension(e, t) {
    if (this.isActivated(t.identifier))
      return;
    const n = !this._initData.remote.isRemote && !!this._initData.remote.authority, r = {
      logService: this._logService,
      folders: e.map((o) => o.uri),
      forceUsingSearch: n || !this._hostUtils.fsExists,
      exists: (o) => this._hostUtils.fsExists(o.fsPath),
      checkExists: (o, a, l) => this._mainThreadWorkspaceProxy.$checkExists(o, a, l)
    }, s = await KO(r, t);
    if (s)
      return this._activateById(t.identifier, { startup: !0, extensionId: t.identifier, activationEvent: s.activationEvent }).then(void 0, (o) => this._logService.error(o));
  }
  async _handleRemoteResolverEagerExtensions() {
    if (this._initData.remote.authority)
      return this._activateByEvent(`onResolveRemoteAuthority:${this._initData.remote.authority}`, !1);
  }
  async $extensionTestsExecute() {
    await this._eagerExtensionsActivated.wait();
    try {
      return await this._doHandleExtensionTests();
    } catch (e) {
      throw console.error(e), e;
    }
  }
  async _doHandleExtensionTests() {
    const { extensionDevelopmentLocationURI: e, extensionTestsLocationURI: t } = this._initData.environment;
    if (!e || !t)
      throw new Error(h(2623, "Cannot load test runner."));
    const n = (await this.getExtensionPathIndex()).findSubstr(t), s = await (this._isESM(n, t.path) ? this._loadESMModule(null, t, new lw(!1)) : this._loadCommonJSModule(null, t, new lw(!1)));
    if (!s || typeof s.run != "function")
      throw new Error(h(
        2624,
        "Path {0} does not point to a valid extension test runner.",
        t.toString()
      ));
    return new Promise((o, a) => {
      const l = (d, f) => {
        d ? (aa && this._logService.error("Test runner called back with error", d), a(d)) : (aa && (f ? this._logService.info(`Test runner called back with ${f} failures.`) : this._logService.info("Test runner called back with successful outcome.")), o(typeof f == "number" && f > 0 ? 1 : 0));
      }, c = or(t), u = s.run(c, l);
      u && u.then && u.then(() => {
        aa && this._logService.info("Test runner finished successfully."), o(0);
      }).catch((d) => {
        aa && this._logService.error("Test runner finished with error", d), a(d instanceof Error && d.stack ? d.stack : String(d));
      });
    });
  }
  _startExtensionHost() {
    if (this._started)
      throw new Error("Extension host is already started!");
    return this._started = !0, this._readyToStartExtensionHost.wait().then(() => this._readyToRunExtensions.open()).then(() => Promise.race([this._activator.waitForActivatingExtensions(), ns(1e3)])).then(() => this._handleEagerExtensions()).then(() => {
      this._eagerExtensionsActivated.open(), this._logService.info("Eager extensions activated");
    });
  }
  registerRemoteAuthorityResolver(e, t) {
    return this._resolvers[e] = t, Ie(() => {
      delete this._resolvers[e];
    });
  }
  async getRemoteExecServer(e) {
    var n;
    const { resolver: t } = await this._activateAndGetResolver(e);
    return (n = t == null ? void 0 : t.resolveExecServer) == null ? void 0 : n.call(t, e, { resolveAttempt: 0 });
  }
  async _activateAndGetResolver(e) {
    const t = e.indexOf("+");
    if (t === -1)
      throw new qr(
        "Not an authority that can be resolved!",
        Vs.InvalidAuthority
      );
    const n = e.substr(0, t);
    return await this._almostReadyToRunExtensions.wait(), await this._activateByEvent(`onResolveRemoteAuthority:${n}`, !1), { authorityPrefix: n, resolver: this._resolvers[n] };
  }
  async $resolveAuthority(e, t) {
    var S;
    const n = Js.create(!1), r = () => `[resolveAuthority(${uI(e)},${t})][${n.elapsed()}ms] `, s = (k) => this._logService.info(`${r()}${k}`), o = (k) => this._logService.warn(`${r()}${k}`), a = (k, q = void 0) => this._logService.error(`${r()}${k}`, q), l = (k) => {
      if (k instanceof qr)
        return {
          type: "error",
          error: {
            code: k._code,
            message: k._message,
            detail: k._detail
          }
        };
      throw k;
    }, c = async (k) => {
      s(`activating resolver for ${k}...`);
      const { resolver: q, authorityPrefix: B } = await this._activateAndGetResolver(k);
      if (!q)
        throw a(`no resolver for ${B}`), new qr(
          `No remote extension installed to resolve ${B}.`,
          Vs.NoResolverFound
        );
      return { resolver: q, authorityPrefix: B, remoteAuthority: k };
    }, u = e.split(/@|%40/g).reverse();
    s(`activating remote resolvers ${u.join(" -> ")}`);
    let d;
    try {
      d = await Promise.all(u.map(c)).catch(async (k) => {
        if (!(k instanceof qr) || k._code !== Vs.InvalidAuthority)
          throw k;
        return o(`resolving nested authorities failed: ${k.message}`), [await c(e)];
      });
    } catch (k) {
      return l(k);
    }
    const f = new CL();
    f.cancelAndSet(() => s("waiting..."), 1e3);
    let p, v;
    for (const [k, { authorityPrefix: q, resolver: B, remoteAuthority: te }] of d.entries())
      try {
        if (k === d.length - 1)
          s("invoking final resolve()..."), an(`code/extHost/willResolveAuthority/${q}`), p = await B.resolve(te, { resolveAttempt: t, execServer: v }), an(`code/extHost/didResolveAuthorityOK/${q}`), s("setting tunnel factory..."), this._register(await this._extHostTunnelService.setTunnelFactory(B, Dg.isManagedResolvedAuthority(p) ? p : void 0));
        else {
          if (s(`invoking resolveExecServer() for ${te}`), an(`code/extHost/willResolveExecServer/${q}`), v = await ((S = B.resolveExecServer) == null ? void 0 : S.call(B, te, { resolveAttempt: t, execServer: v })), !v)
            throw new qr(
              `Exec server was not available for ${te}`,
              Vs.NoResolverFound
            );
          an(`code/extHost/didResolveExecServerOK/${q}`);
        }
      } catch (G) {
        return an(`code/extHost/didResolveAuthorityError/${q}`), a("returned an error", G), f.dispose(), l(G);
      }
    f.dispose();
    const _ = {
      environmentTunnels: p.environmentTunnels,
      features: p.tunnelFeatures ? {
        elevation: p.tunnelFeatures.elevation,
        privacyOptions: p.tunnelFeatures.privacyOptions,
        protocol: p.tunnelFeatures.protocol === void 0 ? !0 : p.tunnelFeatures.protocol
      } : void 0
    }, m = {
      extensionHostEnv: p.extensionHostEnv,
      isTrusted: p.isTrusted,
      authenticationSession: p.authenticationSessionForInitializingExtensions ? { id: p.authenticationSessionForInitializingExtensions.id, providerId: p.authenticationSessionForInitializingExtensions.providerId } : void 0
    };
    s(`returned ${Dg.isManagedResolvedAuthority(p) ? "managed authority" : `${p.host}:${p.port}`}`);
    let E;
    if (Dg.isManagedResolvedAuthority(p)) {
      const k = t;
      this._extHostManagedSockets.setFactory(k, p.makeConnection), E = {
        authority: e,
        connectTo: new hN(k),
        connectionToken: p.connectionToken
      };
    } else
      E = {
        authority: e,
        connectTo: new fN(p.host, p.port),
        connectionToken: p.connectionToken
      };
    return {
      type: "ok",
      value: {
        authority: E,
        options: m,
        tunnelInformation: _
      }
    };
  }
  async $getCanonicalURI(e, t) {
    this._logService.info(`$getCanonicalURI invoked for authority (${uI(e)})`);
    const { resolver: n } = await this._activateAndGetResolver(e);
    if (!n)
      return null;
    const r = x.revive(t);
    if (typeof n.getCanonicalURI > "u")
      return r;
    const s = await Mi(() => n.getCanonicalURI(r));
    return s || r;
  }
  async $startExtensionHost(e) {
    e.toAdd.forEach((o) => o.extensionLocation = x.revive(o.extensionLocation));
    const { globalRegistry: t, myExtensions: n } = NC(this._activationEventsReader, this._globalRegistry, this._myRegistry, e), r = await this._createExtensionPathIndex(n);
    return (await this.getExtensionPathIndex()).setSearchTree(r), this._globalRegistry.set(t.getAllExtensionDescriptions()), this._myRegistry.set(n), aa && (this._logService.info(`$startExtensionHost: global extensions: ${wc(this._globalRegistry)}`), this._logService.info(`$startExtensionHost: local extensions: ${wc(this._myRegistry)}`)), this._startExtensionHost();
  }
  $activateByEvent(e, t) {
    return t === fb.Immediate ? this._almostReadyToRunExtensions.wait().then((n) => this._activateByEvent(e, !1)) : this._readyToRunExtensions.wait().then((n) => this._activateByEvent(e, !1));
  }
  async $activate(e, t) {
    return await this._readyToRunExtensions.wait(), this._myRegistry.getExtensionDescription(e) ? (await this._activateById(e, t), !0) : !1;
  }
  async $deltaExtensions(e) {
    e.toAdd.forEach((o) => o.extensionLocation = x.revive(o.extensionLocation));
    const { globalRegistry: t, myExtensions: n } = NC(this._activationEventsReader, this._globalRegistry, this._myRegistry, e), r = await this._createExtensionPathIndex(n);
    return (await this.getExtensionPathIndex()).setSearchTree(r), this._globalRegistry.set(t.getAllExtensionDescriptions()), this._myRegistry.set(n), aa && (this._logService.info(`$deltaExtensions: global extensions: ${wc(this._globalRegistry)}`), this._logService.info(`$deltaExtensions: local extensions: ${wc(this._myRegistry)}`)), Promise.resolve(void 0);
  }
  async $test_latency(e) {
    return e;
  }
  async $test_up(e) {
    return e.byteLength;
  }
  async $test_down(e) {
    const t = he.alloc(e), n = Math.random() % 256;
    for (let r = 0; r < e; r++)
      t.writeUInt8(n, r);
    return t;
  }
  async $updateRemoteConnectionData(e) {
    this._remoteConnectionData = e, this._onDidChangeRemoteConnectionData.fire();
  }
  _isESM(e, t) {
    return t ?? (t = e ? this._getEntryPoint(e) : t), (t == null ? void 0 : t.endsWith(".mjs")) || (e == null ? void 0 : e.type) === "module" && !(t != null && t.endsWith(".cjs"));
  }
};
lx = ax = z([
  O(0, Dp),
  O(1, TA),
  O(2, tt),
  O(3, Zs),
  O(4, eo),
  O(5, ot),
  O(6, _i),
  O(7, AS),
  O(8, RS),
  O(9, bd),
  O(10, FS),
  O(11, US),
  O(12, MS)
], lx);
function NC(i, e, t, n) {
  i.addActivationEvents(n.addActivationEvents);
  const r = new xl(i, e.getAllExtensionDescriptions());
  r.deltaExtensions(n.toAdd, n.toRemove);
  const s = new Ql(t.getAllExtensionDescriptions().map((a) => a.identifier));
  for (const a of n.myToRemove)
    s.delete(a);
  for (const a of n.myToAdd)
    s.add(a);
  const o = PA(r, s);
  return { globalRegistry: r, myExtensions: o };
}
function MC(i, e) {
  return {
    id: i.identifier.value,
    name: i.name,
    extensionVersion: i.version,
    publisherDisplayName: i.publisher,
    activationEvents: i.activationEvents ? i.activationEvents.join(",") : null,
    isBuiltin: i.isBuiltin,
    reason: e.activationEvent,
    reasonId: e.extensionId.value
  };
}
function wc(i) {
  return i.getAllExtensionDescriptions().map((e) => e.identifier.value).join(",");
}
const na = me("IExtHostExtensionService");
var ja, cp, Ga;
class Xd {
  constructor(e, t, n, r, s) {
    ye(this, ja);
    ye(this, cp);
    ye(this, Ga);
    le(this, ja, e), le(this, cp, t), le(this, Ga, n.identifier), this.id = n.identifier.value, this.extensionUri = n.extensionLocation, this.extensionPath = Fu(or(n.extensionLocation)), this.packageJSON = n, this.extensionKind = r, this.isFromDifferentExtensionHost = s;
  }
  get isActive() {
    return N(this, ja).isActivated(N(this, Ga));
  }
  get exports() {
    if (!(this.packageJSON.api === "none" || this.isFromDifferentExtensionHost))
      return N(this, ja).getExtensionExports(N(this, Ga));
  }
  async activate() {
    if (this.isFromDifferentExtensionHost)
      throw new Error("Cannot activate foreign extension");
    return await N(this, ja).activateByIdWithErrors(N(this, Ga), { startup: !1, extensionId: N(this, cp), activationEvent: "api" }), this.exports;
  }
}
ja = new WeakMap(), cp = new WeakMap(), Ga = new WeakMap();
function PA(i, e) {
  return i.getAllExtensionDescriptions().filter((t) => e.has(t.identifier));
}
class tF {
  constructor(e) {
    this._searchTree = e;
  }
  setSearchTree(e) {
    this._searchTree = e;
  }
  findSubstr(e) {
    return this._searchTree.findSubstr(e);
  }
  forEach(e) {
    return this._searchTree.forEach(e);
  }
}
class iF {
  constructor(e) {
    this._map = new Ko(), this.addActivationEvents(e);
  }
  readActivationEvents(e) {
    return this._map.get(e.identifier) ?? [];
  }
  addActivationEvents(e) {
    for (const t of Object.keys(e))
      this._map.set(t, e[t]);
  }
}
const Lp = me("IExtHostApiDeprecationService");
let cx = class {
  constructor(e, t) {
    this._extHostLogService = t, this._reportedUsages = /* @__PURE__ */ new Set(), this._telemetryShape = e.getProxy(ie.MainThreadTelemetry);
  }
  report(e, t, n) {
    const r = this.getUsageKey(e, t);
    this._reportedUsages.has(r) || (this._reportedUsages.add(r), t.isUnderDevelopment && this._extHostLogService.warn(`[Deprecation Warning] '${e}' is deprecated. ${n}`), this._telemetryShape.$publicLog2("extHostDeprecatedApiUsage", {
      extensionId: t.identifier.value,
      apiId: e
    }));
  }
  getUsageKey(e, t) {
    return `${e}-${t.identifier.value}`;
  }
};
cx = z([
  O(0, tt),
  O(1, ot)
], cx);
var Me;
(function(i) {
  i[i.Off = 0] = "Off", i[i.Trace = 1] = "Trace", i[i.Debug = 2] = "Debug", i[i.Info = 3] = "Info", i[i.Warning = 4] = "Warning", i[i.Error = 5] = "Error";
})(Me || (Me = {}));
const nF = Me.Info;
function ux(i, e) {
  return i !== Me.Off && i <= e;
}
function rF(i, e, t) {
  switch (e) {
    case Me.Trace:
      i.trace(t);
      break;
    case Me.Debug:
      i.debug(t);
      break;
    case Me.Info:
      i.info(t);
      break;
    case Me.Warning:
      i.warn(t);
      break;
    case Me.Error:
      i.error(t);
      break;
    case Me.Off:
      break;
    default:
      throw new Error(`Invalid log level ${e}`);
  }
}
function bc(i, e = !1) {
  let t = "";
  for (let n = 0; n < i.length; n++) {
    let r = i[n];
    if (r instanceof Error && (r = wd(r, e)), typeof r == "object")
      try {
        r = JSON.stringify(r);
      } catch {
      }
    t += (n > 0 ? " " : "") + r;
  }
  return t;
}
class AA extends xe {
  constructor() {
    super(...arguments), this.level = nF, this._onDidChangeLogLevel = this._register(new M()), this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;
  }
  setLevel(e) {
    this.level !== e && (this.level = e, this._onDidChangeLogLevel.fire(this.level));
  }
  getLevel() {
    return this.level;
  }
  checkLogLevel(e) {
    return ux(this.level, e);
  }
  canLog(e) {
    return this._store.isDisposed ? !1 : this.checkLogLevel(e);
  }
}
class RA extends AA {
  constructor(e) {
    super(), this.logAlways = e;
  }
  checkLogLevel(e) {
    return this.logAlways || super.checkLogLevel(e);
  }
  trace(e, ...t) {
    this.canLog(Me.Trace) && this.log(Me.Trace, bc([e, ...t], !0));
  }
  debug(e, ...t) {
    this.canLog(Me.Debug) && this.log(Me.Debug, bc([e, ...t]));
  }
  info(e, ...t) {
    this.canLog(Me.Info) && this.log(Me.Info, bc([e, ...t]));
  }
  warn(e, ...t) {
    this.canLog(Me.Warning) && this.log(Me.Warning, bc([e, ...t]));
  }
  error(e, ...t) {
    if (this.canLog(Me.Error))
      if (e instanceof Error) {
        const n = Array.prototype.slice.call(arguments);
        n[0] = e.stack, this.log(Me.Error, bc(n));
      } else
        this.log(Me.Error, bc([e, ...t]));
  }
  flush() {
  }
}
class sF extends AA {
  constructor(e) {
    super(), this.loggers = e, e.length && this.setLevel(e[0].getLevel());
  }
  setLevel(e) {
    for (const t of this.loggers)
      t.setLevel(e);
    super.setLevel(e);
  }
  trace(e, ...t) {
    for (const n of this.loggers)
      n.trace(e, ...t);
  }
  debug(e, ...t) {
    for (const n of this.loggers)
      n.debug(e, ...t);
  }
  info(e, ...t) {
    for (const n of this.loggers)
      n.info(e, ...t);
  }
  warn(e, ...t) {
    for (const n of this.loggers)
      n.warn(e, ...t);
  }
  error(e, ...t) {
    for (const n of this.loggers)
      n.error(e, ...t);
  }
  flush() {
    for (const e of this.loggers)
      e.flush();
  }
  dispose() {
    for (const e of this.loggers)
      e.dispose();
    super.dispose();
  }
}
class oF extends xe {
  constructor(e, t, n) {
    if (super(), this.logLevel = e, this.logsHome = t, this._loggers = new mi(), this._onDidChangeLoggers = this._register(new M()), this.onDidChangeLoggers = this._onDidChangeLoggers.event, this._onDidChangeLogLevel = this._register(new M()), this.onDidChangeLogLevel = this._onDidChangeLogLevel.event, this._onDidChangeVisibility = this._register(new M()), this.onDidChangeVisibility = this._onDidChangeVisibility.event, n)
      for (const r of n)
        this._loggers.set(r.resource, { logger: void 0, info: r });
  }
  getLoggerEntry(e) {
    return st(e) ? [...this._loggers.values()].find((t) => t.info.id === e) : this._loggers.get(e);
  }
  getLogger(e) {
    var t;
    return (t = this.getLoggerEntry(e)) == null ? void 0 : t.logger;
  }
  createLogger(e, t) {
    var l;
    const n = this.toResource(e), r = st(e) ? e : (t == null ? void 0 : t.id) ?? Yh(n.toString()).toString(16);
    let s = (l = this._loggers.get(n)) == null ? void 0 : l.logger;
    const o = (t == null ? void 0 : t.logLevel) === "always" ? Me.Trace : t == null ? void 0 : t.logLevel;
    s || (s = this.doCreateLogger(n, o ?? this.getLogLevel(n) ?? this.logLevel, { ...t, id: r }));
    const a = {
      logger: s,
      info: {
        resource: n,
        id: r,
        logLevel: o,
        name: t == null ? void 0 : t.name,
        hidden: t == null ? void 0 : t.hidden,
        group: t == null ? void 0 : t.group,
        extensionId: t == null ? void 0 : t.extensionId,
        when: t == null ? void 0 : t.when
      }
    };
    return this.registerLogger(a.info), this._loggers.set(n, a), s;
  }
  toResource(e) {
    return st(e) ? Ei(this.logsHome, `${e}.log`) : e;
  }
  setLogLevel(e, t) {
    var n, r, s;
    if (x.isUri(e)) {
      const o = e, a = t, l = this._loggers.get(o);
      l && a !== l.info.logLevel && (l.info.logLevel = a === this.logLevel ? void 0 : a, (n = l.logger) == null || n.setLevel(a), this._loggers.set(l.info.resource, l), this._onDidChangeLogLevel.fire([o, a]));
    } else {
      this.logLevel = e;
      for (const [o, a] of this._loggers.entries())
        ((r = this._loggers.get(o)) == null ? void 0 : r.info.logLevel) === void 0 && ((s = a.logger) == null || s.setLevel(this.logLevel));
      this._onDidChangeLogLevel.fire(this.logLevel);
    }
  }
  setVisibility(e, t) {
    const n = this.getLoggerEntry(e);
    n && t !== !n.info.hidden && (n.info.hidden = !t, this._loggers.set(n.info.resource, n), this._onDidChangeVisibility.fire([n.info.resource, t]));
  }
  getLogLevel(e) {
    var n;
    let t;
    return e && (t = (n = this._loggers.get(e)) == null ? void 0 : n.info.logLevel), t ?? this.logLevel;
  }
  registerLogger(e) {
    const t = this._loggers.get(e.resource);
    t ? t.info.hidden !== e.hidden && this.setVisibility(e.resource, !e.hidden) : (this._loggers.set(e.resource, { info: e, logger: void 0 }), this._onDidChangeLoggers.fire({ added: [e], removed: [] }));
  }
  deregisterLogger(e) {
    const t = this.toResource(e), n = this._loggers.get(t);
    n && (n.logger && n.logger.dispose(), this._loggers.delete(t), this._onDidChangeLoggers.fire({ added: [], removed: [n.info] }));
  }
  *getRegisteredLoggers() {
    for (const e of this._loggers.values())
      yield e.info;
  }
  getRegisteredLogger(e) {
    var t;
    return (t = this._loggers.get(e)) == null ? void 0 : t.info;
  }
  dispose() {
    this._loggers.forEach((e) => {
      var t;
      return (t = e.logger) == null ? void 0 : t.dispose();
    }), this._loggers.clear(), super.dispose();
  }
}
function aF(i) {
  switch (i) {
    case Me.Trace:
      return "trace";
    case Me.Debug:
      return "debug";
    case Me.Info:
      return "info";
    case Me.Warning:
      return "warn";
    case Me.Error:
      return "error";
    case Me.Off:
      return "off";
  }
}
function lF(i) {
  switch (i) {
    case "trace":
      return Me.Trace;
    case "debug":
      return Me.Debug;
    case "info":
      return Me.Info;
    case "warn":
      return Me.Warning;
    case "error":
      return Me.Error;
    case "critical":
      return Me.Error;
    case "off":
      return Me.Off;
  }
}
new P("logLevel", aF(Me.Info));
let o1 = class extends oF {
  constructor(e, t) {
    super(t.logLevel, t.logsLocation, t.loggers.map((n) => Wi(n))), this._proxy = e.getProxy(ie.MainThreadLogger);
  }
  $setLogLevel(e, t) {
    t ? this.setLogLevel(x.revive(t), e) : this.setLogLevel(e);
  }
  setVisibility(e, t) {
    super.setVisibility(e, t), this._proxy.$setVisibility(e, t);
  }
  doCreateLogger(e, t, n) {
    return new cF(this._proxy, e, t, n);
  }
};
o1 = z([
  O(0, tt),
  O(1, _i)
], o1);
class cF extends RA {
  constructor(e, t, n, r) {
    super((r == null ? void 0 : r.logLevel) === "always"), this.proxy = e, this.file = t, this.isLoggerCreated = !1, this.buffer = [], this.setLevel(n), this.proxy.$createLogger(t, r).then(() => {
      this.doLog(this.buffer), this.isLoggerCreated = !0;
    });
  }
  log(e, t) {
    const n = [[e, t]];
    this.isLoggerCreated ? this.doLog(n) : this.buffer.push(...n);
  }
  doLog(e) {
    this.proxy.$log(this.file, e);
  }
  flush() {
    this.proxy.$flush(this.file);
  }
}
class uF extends xe {
  constructor(e, t = []) {
    super(), this.logger = new sF([e, ...t]), this._register(e.onDidChangeLogLevel((n) => this.setLevel(n)));
  }
  get onDidChangeLogLevel() {
    return this.logger.onDidChangeLogLevel;
  }
  setLevel(e) {
    this.logger.setLevel(e);
  }
  getLevel() {
    return this.logger.getLevel();
  }
  trace(e, ...t) {
    this.logger.trace(e, ...t);
  }
  debug(e, ...t) {
    this.logger.debug(e, ...t);
  }
  info(e, ...t) {
    this.logger.info(e, ...t);
  }
  warn(e, ...t) {
    this.logger.warn(e, ...t);
  }
  error(e, ...t) {
    this.logger.error(e, ...t);
  }
  flush() {
    this.logger.flush();
  }
}
let dx = class extends uF {
  constructor(e, t, n) {
    const r = n.remote.isRemote ? "remoteexthost" : e ? "workerexthost" : "exthost", s = n.remote.isRemote ? h(2628, "Extension Host (Remote)") : e ? h(2629, "Extension Host (Worker)") : h(2630, "Extension Host");
    super(t.createLogger(r, { name: s }));
  }
};
dx = z([
  O(1, ta),
  O(2, _i)
], dx);
class OC {
  static async installEarlyHandler(e) {
    Error.stackTraceLimit = 100;
    const t = e.get(ot), r = e.get(tt).getProxy(ie.MainThreadErrors);
    Iw((s) => {
      t.error(s);
      const o = Lu(s);
      r.$onUnexpectedError(o);
    });
  }
  static async installFullHandler(e) {
    const t = e.get(ot), n = e.get(tt), r = e.get(na), s = e.get(Ev), o = e.get(Lp), a = n.getProxy(ie.MainThreadExtensionService), l = n.getProxy(ie.MainThreadErrors), c = await r.getExtensionRegistry(), u = await r.getExtensionPathIndex(), d = /* @__PURE__ */ new WeakMap();
    function f(_, m) {
      if (d.has(_))
        return d.get(_).stack;
      let E = "", S, k;
      for (const B of m)
        E += `
	at ${B.toString()}`, k = B.getFileName(), !S && k && (S = u.findSubstr(x.file(k)));
      const q = `${_.name || "Error"}: ${_.message || ""}${E}`;
      return d.set(_, { extensionIdentifier: S == null ? void 0 : S.identifier, stack: q }), q;
    }
    const p = Symbol("prepareStackTrace wrapped");
    let v = f;
    Object.defineProperty(Error, "prepareStackTrace", {
      configurable: !1,
      get() {
        return v;
      },
      set(_) {
        if (_ === f || !_ || _[p]) {
          v = _ || f;
          return;
        }
        v = function(m, E) {
          return f(m, E), _.call(Error, m, E);
        }, Object.assign(v, { [p]: !0 });
      }
    }), Iw((_) => {
      Wg.is(_) || t.error(_);
      const m = Lu(_);
      let E;
      if (_ instanceof uP)
        E = _.extension;
      else {
        const S = d.get(_);
        E = S == null ? void 0 : S.extensionIdentifier;
      }
      if (E)
        if (Wg.is(_)) {
          const S = c.getExtensionDescription(E);
          S && o.report(_.name, S, `${_.message}
 FROM: ${_.stack}`);
        } else {
          a.$onExtensionRuntimeError(E, m);
          const S = s.onExtensionError(E, _);
          t.trace("forwarded error to extension?", S, E);
        }
    }), bp.addListener((_) => {
      l.$onUnexpectedError(_);
    });
  }
}
class $S {
  constructor(e, t, n, r, s) {
    this._hostUtils = n, this._rpcProtocol = new Qw(e, null, r), t = $S._transform(t, this._rpcProtocol);
    const o = new zE(...HL());
    o.set(_i, { _serviceBrand: void 0, ...t, messagePorts: s }), o.set(tt, new VL(this._rpcProtocol)), o.set(ev, new zL(r)), o.set(TA, n), o.set(ot, new vr(dx, [!0], !0)), o.set(ta, new vr(o1, [], !0));
    const a = new Zg(o, !0);
    Wh && a.invokeFunction(OC.installEarlyHandler), this._logService = a.invokeFunction((l) => l.get(ot)), an("code/extHost/didCreateServices"), this._hostUtils.pid ? this._logService.info(`Extension host with pid ${this._hostUtils.pid} started`) : this._logService.info("Extension host started"), this._logService.trace("initData", t), this._extensionService = a.invokeFunction((l) => l.get(na)), this._extensionService.initialize(), Wh && a.invokeFunction(OC.installFullHandler);
  }
  async asBrowserUri(e) {
    const t = this._rpcProtocol.getProxy(ie.MainThreadExtensionService);
    return x.revive(await t.$asBrowserUri(e));
  }
  async getAllStaticBrowserUris() {
    return (await this._rpcProtocol.getProxy(ie.MainThreadExtensionService).$getAllStaticBrowserUris()).map(([t, n]) => [x.revive(t), x.revive(n)]);
  }
  terminate(e) {
    this._extensionService.terminate(e);
  }
  getExtHostExtensionService() {
    return this._extensionService;
  }
  static _transform(e, t) {
    e.extensions.allExtensions.forEach((r) => {
      r.extensionLocation = x.revive(t.transformIncomingURIs(r.extensionLocation));
    }), e.environment.appRoot = x.revive(t.transformIncomingURIs(e.environment.appRoot));
    const n = e.environment.extensionDevelopmentLocationURI;
    return n && (e.environment.extensionDevelopmentLocationURI = n.map((r) => x.revive(t.transformIncomingURIs(r)))), e.environment.extensionTestsLocationURI = x.revive(t.transformIncomingURIs(e.environment.extensionTestsLocationURI)), e.environment.globalStorageHome = x.revive(t.transformIncomingURIs(e.environment.globalStorageHome)), e.environment.workspaceStorageHome = x.revive(t.transformIncomingURIs(e.environment.workspaceStorageHome)), e.nlsBaseUrl = x.revive(t.transformIncomingURIs(e.nlsBaseUrl)), e.logsLocation = x.revive(t.transformIncomingURIs(e.logsLocation)), e.workspace = t.transformIncomingURIs(e.workspace), e;
  }
}
const dF = (function(e) {
  const t = (n) => {
    globalThis.removeEventListener("message", t);
    const r = n.data;
    Object.defineProperties(globalThis, {
      postMessage: {
        value(s, o) {
          r.postMessage(s, o);
        }
      },
      onmessage: {
        get() {
          return r.onmessage;
        },
        set(s) {
          r.onmessage = s;
        }
      }
    }), r.addEventListener("message", (s) => {
      globalThis.dispatchEvent(new MessageEvent(
        "message",
        { data: s.data, ports: s.ports ? [...s.ports] : void 0 }
      ));
    }), r.start(), globalThis.Worker = class {
      constructor() {
        throw new TypeError("Nested workers from within nested worker are NOT supported.");
      }
    }, importScripts(e);
  };
  globalThis.addEventListener("message", t);
}).toString();
class hF extends EventTarget {
  constructor(e, t, n) {
    super(), this.onmessage = null, this.onmessageerror = null, this.onerror = null;
    const r = `((${dF})('${t}'))`, s = new Blob([r], { type: "application/javascript" }), o = URL.createObjectURL(s), a = new MessageChannel(), l = o, c = {
      type: "_newWorker",
      id: l,
      port: a.port2,
      url: o,
      options: n
    };
    e(c, [a.port2]), this.postMessage = a.port1.postMessage.bind(a.port1), this.terminate = () => {
      e({
        type: "_terminateWorker",
        id: l
      }), URL.revokeObjectURL(o), a.port1.close(), a.port2.close();
    }, Object.defineProperties(this, {
      onmessage: {
        get() {
          return a.port1.onmessage;
        },
        set(u) {
          a.port1.onmessage = u;
        }
      },
      onmessageerror: {
        get() {
          return a.port1.onmessageerror;
        },
        set(u) {
          a.port1.onmessageerror = u;
        }
      }
    }), a.port1.addEventListener("messageerror", (u) => {
      const d = new MessageEvent("messageerror", { data: u.data });
      this.dispatchEvent(d);
    }), a.port1.addEventListener("message", (u) => {
      const d = new MessageEvent("message", { data: u.data });
      this.dispatchEvent(d);
    }), a.port1.start();
  }
}
new P("inOutput", !1);
new P("activeLogOutput", !1);
new P("activeLogOutput.isLog", !1);
new P("activeLogOutput.levelSettable", !1);
new P("activeLogOutput.level", "");
new P("activeLogOutput.levelIsDefault", !1);
new P("outputView.scrollLock", !1);
new P("activeOutputChannel", "");
new P("output.filter.trace", !0);
new P("output.filter.debug", !0);
new P("output.filter.info", !0);
new P("output.filter.warning", !0);
new P("output.filter.error", !0);
new P("outputFilterFocus", !1);
new P("output.filter.categories", "");
var Sh;
(function(i) {
  i[i.Append = 1] = "Append", i[i.Replace = 2] = "Replace", i[i.Clear = 3] = "Clear";
})(Sh || (Sh = {}));
const fF = {
  OutputChannels: "workbench.contributions.outputChannels"
};
function pF(i) {
  return Array.isArray(i.source);
}
class gF extends xe {
  constructor() {
    super(...arguments), this.channels = /* @__PURE__ */ new Map(), this._onDidRegisterChannel = this._register(new M()), this.onDidRegisterChannel = this._onDidRegisterChannel.event, this._onDidRemoveChannel = this._register(new M()), this.onDidRemoveChannel = this._onDidRemoveChannel.event, this._onDidUpdateChannelFiles = this._register(new M()), this.onDidUpdateChannelSources = this._onDidUpdateChannelFiles.event;
  }
  registerChannel(e) {
    this.channels.has(e.id) || (this.channels.set(e.id, e), this._onDidRegisterChannel.fire(e.id));
  }
  getChannels() {
    const e = [];
    return this.channels.forEach((t) => e.push(t)), e;
  }
  getChannel(e) {
    return this.channels.get(e);
  }
  updateChannelSources(e, t) {
    const n = this.channels.get(e);
    n && pF(n) && (n.source = t, this._onDidUpdateChannelFiles.fire(n));
  }
  removeChannel(e) {
    const t = this.channels.get(e);
    t && (this.channels.delete(e), this._onDidRemoveChannel.fire(t));
  }
}
ui.add(fF.OutputChannels, new gF());
class LA extends RA {
  constructor(e, t, n, r, s) {
    super(), this.id = e, this.name = t, this.logger = n, this.proxy = r, this.extension = s, this.offset = 0, this.visible = !1, this.setLevel(n.getLevel()), this._register(n.onDidChangeLogLevel((o) => this.setLevel(o))), this._register(Ie(() => this.proxy.$dispose(this.id)));
  }
  get logLevel() {
    return this.getLevel();
  }
  appendLine(e) {
    this.append(e + `
`);
  }
  append(e) {
    this.info(e);
  }
  clear() {
    const e = this.offset;
    this.logger.flush(), this.proxy.$update(this.id, Sh.Clear, e);
  }
  replace(e) {
    const t = this.offset;
    this.info(e), this.proxy.$update(this.id, Sh.Replace, t), this.visible && this.logger.flush();
  }
  show(e, t) {
    this.logger.flush(), this.proxy.$reveal(this.id, !!(typeof e == "boolean" ? e : t));
  }
  hide() {
    this.proxy.$close(this.id);
  }
  log(e, t) {
    this.offset += he.fromString(t).byteLength, rF(this.logger, e, t), this.visible && (this.logger.flush(), this.proxy.$update(this.id, Sh.Append));
  }
}
class mF extends LA {
  appendLine(e) {
    this.append(e);
  }
}
let hx = class {
  constructor(e, t, n, r, s, o) {
    this.initData = t, this.extHostFileSystem = n, this.extHostFileSystemInfo = r, this.loggerService = s, this.logService = o, this.extensionLogDirectoryPromise = /* @__PURE__ */ new Map(), this.namePool = 1, this.channels = /* @__PURE__ */ new Map(), this.visibleChannelId = null, this.proxy = e.getProxy(ie.MainThreadOutputService), this.outputsLocation = this.extHostFileSystemInfo.extUri.joinPath(t.logsLocation, `output_logging_${OO(/* @__PURE__ */ new Date()).replace(/-|:|\.\d+Z$/g, "")}`);
  }
  $setVisibleChannel(e) {
    this.visibleChannelId = e;
    for (const [t, n] of this.channels)
      n.visible = t === this.visibleChannelId;
  }
  createOutputChannel(e, t, n) {
    var u, d;
    if (e = e.trim(), !e)
      throw new Error("illegal argument `name`. must not be falsy");
    const r = typeof t == "object" && t.log, s = st(t) ? t : void 0;
    if (st(s) && !s.trim())
      throw new Error("illegal argument `languageId`. must not be empty");
    let o;
    const a = (d = (u = this.initData.environment.extensionLogLevel) == null ? void 0 : u.find(([f]) => gt.equals(n.identifier, f))) == null ? void 0 : d[1];
    a && (o = lF(a));
    const l = new Te(), c = r ? this.doCreateLogOutputChannel(e, o, n, l) : this.doCreateOutputChannel(e, s, n, l);
    return c.then((f) => {
      this.channels.set(f.id, f), f.visible = f.id === this.visibleChannelId, l.add(Ie(() => this.channels.delete(f.id)));
    }), r ? this.createExtHostLogOutputChannel(e, o ?? this.logService.getLevel(), c, l) : this.createExtHostOutputChannel(e, c, l);
  }
  async doCreateOutputChannel(e, t, n, r) {
    this.outputDirectoryPromise || (this.outputDirectoryPromise = this.extHostFileSystem.value.createDirectory(this.outputsLocation).then(() => this.outputsLocation));
    const s = await this.outputDirectoryPromise, o = this.extHostFileSystemInfo.extUri.joinPath(s, `${this.namePool++}-${e.replace(/[\\/:\*\?"<>\|]/g, "")}.log`), a = r.add(this.loggerService.createLogger(o, { logLevel: "always", donotRotate: !0, donotUseFormatters: !0, hidden: !0 })), l = await this.proxy.$register(e, o, t, n.identifier.value);
    return r.add(Ie(() => this.loggerService.deregisterLogger(o))), new LA(l, e, a, this.proxy, n);
  }
  async doCreateLogOutputChannel(e, t, n, r) {
    const s = await this.createExtensionLogDirectory(n), o = e.replace(/[\\/:\*\?"<>\|]/g, ""), a = this.extHostFileSystemInfo.extUri.joinPath(s, `${o}.log`), l = `${n.identifier.value}.${o}`, c = r.add(this.loggerService.createLogger(a, { id: l, name: e, logLevel: t, extensionId: n.identifier.value }));
    return r.add(Ie(() => this.loggerService.deregisterLogger(a))), new mF(l, e, c, this.proxy, n);
  }
  createExtensionLogDirectory(e) {
    let t = this.extensionLogDirectoryPromise.get(e.identifier.value);
    if (!t) {
      const n = this.extHostFileSystemInfo.extUri.joinPath(this.initData.logsLocation, e.identifier.value);
      this.extensionLogDirectoryPromise.set(e.identifier.value, t = (async () => {
        try {
          await this.extHostFileSystem.value.createDirectory(n);
        } catch (r) {
          if (em(r) !== Ue.FileExists)
            throw r;
        }
        return n;
      })());
    }
    return t;
  }
  createExtHostOutputChannel(e, t, n) {
    const r = () => {
      if (n.isDisposed)
        throw new Error("Channel has been closed");
    };
    return t.then((s) => n.add(s)), {
      get name() {
        return e;
      },
      append(s) {
        r(), t.then((o) => o.append(s));
      },
      appendLine(s) {
        r(), t.then((o) => o.appendLine(s));
      },
      clear() {
        r(), t.then((s) => s.clear());
      },
      replace(s) {
        r(), t.then((o) => o.replace(s));
      },
      show(s, o) {
        r(), t.then((a) => a.show(s, o));
      },
      hide() {
        r(), t.then((s) => s.hide());
      },
      dispose() {
        n.dispose();
      }
    };
  }
  createExtHostLogOutputChannel(e, t, n, r) {
    const s = () => {
      if (r.isDisposed)
        throw new Error("Channel has been closed");
    }, o = r.add(new M());
    function a(l) {
      t = l, o.fire(l);
    }
    return n.then((l) => {
      l.logLevel !== t && a(l.logLevel), r.add(l.onDidChangeLogLevel((c) => a(c)));
    }), {
      ...this.createExtHostOutputChannel(e, n, r),
      get logLevel() {
        return t;
      },
      onDidChangeLogLevel: o.event,
      trace(l, ...c) {
        s(), n.then((u) => u.trace(l, ...c));
      },
      debug(l, ...c) {
        s(), n.then((u) => u.debug(l, ...c));
      },
      info(l, ...c) {
        s(), n.then((u) => u.info(l, ...c));
      },
      warn(l, ...c) {
        s(), n.then((u) => u.warn(l, ...c));
      },
      error(l, ...c) {
        s(), n.then((u) => u.error(l, ...c));
      }
    };
  }
};
hx = z([
  O(0, tt),
  O(1, _i),
  O(2, yv),
  O(3, md),
  O(4, ta),
  O(5, ot)
], hx);
const NA = me("IExtHostOutputService");
var Zd, qo;
let fx = (qo = class {
  constructor(e, t) {
    this._logService = t, this._provider = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadDecorations);
  }
  registerFileDecorationProvider(e, t) {
    const n = Zd._handlePool++;
    this._provider.set(n, { provider: e, extensionDescription: t }), this._proxy.$registerDecorationProvider(n, t.identifier.value);
    const r = e.onDidChangeFileDecorations && e.onDidChangeFileDecorations((s) => {
      if (!s) {
        this._proxy.$onDidChange(n, null);
        return;
      }
      const o = Xn(s);
      if (o.length <= Zd._maxEventSize) {
        this._proxy.$onDidChange(n, o);
        return;
      }
      this._logService.warn("[Decorations] CAPPING events from decorations provider", t.identifier.value, o.length);
      const a = o.map((u) => ({ uri: u, rank: H8(u.path, "/") })), l = pR(a, (u, d) => u.rank - d.rank || Ml(u.uri.path, d.uri.path)), c = [];
      e: for (const u of l) {
        let d;
        for (const f of u) {
          const p = Qc(f.uri.path);
          if (d !== p && (d = p, c.push(f.uri) >= Zd._maxEventSize))
            break e;
        }
      }
      this._proxy.$onDidChange(n, c);
    });
    return new je(() => {
      r == null || r.dispose(), this._proxy.$unregisterDecorationProvider(n), this._provider.delete(n);
    });
  }
  async $provideDecorations(e, t, n) {
    if (!this._provider.has(e))
      return /* @__PURE__ */ Object.create(null);
    const r = /* @__PURE__ */ Object.create(null), { provider: s, extensionDescription: o } = this._provider.get(e);
    return await Promise.all(t.map(async (a) => {
      try {
        const { uri: l, id: c } = a, u = await Promise.resolve(s.provideFileDecoration(x.revive(l), n));
        if (!u)
          return;
        try {
          sy.validate(u), u.badge && typeof u.badge != "string" && H(o, "codiconDecoration"), r[c] = [u.propagate, u.tooltip, u.badge, u.color];
        } catch (d) {
          this._logService.warn(`INVALID decoration from extension '${o.identifier.value}': ${d}`);
        }
      } catch (l) {
        this._logService.error(l);
      }
    })), r;
  }
}, Zd = qo, qo._handlePool = 0, qo._maxEventSize = 250, qo);
fx = Zd = z([
  O(0, tt),
  O(1, ot)
], fx);
const MA = me("IExtHostDecorations");
class _F {
  constructor(e) {
    this.values = e, this.prefixSum = new Uint32Array(e.length), this.prefixSumValidIndex = new Int32Array(1), this.prefixSumValidIndex[0] = -1;
  }
  getCount() {
    return this.values.length;
  }
  insertValues(e, t) {
    e = uc(e);
    const n = this.values, r = this.prefixSum, s = t.length;
    return s === 0 ? !1 : (this.values = new Uint32Array(n.length + s), this.values.set(n.subarray(0, e), 0), this.values.set(n.subarray(e), e + s), this.values.set(t, e), e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), this.prefixSum = new Uint32Array(this.values.length), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  setValue(e, t) {
    return e = uc(e), t = uc(t), this.values[e] === t ? !1 : (this.values[e] = t, e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), !0);
  }
  removeValues(e, t) {
    e = uc(e), t = uc(t);
    const n = this.values, r = this.prefixSum;
    if (e >= n.length)
      return !1;
    const s = n.length - e;
    return t >= s && (t = s), t === 0 ? !1 : (this.values = new Uint32Array(n.length - t), this.values.set(n.subarray(0, e), 0), this.values.set(n.subarray(e + t), e), this.prefixSum = new Uint32Array(this.values.length), e - 1 < this.prefixSumValidIndex[0] && (this.prefixSumValidIndex[0] = e - 1), this.prefixSumValidIndex[0] >= 0 && this.prefixSum.set(r.subarray(0, this.prefixSumValidIndex[0] + 1)), !0);
  }
  getTotalSum() {
    return this.values.length === 0 ? 0 : this._getPrefixSum(this.values.length - 1);
  }
  getPrefixSum(e) {
    return e < 0 ? 0 : (e = uc(e), this._getPrefixSum(e));
  }
  _getPrefixSum(e) {
    if (e <= this.prefixSumValidIndex[0])
      return this.prefixSum[e];
    let t = this.prefixSumValidIndex[0] + 1;
    t === 0 && (this.prefixSum[0] = this.values[0], t++), e >= this.values.length && (e = this.values.length - 1);
    for (let n = t; n <= e; n++)
      this.prefixSum[n] = this.prefixSum[n - 1] + this.values[n];
    return this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], e), this.prefixSum[e];
  }
  getIndexOf(e) {
    e = Math.floor(e), this.getTotalSum();
    let t = 0, n = this.values.length - 1, r = 0, s = 0, o = 0;
    for (; t <= n; )
      if (r = t + (n - t) / 2 | 0, s = this.prefixSum[r], o = s - this.values[r], e < o)
        n = r - 1;
      else if (e >= s)
        t = r + 1;
      else
        break;
    return new vF(r, e - o);
  }
}
class vF {
  constructor(e, t) {
    this.index = e, this.remainder = t, this._prefixSumIndexOfResultBrand = void 0, this.index = e, this.remainder = t;
  }
}
class wF {
  constructor(e, t, n, r) {
    this._uri = e, this._lines = t, this._eol = n, this._versionId = r, this._lineStarts = null, this._cachedTextValue = null;
  }
  dispose() {
    this._lines.length = 0;
  }
  get version() {
    return this._versionId;
  }
  getText() {
    return this._cachedTextValue === null && (this._cachedTextValue = this._lines.join(this._eol)), this._cachedTextValue;
  }
  onEvents(e) {
    e.eol && e.eol !== this._eol && (this._eol = e.eol, this._lineStarts = null);
    const t = e.changes;
    for (const n of t)
      this._acceptDeleteRange(n.range), this._acceptInsertText(new On(n.range.startLineNumber, n.range.startColumn), n.text);
    this._versionId = e.versionId, this._cachedTextValue = null;
  }
  _ensureLineStarts() {
    if (!this._lineStarts) {
      const e = this._eol.length, t = this._lines.length, n = new Uint32Array(t);
      for (let r = 0; r < t; r++)
        n[r] = this._lines[r].length + e;
      this._lineStarts = new _F(n);
    }
  }
  _setLineText(e, t) {
    this._lines[e] = t, this._lineStarts && this._lineStarts.setValue(e, this._lines[e].length + this._eol.length);
  }
  _acceptDeleteRange(e) {
    if (e.startLineNumber === e.endLineNumber) {
      if (e.startColumn === e.endColumn)
        return;
      this._setLineText(e.startLineNumber - 1, this._lines[e.startLineNumber - 1].substring(0, e.startColumn - 1) + this._lines[e.startLineNumber - 1].substring(e.endColumn - 1));
      return;
    }
    this._setLineText(e.startLineNumber - 1, this._lines[e.startLineNumber - 1].substring(0, e.startColumn - 1) + this._lines[e.endLineNumber - 1].substring(e.endColumn - 1)), this._lines.splice(e.startLineNumber, e.endLineNumber - e.startLineNumber), this._lineStarts && this._lineStarts.removeValues(e.startLineNumber, e.endLineNumber - e.startLineNumber);
  }
  _acceptInsertText(e, t) {
    if (t.length === 0)
      return;
    const n = JT(t);
    if (n.length === 1) {
      this._setLineText(e.lineNumber - 1, this._lines[e.lineNumber - 1].substring(0, e.column - 1) + n[0] + this._lines[e.lineNumber - 1].substring(e.column - 1));
      return;
    }
    n[n.length - 1] += this._lines[e.lineNumber - 1].substring(e.column - 1), this._setLineText(e.lineNumber - 1, this._lines[e.lineNumber - 1].substring(0, e.column - 1) + n[0]);
    const r = new Uint32Array(n.length - 1);
    for (let s = 1; s < n.length; s++)
      this._lines.splice(e.lineNumber + s - 1, 0, n[s]), r[s - 1] = n[s].length + this._eol.length;
    this._lineStarts && this._lineStarts.insertValues(e.lineNumber, r);
  }
}
const px = /* @__PURE__ */ new Map();
function bF(i, e) {
  e ? px.set(i, e) : px.delete(i);
}
function yF(i) {
  return px.get(i);
}
class xF extends wF {
  constructor(e, t, n, r, s, o, a, l) {
    super(t, n, r, s), this._proxy = e, this._languageId = o, this._isDirty = a, this._encoding = l, this._isDisposed = !1;
  }
  dispose() {
    Gi(!this._isDisposed), this._isDisposed = !0, this._isDirty = !1;
  }
  equalLines(e) {
    return Fn(this._lines, e);
  }
  get document() {
    if (!this._document) {
      const e = this;
      this._document = {
        get uri() {
          return e._uri;
        },
        get fileName() {
          return e._uri.fsPath;
        },
        get isUntitled() {
          return e._uri.scheme === fe.untitled;
        },
        get languageId() {
          return e._languageId;
        },
        get version() {
          return e._versionId;
        },
        get isClosed() {
          return e._isDisposed;
        },
        get isDirty() {
          return e._isDirty;
        },
        get encoding() {
          return e._encoding;
        },
        save() {
          return e._save();
        },
        getText(t) {
          return t ? e._getTextInRange(t) : e.getText();
        },
        get eol() {
          return e._eol === `
` ? Er.LF : Er.CRLF;
        },
        get lineCount() {
          return e._lines.length;
        },
        lineAt(t) {
          return e._lineAt(t);
        },
        offsetAt(t) {
          return e._offsetAt(t);
        },
        positionAt(t) {
          return e._positionAt(t);
        },
        validateRange(t) {
          return e._validateRange(t);
        },
        validatePosition(t) {
          return e._validatePosition(t);
        },
        getWordRangeAtPosition(t, n) {
          return e._getWordRangeAtPosition(t, n);
        },
        [Symbol.for("debug.description")]() {
          return `TextDocument(${e._uri.toString()})`;
        }
      };
    }
    return Object.freeze(this._document);
  }
  _acceptLanguageId(e) {
    Gi(!this._isDisposed), this._languageId = e;
  }
  _acceptIsDirty(e) {
    Gi(!this._isDisposed), this._isDirty = e;
  }
  _acceptEncoding(e) {
    Gi(!this._isDisposed), this._encoding = e;
  }
  _save() {
    return this._isDisposed ? Promise.reject(new Error("Document has been closed")) : this._proxy.$trySaveDocument(this._uri);
  }
  _getTextInRange(e) {
    const t = this._validateRange(e);
    if (t.isEmpty)
      return "";
    if (t.isSingleLine)
      return this._lines[t.start.line].substring(t.start.character, t.end.character);
    const n = this._eol, r = t.start.line, s = t.end.line, o = [];
    o.push(this._lines[r].substring(t.start.character));
    for (let a = r + 1; a < s; a++)
      o.push(this._lines[a]);
    return o.push(this._lines[s].substring(0, t.end.character)), o.join(n);
  }
  _lineAt(e) {
    let t;
    if (e instanceof Ke ? t = e.line : typeof e == "number" && (t = e), typeof t != "number" || t < 0 || t >= this._lines.length || Math.floor(t) !== t)
      throw new Error("Illegal value for `line`");
    return new EF(t, this._lines[t], t === this._lines.length - 1);
  }
  _offsetAt(e) {
    return e = this._validatePosition(e), this._ensureLineStarts(), this._lineStarts.getPrefixSum(e.line - 1) + e.character;
  }
  _positionAt(e) {
    e = Math.floor(e), e = Math.max(0, e), this._ensureLineStarts();
    const t = this._lineStarts.getIndexOf(e), n = this._lines[t.index].length;
    return new Ke(t.index, Math.min(t.remainder, n));
  }
  _validateRange(e) {
    if (!(e instanceof $e))
      throw new Error("Invalid argument");
    const t = this._validatePosition(e.start), n = this._validatePosition(e.end);
    return t === e.start && n === e.end ? e : new $e(t.line, t.character, n.line, n.character);
  }
  _validatePosition(e) {
    if (!(e instanceof Ke))
      throw new Error("Invalid argument");
    if (this._lines.length === 0)
      return e.with(0, 0);
    let { line: t, character: n } = e, r = !1;
    if (t < 0)
      t = 0, n = 0, r = !0;
    else if (t >= this._lines.length)
      t = this._lines.length - 1, n = this._lines[t].length, r = !0;
    else {
      const s = this._lines[t].length;
      n < 0 ? (n = 0, r = !0) : n > s && (n = s, r = !0);
    }
    return r ? new Ke(t, n) : e;
  }
  _getWordRangeAtPosition(e, t) {
    const n = this._validatePosition(e);
    if (!t)
      t = yF(this._languageId);
    else if (KT(t))
      throw new Error(
        `[getWordRangeAtPosition]: ignoring custom regexp '${t.source}' because it matches the empty string.`
      );
    const r = HP(n.character + 1, UP(t), this._lines[n.line], 0);
    if (r)
      return new $e(
        n.line,
        r.startColumn - 1,
        n.line,
        r.endColumn - 1
      );
  }
}
class EF {
  constructor(e, t, n) {
    this._line = e, this._text = t, this._isLastLine = n;
  }
  get lineNumber() {
    return this._line;
  }
  get text() {
    return this._text;
  }
  get range() {
    return new $e(this._line, 0, this._line, this._text.length);
  }
  get rangeIncludingLineBreak() {
    return this._isLastLine ? this.range : new $e(this._line, 0, this._line + 1, 0);
  }
  get firstNonWhitespaceCharacterIndex() {
    return /^(\s*)/.exec(this._text)[1].length;
  }
  get isEmptyOrWhitespace() {
    return this.firstNonWhitespaceCharacterIndex === this._text.length;
  }
}
class HS {
  constructor(e) {
    this._prefix = e, this._lastId = 0;
  }
  nextId() {
    return this._prefix + ++this._lastId;
  }
}
const N1 = class N1 {
  constructor(e, t, n) {
    const r = N1._Keys.nextId();
    e.$registerTextEditorDecorationType(t.identifier, r, zy.from(n)), this.value = Object.freeze({
      key: r,
      dispose() {
        e.$removeTextEditorDecorationType(r);
      }
    });
  }
};
N1._Keys = new HS("TextEditorDecorationType");
let gx = N1;
class SF {
  constructor(e, t) {
    this._collectedEdits = [], this._setEndOfLine = void 0, this._finalized = !1, this._document = e, this._documentVersionId = e.version, this._undoStopBefore = t.undoStopBefore, this._undoStopAfter = t.undoStopAfter;
  }
  finalize() {
    return this._finalized = !0, {
      documentVersionId: this._documentVersionId,
      edits: this._collectedEdits,
      setEndOfLine: this._setEndOfLine,
      undoStopBefore: this._undoStopBefore,
      undoStopAfter: this._undoStopAfter
    };
  }
  _throwIfFinalized() {
    if (this._finalized)
      throw new Error("Edit is only valid while callback runs");
  }
  replace(e, t) {
    this._throwIfFinalized();
    let n = null;
    if (e instanceof Ke)
      n = new $e(e, e);
    else if (e instanceof $e)
      n = e;
    else
      throw new Error("Unrecognized location");
    this._pushEdit(n, t, !1);
  }
  insert(e, t) {
    this._throwIfFinalized(), this._pushEdit(new $e(e, e), t, !0);
  }
  delete(e) {
    this._throwIfFinalized();
    let t = null;
    if (e instanceof $e)
      t = e;
    else
      throw new Error("Unrecognized location");
    this._pushEdit(t, null, !0);
  }
  _pushEdit(e, t, n) {
    const r = this._document.validateRange(e);
    this._collectedEdits.push({
      range: r,
      text: t,
      forceMoveMarkers: n
    });
  }
  setEndOfLine(e) {
    if (this._throwIfFinalized(), e !== Er.LF && e !== Er.CRLF)
      throw Ge("endOfLine");
    this._setEndOfLine = e;
  }
}
class DF {
  constructor(e, t, n, r) {
    this._proxy = e, this._id = t, this._accept(n), this._logService = r;
    const s = this;
    this.value = {
      get tabSize() {
        return s._tabSize;
      },
      set tabSize(o) {
        s._setTabSize(o);
      },
      get indentSize() {
        return s._indentSize;
      },
      set indentSize(o) {
        s._setIndentSize(o);
      },
      get insertSpaces() {
        return s._insertSpaces;
      },
      set insertSpaces(o) {
        s._setInsertSpaces(o);
      },
      get cursorStyle() {
        return s._cursorStyle;
      },
      set cursorStyle(o) {
        s._setCursorStyle(o);
      },
      get lineNumbers() {
        return s._lineNumbers;
      },
      set lineNumbers(o) {
        s._setLineNumbers(o);
      }
    };
  }
  _accept(e) {
    this._tabSize = e.tabSize, this._indentSize = e.indentSize, this._originalIndentSize = e.originalIndentSize, this._insertSpaces = e.insertSpaces, this._cursorStyle = e.cursorStyle, this._lineNumbers = cu.to(e.lineNumbers);
  }
  _validateTabSize(e) {
    if (e === "auto")
      return "auto";
    if (typeof e == "number") {
      const t = Math.floor(e);
      return t > 0 ? t : null;
    }
    if (typeof e == "string") {
      const t = parseInt(e, 10);
      return isNaN(t) ? null : t > 0 ? t : null;
    }
    return null;
  }
  _setTabSize(e) {
    const t = this._validateTabSize(e);
    if (t !== null) {
      if (typeof t == "number") {
        if (this._tabSize === t)
          return;
        this._tabSize = t;
      }
      this._warnOnError("setTabSize", this._proxy.$trySetOptions(this._id, {
        tabSize: t
      }));
    }
  }
  _validateIndentSize(e) {
    if (e === "tabSize")
      return "tabSize";
    if (typeof e == "number") {
      const t = Math.floor(e);
      return t > 0 ? t : null;
    }
    if (typeof e == "string") {
      const t = parseInt(e, 10);
      return isNaN(t) ? null : t > 0 ? t : null;
    }
    return null;
  }
  _setIndentSize(e) {
    const t = this._validateIndentSize(e);
    if (t !== null) {
      if (typeof t == "number") {
        if (this._originalIndentSize === t)
          return;
        this._indentSize = t, this._originalIndentSize = t;
      }
      this._warnOnError("setIndentSize", this._proxy.$trySetOptions(this._id, {
        indentSize: t
      }));
    }
  }
  _validateInsertSpaces(e) {
    return e === "auto" ? "auto" : e === "false" ? !1 : !!e;
  }
  _setInsertSpaces(e) {
    const t = this._validateInsertSpaces(e);
    if (typeof t == "boolean") {
      if (this._insertSpaces === t)
        return;
      this._insertSpaces = t;
    }
    this._warnOnError("setInsertSpaces", this._proxy.$trySetOptions(this._id, {
      insertSpaces: t
    }));
  }
  _setCursorStyle(e) {
    this._cursorStyle !== e && (this._cursorStyle = e, this._warnOnError("setCursorStyle", this._proxy.$trySetOptions(this._id, {
      cursorStyle: e
    })));
  }
  _setLineNumbers(e) {
    this._lineNumbers !== e && (this._lineNumbers = e, this._warnOnError("setLineNumbers", this._proxy.$trySetOptions(this._id, {
      lineNumbers: cu.from(e)
    })));
  }
  assign(e) {
    const t = {};
    let n = !1;
    if (typeof e.tabSize < "u") {
      const r = this._validateTabSize(e.tabSize);
      r === "auto" ? (n = !0, t.tabSize = r) : typeof r == "number" && this._tabSize !== r && (this._tabSize = r, n = !0, t.tabSize = r);
    }
    if (typeof e.indentSize < "u") {
      const r = this._validateIndentSize(e.indentSize);
      r === "tabSize" ? (n = !0, t.indentSize = r) : typeof r == "number" && this._originalIndentSize !== r && (this._indentSize = r, this._originalIndentSize = r, n = !0, t.indentSize = r);
    }
    if (typeof e.insertSpaces < "u") {
      const r = this._validateInsertSpaces(e.insertSpaces);
      r === "auto" ? (n = !0, t.insertSpaces = r) : this._insertSpaces !== r && (this._insertSpaces = r, n = !0, t.insertSpaces = r);
    }
    typeof e.cursorStyle < "u" && this._cursorStyle !== e.cursorStyle && (this._cursorStyle = e.cursorStyle, n = !0, t.cursorStyle = e.cursorStyle), typeof e.lineNumbers < "u" && this._lineNumbers !== e.lineNumbers && (this._lineNumbers = e.lineNumbers, n = !0, t.lineNumbers = cu.from(e.lineNumbers)), n && this._warnOnError("setOptions", this._proxy.$trySetOptions(this._id, t));
  }
  _warnOnError(e, t) {
    t.catch((n) => {
      this._logService.warn(`ExtHostTextEditorOptions '${e}' failed:'`), this._logService.warn(n);
    });
  }
}
class kF {
  constructor(e, t, n, r, s, o, a, l) {
    this.id = e, this._proxy = t, this._logService = n, this._disposed = !1, this._hasDecorationsForKey = /* @__PURE__ */ new Set(), this._selections = s, this._options = new DF(this._proxy, this.id, o, n), this._visibleRanges = a, this._viewColumn = l;
    const c = this;
    this.value = Object.freeze({
      get document() {
        return r.value;
      },
      set document(u) {
        throw new Pa("document");
      },
      get selection() {
        return c._selections && c._selections[0];
      },
      set selection(u) {
        if (!(u instanceof os))
          throw Ge("selection");
        c._selections = [u], c._trySetSelection();
      },
      get selections() {
        return c._selections;
      },
      set selections(u) {
        if (!Array.isArray(u) || u.some((d) => !(d instanceof os)))
          throw Ge("selections");
        u.length === 0 && (u = [new os(0, 0, 0, 0)]), c._selections = u, c._trySetSelection();
      },
      get visibleRanges() {
        return c._visibleRanges;
      },
      set visibleRanges(u) {
        throw new Pa("visibleRanges");
      },
      get diffInformation() {
        return c._diffInformation;
      },
      get options() {
        return c._options.value;
      },
      set options(u) {
        c._disposed || c._options.assign(u);
      },
      get viewColumn() {
        return c._viewColumn;
      },
      set viewColumn(u) {
        throw new Pa("viewColumn");
      },
      edit(u, d = { undoStopBefore: !0, undoStopAfter: !0 }) {
        if (c._disposed)
          return Promise.reject(new Error("TextEditor#edit not possible on closed editors"));
        const f = new SF(r.value, d);
        return u(f), c._applyEdit(f);
      },
      insertSnippet(u, d, f = { undoStopBefore: !0, undoStopAfter: !0 }) {
        if (c._disposed)
          return Promise.reject(new Error("TextEditor#insertSnippet not possible on closed editors"));
        let p;
        if (!d || Array.isArray(d) && d.length === 0)
          p = c._selections.map((v) => j.from(v));
        else if (d instanceof Ke) {
          const { lineNumber: v, column: _ } = ut.from(d);
          p = [{ startLineNumber: v, startColumn: _, endLineNumber: v, endColumn: _ }];
        } else if (d instanceof $e)
          p = [j.from(d)];
        else {
          p = [];
          for (const v of d)
            if (v instanceof $e)
              p.push(j.from(v));
            else {
              const { lineNumber: _, column: m } = ut.from(v);
              p.push({ startLineNumber: _, startColumn: m, endLineNumber: _, endColumn: m });
            }
        }
        return f.keepWhitespace === void 0 && (f.keepWhitespace = !1), t.$tryInsertSnippet(e, r.value.version, u.value, p, f);
      },
      setDecorations(u, d) {
        const f = d.length === 0;
        f && !c._hasDecorationsForKey.has(u.key) || (f ? c._hasDecorationsForKey.delete(u.key) : c._hasDecorationsForKey.add(u.key), c._runOnProxy(() => {
          if (iA(d))
            return t.$trySetDecorations(e, u.key, gM(d));
          {
            const p = new Array(4 * d.length);
            for (let v = 0, _ = d.length; v < _; v++) {
              const m = d[v];
              p[4 * v] = m.start.line + 1, p[4 * v + 1] = m.start.character + 1, p[4 * v + 2] = m.end.line + 1, p[4 * v + 3] = m.end.character + 1;
            }
            return t.$trySetDecorationsFast(e, u.key, p);
          }
        }));
      },
      revealRange(u, d) {
        c._runOnProxy(() => t.$tryRevealRange(e, j.from(u), d || zm.Default));
      },
      show(u) {
        t.$tryShowEditor(e, li.from(u));
      },
      hide() {
        t.$tryHideEditor(e);
      },
      [Symbol.for("debug.description")]() {
        return `TextEditor(${this.document.uri.toString()})`;
      }
    });
  }
  dispose() {
    Gi(!this._disposed), this._disposed = !0;
  }
  _acceptOptions(e) {
    Gi(!this._disposed), this._options._accept(e);
  }
  _acceptVisibleRanges(e) {
    Gi(!this._disposed), this._visibleRanges = e;
  }
  _acceptViewColumn(e) {
    Gi(!this._disposed), this._viewColumn = e;
  }
  _acceptSelections(e) {
    Gi(!this._disposed), this._selections = e;
  }
  _acceptDiffInformation(e) {
    Gi(!this._disposed), this._diffInformation = e;
  }
  async _trySetSelection() {
    const e = this._selections.map(Cr.from);
    return await this._runOnProxy(() => this._proxy.$trySetSelections(this.id, e)), this.value;
  }
  _applyEdit(e) {
    const t = e.finalize();
    if (t.edits.length === 0 && !t.setEndOfLine)
      return Promise.resolve(!0);
    const n = t.edits.map((s) => s.range);
    n.sort((s, o) => s.end.line === o.end.line ? s.end.character === o.end.character ? s.start.line === o.start.line ? s.start.character - o.start.character : s.start.line - o.start.line : s.end.character - o.end.character : s.end.line - o.end.line);
    for (let s = 0, o = n.length - 1; s < o; s++) {
      const a = n[s].end;
      if (n[s + 1].start.isBefore(a))
        return Promise.reject(new Error("Overlapping ranges are not allowed!"));
    }
    const r = t.edits.map((s) => ({
      range: j.from(s.range),
      text: s.text,
      forceMoveMarkers: s.forceMoveMarkers
    }));
    return this._proxy.$tryApplyEdits(this.id, t.documentVersionId, r, {
      setEndOfLine: typeof t.setEndOfLine == "number" ? rd.from(t.setEndOfLine) : void 0,
      undoStopBefore: t.undoStopBefore,
      undoStopAfter: t.undoStopAfter
    });
  }
  _runOnProxy(e) {
    return this._disposed ? (this._logService.warn("TextEditor is closed/disposed"), Promise.resolve(void 0)) : e().then(() => this, (t) => (t instanceof Error && t.name === "DISPOSED" || this._logService.warn(t), null));
  }
}
class IF {
  constructor(e) {
    this.value = e, this._count = 0;
  }
  ref() {
    this._count++;
  }
  unref() {
    return --this._count === 0;
  }
}
let mx = class {
  constructor(e, t) {
    this._extHostRpc = e, this._logService = t, this._activeEditorId = null, this._editors = /* @__PURE__ */ new Map(), this._documents = new mi(), this._onDidAddDocuments = new M(), this._onDidRemoveDocuments = new M(), this._onDidChangeVisibleTextEditors = new M(), this._onDidChangeActiveTextEditor = new M(), this.onDidAddDocuments = this._onDidAddDocuments.event, this.onDidRemoveDocuments = this._onDidRemoveDocuments.event, this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event, this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event;
  }
  $acceptDocumentsAndEditorsDelta(e) {
    this.acceptDocumentsAndEditorsDelta(e);
  }
  acceptDocumentsAndEditorsDelta(e) {
    const t = [], n = [], r = [];
    if (e.removedDocuments)
      for (const s of e.removedDocuments) {
        const o = x.revive(s), a = this._documents.get(o);
        a != null && a.unref() && (this._documents.delete(o), t.push(a.value));
      }
    if (e.addedDocuments)
      for (const s of e.addedDocuments) {
        const o = x.revive(s.uri);
        let a = this._documents.get(o);
        if (a && o.scheme !== fe.vscodeNotebookCell && o.scheme !== fe.vscodeInteractiveInput)
          throw new Error(`document '${o} already exists!'`);
        a || (a = new IF(new xF(this._extHostRpc.getProxy(ie.MainThreadDocuments), o, s.lines, s.EOL, s.versionId, s.languageId, s.isDirty, s.encoding)), this._documents.set(o, a), n.push(a.value)), a.ref();
      }
    if (e.removedEditors)
      for (const s of e.removedEditors) {
        const o = this._editors.get(s);
        this._editors.delete(s), o && r.push(o);
      }
    if (e.addedEditors)
      for (const s of e.addedEditors) {
        const o = x.revive(s.documentUri);
        Gi(this._documents.has(o), `document '${o}' does not exist`), Gi(!this._editors.has(s.id), `editor '${s.id}' already exists!`);
        const a = this._documents.get(o).value, l = new kF(s.id, this._extHostRpc.getProxy(ie.MainThreadTextEditors), this._logService, new Qi(() => a.document), s.selections.map(Cr.to), s.options, s.visibleRanges.map((c) => j.to(c)), typeof s.editorPosition == "number" ? li.to(s.editorPosition) : void 0);
        this._editors.set(s.id, l);
      }
    e.newActiveEditor !== void 0 && (Gi(e.newActiveEditor === null || this._editors.has(e.newActiveEditor), `active editor '${e.newActiveEditor}' does not exist`), this._activeEditorId = e.newActiveEditor), Kn(t), Kn(r), e.removedDocuments && this._onDidRemoveDocuments.fire(t), e.addedDocuments && this._onDidAddDocuments.fire(n), (e.removedEditors || e.addedEditors) && this._onDidChangeVisibleTextEditors.fire(this.allEditors().map((s) => s.value)), e.newActiveEditor !== void 0 && this._onDidChangeActiveTextEditor.fire(this.activeEditor());
  }
  getDocument(e) {
    var t;
    return (t = this._documents.get(e)) == null ? void 0 : t.value;
  }
  allDocuments() {
    return Bi.map(this._documents.values(), (e) => e.value);
  }
  getEditor(e) {
    return this._editors.get(e);
  }
  activeEditor(e) {
    if (!this._activeEditorId)
      return;
    const t = this._editors.get(this._activeEditorId);
    return e ? t : t == null ? void 0 : t.value;
  }
  allEditors() {
    return [...this._editors.values()];
  }
};
mx = z([
  O(0, tt),
  O(1, ot)
], mx);
const yd = me("IExtHostDocumentsAndEditors"), CF = {
  type: "object",
  additionalProperties: !1,
  properties: {
    type: {
      type: "string",
      description: h(
        10738,
        "The actual task type. Please note that types starting with a '$' are reserved for internal usage."
      )
    },
    required: {
      type: "array",
      items: {
        type: "string"
      }
    },
    properties: {
      type: "object",
      description: h(10739, "Additional properties of the task type"),
      additionalProperties: {
        $ref: "http://json-schema.org/draft-07/schema#"
      }
    },
    when: {
      type: "string",
      markdownDescription: h(
        10740,
        "Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information."
      ),
      default: ""
    }
  }
};
var _x;
(function(i) {
  function e(t, n, r) {
    if (!t)
      return;
    const s = st(t.type) ? t.type : void 0;
    if (!s || s.length === 0) {
      r.error(h(
        10741,
        "The task type configuration is missing the required 'taskType' property"
      ));
      return;
    }
    const o = [];
    if (Array.isArray(t.required))
      for (const a of t.required)
        st(a) && o.push(a);
    return {
      extensionId: n.value,
      taskType: s,
      required: o,
      properties: t.properties ? St(t.properties) : {},
      when: t.when ? Jt.deserialize(t.when) : void 0
    };
  }
  i.from = e;
})(_x || (_x = {}));
const TF = XP.registerExtensionPoint({
  extensionPoint: "taskDefinitions",
  activationEventsGenerator: (i, e) => {
    for (const t of i)
      t.type && e.push(`onTaskType:${t.type}`);
  },
  jsonSchema: {
    description: h(10742, "Contributes task kinds"),
    type: "array",
    items: CF
  }
});
class PF {
  constructor() {
    this._onDefinitionsChanged = new M(), this.onDefinitionsChanged = this._onDefinitionsChanged.event, this.taskTypes = /* @__PURE__ */ Object.create(null), this.readyPromise = new Promise((e, t) => {
      TF.setHandler((n, r) => {
        this._schema = void 0;
        try {
          for (const s of r.removed) {
            const o = s.value;
            for (const a of o)
              this.taskTypes && a.type && this.taskTypes[a.type] && delete this.taskTypes[a.type];
          }
          for (const s of r.added) {
            const o = s.value;
            for (const a of o) {
              const l = _x.from(a, s.description.identifier, s.collector);
              l && (this.taskTypes[l.taskType] = l);
            }
          }
          (r.removed.length > 0 || r.added.length > 0) && this._onDefinitionsChanged.fire();
        } catch {
        }
        e(void 0);
      });
    });
  }
  onReady() {
    return this.readyPromise;
  }
  get(e) {
    return this.taskTypes[e];
  }
  all() {
    return Object.keys(this.taskTypes).map((e) => this.taskTypes[e]);
  }
  getJsonSchema() {
    if (this._schema === void 0) {
      const e = [];
      for (const t of this.all()) {
        const n = {
          type: "object",
          additionalProperties: !1
        };
        t.required.length > 0 && (n.required = t.required.slice(0)), t.properties !== void 0 ? n.properties = St(t.properties) : n.properties = /* @__PURE__ */ Object.create(null), n.properties.type = {
          type: "string",
          enum: [t.taskType]
        }, e.push(n);
      }
      this._schema = { oneOf: e };
    }
    return this._schema;
  }
}
const AF = new PF(), RF = {
  IconContribution: "base.contributions.icons"
};
var FC;
(function(i) {
  function e(t, n) {
    let r = t.defaults;
    for (; ci.isThemeIcon(r); ) {
      const s = xd.getIcon(r.id);
      if (!s)
        return;
      r = s.defaults;
    }
    return r;
  }
  i.getDefinition = e;
})(FC || (FC = {}));
var UC;
(function(i) {
  function e(n) {
    return {
      weight: n.weight,
      style: n.style,
      src: n.src.map((r) => ({ format: r.format, location: r.location.toString() }))
    };
  }
  i.toJSONObject = e;
  function t(n) {
    const r = (s) => st(s) ? s : void 0;
    if (n && Array.isArray(n.src) && n.src.every((s) => st(s.format) && st(s.location)))
      return {
        weight: r(n.weight),
        style: r(n.style),
        src: n.src.map((s) => ({ format: s.format, location: x.parse(s.location) }))
      };
  }
  i.fromJSONObject = t;
})(UC || (UC = {}));
const LF = /^([\w_-]+)$/, NF = h(
  2325,
  "The font ID must only contain letters, numbers, underscores and dashes."
);
class MF extends xe {
  constructor() {
    super(), this._onDidChange = this._register(new M()), this.onDidChange = this._onDidChange.event, this.iconSchema = {
      definitions: {
        icons: {
          type: "object",
          properties: {
            fontId: { type: "string", description: h(
              2326,
              "The id of the font to use. If not set, the font that is defined first is used."
            ), pattern: LF.source, patternErrorMessage: NF },
            fontCharacter: { type: "string", description: h(2327, "The font character associated with the icon definition.") }
          },
          additionalProperties: !1,
          defaultSnippets: [{ body: { fontCharacter: "\\\\e030" } }]
        }
      },
      type: "object",
      properties: {}
    }, this.iconReferenceSchema = { type: "string", pattern: `^${ci.iconNameExpression}$`, enum: [], enumDescriptions: [] }, this.iconsById = {}, this.iconFontsById = {};
  }
  registerIcon(e, t, n, r) {
    const s = this.iconsById[e];
    if (s) {
      if (n && !s.description) {
        s.description = n, this.iconSchema.properties[e].markdownDescription = `${n} $(${e})`;
        const l = this.iconReferenceSchema.enum.indexOf(e);
        l !== -1 && (this.iconReferenceSchema.enumDescriptions[l] = n), this._onDidChange.fire();
      }
      return s;
    }
    const o = { id: e, description: n, defaults: t, deprecationMessage: r };
    this.iconsById[e] = o;
    const a = { $ref: "#/definitions/icons" };
    return r && (a.deprecationMessage = r), n && (a.markdownDescription = `${n}: $(${e})`), this.iconSchema.properties[e] = a, this.iconReferenceSchema.enum.push(e), this.iconReferenceSchema.enumDescriptions.push(n || ""), this._onDidChange.fire(), { id: e };
  }
  deregisterIcon(e) {
    delete this.iconsById[e], delete this.iconSchema.properties[e];
    const t = this.iconReferenceSchema.enum.indexOf(e);
    t !== -1 && (this.iconReferenceSchema.enum.splice(t, 1), this.iconReferenceSchema.enumDescriptions.splice(t, 1)), this._onDidChange.fire();
  }
  getIcons() {
    return Object.keys(this.iconsById).map((e) => this.iconsById[e]);
  }
  getIcon(e) {
    return this.iconsById[e];
  }
  getIconSchema() {
    return this.iconSchema;
  }
  getIconReferenceSchema() {
    return this.iconReferenceSchema;
  }
  registerIconFont(e, t) {
    const n = this.iconFontsById[e];
    return n || (this.iconFontsById[e] = t, this._onDidChange.fire(), t);
  }
  deregisterIconFont(e) {
    delete this.iconFontsById[e];
  }
  getIconFont(e) {
    return this.iconFontsById[e];
  }
  toString() {
    const e = (s, o) => s.id.localeCompare(o.id), t = (s) => {
      for (; ci.isThemeIcon(s.defaults); )
        s = this.iconsById[s.defaults.id];
      return `codicon codicon-${s ? s.id : ""}`;
    }, n = [];
    n.push("| preview     | identifier                        | default codicon ID                | description"), n.push("| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |");
    const r = Object.keys(this.iconsById).map((s) => this.iconsById[s]);
    for (const s of r.filter((o) => !!o.description).sort(e))
      n.push(`|<i class="${t(s)}"></i>|${s.id}|${ci.isThemeIcon(s.defaults) ? s.defaults.id : s.id}|${s.description || ""}|`);
    n.push("| preview     | identifier                        "), n.push("| ----------- | --------------------------------- |");
    for (const s of r.filter((o) => !ci.isThemeIcon(o.defaults)).sort(e))
      n.push(`|<i class="${t(s)}"></i>|${s.id}|`);
    return n.join(`
`);
  }
}
const xd = new MF();
ui.add(RF.IconContribution, xd);
function Np(i, e, t, n) {
  return xd.registerIcon(i, e, t, n);
}
function OF() {
  const i = u7();
  for (const e in i) {
    const t = "\\" + i[e].toString(16);
    xd.registerIcon(e, { fontCharacter: t });
  }
}
OF();
const OA = "vscode://schemas/icons", FA = ui.as(lv.JSONContribution);
FA.registerSchema(OA, xd.getIconSchema());
const $C = new Gl(() => FA.notifySchemaChanged(OA), 200);
xd.onDidChange(() => {
  $C.isScheduled() || $C.schedule();
});
Np("widget-close", _e.close, h(2328, "Icon for the close action in widgets."));
Np("goto-previous-location", _e.arrowUp, h(2329, "Icon for goto previous editor location."));
Np("goto-next-location", _e.arrowDown, h(2330, "Icon for goto next editor location."));
ci.modify(_e.sync, "spin");
ci.modify(_e.loading, "spin");
Np("rerun-task", _e.refresh, h(10531, "View icon of the rerun task."));
const FF = "settings";
new P("taskRunning", !1, h(10752, "Whether a task is currently running."));
new P("taskTerminalActive", !1, h(10753, "Whether the active terminal is a task terminal."));
X1(10754, "Tasks");
var a1;
(function(i) {
  i[i.Escape = 1] = "Escape", i[i.Strong = 2] = "Strong", i[i.Weak = 3] = "Weak";
})(a1 || (a1 = {}));
(function(i) {
  function e(t) {
    if (!t)
      return i.Strong;
    switch (t.toLowerCase()) {
      case "escape":
        return i.Escape;
      case "strong":
        return i.Strong;
      case "weak":
        return i.Weak;
      default:
        return i.Strong;
    }
  }
  i.from = e;
})(a1 || (a1 = {}));
var HC;
(function(i) {
  i.defaults = { cwd: "${workspaceFolder}" };
})(HC || (HC = {}));
var Xf;
(function(i) {
  i[i.Always = 1] = "Always", i[i.Silent = 2] = "Silent", i[i.Never = 3] = "Never";
})(Xf || (Xf = {}));
(function(i) {
  function e(t) {
    switch (t.toLowerCase()) {
      case "always":
        return i.Always;
      case "silent":
        return i.Silent;
      case "never":
        return i.Never;
      default:
        return i.Always;
    }
  }
  i.fromString = e;
})(Xf || (Xf = {}));
var Zf;
(function(i) {
  i[i.Never = 1] = "Never", i[i.OnProblem = 2] = "OnProblem", i[i.Always = 3] = "Always";
})(Zf || (Zf = {}));
(function(i) {
  function e(t) {
    switch (t.toLowerCase()) {
      case "always":
        return i.Always;
      case "never":
        return i.Never;
      case "onproblem":
        return i.OnProblem;
      default:
        return i.OnProblem;
    }
  }
  i.fromString = e;
})(Zf || (Zf = {}));
var ep;
(function(i) {
  i[i.Shared = 1] = "Shared", i[i.Dedicated = 2] = "Dedicated", i[i.New = 3] = "New";
})(ep || (ep = {}));
(function(i) {
  function e(t) {
    switch (t.toLowerCase()) {
      case "shared":
        return i.Shared;
      case "dedicated":
        return i.Dedicated;
      case "new":
        return i.New;
      default:
        return i.Shared;
    }
  }
  i.fromString = e;
})(ep || (ep = {}));
var BC;
(function(i) {
  i.defaults = {
    echo: !0,
    reveal: Xf.Always,
    revealProblems: Zf.Never,
    focus: !1,
    panel: ep.Shared,
    showReuseMessage: !0,
    clear: !1
  };
})(BC || (BC = {}));
var l1;
(function(i) {
  i[i.Shell = 1] = "Shell", i[i.Process = 2] = "Process", i[i.CustomExecution = 3] = "CustomExecution";
})(l1 || (l1 = {}));
(function(i) {
  function e(n) {
    switch (n.toLowerCase()) {
      case "shell":
        return i.Shell;
      case "process":
        return i.Process;
      case "customExecution":
        return i.CustomExecution;
      default:
        return i.Process;
    }
  }
  i.fromString = e;
  function t(n) {
    switch (n) {
      case i.Shell:
        return "shell";
      case i.Process:
        return "process";
      case i.CustomExecution:
        return "customExecution";
      default:
        return "process";
    }
  }
  i.toString = t;
})(l1 || (l1 = {}));
var WC;
(function(i) {
  function e(t) {
    return st(t) ? t : t.value;
  }
  i.value = e;
})(WC || (WC = {}));
var VC;
(function(i) {
  i.Clean = { _id: "clean", isDefault: !1 }, i.Build = { _id: "build", isDefault: !1 }, i.Rebuild = { _id: "rebuild", isDefault: !1 }, i.Test = { _id: "test", isDefault: !1 };
  function e(n) {
    return n === i.Clean._id || n === i.Build._id || n === i.Rebuild._id || n === i.Test._id;
  }
  i.is = e;
  function t(n) {
    if (n !== void 0)
      return st(n) ? e(n) ? { _id: n, isDefault: !1 } : void 0 : n;
  }
  i.from = t;
})(VC || (VC = {}));
var zC;
(function(i) {
  i[i.Global = 1] = "Global", i[i.Workspace = 2] = "Workspace", i[i.Folder = 3] = "Folder";
})(zC || (zC = {}));
var qC;
(function(i) {
  i.Workspace = "workspace", i.Extension = "extension", i.InMemory = "inMemory", i.WorkspaceFile = "workspaceFile", i.User = "user";
  function e(t) {
    switch (t) {
      case i.User:
        return ri.USER;
      case i.WorkspaceFile:
        return ri.WORKSPACE;
      default:
        return ri.WORKSPACE_FOLDER;
    }
  }
  i.toConfigurationTarget = e;
})(qC || (qC = {}));
var jC;
(function(i) {
  i.parallel = "parallel", i.sequence = "sequence";
})(jC || (jC = {}));
var vx;
(function(i) {
  i[i.default = 1] = "default", i[i.folderOpen = 2] = "folderOpen";
})(vx || (vx = {}));
var wx;
(function(i) {
  i.terminateNewest = "terminateNewest", i.terminateOldest = "terminateOldest", i.prompt = "prompt", i.warn = "warn", i.silent = "silent";
})(wx || (wx = {}));
var GC;
(function(i) {
  i.defaults = { reevaluateOnRerun: !0, runOn: vx.default, instanceLimit: 1, instancePolicy: wx.prompt };
})(GC || (GC = {}));
var c1;
(function(i) {
  i[i.Process = 1] = "Process", i[i.Terminal = 2] = "Terminal";
})(c1 || (c1 = {}));
(function(i) {
  i._default = i.Terminal;
})(c1 || (c1 = {}));
var QC;
(function(i) {
  i[i.V0_1_0 = 1] = "V0_1_0", i[i.V2_0_0 = 2] = "V2_0_0";
})(QC || (QC = {}));
var u1;
(function(i) {
  i.SingleRun = "singleRun", i.Background = "background";
})(u1 || (u1 = {}));
var _o;
(function(i) {
  i.Changed = "changed", i.ProcessStarted = "processStarted", i.ProcessEnded = "processEnded", i.Terminated = "terminated", i.Start = "start", i.AcquiredInput = "acquiredInput", i.DependsOnStarted = "dependsOnStarted", i.Active = "active", i.Inactive = "inactive", i.End = "end", i.ProblemMatcherStarted = "problemMatcherStarted", i.ProblemMatcherEnded = "problemMatcherEnded", i.ProblemMatcherFoundErrors = "problemMatcherFoundErrors";
})(_o || (_o = {}));
var KC;
(function(i) {
  i[i.System = 0] = "System", i[i.User = 1] = "User", i[i.FolderOpen = 2] = "FolderOpen", i[i.ConfigurationChange = 3] = "ConfigurationChange", i[i.Reconnect = 4] = "Reconnect";
})(KC || (KC = {}));
var JC;
(function(i) {
  function e(c) {
    return {
      taskId: c._id,
      taskName: c.configurationProperties.name,
      runType: c.configurationProperties.isBackground ? u1.Background : u1.SingleRun,
      group: c.configurationProperties.group,
      __task: c
    };
  }
  function t(c, u, d) {
    return {
      ...e(c),
      kind: _o.Start,
      terminalId: u,
      resolvedVariables: d
    };
  }
  i.start = t;
  function n(c, u, d) {
    return {
      ...e(c),
      kind: _o.ProcessStarted,
      terminalId: u,
      processId: d
    };
  }
  i.processStarted = n;
  function r(c, u, d) {
    return {
      ...e(c),
      kind: _o.ProcessEnded,
      terminalId: u,
      exitCode: d
    };
  }
  i.processEnded = r;
  function s(c, u, d) {
    return {
      ...e(c),
      kind: _o.Terminated,
      exitReason: d,
      terminalId: u
    };
  }
  i.terminated = s;
  function o(c, u, d) {
    return {
      ...e(u),
      kind: c,
      terminalId: d
    };
  }
  i.general = o;
  function a(c, u, d) {
    return {
      ...e(c),
      kind: _o.ProblemMatcherEnded,
      hasErrors: u
    };
  }
  i.problemMatcherEnded = a;
  function l() {
    return { kind: _o.Changed };
  }
  i.changed = l;
})(JC || (JC = {}));
var d1;
(function(i) {
  function e(n) {
    const r = Object.keys(n).sort();
    let s = "";
    for (const o of r) {
      let a = n[o];
      a instanceof Object ? a = e(a) : typeof a == "string" && (a = a.replace(/,/g, ",,")), s += o + "," + a + ",";
    }
    return s;
  }
  function t(n) {
    const s = { _key: e(n), type: n.taskType };
    return Object.assign(s, n), s;
  }
  i.create = t;
})(d1 || (d1 = {}));
var YC;
(function(i) {
  i.AutoDetect = "task.autoDetect", i.SaveBeforeRun = "task.saveBeforeRun", i.ShowDecorations = "task.showDecorations", i.ProblemMatchersNeverPrompt = "task.problemMatchers.neverPrompt", i.SlowProviderWarning = "task.slowProviderWarning", i.QuickOpenHistory = "task.quickOpen.history", i.QuickOpenDetail = "task.quickOpen.detail", i.QuickOpenSkip = "task.quickOpen.skip", i.QuickOpenShowAll = "task.quickOpen.showAll", i.AllowAutomaticTasks = "task.allowAutomaticTasks", i.Reconnection = "task.reconnection", i.VerboseLogging = "task.verboseLogging";
})(YC || (YC = {}));
var XC;
(function(i) {
  i.Tasks = "tasks", i.SuppressTaskName = "tasks.suppressTaskName", i.Windows = "tasks.windows", i.Osx = "tasks.osx", i.Linux = "tasks.linux", i.ShowOutput = "tasks.showOutput", i.IsShellCommand = "tasks.isShellCommand", i.ServiceTestSetting = "tasks.service.testSetting";
})(XC || (XC = {}));
var ZC;
(function(i) {
  function e(t, n) {
    const r = AF.get(t.type);
    if (r === void 0) {
      const l = St(t);
      return delete l._key, d1.create(l);
    }
    const s = /* @__PURE__ */ Object.create(null);
    s.type = r.taskType;
    const o = /* @__PURE__ */ new Set();
    r.required.forEach((l) => o.add(l));
    const a = r.properties;
    for (const l of Object.keys(a)) {
      const c = t[l];
      if (c != null)
        s[l] = c;
      else if (o.has(l)) {
        const u = a[l];
        if (u.default !== void 0)
          s[l] = St(u.default);
        else
          switch (u.type) {
            case "boolean":
              s[l] = !1;
              break;
            case "number":
            case "integer":
              s[l] = 0;
              break;
            case "string":
              s[l] = "";
              break;
            default:
              n.error(h(
                10755,
                "Error: the task identifier '{0}' is missing the required property '{1}'. The task identifier will be ignored.",
                JSON.stringify(t, void 0, 0),
                l
              ));
              return;
          }
      }
    }
    return d1.create(s);
  }
  i.createTaskIdentifier = e;
})(ZC || (ZC = {}));
var h1;
(function(i) {
  function e(n) {
    if (n != null)
      return n;
  }
  i.from = e;
  function t(n) {
    if (n != null)
      return n;
  }
  i.to = t;
})(h1 || (h1 = {}));
var f1;
(function(i) {
  function e(n) {
    if (n != null)
      return n;
  }
  i.from = e;
  function t(n) {
    if (n != null)
      return n;
  }
  i.to = t;
})(f1 || (f1 = {}));
var bx;
(function(i) {
  function e(n) {
    if (n != null)
      return n;
  }
  i.from = e;
  function t(n) {
    if (n != null)
      return n;
  }
  i.to = t;
})(bx || (bx = {}));
var Dh;
(function(i) {
  function e(r) {
    if (r) {
      const s = r;
      return s && !!s.process;
    } else
      return !1;
  }
  i.is = e;
  function t(r) {
    if (r == null)
      return;
    const s = {
      process: r.process,
      args: r.args
    };
    return r.options && (s.options = bx.from(r.options)), s;
  }
  i.from = t;
  function n(r) {
    if (r != null)
      return new Qu(r.process, r.args, r.options);
  }
  i.to = n;
})(Dh || (Dh = {}));
var yx;
(function(i) {
  function e(n) {
    if (n != null)
      return n;
  }
  i.from = e;
  function t(n) {
    if (n != null)
      return n;
  }
  i.to = t;
})(yx || (yx = {}));
var kh;
(function(i) {
  function e(r) {
    if (r) {
      const s = r;
      return s && (!!s.commandLine || !!s.command);
    } else
      return !1;
  }
  i.is = e;
  function t(r) {
    if (r == null)
      return;
    const s = {};
    return r.commandLine !== void 0 ? s.commandLine = r.commandLine : (s.command = r.command, s.args = r.args), r.options && (s.options = yx.from(r.options)), s;
  }
  i.from = t;
  function n(r) {
    if (!(r == null || r.command === void 0 && r.commandLine === void 0))
      return r.commandLine ? new Bl(r.commandLine, r.options) : new Bl(r.command, r.args ? r.args : [], r.options);
  }
  i.to = n;
})(kh || (kh = {}));
var Ks;
(function(i) {
  function e(r) {
    if (r) {
      const s = r;
      return s && s.customExecution === "customExecution";
    } else
      return !1;
  }
  i.is = e;
  function t(r) {
    return {
      customExecution: "customExecution"
    };
  }
  i.from = t;
  function n(r, s) {
    return s.get(r);
  }
  i.to = n;
})(Ks || (Ks = {}));
var e4;
(function(i) {
  function e(t, n) {
    let r;
    return t.scope !== void 0 && typeof t.scope != "number" ? r = t.scope.uri : t.scope !== void 0 && typeof t.scope == "number" && (t.scope === Yo.Workspace && n && n.workspaceFile ? r = n.workspaceFile : r = FF), {
      id: t._id,
      workspaceFolder: r
    };
  }
  i.from = e;
})(e4 || (e4 = {}));
var xx;
(function(i) {
  function e(t) {
    if (t != null)
      return { _id: t.id, isDefault: t.isDefault };
  }
  i.from = e;
})(xx || (xx = {}));
var Uo;
(function(i) {
  function e(r, s) {
    if (r == null)
      return [];
    const o = [];
    for (const a of r) {
      const l = t(a, s);
      l && o.push(l);
    }
    return o;
  }
  i.fromMany = e;
  function t(r, s) {
    if (r == null)
      return;
    let o;
    r.execution instanceof Qu ? o = Dh.from(r.execution) : r.execution instanceof Bl ? o = kh.from(r.execution) : r.execution && r.execution instanceof dS && (o = Ks.from(r.execution));
    const a = h1.from(r.definition);
    let l;
    return r.scope ? typeof r.scope == "number" ? l = r.scope : l = r.scope.uri : l = Yo.Workspace, !a || !l ? void 0 : {
      _id: r._id,
      definition: a,
      name: r.name,
      source: {
        extensionId: s.identifier.value,
        label: r.source,
        scope: l
      },
      execution: o,
      isBackground: r.isBackground,
      group: xx.from(r.group),
      presentationOptions: f1.from(r.presentationOptions),
      problemMatchers: Xn(r.problemMatchers),
      hasDefinedMatchers: r.hasDefinedMatchers,
      runOptions: r.runOptions ? r.runOptions : { reevaluateOnRerun: !0 },
      detail: r.detail
    };
  }
  i.from = t;
  async function n(r, s, o) {
    if (r == null)
      return;
    let a;
    Dh.is(r.execution) ? a = Dh.to(r.execution) : kh.is(r.execution) ? a = kh.to(r.execution) : Ks.is(r.execution) && (a = Ks.to(r._id, o));
    const l = h1.to(r.definition);
    let c;
    if (r.source && (r.source.scope !== void 0 ? typeof r.source.scope == "number" ? c = r.source.scope : c = await s.resolveWorkspaceFolder(x.revive(r.source.scope)) : c = Yo.Workspace), !l || !c)
      return;
    const u = new Qm(l, c, r.name, r.source.label, a, r.problemMatchers);
    return r.isBackground !== void 0 && (u.isBackground = r.isBackground), r.group !== void 0 && (u.group = gf.from(r.group._id), u.group && r.group.isDefault && (u.group = new gf(u.group.id, u.group.label), r.group.isDefault === !0 && (u.group.isDefault = r.group.isDefault))), r.presentationOptions && (u.presentationOptions = f1.to(r.presentationOptions)), r._id && (u._id = r._id), r.detail && (u.detail = r.detail), u;
  }
  i.to = n;
})(Uo || (Uo = {}));
var Ex;
(function(i) {
  function e(n) {
    return n;
  }
  i.from = e;
  function t(n) {
    if (n)
      return Object.assign(/* @__PURE__ */ Object.create(null), n);
  }
  i.to = t;
})(Ex || (Ex = {}));
var up;
class hw {
  constructor(e, t, n) {
    ye(this, up);
    this._id = t, this._task = n, le(this, up, e);
  }
  get task() {
    return this._task;
  }
  terminate() {
    N(this, up).terminateTask(this);
  }
  fireDidStartProcess(e) {
  }
  fireDidEndProcess(e) {
  }
  get terminal() {
    return this._terminal;
  }
  set terminal(e) {
    this._terminal = e;
  }
}
up = new WeakMap();
let Sx = class {
  constructor(e, t, n, r, s, o, a, l) {
    this._onDidExecuteTask = new M(), this._onDidTerminateTask = new M(), this._onDidTaskProcessStarted = new M(), this._onDidTaskProcessEnded = new M(), this._onDidStartTaskProblemMatchers = new M(), this._onDidEndTaskProblemMatchers = new M(), this._proxy = e.getProxy(ie.MainThreadTask), this._workspaceProvider = n, this._editorService = r, this._configurationService = s, this._terminalService = o, this._handleCounter = 0, this._handlers = /* @__PURE__ */ new Map(), this._taskExecutions = /* @__PURE__ */ new Map(), this._taskExecutionPromises = /* @__PURE__ */ new Map(), this._providedCustomExecutions2 = /* @__PURE__ */ new Map(), this._notProvidedCustomExecutions = /* @__PURE__ */ new Set(), this._activeCustomExecutions2 = /* @__PURE__ */ new Map(), this._logService = a, this._deprecationService = l, this._proxy.$registerSupportedExecutions(!0);
  }
  registerTaskProvider(e, t, n) {
    if (!n)
      return new je(() => {
      });
    const r = this.nextHandle();
    return this._handlers.set(r, { type: t, provider: n, extension: e }), this._proxy.$registerTaskProvider(r, t), new je(() => {
      this._handlers.delete(r), this._proxy.$unregisterTaskProvider(r);
    });
  }
  registerTaskSystem(e, t) {
    this._proxy.$registerTaskSystem(e, t);
  }
  fetchTasks(e) {
    return this._proxy.$fetchTasks(Ex.from(e)).then(async (t) => {
      const n = [];
      for (const r of t) {
        const s = await Uo.to(r, this._workspaceProvider, this._providedCustomExecutions2);
        s && n.push(s);
      }
      return n;
    });
  }
  get taskExecutions() {
    const e = [];
    return this._taskExecutions.forEach((t) => e.push(t)), e;
  }
  terminateTask(e) {
    if (!(e instanceof hw))
      throw new Error("No valid task execution provided");
    return this._proxy.$terminateTask(e._id);
  }
  get onDidStartTask() {
    return this._onDidExecuteTask.event;
  }
  async $onDidStartTask(e, t, n) {
    var a;
    const r = this._providedCustomExecutions2.get(e.id);
    r && (this._activeCustomExecutions2.set(e.id, r), this._terminalService.attachPtyToTerminal(t, await r.callback(n))), this._lastStartedTask = e.id;
    const s = await this.getTaskExecution(e), o = (a = this._terminalService.getTerminalById(t)) == null ? void 0 : a.value;
    s && (s.terminal = o), this._onDidExecuteTask.fire({
      execution: s
    });
  }
  get onDidEndTask() {
    return this._onDidTerminateTask.event;
  }
  async $OnDidEndTask(e) {
    if (!this._taskExecutionPromises.has(e.id))
      return;
    const t = await this.getTaskExecution(e);
    this._taskExecutionPromises.delete(e.id), this._taskExecutions.delete(e.id), this.customExecutionComplete(e), this._onDidTerminateTask.fire({
      execution: t
    });
  }
  get onDidStartTaskProcess() {
    return this._onDidTaskProcessStarted.event;
  }
  async $onDidStartTaskProcess(e) {
    const t = await this.getTaskExecution(e.id);
    this._onDidTaskProcessStarted.fire({
      execution: t,
      processId: e.processId
    });
  }
  get onDidEndTaskProcess() {
    return this._onDidTaskProcessEnded.event;
  }
  async $onDidEndTaskProcess(e) {
    const t = await this.getTaskExecution(e.id);
    this._onDidTaskProcessEnded.fire({
      execution: t,
      exitCode: e.exitCode
    });
  }
  get onDidStartTaskProblemMatchers() {
    return this._onDidStartTaskProblemMatchers.event;
  }
  async $onDidStartTaskProblemMatchers(e) {
    let t;
    try {
      t = await this.getTaskExecution(e.execution.id);
    } catch {
      return;
    }
    this._onDidStartTaskProblemMatchers.fire({ execution: t });
  }
  get onDidEndTaskProblemMatchers() {
    return this._onDidEndTaskProblemMatchers.event;
  }
  async $onDidEndTaskProblemMatchers(e) {
    let t;
    try {
      t = await this.getTaskExecution(e.execution.id);
    } catch {
      return;
    }
    this._onDidEndTaskProblemMatchers.fire({ execution: t, hasErrors: e.hasErrors });
  }
  $provideTasks(e, t) {
    const n = this._handlers.get(e);
    if (!n)
      return Promise.reject(new Error("no handler found"));
    const r = [], s = Mi(() => n.provider.provideTasks(Dt.None)).then((o) => this.provideTasksInternal(t, r, n, o));
    return new Promise((o) => {
      s.then((a) => {
        Promise.all(r).then(() => {
          o(a);
        });
      });
    });
  }
  async $resolveTask(e, t) {
    const n = this._handlers.get(e);
    if (!n)
      return Promise.reject(new Error("no handler found"));
    if (t.definition.type !== n.type)
      throw new Error(
        `Unexpected: Task of type [${t.definition.type}] cannot be resolved by provider of type [${n.type}].`
      );
    const r = await Uo.to(t, this._workspaceProvider, this._providedCustomExecutions2);
    if (!r)
      throw new Error("Unexpected: Task cannot be resolved.");
    const s = await n.provider.resolveTask(r, Dt.None);
    if (!s)
      return;
    this.checkDeprecation(s, n);
    const o = Uo.from(s, n.extension);
    if (!o)
      throw new Error("Unexpected: Task cannot be resolved.");
    if (s.definition !== r.definition)
      throw new Error(
        "Unexpected: The resolved task definition must be the same object as the original task definition. The task definition cannot be changed."
      );
    return Ks.is(o.execution) && await this.addCustomExecution(o, s, !0), await this.resolveTaskInternal(o);
  }
  nextHandle() {
    return this._handleCounter++;
  }
  async addCustomExecution(e, t, n) {
    const r = await this._proxy.$createTaskId(e);
    !n && !this._providedCustomExecutions2.has(r) && (this._notProvidedCustomExecutions.add(r), this._activeCustomExecutions2.set(r, t.execution)), this._providedCustomExecutions2.set(r, t.execution);
  }
  async getTaskExecution(e, t) {
    if (typeof e == "string") {
      const s = this._taskExecutionPromises.get(e);
      if (!s)
        throw new us("Unexpected: The specified task is missing an execution");
      return s;
    }
    const n = this._taskExecutionPromises.get(e.id);
    if (n)
      return n;
    let r;
    return t ? r = Promise.resolve(new hw(this, e.id, t)) : r = Uo.to(e.task, this._workspaceProvider, this._providedCustomExecutions2).then((s) => {
      if (!s)
        throw new us("Unexpected: Task does not exist.");
      return new hw(this, e.id, s);
    }), this._taskExecutionPromises.set(e.id, r), r.then((s) => (this._taskExecutions.set(e.id, s), s));
  }
  checkDeprecation(e, t) {
    e._deprecated && this._deprecationService.report("Task.constructor", t.extension, "Use the Task constructor that takes a `scope` instead.");
  }
  customExecutionComplete(e) {
    this._activeCustomExecutions2.get(e.id) && this._activeCustomExecutions2.delete(e.id), this._notProvidedCustomExecutions.has(e.id) && this._lastStartedTask !== e.id && (this._providedCustomExecutions2.delete(e.id), this._notProvidedCustomExecutions.delete(e.id));
    const n = this._notProvidedCustomExecutions.values();
    let r = n.next();
    for (; !r.done; )
      !this._activeCustomExecutions2.has(r.value) && this._lastStartedTask !== r.value && (this._providedCustomExecutions2.delete(r.value), this._notProvidedCustomExecutions.delete(r.value)), r = n.next();
  }
};
Sx = z([
  O(0, tt),
  O(1, _i),
  O(2, Zs),
  O(3, yd),
  O(4, eo),
  O(5, bd),
  O(6, ot),
  O(7, Lp)
], Sx);
let Dx = class extends Sx {
  constructor(e, t, n, r, s, o, a, l) {
    super(e, t, n, r, s, o, a, l), this.registerTaskSystem(fe.vscodeRemote, {
      scheme: fe.vscodeRemote,
      authority: "",
      platform: h8(yr.Web)
    });
  }
  async executeTask(e, t) {
    if (!t.execution)
      throw new Error("Tasks to execute must include an execution");
    const n = Uo.from(t, e);
    if (n === void 0)
      throw new Error("Task is not valid");
    if (Ks.is(n.execution))
      await this.addCustomExecution(n, t, !1);
    else
      throw new Tw();
    const r = await this.getTaskExecution(await this._proxy.$getTaskExecution(n), t);
    return this._proxy.$executeTask(n).catch((s) => {
      throw new Error(s);
    }), r;
  }
  provideTasksInternal(e, t, n, r) {
    const s = [];
    if (r)
      for (const o of r) {
        if (this.checkDeprecation(o, n), !o.definition || !e[o.definition.type]) {
          const l = o.source ? o.source : "No task source";
          this._logService.warn(`The task [${l}, ${o.name}] uses an undefined task type. The task will be ignored in the future.`);
        }
        const a = Uo.from(o, n.extension);
        a && Ks.is(a.execution) ? (s.push(a), t.push(this.addCustomExecution(a, o, !0))) : this._logService.warn("Only custom execution tasks supported.");
      }
    return {
      tasks: s,
      extension: n.extension
    };
  }
  async resolveTaskInternal(e) {
    if (Ks.is(e.execution))
      return e;
    this._logService.warn("Only custom execution tasks supported.");
  }
  async $resolveVariables(e, t) {
    return {
      process: void 0,
      variables: /* @__PURE__ */ Object.create(null)
    };
  }
  async $jsonTasksSupported() {
    return !1;
  }
  async $findExecutable(e, t, n) {
  }
};
Dx = z([
  O(0, tt),
  O(1, _i),
  O(2, Zs),
  O(3, yd),
  O(4, eo),
  O(5, bd),
  O(6, ot),
  O(7, Lp)
], Dx);
const UA = me("IExtHostTask");
class UF {
  constructor() {
    this.pendingRequests = /* @__PURE__ */ new Map(), this.queue = [], this._onError = new M(), this._onExit = new M(), this.sequence = 1;
  }
  get onError() {
    return this._onError.event;
  }
  get onExit() {
    return this._onExit.event;
  }
  onMessage(e) {
    this.messageCallback && this._onError.fire(new Error("attempt to set more than one 'Message' callback")), this.messageCallback = e;
  }
  onEvent(e) {
    this.eventCallback && this._onError.fire(new Error("attempt to set more than one 'Event' callback")), this.eventCallback = e;
  }
  onRequest(e) {
    this.requestCallback && this._onError.fire(new Error("attempt to set more than one 'Request' callback")), this.requestCallback = e;
  }
  sendResponse(e) {
    e.seq > 0 ? this._onError.fire(new Error(`attempt to send more than one response for command ${e.command}`)) : this.internalSend("response", e);
  }
  sendRequest(e, t, n, r) {
    const s = {
      command: e
    };
    if (t && Object.keys(t).length > 0 && (s.arguments = t), this.internalSend("request", s), typeof r == "number") {
      const o = setTimeout(() => {
        clearTimeout(o);
        const a = this.pendingRequests.get(s.seq);
        if (a) {
          this.pendingRequests.delete(s.seq);
          const l = {
            type: "response",
            seq: 0,
            request_seq: s.seq,
            success: !1,
            command: e,
            message: h(6391, "Timeout after {0} ms for '{1}'", r, e)
          };
          a(l);
        }
      }, r);
    }
    return n && this.pendingRequests.set(s.seq, n), s.seq;
  }
  acceptMessage(e) {
    this.messageCallback ? this.messageCallback(e) : (this.queue.push(e), this.queue.length === 1 && this.processQueue());
  }
  needsTaskBoundaryBetween(e, t) {
    return e.type !== "event" || t.type !== "event";
  }
  async processQueue() {
    var t, n;
    let e;
    for (; this.queue.length; ) {
      if ((!e || this.needsTaskBoundaryBetween(this.queue[0], e)) && await ns(0), e = this.queue.shift(), !e)
        return;
      switch (e.type) {
        case "event":
          (t = this.eventCallback) == null || t.call(this, e);
          break;
        case "request":
          (n = this.requestCallback) == null || n.call(this, e);
          break;
        case "response": {
          const r = e, s = this.pendingRequests.get(r.request_seq);
          s && (this.pendingRequests.delete(r.request_seq), s(r));
          break;
        }
      }
    }
  }
  internalSend(e, t) {
    t.type = e, t.seq = this.sequence++, this.sendMessage(t);
  }
  async cancelPendingRequests() {
    if (this.pendingRequests.size === 0)
      return Promise.resolve();
    const e = /* @__PURE__ */ new Map();
    this.pendingRequests.forEach((t, n) => e.set(n, t)), await ns(500), e.forEach((t, n) => {
      t({
        type: "response",
        seq: 0,
        request_seq: n,
        success: !1,
        command: "canceled",
        message: "canceled"
      }), this.pendingRequests.delete(n);
    });
  }
  getPendingRequestIds() {
    return Array.from(this.pendingRequests.keys());
  }
  dispose() {
    this.queue = [];
  }
}
function $F(i) {
  return i.type && (i.label || i.program || i.runtime);
}
const HF = /^[a-zA-Z][a-zA-Z0-9\+\-\.]+:/;
function BF(i) {
  return !!(i && i.match(HF));
}
function WF(i) {
  if (typeof i.path == "string" && !(typeof i.sourceReference == "number" && i.sourceReference > 0)) {
    if (BF(i.path))
      return x.parse(i.path);
    if (Gg(i.path))
      return x.file(i.path);
  }
  return i.path;
}
function VF(i) {
  if (typeof i.path == "object") {
    const e = x.revive(i.path);
    if (e)
      return e.scheme === fe.file ? e.fsPath : e.toString();
  }
  return i.path;
}
function zF(i, e) {
  const t = VF, n = St(i);
  return $A(n, (r, s) => {
    r && s && (s.path = t(s));
  }), n;
}
function qF(i, e) {
  const t = WF, n = St(i);
  return $A(n, (r, s) => {
    !r && s && (s.path = t(s));
  }), n;
}
function $A(i, e) {
  var t, n;
  switch (i.type) {
    case "event": {
      const r = i;
      switch (r.event) {
        case "output":
          e(!1, r.body.source);
          break;
        case "loadedSource":
          e(!1, r.body.source);
          break;
        case "breakpoint":
          e(!1, r.body.breakpoint.source);
          break;
      }
      break;
    }
    case "request": {
      const r = i;
      switch (r.command) {
        case "setBreakpoints":
          e(!0, r.arguments.source);
          break;
        case "breakpointLocations":
          e(!0, r.arguments.source);
          break;
        case "source":
          e(!0, r.arguments.source);
          break;
        case "gotoTargets":
          e(!0, r.arguments.source);
          break;
        case "launchVSCode":
          r.arguments.args.forEach((s) => e(!1, s));
          break;
      }
      break;
    }
    case "response": {
      const r = i;
      if (r.success && r.body)
        switch (r.command) {
          case "stackTrace":
            r.body.stackFrames.forEach((s) => e(!1, s.source));
            break;
          case "loadedSources":
            r.body.sources.forEach((s) => e(!1, s));
            break;
          case "scopes":
            r.body.scopes.forEach((s) => e(!1, s.source));
            break;
          case "setFunctionBreakpoints":
            r.body.breakpoints.forEach((s) => e(!1, s.source));
            break;
          case "setBreakpoints":
            r.body.breakpoints.forEach((s) => e(!1, s.source));
            break;
          case "disassemble":
            (t = r.body) == null || t.instructions.forEach((o) => e(!1, o.location));
            break;
          case "locations":
            e(!1, (n = r.body) == null ? void 0 : n.source);
            break;
        }
      break;
    }
  }
}
const Mp = me("IExtHostEditorTabs");
class t4 {
  constructor(e, t, n) {
    this._activeTabIdGetter = n, this._parentGroup = t, this.acceptDtoUpdate(e);
  }
  get apiObject() {
    if (!this._apiObject) {
      const e = this, t = {
        get isActive() {
          return e._dto.id === e._activeTabIdGetter();
        },
        get label() {
          return e._dto.label;
        },
        get input() {
          return e._input;
        },
        get isDirty() {
          return e._dto.isDirty;
        },
        get isPinned() {
          return e._dto.isPinned;
        },
        get isPreview() {
          return e._dto.isPreview;
        },
        get group() {
          return e._parentGroup.apiObject;
        }
      };
      this._apiObject = Object.freeze(t);
    }
    return this._apiObject;
  }
  get tabId() {
    return this._dto.id;
  }
  acceptDtoUpdate(e) {
    this._dto = e, this._input = this._initInput();
  }
  _initInput() {
    switch (this._dto.input.kind) {
      case In.TextInput:
        return new pS(x.revive(this._dto.input.uri));
      case In.TextDiffInput:
        return new p_(x.revive(this._dto.input.original), x.revive(this._dto.input.modified));
      case In.TextMergeInput:
        return new T5(
          x.revive(this._dto.input.base),
          x.revive(this._dto.input.input1),
          x.revive(this._dto.input.input2),
          x.revive(this._dto.input.result)
        );
      case In.CustomEditorInput:
        return new gS(x.revive(this._dto.input.uri), this._dto.input.viewType);
      case In.WebviewEditorInput:
        return new P5(this._dto.input.viewType);
      case In.NotebookInput:
        return new mS(x.revive(this._dto.input.uri), this._dto.input.notebookType);
      case In.NotebookDiffInput:
        return new _S(
          x.revive(this._dto.input.original),
          x.revive(this._dto.input.modified),
          this._dto.input.notebookType
        );
      case In.TerminalEditorInput:
        return new A5();
      case In.InteractiveEditorInput:
        return new R5(x.revive(this._dto.input.uri), x.revive(this._dto.input.inputBoxUri));
      case In.ChatEditorInput:
        return new L5();
      case In.MultiDiffEditorInput:
        return new N5(this._dto.input.diffEditors.map((e) => new p_(x.revive(e.original), x.revive(e.modified))));
      default:
        return;
    }
  }
}
class jF {
  constructor(e, t) {
    this._tabs = [], this._activeTabId = "", this._dto = e, this._activeGroupIdGetter = t;
    for (const n of e.tabs)
      n.isActive && (this._activeTabId = n.id), this._tabs.push(new t4(n, this, () => this.activeTabId()));
  }
  get apiObject() {
    if (!this._apiObject) {
      const e = this, t = {
        get isActive() {
          return e._dto.groupId === e._activeGroupIdGetter();
        },
        get viewColumn() {
          return li.to(e._dto.viewColumn);
        },
        get activeTab() {
          var n;
          return (n = e._tabs.find((r) => r.tabId === e._activeTabId)) == null ? void 0 : n.apiObject;
        },
        get tabs() {
          return Object.freeze(e._tabs.map((n) => n.apiObject));
        }
      };
      this._apiObject = Object.freeze(t);
    }
    return this._apiObject;
  }
  get groupId() {
    return this._dto.groupId;
  }
  get tabs() {
    return this._tabs;
  }
  acceptGroupDtoUpdate(e) {
    this._dto = e;
  }
  acceptTabOperation(e) {
    if (e.kind === Hs.TAB_OPEN) {
      const n = new t4(e.tabDto, this, () => this.activeTabId());
      return this._tabs.splice(e.index, 0, n), e.tabDto.isActive && (this._activeTabId = n.tabId), n;
    } else if (e.kind === Hs.TAB_CLOSE) {
      const n = this._tabs.splice(e.index, 1)[0];
      if (!n)
        throw new Error(
          `Tab close updated received for index ${e.index} which does not exist`
        );
      return n.tabId === this._activeTabId && (this._activeTabId = ""), n;
    } else if (e.kind === Hs.TAB_MOVE) {
      if (e.oldIndex === void 0)
        throw new Error("Invalid old index on move IPC");
      const n = this._tabs.splice(e.oldIndex, 1)[0];
      if (!n)
        throw new Error(
          `Tab move updated received for index ${e.oldIndex} which does not exist`
        );
      return this._tabs.splice(e.index, 0, n), n;
    }
    const t = this._tabs.find((n) => n.tabId === e.tabDto.id);
    if (!t)
      throw new Error("INVALID tab");
    return e.tabDto.isActive ? this._activeTabId = e.tabDto.id : this._activeTabId === e.tabDto.id && !e.tabDto.isActive && (this._activeTabId = ""), t.acceptDtoUpdate(e.tabDto), t;
  }
  activeTabId() {
    return this._activeTabId;
  }
}
let kx = class {
  constructor(e) {
    this._onDidChangeTabs = new M(), this._onDidChangeTabGroups = new M(), this._extHostTabGroups = [], this._proxy = e.getProxy(ie.MainThreadEditorTabs);
  }
  get tabGroups() {
    if (!this._apiObject) {
      const e = this, t = {
        onDidChangeTabGroups: e._onDidChangeTabGroups.event,
        onDidChangeTabs: e._onDidChangeTabs.event,
        get all() {
          return Object.freeze(e._extHostTabGroups.map((n) => n.apiObject));
        },
        get activeTabGroup() {
          var s;
          const n = e._activeGroupId;
          return Nu((s = e._extHostTabGroups.find((o) => o.groupId === n)) == null ? void 0 : s.apiObject);
        },
        close: async (n, r) => {
          const s = Array.isArray(n) ? n : [n];
          return s.length ? GF(s[0]) ? this._closeGroups(s, r) : this._closeTabs(s, r) : !0;
        }
      };
      this._apiObject = Object.freeze(t);
    }
    return this._apiObject;
  }
  $acceptEditorTabModel(e) {
    var c;
    const t = new Set(this._extHostTabGroups.map((u) => u.groupId)), n = new Set(e.map((u) => u.groupId)), r = vR(t, n), s = this._extHostTabGroups.filter((u) => r.removed.includes(u.groupId)).map((u) => u.apiObject), o = [], a = [];
    this._extHostTabGroups = e.map((u) => {
      const d = new jF(u, () => this._activeGroupId);
      return r.added.includes(d.groupId) ? o.push(d.apiObject) : a.push(d.apiObject), d;
    });
    const l = Nu((c = e.find((u) => u.isActive === !0)) == null ? void 0 : c.groupId);
    l !== void 0 && this._activeGroupId !== l && (this._activeGroupId = l), this._onDidChangeTabGroups.fire(Object.freeze({ opened: o, closed: s, changed: a }));
  }
  $acceptTabGroupUpdate(e) {
    const t = this._extHostTabGroups.find((n) => n.groupId === e.groupId);
    if (!t)
      throw new Error("Update Group IPC call received before group creation.");
    t.acceptGroupDtoUpdate(e), e.isActive && (this._activeGroupId = e.groupId), this._onDidChangeTabGroups.fire(Object.freeze({ changed: [t.apiObject], opened: [], closed: [] }));
  }
  $acceptTabOperation(e) {
    const t = this._extHostTabGroups.find((r) => r.groupId === e.groupId);
    if (!t)
      throw new Error("Update Tabs IPC call received before group creation.");
    const n = t.acceptTabOperation(e);
    switch (e.kind) {
      case Hs.TAB_OPEN:
        this._onDidChangeTabs.fire(Object.freeze({
          opened: [n.apiObject],
          closed: [],
          changed: []
        }));
        return;
      case Hs.TAB_CLOSE:
        this._onDidChangeTabs.fire(Object.freeze({
          opened: [],
          closed: [n.apiObject],
          changed: []
        }));
        return;
      case Hs.TAB_MOVE:
      case Hs.TAB_UPDATE:
        this._onDidChangeTabs.fire(Object.freeze({
          opened: [],
          closed: [],
          changed: [n.apiObject]
        }));
        return;
    }
  }
  _findExtHostTabFromApi(e) {
    for (const t of this._extHostTabGroups)
      for (const n of t.tabs)
        if (n.apiObject === e)
          return n;
  }
  _findExtHostTabGroupFromApi(e) {
    return this._extHostTabGroups.find((t) => t.apiObject === e);
  }
  async _closeTabs(e, t) {
    const n = [];
    for (const r of e) {
      const s = this._findExtHostTabFromApi(r);
      if (!s)
        throw new Error("Tab close: Invalid tab not found!");
      n.push(s.tabId);
    }
    return this._proxy.$closeTab(n, t);
  }
  async _closeGroups(e, t) {
    const n = [];
    for (const r of e) {
      const s = this._findExtHostTabGroupFromApi(r);
      if (!s)
        throw new Error("Group close: Invalid group not found!");
      n.push(s.groupId);
    }
    return this._proxy.$closeGroup(n, t);
  }
};
kx = z([
  O(0, tt)
], kx);
function GF(i) {
  return i.tabs !== void 0;
}
var i4;
(function(i) {
  i.ViewletId = "workbench.view.extension.test", i.ExplorerViewId = "workbench.view.testing", i.OutputPeekContributionId = "editor.contrib.testingOutputPeek", i.DecorationsContributionId = "editor.contrib.testingDecorations", i.CoverageDecorationsContributionId = "editor.contrib.coverageDecorations", i.CoverageViewId = "workbench.view.testCoverage", i.ResultsPanelId = "workbench.panel.testResults", i.ResultsViewId = "workbench.panel.testResults.view", i.MessageLanguageId = "vscodeInternalTestMessage";
})(i4 || (i4 = {}));
var n4;
(function(i) {
  i.List = "list", i.Tree = "true";
})(n4 || (n4 = {}));
var r4;
(function(i) {
  i.ByLocation = "location", i.ByStatus = "status", i.ByDuration = "duration";
})(r4 || (r4 = {}));
si.Errored + "", h(11834, "Errored"), si.Failed + "", h(11835, "Failed"), si.Passed + "", h(11836, "Passed"), si.Queued + "", h(11837, "Queued"), si.Running + "", h(11838, "Running"), si.Skipped + "", h(11839, "Skipped"), si.Unset + "", h(11840, "Not yet run");
Ni.Debug + "", h(11842, "Debug"), Ni.Run + "", h(11843, "Run"), Ni.Coverage + "", h(11844, "Coverage");
var Ix;
(function(i) {
  i.CancelTestRefreshAction = "testing.cancelTestRefresh", i.CancelTestRunAction = "testing.cancelRun", i.ClearTestResultsAction = "testing.clearTestResults", i.CollapseAllAction = "testing.collapseAll", i.ConfigureTestProfilesAction = "testing.configureProfile", i.ContinousRunUsingForTest = "testing.continuousRunUsingForTest", i.CoverageAtCursor = "testing.coverageAtCursor", i.CoverageByUri = "testing.coverage.uri", i.CoverageClear = "testing.coverage.close", i.CoverageCurrentFile = "testing.coverageCurrentFile", i.CoverageFilterToTest = "testing.coverageFilterToTest", i.CoverageFilterToTestInEditor = "testing.coverageFilterToTestInEditor", i.CoverageLastRun = "testing.coverageLastRun", i.CoverageSelectedAction = "testing.coverageSelected", i.CoverageToggleToolbar = "testing.coverageToggleToolbar", i.CoverageViewChangeSorting = "testing.coverageViewChangeSorting", i.DebugAction = "testing.debug", i.DebugAllAction = "testing.debugAll", i.DebugAtCursor = "testing.debugAtCursor", i.DebugByUri = "testing.debug.uri", i.DebugCurrentFile = "testing.debugCurrentFile", i.DebugFailedTests = "testing.debugFailTests", i.DebugFailedFromLastRun = "testing.debugFailedFromLastRun", i.DebugLastRun = "testing.debugLastRun", i.DebugSelectedAction = "testing.debugSelected", i.FilterAction = "workbench.actions.treeView.testExplorer.filter", i.GetExplorerSelection = "_testing.getExplorerSelection", i.GetSelectedProfiles = "testing.getSelectedProfiles", i.GoToTest = "testing.editFocusedTest", i.GoToRelatedTest = "testing.goToRelatedTest", i.PeekRelatedTest = "testing.peekRelatedTest", i.GoToRelatedCode = "testing.goToRelatedCode", i.PeekRelatedCode = "testing.peekRelatedCode", i.HideTestAction = "testing.hideTest", i.OpenCoverage = "testing.openCoverage", i.OpenOutputPeek = "testing.openOutputPeek", i.RefreshTestsAction = "testing.refreshTests", i.ReRunFailedTests = "testing.reRunFailTests", i.ReRunFailedFromLastRun = "testing.reRunFailedFromLastRun", i.ReRunLastRun = "testing.reRunLastRun", i.RunAction = "testing.run", i.RunAllAction = "testing.runAll", i.RunAllWithCoverageAction = "testing.coverageAll", i.RunAtCursor = "testing.runAtCursor", i.RunByUri = "testing.run.uri", i.RunCurrentFile = "testing.runCurrentFile", i.RunSelectedAction = "testing.runSelected", i.RunUsingProfileAction = "testing.runUsing", i.RunWithCoverageAction = "testing.coverage", i.SearchForTestExtension = "testing.searchForTestExtension", i.SelectDefaultTestProfiles = "testing.selectDefaultTestProfiles", i.ShowMostRecentOutputAction = "testing.showMostRecentOutput", i.StartContinousRun = "testing.startContinuousRun", i.StartContinousRunFromExtension = "testing.startContinuousRunFromExtension", i.StopContinousRunFromExtension = "testing.stopContinuousRunFromExtension", i.StopContinousRun = "testing.stopContinuousRun", i.TestingSortByDurationAction = "testing.sortByDuration", i.TestingSortByLocationAction = "testing.sortByLocation", i.TestingSortByStatusAction = "testing.sortByStatus", i.TestingViewAsListAction = "testing.viewAsList", i.TestingViewAsTreeAction = "testing.viewAsTree", i.ToggleContinousRunForTest = "testing.toggleContinuousRunForTest", i.ToggleInlineTestOutput = "testing.toggleInlineTestOutput", i.UnhideAllTestsAction = "testing.unhideAllTests", i.UnhideTestAction = "testing.unhideTest";
})(Ix || (Ix = {}));
let QF = 0;
const s4 = /* @__PURE__ */ new WeakMap(), Cv = me("IExtHostTesting");
let Cx = class extends xe {
  constructor(e, t, n, r) {
    super(), this.logService = t, this.commands = n, this.editors = r, this.resultsChangedEmitter = this._register(new M()), this.controllers = /* @__PURE__ */ new Map(), this.defaultProfilesChangedEmitter = this._register(new M()), this.followupProviders = /* @__PURE__ */ new Set(), this.testFollowups = /* @__PURE__ */ new Map(), this.onResultsChanged = this.resultsChangedEmitter.event, this.results = [], this.proxy = e.getProxy(ie.MainThreadTesting), this.observer = new eU(this.proxy), this.runTracker = new YF(this.proxy, t), n.registerArgumentProcessor({
      processArgument: (s) => {
        var o, a, l;
        switch (s == null ? void 0 : s.$mid) {
          case rt.TestItemContext: {
            const c = s, u = c.tests[c.tests.length - 1].item.extId, d = this.controllers.get(Fe.root(u));
            return ((o = d == null ? void 0 : d.collection.tree.get(u)) == null ? void 0 : o.actual) ?? mC(s);
          }
          case rt.TestMessageMenuArgs: {
            const { test: c, message: u } = s, d = c.item.extId;
            return {
              test: ((l = (a = this.controllers.get(Fe.root(d))) == null ? void 0 : a.collection.tree.get(d)) == null ? void 0 : l.actual) ?? mC({ tests: [c] }),
              message: ld.to(u)
            };
          }
          default:
            return s;
        }
      }
    }), n.registerCommand(!1, "testing.getExplorerSelection", async () => {
      const s = await n.executeCommand(Ix.GetExplorerSelection), o = (a) => {
        var c;
        const l = this.controllers.get(Fe.root(a));
        if (l)
          return Fe.isRoot(a) ? l.controller : (c = l.collection.tree.get(a)) == null ? void 0 : c.actual;
      };
      return {
        include: (s == null ? void 0 : s.include.map(o).filter(Mn)) || [],
        exclude: (s == null ? void 0 : s.exclude.map(o).filter(Mn)) || []
      };
    });
  }
  createTestController(e, t, n, r) {
    if (this.controllers.has(t))
      throw new Error(`Attempt to insert a duplicate controller with ID "${t}"`);
    const s = new Te(), o = s.add(new _O(t, n, this.editors));
    o.root.label = n;
    const a = /* @__PURE__ */ new Map(), l = /* @__PURE__ */ new Set(), c = this.proxy, u = () => {
      let p = 0;
      r && (p |= bh.Refresh);
      const v = f.relatedCodeProvider;
      return v && (v != null && v.provideRelatedTests && (p |= bh.TestRelatedToCode), v != null && v.provideRelatedCode && (p |= bh.CodeRelatedToTest)), p;
    }, d = {
      items: o.root.children,
      get label() {
        return n;
      },
      set label(p) {
        n = p, o.root.label = p, c.$updateController(t, { label: n });
      },
      get refreshHandler() {
        return r;
      },
      set refreshHandler(p) {
        r = p, c.$updateController(t, { capabilities: u() });
      },
      get id() {
        return t;
      },
      get relatedCodeProvider() {
        return f.relatedCodeProvider;
      },
      set relatedCodeProvider(p) {
        H(e, "testRelatedCode"), f.relatedCodeProvider = p, c.$updateController(t, { capabilities: u() });
      },
      createRunProfile: (p, v, _, m, E, S) => {
        let k = Yh(p);
        for (; a.has(k); )
          k++;
        return new BA(
          this.proxy,
          a,
          l,
          this.defaultProfilesChangedEmitter.event,
          t,
          k,
          p,
          v,
          _,
          m,
          E,
          S
        );
      },
      createTestItem(p, v, _) {
        return new tc(t, p, v, _);
      },
      createTestRun: (p, v, _ = !0) => this.runTracker.createTestRun(e, t, o, p, v, _),
      invalidateTestResults: (p) => {
        if (p === void 0)
          this.proxy.$markTestRetired(void 0);
        else {
          const v = p instanceof Array ? p : [p];
          this.proxy.$markTestRetired(v.map((_) => Fe.fromExtHostTestItem(_, t).toString()));
        }
      },
      set resolveHandler(p) {
        o.resolveHandler = p;
      },
      get resolveHandler() {
        return o.resolveHandler;
      },
      dispose: () => {
        s.dispose();
      }
    }, f = { controller: d, collection: o, profiles: a, extension: e, activeProfiles: l };
    return c.$registerTestController(t, n, u()), s.add(Ie(() => c.$unregisterTestController(t))), this.controllers.set(t, f), s.add(Ie(() => this.controllers.delete(t))), s.add(o.onDidGenerateDiff((p) => c.$publishDiff(t, p.map(Am.serialize)))), d;
  }
  createTestObserver() {
    return this.observer.checkout();
  }
  async runTests(e, t = Dt.None) {
    var s, o;
    const n = HA(e);
    if (!n)
      throw new Error("The request passed to `vscode.test.runTests` must include a profile");
    const r = this.controllers.get(n.controllerId);
    if (!r)
      throw new Error("Controller not found");
    await this.proxy.$runTests({
      preserveFocus: e.preserveFocus ?? !0,
      group: cd.from(n.kind),
      targets: [{
        testIds: ((s = e.include) == null ? void 0 : s.map((a) => Fe.fromExtHostTestItem(a, r.collection.root.id).toString())) ?? [r.collection.root.id],
        profileId: n.profileId,
        controllerId: n.controllerId
      }],
      exclude: (o = e.exclude) == null ? void 0 : o.map((a) => a.id)
    }, t);
  }
  registerTestFollowupProvider(e) {
    return this.followupProviders.add(e), { dispose: () => {
      this.followupProviders.delete(e);
    } };
  }
  async $getTestsRelatedToCode(e, t, n) {
    const r = this.editors.getDocument(x.revive(e));
    if (!r)
      return [];
    const s = ut.to(t), o = [];
    return await Promise.all([...this.controllers.values()].map(async (a) => {
      var c, u;
      let l;
      try {
        l = await ((u = (c = a.relatedCodeProvider) == null ? void 0 : c.provideRelatedTests) == null ? void 0 : u.call(c, r.document, s, n));
      } catch (d) {
        n.isCancellationRequested || this.logService.warn(`Error thrown while providing related tests for ${a.controller.label}`, d);
      }
      if (l) {
        for (const d of l)
          o.push(Fe.fromExtHostTestItem(d, a.controller.id).toString());
        a.collection.flushDiff();
      }
    })), o;
  }
  async $getCodeRelatedToTest(e, t) {
    var o, a;
    const n = this.controllers.get(Fe.root(e));
    if (!n)
      return [];
    const r = n.collection.tree.get(e);
    if (!r)
      return [];
    const s = await ((a = (o = n.relatedCodeProvider) == null ? void 0 : o.provideRelatedCode) == null ? void 0 : a.call(o, r.actual, t));
    return (s == null ? void 0 : s.map(hn.from)) ?? [];
  }
  $syncTests() {
    for (const { collection: e } of this.controllers.values())
      e.flushDiff();
    return Promise.resolve();
  }
  async $getCoverageDetails(e, t, n) {
    const r = await this.runTracker.getCoverageDetails(e, t, n);
    return r == null ? void 0 : r.map(Bf.fromDetails);
  }
  async $disposeRun(e) {
    this.runTracker.disposeTestRun(e);
  }
  $configureRunProfile(e, t) {
    var n, r, s;
    (s = (r = (n = this.controllers.get(e)) == null ? void 0 : n.profiles.get(t)) == null ? void 0 : r.configureHandler) == null || s.call(r);
  }
  $setDefaultRunProfiles(e) {
    const t = /* @__PURE__ */ new Map();
    for (const [n, r] of Object.entries(e)) {
      const s = this.controllers.get(n);
      if (!s)
        continue;
      const o = /* @__PURE__ */ new Map(), a = r.filter((c) => !s.activeProfiles.has(c)), l = [...s.activeProfiles].filter((c) => !r.includes(c));
      for (const c of a)
        o.set(c, !0), s.activeProfiles.add(c);
      for (const c of l)
        o.set(c, !1), s.activeProfiles.delete(c);
      o.size && t.set(n, o);
    }
    this.defaultProfilesChangedEmitter.fire(t);
  }
  async $refreshTests(e, t) {
    var n, r, s;
    await ((s = (n = this.controllers.get(e)) == null ? void 0 : (r = n.controller).refreshHandler) == null ? void 0 : s.call(r, t));
  }
  $publishTestResults(e) {
    this.results = Object.freeze(e.map((t) => {
      const n = l0.to(t), r = t.tasks.findIndex((s) => s.hasCoverage);
      return r !== -1 && (n.getDetailedCoverage = (s, o = Dt.None) => this.proxy.$getCoverageDetails(t.id, r, s, o).then((a) => a.map(Bf.to))), s4.set(n, t.id), n;
    }).concat(this.results).sort((t, n) => n.completedAt - t.completedAt).slice(0, 32)), this.resultsChangedEmitter.fire();
  }
  async $expandTest(e, t) {
    var r;
    const n = (r = this.controllers.get(Fe.fromString(e).controllerId)) == null ? void 0 : r.collection;
    n && (await n.expand(e, t < 0 ? 1 / 0 : t), n.flushDiff());
  }
  $acceptDiff(e) {
    this.observer.applyDiff(e.map((t) => Am.deserialize({ asCanonicalUri: (n) => n }, t)));
  }
  async $runControllerTests(e, t) {
    return Promise.all(e.map((n) => this.runControllerTestRequest(n, !1, t)));
  }
  async $startContinuousRun(e, t) {
    const n = new Lt(t), r = await Promise.all(e.map((s) => this.runControllerTestRequest(s, !0, n.token)));
    return !t.isCancellationRequested && !r.some((s) => s.error) && await new Promise((s) => t.onCancellationRequested(s)), n.dispose(!0), r;
  }
  async $provideTestFollowups(e, t) {
    const n = this.results.find((o) => s4.get(o) === e.resultId), r = n && tU(Fe.fromString(e.extId), n == null ? void 0 : n.results);
    if (!r)
      return [];
    let s = [];
    return await Promise.all([...this.followupProviders].map(async (o) => {
      try {
        const a = await o.provideFollowup(n, r, e.taskIndex, e.messageIndex, t);
        a && (s = s.concat(a));
      } catch (a) {
        this.logService.error("Error thrown while providing followup for test message", a);
      }
    })), t.isCancellationRequested ? [] : s.map((o) => {
      const a = QF++;
      return this.testFollowups.set(a, o), { title: o.title, id: a };
    });
  }
  $disposeTestFollowups(e) {
    for (const t of e)
      this.testFollowups.delete(t);
  }
  $executeTestFollowup(e) {
    const t = this.testFollowups.get(e);
    return t ? this.commands.executeCommand(t.command, ...t.arguments || []) : Promise.resolve();
  }
  $cancelExtensionTestRun(e, t) {
    e === void 0 ? this.runTracker.cancelAllRuns() : this.runTracker.cancelRunById(e, t);
  }
  getMetadataForRun(e) {
    for (const t of this.runTracker.trackers) {
      const n = t.getTaskIdForRun(e);
      if (n)
        return { taskId: n, runId: t.id };
    }
  }
  async runControllerTestRequest(e, t, n) {
    const r = this.controllers.get(e.controllerId);
    if (!r)
      return {};
    const { collection: s, profiles: o, extension: a } = r, l = o.get(e.profileId);
    if (!l)
      return {};
    const c = e.testIds.map((p) => s.tree.get(p)).filter(Mn), u = e.excludeExtIds.map((p) => r.collection.tree.get(p)).filter(Mn).filter((p) => c.some((v) => v.fullId.compare(p.fullId) === dr.IsChild));
    if (!c.length)
      return {};
    const d = new h_(c.some((p) => p.actual instanceof LS) ? void 0 : c.map((p) => p.actual), u.map((p) => p.actual), l, t), f = eN(e) && this.runTracker.prepareForMainThreadTestRun(a, d, tp.fromInternal(e, r.collection), l, n);
    try {
      return await l.runHandler(d, n), {};
    } catch (p) {
      return { error: String(p) };
    } finally {
      f && f.hasRunningTasks && !n.isCancellationRequested && await Pt.toPromise(f.onEnd);
    }
  }
};
Cx = z([
  O(0, tt),
  O(1, ot),
  O(2, ic),
  O(3, yd)
], Cx);
const KF = 1e4;
var vo;
(function(i) {
  i[i.Running = 0] = "Running", i[i.Cancelling = 1] = "Cancelling", i[i.Ended = 2] = "Ended";
})(vo || (vo = {}));
class JF extends xe {
  get hasRunningTasks() {
    return this.running > 0;
  }
  get id() {
    return this.dto.id;
  }
  constructor(e, t, n, r, s, o) {
    super(), this.dto = e, this.proxy = t, this.logService = n, this.profile = r, this.extension = s, this.state = vo.Running, this.running = 0, this.tasks = /* @__PURE__ */ new Map(), this.sharedTestIds = /* @__PURE__ */ new Set(), this.endEmitter = this._register(new M()), this.publishedCoverage = /* @__PURE__ */ new Map(), this.onEnd = this.endEmitter.event, this.cts = this._register(new Lt(o));
    const a = this._register(new Gl(() => this.forciblyEndTasks(), KF));
    this._register(this.cts.token.onCancellationRequested(() => a.schedule()));
    const l = new M();
    this.onDidDispose = l.event, this._register(Ie(() => {
      l.fire(), l.dispose();
    }));
  }
  getTaskIdForRun(e) {
    for (const [t, { run: n }] of this.tasks)
      if (n === e)
        return t;
  }
  cancel(e) {
    var t;
    e ? (t = this.tasks.get(e)) == null || t.cts.cancel() : this.state === vo.Running ? (this.cts.cancel(), this.state = vo.Cancelling) : this.state === vo.Cancelling && this.forciblyEndTasks();
  }
  async getCoverageDetails(e, t, n) {
    var d, f, p, v;
    const [, r] = Fe.fromString(e).path, s = this.publishedCoverage.get(e);
    if (!s)
      return [];
    const { report: o, extIds: a } = s, l = this.tasks.get(r);
    if (!l)
      throw new Error("unreachable: run task was not found");
    let c;
    if (t && o instanceof Xu) {
      const _ = a.indexOf(t);
      if (_ === -1)
        return [];
      c = o.includesTests[_];
    }
    return await (c ? (f = (d = this.profile) == null ? void 0 : d.loadDetailedCoverageForTest) == null ? void 0 : f.call(d, l.run, o, c, n) : (v = (p = this.profile) == null ? void 0 : p.loadDetailedCoverage) == null ? void 0 : v.call(p, l.run, o, n)) ?? [];
  }
  createRun(e) {
    const t = this.dto.id, n = this.dto.controllerId, r = dn(), s = (u) => (d, ...f) => {
      if (a) {
        this.logService.warn(`Setting the state of test "${d.id}" is a no-op after the run ends.`);
        return;
      }
      this.ensureTestIsKnown(d), u(d, ...f);
    }, o = (u, d) => {
      const f = d instanceof Array ? d.map(ld.from) : [ld.from(d)];
      if (u.uri && u.range) {
        const p = { range: j.from(u.range), uri: u.uri };
        for (const v of f)
          v.location = v.location || p;
      }
      this.proxy.$appendTestMessagesInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), f);
    };
    let a = !1;
    const l = this._register(new Lt(this.cts.token)), c = {
      isPersisted: this.dto.isPersisted,
      token: l.token,
      name: e,
      onDidDispose: this.onDidDispose,
      addCoverage: (u) => {
        if (a)
          return;
        const d = u instanceof Xu ? u.includesTests : [];
        if (d.length)
          for (const v of d)
            this.ensureTestIsKnown(v);
        const f = u.uri.toString(), p = new Fe([t, r, f]).toString();
        this.publishedCoverage.set(p, { report: u, extIds: d.map((v) => Fe.fromExtHostTestItem(v, n).toString()) }), this.proxy.$appendCoverage(t, r, Bf.fromFile(n, p, u));
      },
      enqueued: s((u) => {
        this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), si.Queued);
      }),
      skipped: s((u) => {
        this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), si.Skipped);
      }),
      started: s((u) => {
        this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), si.Running);
      }),
      errored: s((u, d, f) => {
        o(u, d), this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), si.Errored, f);
      }),
      failed: s((u, d, f) => {
        o(u, d), this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, n).toString(), si.Failed, f);
      }),
      passed: s((u, d) => {
        this.proxy.$updateTestStateInRun(t, r, Fe.fromExtHostTestItem(u, this.dto.controllerId).toString(), si.Passed, d);
      }),
      appendOutput: (u, d, f) => {
        a || (f && this.ensureTestIsKnown(f), this.proxy.$appendOutputToRun(t, r, he.fromString(u), d && hn.from(d), f && Fe.fromExtHostTestItem(f, n).toString()));
      },
      end: () => {
        a || (a = !0, this.proxy.$finishedTestRunTask(t, r), --this.running || this.markEnded());
      }
    };
    return this.running++, this.tasks.set(r, { run: c, cts: l }), this.proxy.$startedTestRunTask(t, {
      id: r,
      ctrlId: this.dto.controllerId,
      name: e || this.extension.displayName || this.extension.identifier.value,
      running: !0
    }), c;
  }
  forciblyEndTasks() {
    for (const { run: e } of this.tasks.values())
      e.end();
  }
  markEnded() {
    this.state !== vo.Ended && (this.state = vo.Ended, this.endEmitter.fire());
  }
  ensureTestIsKnown(e) {
    if (!(e instanceof tc))
      throw new Rm(e.id);
    if (this.sharedTestIds.has(Fe.fromExtHostTestItem(e, this.dto.controllerId).toString()))
      return;
    const t = [], n = this.dto.colllection.root;
    for (; ; ) {
      const r = Zo.from(e);
      if (t.unshift(r), this.sharedTestIds.has(r.extId) || (this.sharedTestIds.add(r.extId), e === n))
        break;
      e = e.parent || n;
    }
    this.proxy.$addTestsToRun(this.dto.controllerId, this.dto.id, t);
  }
  dispose() {
    this.markEnded(), super.dispose();
  }
}
class YF {
  get trackers() {
    return this.tracked.values();
  }
  constructor(e, t) {
    this.proxy = e, this.logService = t, this.tracked = /* @__PURE__ */ new Map(), this.trackedById = /* @__PURE__ */ new Map();
  }
  getCoverageDetails(e, t, n) {
    var s;
    const r = Fe.root(e);
    return ((s = this.trackedById.get(r)) == null ? void 0 : s.getCoverageDetails(e, t, n)) || [];
  }
  disposeTestRun(e) {
    var t;
    (t = this.trackedById.get(e)) == null || t.dispose(), this.trackedById.delete(e);
    for (const [n, { id: r }] of this.tracked)
      r === e && this.tracked.delete(n);
  }
  prepareForMainThreadTestRun(e, t, n, r, s) {
    return this.getTracker(t, n, r, e, s);
  }
  cancelRunById(e, t) {
    var n;
    (n = this.trackedById.get(e)) == null || n.cancel(t);
  }
  cancelAllRuns() {
    for (const e of this.tracked.values())
      e.cancel();
  }
  createTestRun(e, t, n, r, s, o) {
    var d, f;
    const a = this.tracked.get(r);
    if (a)
      return a.createRun(s);
    const l = tp.fromPublic(t, n, r, o), c = HA(r);
    this.proxy.$startedExtensionTestRun({
      controllerId: t,
      continuous: !!r.continuous,
      profile: c && { group: cd.from(c.kind), id: c.profileId },
      exclude: ((d = r.exclude) == null ? void 0 : d.map((p) => Fe.fromExtHostTestItem(p, n.root.id).toString())) ?? [],
      id: l.id,
      include: ((f = r.include) == null ? void 0 : f.map((p) => Fe.fromExtHostTestItem(p, n.root.id).toString())) ?? [n.root.id],
      preserveFocus: r.preserveFocus ?? !0,
      persist: o
    });
    const u = this.getTracker(r, l, r.profile, e);
    return Pt.once(u.onEnd)(() => {
      this.proxy.$finishedExtensionTestRun(l.id);
    }), u.createRun(s);
  }
  getTracker(e, t, n, r, s) {
    const o = new JF(t, this.proxy, this.logService, n, r, s);
    return this.tracked.set(e, o), this.trackedById.set(o.id, o), o;
  }
}
const HA = (i) => {
  if (i.profile) {
    if (!(i.profile instanceof BA))
      throw new Error(
        "TestRunRequest.profile is not an instance created from TestController.createRunProfile"
      );
    return i.profile;
  }
};
class tp {
  static fromPublic(e, t, n, r) {
    return new tp(e, dn(), r, t);
  }
  static fromInternal(e, t) {
    return new tp(e.controllerId, e.runId, !0, t);
  }
  constructor(e, t, n, r) {
    this.controllerId = e, this.id = t, this.isPersisted = n, this.colllection = r;
  }
}
class XF {
  get isEmpty() {
    return this.added.size === 0 && this.removed.size === 0 && this.updated.size === 0;
  }
  constructor(e) {
    this.emitter = e, this.added = /* @__PURE__ */ new Set(), this.updated = /* @__PURE__ */ new Set(), this.removed = /* @__PURE__ */ new Set(), this.alreadyRemoved = /* @__PURE__ */ new Set();
  }
  add(e) {
    this.added.add(e);
  }
  update(e) {
    Object.assign(e.revived, Zo.toPlain(e.item)), this.added.has(e) || this.updated.add(e);
  }
  remove(e) {
    if (this.added.has(e)) {
      this.added.delete(e);
      return;
    }
    this.updated.delete(e);
    const t = Fe.parentId(e.item.extId);
    if (t && this.alreadyRemoved.has(t.toString())) {
      this.alreadyRemoved.add(e.item.extId);
      return;
    }
    this.removed.add(e);
  }
  getChangeEvent() {
    const { added: e, updated: t, removed: n } = this;
    return {
      get added() {
        return [...e].map((r) => r.revived);
      },
      get updated() {
        return [...t].map((r) => r.revived);
      },
      get removed() {
        return [...n].map((r) => r.revived);
      }
    };
  }
  complete() {
    this.isEmpty || this.emitter.fire(this.getChangeEvent());
  }
}
class ZF extends tN {
  constructor() {
    super(...arguments), this.changeEmitter = new M(), this.onDidChangeTests = this.changeEmitter.event;
  }
  get rootTests() {
    return this.roots;
  }
  getMirroredTestDataById(e) {
    return this.items.get(e);
  }
  getMirroredTestDataByReference(e) {
    return this.items.get(e.id);
  }
  createItem(e, t) {
    return {
      ...e,
      revived: Zo.toPlain(e.item),
      depth: t ? t.depth + 1 : 0,
      children: /* @__PURE__ */ new Set()
    };
  }
  createChangeCollector() {
    return new XF(this.changeEmitter);
  }
}
class eU {
  constructor(e) {
    this.proxy = e;
  }
  checkout() {
    this.current || (this.current = this.createObserverData());
    const e = this.current;
    return e.observers++, {
      onDidChangeTest: e.tests.onDidChangeTests,
      get tests() {
        return [...e.tests.rootTests].map((t) => t.revived);
      },
      dispose: RE(() => {
        --e.observers === 0 && (this.proxy.$unsubscribeFromDiffs(), this.current = void 0);
      })
    };
  }
  getMirroredTestDataByReference(e) {
    var t;
    return (t = this.current) == null ? void 0 : t.tests.getMirroredTestDataByReference(e);
  }
  applyDiff(e) {
    var t;
    (t = this.current) == null || t.tests.apply(e);
  }
  createObserverData() {
    const e = new ZF({ asCanonicalUri: (t) => t });
    return this.proxy.$subscribeToDiffs(), { observers: 0, tests: e };
  }
}
const Hd = (i, e, t, n) => {
  t ? Object.assign(t, n) : e.$updateTestRunConfig(i.controllerId, i.profileId, n);
};
var gr, Qa, dp, Pn, gu;
class BA extends D5 {
  constructor(t, n, r, s, o, a, l, c, u, d = !1, f = void 0, p = !1) {
    super(o, a, c);
    ye(this, gr);
    ye(this, Qa);
    ye(this, dp);
    ye(this, Pn);
    ye(this, gu);
    this._label = l, this.runHandler = u, this._tag = f, this._supportsContinuousRun = p, le(this, gr, t), le(this, gu, n), le(this, Qa, r), le(this, dp, s), n.set(a, this);
    const v = cd.from(c);
    d && r.add(a), le(this, Pn, {
      profileId: a,
      controllerId: o,
      tag: f ? Tr.namespace(this.controllerId, f.id) : null,
      label: l,
      group: v,
      isDefault: d,
      hasConfigurationHandler: !1,
      supportsContinuousRun: p
    }), queueMicrotask(() => {
      N(this, Pn) && (N(this, gr).$publishTestRunProfile(N(this, Pn)), le(this, Pn, void 0));
    });
  }
  get label() {
    return this._label;
  }
  set label(t) {
    t !== this._label && (this._label = t, Hd(this, N(this, gr), N(this, Pn), { label: t }));
  }
  get supportsContinuousRun() {
    return this._supportsContinuousRun;
  }
  set supportsContinuousRun(t) {
    t !== this._supportsContinuousRun && (this._supportsContinuousRun = t, Hd(this, N(this, gr), N(this, Pn), { supportsContinuousRun: t }));
  }
  get isDefault() {
    return N(this, Qa).has(this.profileId);
  }
  set isDefault(t) {
    t !== this.isDefault && (t ? N(this, Qa).add(this.profileId) : N(this, Qa).delete(this.profileId), Hd(this, N(this, gr), N(this, Pn), { isDefault: t }));
  }
  get tag() {
    return this._tag;
  }
  set tag(t) {
    var n;
    (t == null ? void 0 : t.id) !== ((n = this._tag) == null ? void 0 : n.id) && (this._tag = t, Hd(this, N(this, gr), N(this, Pn), {
      tag: t ? Tr.namespace(this.controllerId, t.id) : null
    }));
  }
  get configureHandler() {
    return this._configureHandler;
  }
  set configureHandler(t) {
    t !== this._configureHandler && (this._configureHandler = t, Hd(this, N(this, gr), N(this, Pn), { hasConfigurationHandler: !!t }));
  }
  get onDidChangeDefault() {
    return Pt.chain(N(this, dp), (t) => t.map((n) => {
      var r;
      return (r = n.get(this.controllerId)) == null ? void 0 : r.get(this.profileId);
    }).filter(Mn));
  }
  dispose() {
    var t;
    (t = N(this, gu)) != null && t.delete(this.profileId) && (le(this, gu, void 0), N(this, gr).$removeTestProfile(this.controllerId, this.profileId)), le(this, Pn, void 0);
  }
}
gr = new WeakMap(), Qa = new WeakMap(), dp = new WeakMap(), Pn = new WeakMap(), gu = new WeakMap();
function tU(i, e) {
  for (let t = 0; t < i.path.length; t++) {
    const n = e.find((r) => r.id === i.path[t]);
    if (!n)
      return;
    if (t === i.path.length - 1)
      return n;
    e = n.children;
  }
}
var xt;
(function(i) {
  i.Unknown = "unknown", i.Env = "env", i.Config = "config", i.Command = "command", i.Input = "input", i.ExtensionInstallFolder = "extensionInstallFolder", i.WorkspaceFolder = "workspaceFolder", i.Cwd = "cwd", i.WorkspaceFolderBasename = "workspaceFolderBasename", i.UserHome = "userHome", i.LineNumber = "lineNumber", i.ColumnNumber = "columnNumber", i.SelectedText = "selectedText", i.File = "file", i.FileWorkspaceFolder = "fileWorkspaceFolder", i.FileWorkspaceFolderBasename = "fileWorkspaceFolderBasename", i.RelativeFile = "relativeFile", i.RelativeFileDirname = "relativeFileDirname", i.FileDirname = "fileDirname", i.FileExtname = "fileExtname", i.FileBasename = "fileBasename", i.FileBasenameNoExtension = "fileBasenameNoExtension", i.FileDirnameBasename = "fileDirnameBasename", i.ExecPath = "execPath", i.ExecInstallFolder = "execInstallFolder", i.PathSeparator = "pathSeparator", i.PathSeparatorAlias = "/";
})(xt || (xt = {}));
const iU = Object.values(xt).filter((i) => typeof i == "string");
class Zi extends us {
  constructor(e, t) {
    super(t), this.variable = e;
  }
}
const Oh = class Oh {
  constructor(e) {
    this.locations = /* @__PURE__ */ new Map(), this.newReplacementNotifiers = /* @__PURE__ */ new Set(), typeof e == "string" ? (this.stringRoot = !0, this.root = { value: e }) : (this.stringRoot = !1, this.root = structuredClone(e));
  }
  static parse(e) {
    if (e instanceof Oh)
      return e;
    const t = new Oh(e);
    return t.applyPlatformSpecificKeys(), t.parseObject(t.root), t;
  }
  applyPlatformSpecificKeys() {
    const e = this.root, t = Yi ? "windows" : Un ? "osx" : jo ? "linux" : void 0;
    t && e && typeof e == "object" && e.hasOwnProperty(t) && Object.keys(e[t]).forEach((n) => e[n] = e[t][n]), delete e.windows, delete e.osx, delete e.linux;
  }
  parseVariable(e, t) {
    if (e[t] !== "$" || e[t + 1] !== "{")
      return;
    let n = t + 2, r = 1;
    for (; n < e.length; ) {
      if (e[n] === "{")
        r++;
      else if (e[n] === "}" && (r--, r === 0))
        break;
      n++;
    }
    if (r !== 0)
      return;
    const s = e.slice(t, n + 1), o = e.substring(t + 2, n), a = o.indexOf(":");
    return a === -1 ? { replacement: { id: s, name: o, inner: o }, end: n } : {
      replacement: {
        id: s,
        inner: o,
        name: o.slice(0, a),
        arg: o.slice(a + 1)
      },
      end: n
    };
  }
  parseObject(e) {
    if (!(typeof e != "object" || e === null)) {
      if (Array.isArray(e)) {
        for (let t = 0; t < e.length; t++) {
          const n = e[t];
          typeof n == "string" ? this.parseString(e, t, n) : this.parseObject(n);
        }
        return;
      }
      for (const [t, n] of Object.entries(e))
        this.parseString(e, t, t, !0), typeof n == "string" ? this.parseString(e, t, n) : this.parseObject(n);
    }
  }
  parseString(e, t, n, r, s) {
    let o = 0;
    for (; o < n.length; ) {
      const a = n.indexOf("${", o);
      if (a === -1)
        break;
      const l = this.parseVariable(n, a);
      if (l) {
        if (o = l.end + 1, s != null && s.includes(l.replacement.id))
          continue;
        const c = this.locations.get(l.replacement.id) || { locations: [], replacement: l.replacement }, u = { object: e, propertyName: t, replaceKeyName: r };
        c.locations.push(u), this.locations.set(l.replacement.id, c), c.resolved ? this._resolveAtLocation(l.replacement, u, c.resolved, s) : this.newReplacementNotifiers.forEach((d) => d(l.replacement));
      } else
        o = a + 2;
    }
  }
  *unresolved() {
    const e = /* @__PURE__ */ new Map(), t = (n) => {
      e.set(n.id, n);
    };
    for (const n of this.locations.values())
      n.resolved === void 0 && e.set(n.replacement.id, n.replacement);
    for (this.newReplacementNotifiers.add(t); ; ) {
      const n = Bi.first(e);
      if (!n)
        break;
      const [r, s] = n;
      yield s, e.delete(r);
    }
    this.newReplacementNotifiers.delete(t);
  }
  resolved() {
    return Bi.map(Bi.filter(this.locations.values(), (e) => !!e.resolved), (e) => [e.replacement, e.resolved]);
  }
  resolve(e, t) {
    typeof t != "object" && (t = { value: String(t) });
    const n = this.locations.get(e.id);
    if (n && (n.resolved = t, t.value !== void 0))
      for (const r of n.locations || Bi.empty())
        this._resolveAtLocation(e, r, t);
  }
  _resolveAtLocation(e, { replaceKeyName: t, propertyName: n, object: r }, s, o = []) {
    if (s.value !== void 0) {
      if (o.push(e.id), t && typeof n == "string") {
        const a = r[n], l = n.replaceAll(e.id, s.value);
        delete r[n], r[l] = a, this._renameKeyInLocations(r, n, l), this.parseString(r, l, s.value, !0, o);
      } else
        r[n] = r[n].replaceAll(e.id, s.value), this.parseString(r, n, s.value, !1, o);
      o.pop();
    }
  }
  _renameKeyInLocations(e, t, n) {
    for (const r of this.locations.values())
      for (const s of r.locations)
        s.object === e && s.propertyName === t && (s.propertyName = n);
  }
  toObject() {
    return this.stringRoot ? this.root.value : this.root;
  }
};
Oh.VARIABLE_LHS = "${";
let p1 = Oh;
class nU {
  constructor(e, t, n, r) {
    this._contributedVariables = /* @__PURE__ */ new Map(), this.resolvableVariables = new Set(iU), this._context = e, this._labelService = t, this._userHomePromise = n, r && (this._envVariablesPromise = r.then((s) => this.prepareEnv(s)));
  }
  prepareEnv(e) {
    if (Yi) {
      const t = /* @__PURE__ */ Object.create(null);
      return Object.keys(e).forEach((n) => {
        t[n.toLowerCase()] = e[n];
      }), t;
    }
    return e;
  }
  async resolveWithEnvironment(e, t, n) {
    const r = p1.parse(n);
    for (const s of r.unresolved()) {
      const o = await this.evaluateSingleVariable(s, t == null ? void 0 : t.uri, e);
      o !== void 0 && r.resolve(s, String(o));
    }
    return r.toObject();
  }
  async resolveAsync(e, t) {
    const n = p1.parse(t);
    for (const r of n.unresolved()) {
      const s = await this.evaluateSingleVariable(r, e == null ? void 0 : e.uri);
      s !== void 0 && n.resolve(r, String(s));
    }
    return n.toObject();
  }
  resolveWithInteractionReplace(e, t) {
    throw new Error("resolveWithInteractionReplace not implemented.");
  }
  resolveWithInteraction(e, t) {
    throw new Error("resolveWithInteraction not implemented.");
  }
  contributeVariable(e, t) {
    if (this._contributedVariables.has(e))
      throw new Error("Variable " + e + " is contributed twice.");
    this.resolvableVariables.add(e), this._contributedVariables.set(e, t);
  }
  fsPath(e) {
    return this._labelService ? this._labelService.getUriLabel(e, { noPrefix: !0 }) : e.fsPath;
  }
  async evaluateSingleVariable(e, t, n, r) {
    const s = {
      env: n !== void 0 ? this.prepareEnv(n) : await this._envVariablesPromise,
      userHome: n !== void 0 ? void 0 : await this._userHomePromise
    }, { name: o, arg: a } = e, l = (d) => {
      const f = this._context.getFilePath();
      if (f)
        return Od(f);
      throw new Zi(d, h(
        12946,
        "Variable {0} can not be resolved. Please open an editor.",
        e.id
      ));
    }, c = (d) => {
      const f = l(d);
      if (this._context.getWorkspaceFolderPathForFile) {
        const p = this._context.getWorkspaceFolderPathForFile();
        if (p)
          return Od(p);
      }
      throw new Zi(d, h(
        12947,
        "Variable {0}: can not find workspace folder of '{1}'.",
        e.id,
        yn(f)
      ));
    }, u = (d) => {
      if (a) {
        const f = this._context.getFolderUri(a);
        if (f)
          return f;
        throw new Zi(d, h(
          12948,
          "Variable {0} can not be resolved. No such folder '{1}'.",
          d,
          a
        ));
      }
      if (t)
        return t;
      throw this._context.getWorkspaceFolderCount() > 1 ? new Zi(d, h(
        12949,
        "Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.",
        d
      )) : new Zi(d, h(
        12950,
        "Variable {0} can not be resolved. Please open a folder.",
        d
      ));
    };
    switch (o) {
      case "env":
        if (a) {
          if (s.env) {
            const d = s.env[Yi ? a.toLowerCase() : a];
            if (st(d))
              return d;
          }
          return "";
        }
        throw new Zi(xt.Env, h(
          12951,
          "Variable {0} can not be resolved because no environment variable name is given.",
          e.id
        ));
      case "config":
        if (a) {
          const d = this._context.getConfigurationValue(t, a);
          if (oi(d))
            throw new Zi(xt.Config, h(
              12952,
              "Variable {0} can not be resolved because setting '{1}' not found.",
              e.id,
              a
            ));
          if (ai(d))
            throw new Zi(xt.Config, h(
              12953,
              "Variable {0} can not be resolved because '{1}' is a structured value.",
              e.id,
              a
            ));
          return d;
        }
        throw new Zi(xt.Config, h(
          12954,
          "Variable {0} can not be resolved because no settings name is given.",
          e.id
        ));
      case "command":
        return this.resolveFromMap(xt.Command, e.id, a, r, "command");
      case "input":
        return this.resolveFromMap(xt.Input, e.id, a, r, "input");
      case "extensionInstallFolder":
        if (a) {
          const d = await this._context.getExtension(a);
          if (!d)
            throw new Zi(xt.ExtensionInstallFolder, h(
              12955,
              "Variable {0} can not be resolved because the extension {1} is not installed.",
              e.id,
              a
            ));
          return this.fsPath(d.extensionLocation);
        }
        throw new Zi(xt.ExtensionInstallFolder, h(
          12956,
          "Variable {0} can not be resolved because no extension name is given.",
          e.id
        ));
      default:
        switch (o) {
          case "workspaceRoot":
          case "workspaceFolder": {
            const d = u(xt.WorkspaceFolder);
            return d ? Od(this.fsPath(d)) : void 0;
          }
          case "cwd": {
            if (!t && !a)
              return Ou();
            const d = u(xt.Cwd);
            return d ? Od(this.fsPath(d)) : void 0;
          }
          case "workspaceRootFolderName":
          case "workspaceFolderBasename": {
            const d = u(xt.WorkspaceFolderBasename);
            return d ? Od(yn(this.fsPath(d))) : void 0;
          }
          case "userHome":
            if (s.userHome)
              return s.userHome;
            throw new Zi(xt.UserHome, h(
              12957,
              "Variable {0} can not be resolved. UserHome path is not defined",
              e.id
            ));
          case "lineNumber": {
            const d = this._context.getLineNumber();
            if (d)
              return d;
            throw new Zi(xt.LineNumber, h(
              12958,
              "Variable {0} can not be resolved. Make sure to have a line selected in the active editor.",
              e.id
            ));
          }
          case "columnNumber": {
            const d = this._context.getColumnNumber();
            if (d)
              return d;
            throw new Error(h(
              12959,
              "Variable {0} can not be resolved. Make sure to have a column selected in the active editor.",
              e.id
            ));
          }
          case "selectedText": {
            const d = this._context.getSelectedText();
            if (d)
              return d;
            throw new Zi(xt.SelectedText, h(
              12960,
              "Variable {0} can not be resolved. Make sure to have some text selected in the active editor.",
              e.id
            ));
          }
          case "file":
            return l(xt.File);
          case "fileWorkspaceFolder":
            return c(xt.FileWorkspaceFolder);
          case "fileWorkspaceFolderBasename":
            return yn(c(xt.FileWorkspaceFolderBasename));
          case "relativeFile":
            return t || a ? zh(this.fsPath(u(xt.RelativeFile)), l(xt.RelativeFile)) : l(xt.RelativeFile);
          case "relativeFileDirname": {
            const d = Qc(l(xt.RelativeFileDirname));
            if (t || a) {
              const f = zh(this.fsPath(u(xt.RelativeFileDirname)), d);
              return f.length === 0 ? "." : f;
            }
            return d;
          }
          case "fileDirname":
            return Qc(l(xt.FileDirname));
          case "fileExtname":
            return Qg(l(xt.FileExtname));
          case "fileBasename":
            return yn(l(xt.FileBasename));
          case "fileBasenameNoExtension": {
            const d = yn(l(xt.FileBasenameNoExtension));
            return d.slice(0, d.length - Qg(d).length);
          }
          case "fileDirnameBasename":
            return yn(Qc(l(xt.FileDirnameBasename)));
          case "execPath": {
            const d = this._context.getExecPath();
            return d || e.id;
          }
          case "execInstallFolder": {
            const d = this._context.getAppRoot();
            return d || e.id;
          }
          case "pathSeparator":
          case "/":
            return Jn;
          default:
            try {
              return this.resolveFromMap(xt.Unknown, e.id, a, r, void 0);
            } catch {
              return e.id;
            }
        }
    }
  }
  resolveFromMap(e, t, n, r, s) {
    if (n && r) {
      const o = s === void 0 ? r[n] : r[s + ":" + n];
      if (typeof o == "string")
        return o;
      throw new Zi(e, h(
        12961,
        "Variable {0} can not be resolved because the command has no value.",
        t
      ));
    }
    return t;
  }
}
const BS = me("IExtHostVariableResolverProvider");
class rU extends nU {
  constructor(e, t, n, r, s, o, a) {
    function l() {
      var c;
      if (n) {
        const u = n.activeEditor();
        if (u)
          return u.document.uri;
        const d = (c = r.tabGroups.all.find((f) => f.isActive)) == null ? void 0 : c.activeTab;
        if (d !== void 0) {
          if (d.input instanceof p_ || d.input instanceof _S)
            return d.input.modified;
          if (d.input instanceof pS || d.input instanceof mS || d.input instanceof gS)
            return d.input.uri;
        }
      }
    }
    super({
      getFolderUri: (c) => {
        const u = o.folders.filter((d) => d.name === c);
        if (u && u.length > 0)
          return u[0].uri;
      },
      getWorkspaceFolderCount: () => o.folders.length,
      getConfigurationValue: (c, u) => s.getConfiguration(void 0, c).get(u),
      getAppRoot: () => Ou(),
      getExecPath: () => Vh.VSCODE_EXEC_PATH,
      getFilePath: () => {
        const c = l();
        if (c)
          return Fu(c.fsPath);
      },
      getWorkspaceFolderPathForFile: () => {
        if (t) {
          const c = l();
          if (c) {
            const u = t.getWorkspaceFolder(c);
            if (u)
              return Fu(u.uri.fsPath);
          }
        }
      },
      getSelectedText: () => {
        if (n) {
          const c = n.activeEditor();
          if (c && !c.selection.isEmpty)
            return c.document.getText(c.selection);
        }
      },
      getLineNumber: () => {
        if (n) {
          const c = n.activeEditor();
          if (c)
            return String(c.selection.end.line + 1);
        }
      },
      getColumnNumber: () => {
        if (n) {
          const c = n.activeEditor();
          if (c)
            return String(c.selection.end.character + 1);
        }
      },
      getExtension: (c) => e.getExtension(c)
    }, void 0, a ? Promise.resolve(a) : void 0, Promise.resolve(Vh));
  }
}
let Tx = class extends xe {
  constructor(e, t, n, r, s) {
    super(), this.extensionService = e, this.workspaceService = t, this.editorService = n, this.configurationService = r, this.editorTabs = s, this._resolver = new Qi(async () => {
      const o = await this.configurationService.getConfigProvider(), l = { folders: await this.workspaceService.getWorkspaceFolders2() || [] };
      return this._register(this.workspaceService.onDidChangeWorkspace(async (c) => {
        l.folders = await this.workspaceService.getWorkspaceFolders2() || [];
      })), new rU(
        this.extensionService,
        this.workspaceService,
        this.editorService,
        this.editorTabs,
        o,
        l,
        this.homeDir()
      );
    });
  }
  getResolver() {
    return this._resolver.value;
  }
  homeDir() {
  }
};
Tx = z([
  O(0, na),
  O(1, Zs),
  O(2, yd),
  O(3, eo),
  O(4, Mp)
], Tx);
const WA = me("IExtHostDebugService");
let Px = class extends xe {
  get onDidStartDebugSession() {
    return this._onDidStartDebugSession.event;
  }
  get onDidTerminateDebugSession() {
    return this._onDidTerminateDebugSession.event;
  }
  get onDidChangeActiveDebugSession() {
    return this._onDidChangeActiveDebugSession.event;
  }
  get activeDebugSession() {
    var e;
    return (e = this._activeDebugSession) == null ? void 0 : e.api;
  }
  get onDidReceiveDebugSessionCustomEvent() {
    return this._onDidReceiveDebugSessionCustomEvent.event;
  }
  get activeDebugConsole() {
    return this._activeDebugConsole.value;
  }
  constructor(e, t, n, r, s, o, a, l) {
    super(), this._workspaceService = t, this._extensionService = n, this._configurationService = r, this._editorTabs = s, this._variableResolver = o, this._commands = a, this._testing = l, this._debugSessions = /* @__PURE__ */ new Map(), this._debugVisualizationTreeItemIdsCounter = 0, this._debugVisualizationProviders = /* @__PURE__ */ new Map(), this._debugVisualizationTrees = /* @__PURE__ */ new Map(), this._debugVisualizationTreeItemIds = /* @__PURE__ */ new WeakMap(), this._debugVisualizationElements = /* @__PURE__ */ new Map(), this._visualizers = /* @__PURE__ */ new Map(), this._visualizerIdCounter = 0, this._configProviderHandleCounter = 0, this._configProviders = [], this._adapterFactoryHandleCounter = 0, this._adapterFactories = [], this._trackerFactoryHandleCounter = 0, this._trackerFactories = [], this._debugAdapters = /* @__PURE__ */ new Map(), this._debugAdaptersTrackers = /* @__PURE__ */ new Map(), this._onDidStartDebugSession = this._register(new M()), this._onDidTerminateDebugSession = this._register(new M()), this._onDidChangeActiveDebugSession = this._register(new M()), this._onDidReceiveDebugSessionCustomEvent = this._register(new M()), this._debugServiceProxy = e.getProxy(ie.MainThreadDebugService), this._onDidChangeBreakpoints = this._register(new M()), this._onDidChangeActiveStackItem = this._register(new M()), this._activeDebugConsole = new oU(this._debugServiceProxy), this._breakpoints = /* @__PURE__ */ new Map(), this._extensionService.getExtensionRegistry().then((c) => {
      this._register(c.onDidChange((u) => {
        this.registerAllDebugTypes(c);
      })), this.registerAllDebugTypes(c);
    }), this._telemetryProxy = e.getProxy(ie.MainThreadTelemetry);
  }
  async $getVisualizerTreeItem(e, t) {
    var s, o;
    const n = this.hydrateVisualizationContext(t);
    if (!n)
      return;
    const r = await ((o = (s = this._debugVisualizationTrees.get(e)) == null ? void 0 : s.getTreeItem) == null ? void 0 : o.call(s, n));
    return r ? this.convertVisualizerTreeItem(e, r) : void 0;
  }
  registerDebugVisualizationTree(e, t, n) {
    const r = gt.toKey(e.identifier), s = this.extensionVisKey(r, t);
    if (this._debugVisualizationProviders.has(s))
      throw new Error(`A debug visualization provider with id '${t}' is already registered`);
    return this._debugVisualizationTrees.set(s, n), this._debugServiceProxy.$registerDebugVisualizerTree(s, !!n.editItem), Ie(() => {
      this._debugServiceProxy.$unregisterDebugVisualizerTree(s), this._debugVisualizationTrees.delete(t);
    });
  }
  async $getVisualizerTreeItemChildren(e, t) {
    var s, o, a;
    const n = (s = this._debugVisualizationElements.get(t)) == null ? void 0 : s.item;
    if (!n)
      return [];
    const r = await ((a = (o = this._debugVisualizationTrees.get(e)) == null ? void 0 : o.getChildren) == null ? void 0 : a.call(o, n));
    return (r == null ? void 0 : r.map((l) => this.convertVisualizerTreeItem(e, l))) || [];
  }
  async $editVisualizerTreeItem(e, t) {
    var s, o;
    const n = this._debugVisualizationElements.get(e);
    if (!n)
      return;
    const r = await ((o = (s = this._debugVisualizationTrees.get(n.provider)) == null ? void 0 : s.editItem) == null ? void 0 : o.call(s, n.item, t));
    return this.convertVisualizerTreeItem(n.provider, r || n.item);
  }
  $disposeVisualizedTree(e) {
    var r;
    const t = this._debugVisualizationElements.get(e);
    if (!t)
      return;
    const n = [t.children];
    for (const s of n)
      if (s)
        for (const o of s)
          n.push((r = this._debugVisualizationElements.get(o)) == null ? void 0 : r.children), this._debugVisualizationElements.delete(o);
  }
  convertVisualizerTreeItem(e, t) {
    let n = this._debugVisualizationTreeItemIds.get(t);
    return n || (n = this._debugVisualizationTreeItemIdsCounter++, this._debugVisualizationTreeItemIds.set(t, n), this._debugVisualizationElements.set(n, { provider: e, item: t })), S0.from(t, n);
  }
  asDebugSourceUri(e, t) {
    const n = e;
    if (typeof n.sourceReference == "number" && n.sourceReference > 0) {
      let r = `debug:${encodeURIComponent(n.path || "")}`, s = "?";
      return t && (r += `${s}session=${encodeURIComponent(t.id)}`, s = "&"), r += `${s}ref=${n.sourceReference}`, x.parse(r);
    } else {
      if (n.path)
        return x.file(n.path);
      throw new Error(
        "cannot create uri from DAP 'source' object; properties 'path' and 'sourceReference' are both missing."
      );
    }
  }
  registerAllDebugTypes(e) {
    const t = [];
    for (const n of e.getAllExtensionDescriptions())
      if (n.contributes) {
        const r = n.contributes.debuggers;
        if (r && r.length > 0)
          for (const s of r)
            $F(s) && t.push(s.type);
      }
    this._debugServiceProxy.$registerDebugTypes(t);
  }
  get activeStackItem() {
    return this._activeStackItem;
  }
  get onDidChangeActiveStackItem() {
    return this._onDidChangeActiveStackItem.event;
  }
  get onDidChangeBreakpoints() {
    return this._onDidChangeBreakpoints.event;
  }
  get breakpoints() {
    const e = [];
    return this._breakpoints.forEach((t) => e.push(t)), e;
  }
  async $resolveDebugVisualizer(e, t) {
    var a;
    const n = this._visualizers.get(e);
    if (!n)
      throw new Error(`No debug visualizer found with id '${e}'`);
    let { v: r, provider: s, extensionId: o } = n;
    if (r.visualization || (r = await ((a = s.resolveDebugVisualization) == null ? void 0 : a.call(s, r, t)) || r, n.v = r), !r.visualization)
      throw new Error(
        `No visualization returned from resolveDebugVisualization in '${s}'`
      );
    return this.serializeVisualization(o, r.visualization);
  }
  async $executeDebugVisualizerCommand(e) {
    const t = this._visualizers.get(e);
    if (!t)
      throw new Error(`No debug visualizer found with id '${e}'`);
    const n = t.v.visualization;
    n && "command" in n && this._commands.executeCommand(n.command, ...n.arguments || []);
  }
  hydrateVisualizationContext(e) {
    const t = this._debugSessions.get(e.sessionId);
    return t && {
      session: t.api,
      variable: e.variable,
      containerId: e.containerId,
      frameId: e.frameId,
      threadId: e.threadId
    };
  }
  async $provideDebugVisualizers(e, t, n, r) {
    const s = this.hydrateVisualizationContext(n), o = this.extensionVisKey(e, t), a = this._debugVisualizationProviders.get(o);
    if (!s || !a)
      return [];
    const l = await a.provideDebugVisualization(s, r);
    return l ? l.map((c) => {
      const u = ++this._visualizerIdCounter;
      this._visualizers.set(u, { v: c, provider: a, extensionId: e });
      const d = c.iconPath ? this.getIconPathOrClass(c.iconPath) : void 0;
      return {
        id: u,
        name: c.name,
        iconClass: d == null ? void 0 : d.iconClass,
        iconPath: d == null ? void 0 : d.iconPath,
        visualization: this.serializeVisualization(e, c.visualization)
      };
    }) : [];
  }
  $disposeDebugVisualizers(e) {
    for (const t of e)
      this._visualizers.delete(t);
  }
  registerDebugVisualizationProvider(e, t, n) {
    var o, a;
    if (!((a = (o = e.contributes) == null ? void 0 : o.debugVisualizers) != null && a.some((l) => l.id === t)))
      throw new Error(
        `Extensions may only call registerDebugVisualizationProvider() for renderers they contribute (got ${t})`
      );
    const r = gt.toKey(e.identifier), s = this.extensionVisKey(r, t);
    if (this._debugVisualizationProviders.has(s))
      throw new Error(`A debug visualization provider with id '${t}' is already registered`);
    return this._debugVisualizationProviders.set(s, n), this._debugServiceProxy.$registerDebugVisualizer(r, t), Ie(() => {
      this._debugServiceProxy.$unregisterDebugVisualizer(r, t), this._debugVisualizationProviders.delete(t);
    });
  }
  addBreakpoints(e) {
    const t = e.filter((s) => {
      const o = s.id;
      return this._breakpoints.has(o) ? !1 : (this._breakpoints.set(o, s), !0);
    });
    this.fireBreakpointChanges(t, [], []);
    const n = [], r = /* @__PURE__ */ new Map();
    for (const s of t)
      if (s instanceof Ua) {
        let o = r.get(s.location.uri.toString());
        o || (o = {
          type: "sourceMulti",
          uri: s.location.uri,
          lines: []
        }, r.set(s.location.uri.toString(), o), n.push(o)), o.lines.push({
          id: s.id,
          enabled: s.enabled,
          condition: s.condition,
          hitCondition: s.hitCondition,
          logMessage: s.logMessage,
          line: s.location.range.start.line,
          character: s.location.range.start.character,
          mode: s.mode
        });
      } else s instanceof $a && n.push({
        type: "function",
        id: s.id,
        enabled: s.enabled,
        hitCondition: s.hitCondition,
        logMessage: s.logMessage,
        condition: s.condition,
        functionName: s.functionName,
        mode: s.mode
      });
    return this._debugServiceProxy.$registerBreakpoints(n);
  }
  removeBreakpoints(e) {
    const t = e.filter((o) => this._breakpoints.delete(o.id));
    this.fireBreakpointChanges([], t, []);
    const n = t.filter((o) => o instanceof Ua).map((o) => o.id), r = t.filter((o) => o instanceof $a).map((o) => o.id), s = t.filter((o) => o instanceof Xm).map((o) => o.id);
    return this._debugServiceProxy.$unregisterBreakpoints(n, r, s);
  }
  startDebugging(e, t, n) {
    var s, o, a;
    const r = n.testRun && this._testing.getMetadataForRun(n.testRun);
    return this._debugServiceProxy.$startDebugging(e ? e.uri : void 0, t, {
      parentSessionID: n.parentSession ? n.parentSession.id : void 0,
      lifecycleManagedByParent: n.lifecycleManagedByParent,
      repl: n.consoleMode === s_.MergeWithParent ? "mergeWithParent" : "separate",
      noDebug: n.noDebug,
      compact: n.compact,
      suppressSaveBeforeStart: n.suppressSaveBeforeStart,
      testRun: r && {
        runId: r.runId,
        taskId: r.taskId
      },
      suppressDebugStatusbar: n.suppressDebugStatusbar ?? ((s = n.debugUI) == null ? void 0 : s.simple),
      suppressDebugToolbar: n.suppressDebugToolbar ?? ((o = n.debugUI) == null ? void 0 : o.simple),
      suppressDebugView: n.suppressDebugView ?? ((a = n.debugUI) == null ? void 0 : a.simple)
    });
  }
  stopDebugging(e) {
    return this._debugServiceProxy.$stopDebugging(e ? e.id : void 0);
  }
  registerDebugConfigurationProvider(e, t, n) {
    if (!t)
      return new je(() => {
      });
    const r = this._configProviderHandleCounter++;
    return this._configProviders.push({ type: e, handle: r, provider: t }), this._debugServiceProxy.$registerDebugConfigurationProvider(e, n, !!t.provideDebugConfigurations, !!t.resolveDebugConfiguration, !!t.resolveDebugConfigurationWithSubstitutedVariables, r), new je(() => {
      this._configProviders = this._configProviders.filter((s) => s.provider !== t), this._debugServiceProxy.$unregisterDebugConfigurationProvider(r);
    });
  }
  registerDebugAdapterDescriptorFactory(e, t, n) {
    if (!n)
      return new je(() => {
      });
    if (!this.definesDebugType(e, t))
      throw new Error(
        `a DebugAdapterDescriptorFactory can only be registered from the extension that defines the '${t}' debugger.`
      );
    if (this.getAdapterDescriptorFactoryByType(t))
      throw new Error("a DebugAdapterDescriptorFactory can only be registered once per a type.");
    const r = this._adapterFactoryHandleCounter++;
    return this._adapterFactories.push({ type: t, handle: r, factory: n }), this._debugServiceProxy.$registerDebugAdapterDescriptorFactory(t, r), new je(() => {
      this._adapterFactories = this._adapterFactories.filter((s) => s.factory !== n), this._debugServiceProxy.$unregisterDebugAdapterDescriptorFactory(r);
    });
  }
  registerDebugAdapterTrackerFactory(e, t) {
    if (!t)
      return new je(() => {
      });
    const n = this._trackerFactoryHandleCounter++;
    return this._trackerFactories.push({ type: e, handle: n, factory: t }), new je(() => {
      this._trackerFactories = this._trackerFactories.filter((r) => r.factory !== t);
    });
  }
  async $runInTerminal(e, t) {
    return Promise.resolve(void 0);
  }
  async $substituteVariables(e, t) {
    let n;
    const r = await this.getFolder(e);
    return r && (n = {
      uri: r.uri,
      name: r.name,
      index: r.index,
      toResource: () => {
        throw new Error("Not implemented");
      }
    }), (await this._variableResolver.getResolver()).resolveAsync(n, t);
  }
  createDebugAdapter(e, t) {
    if (e instanceof vf)
      return new lU(e.implementation);
  }
  createSignService() {
  }
  async $startDASession(e, t) {
    const n = this, r = await this.getSession(t);
    return this.getAdapterDescriptor(this.getAdapterDescriptorFactoryByType(r.type), r).then((s) => {
      if (!s)
        throw new Error(
          `Couldn't find a debug adapter descriptor for debug type '${r.type}' (extension might have failed to activate)`
        );
      const o = this.createDebugAdapter(s, r);
      if (!o)
        throw new Error(`Couldn't create a debug adapter for type '${r.type}'.`);
      const a = o;
      return this._debugAdapters.set(e, a), this.getDebugAdapterTrackers(r).then((l) => (l && this._debugAdaptersTrackers.set(e, l), a.onMessage(async (c) => {
        if (c.type === "request" && c.command === "handshake") {
          const u = c, d = {
            type: "response",
            seq: 0,
            command: u.command,
            request_seq: u.seq,
            success: !0
          };
          this._signService || (this._signService = this.createSignService());
          try {
            if (this._signService) {
              const f = await this._signService.sign(u.arguments.value);
              d.body = {
                signature: f
              }, a.sendResponse(d);
            } else
              throw new Error("no signer");
          } catch (f) {
            d.success = !1, d.message = f.message, a.sendResponse(d);
          }
        } else {
          l && l.onDidSendMessage && l.onDidSendMessage(c);
          try {
            c = qF(c, !0);
          } catch (u) {
            const d = c.type + "_" + (c.command ?? c.event ?? "");
            throw this._telemetryProxy.$publicLog2("debugProtocolMessageError", { type: d, from: r.type }), u;
          }
          n._debugServiceProxy.$acceptDAMessage(e, c);
        }
      }), a.onError((c) => {
        l && l.onError && l.onError(c), this._debugServiceProxy.$acceptDAError(e, c.name, c.message, c.stack);
      }), a.onExit((c) => {
        l && l.onExit && l.onExit(c ?? void 0, void 0), this._debugServiceProxy.$acceptDAExit(e, c ?? void 0, void 0);
      }), l && l.onWillStartSession && l.onWillStartSession(), a.startSession()));
    });
  }
  $sendDAMessage(e, t) {
    t = zF(t);
    const n = this._debugAdaptersTrackers.get(e);
    n && n.onWillReceiveMessage && n.onWillReceiveMessage(t);
    const r = this._debugAdapters.get(e);
    r == null || r.sendMessage(t);
  }
  $stopDASession(e) {
    const t = this._debugAdaptersTrackers.get(e);
    this._debugAdaptersTrackers.delete(e), t && t.onWillStopSession && t.onWillStopSession();
    const n = this._debugAdapters.get(e);
    return this._debugAdapters.delete(e), n ? n.stopSession() : Promise.resolve(void 0);
  }
  $acceptBreakpointsDelta(e) {
    const t = [], n = [], r = [];
    if (e.added)
      for (const s of e.added) {
        const o = s.id;
        if (o && !this._breakpoints.has(o)) {
          let a;
          if (s.type === "function")
            a = new $a(
              s.functionName,
              s.enabled,
              s.condition,
              s.hitCondition,
              s.logMessage,
              s.mode
            );
          else if (s.type === "data")
            a = new Xm(
              s.label,
              s.dataId,
              s.canPersist,
              s.enabled,
              s.hitCondition,
              s.condition,
              s.logMessage,
              s.mode
            );
          else {
            const l = x.revive(s.uri);
            a = new Ua(new $n(l, new Ke(s.line, s.character)), s.enabled, s.condition, s.hitCondition, s.logMessage, s.mode);
          }
          kN(a, o), this._breakpoints.set(o, a), t.push(a);
        }
      }
    if (e.removed)
      for (const s of e.removed) {
        const o = this._breakpoints.get(s);
        o && (this._breakpoints.delete(s), n.push(o));
      }
    if (e.changed) {
      for (const s of e.changed)
        if (s.id) {
          const o = this._breakpoints.get(s.id);
          if (o) {
            if (o instanceof $a && s.type === "function") {
              const a = o;
              a.enabled = s.enabled, a.condition = s.condition, a.hitCondition = s.hitCondition, a.logMessage = s.logMessage, a.functionName = s.functionName;
            } else if (o instanceof Ua && s.type === "source") {
              const a = o;
              a.enabled = s.enabled, a.condition = s.condition, a.hitCondition = s.hitCondition, a.logMessage = s.logMessage, a.location = new $n(x.revive(s.uri), new Ke(s.line, s.character));
            }
            r.push(o);
          }
        }
    }
    this.fireBreakpointChanges(t, n, r);
  }
  async $acceptStackFrameFocus(e) {
    let t;
    if (e) {
      const n = await this.getSession(e.sessionId);
      e.kind === "thread" ? t = new b5(n.api, e.threadId) : t = new w5(n.api, e.threadId, e.frameId);
    }
    this._activeStackItem = t, this._onDidChangeActiveStackItem.fire(this._activeStackItem);
  }
  $provideDebugConfigurations(e, t, n) {
    return Mi(async () => {
      const r = this.getConfigProviderByHandle(e);
      if (!r)
        throw new Error("no DebugConfigurationProvider found");
      if (!r.provideDebugConfigurations)
        throw new Error("DebugConfigurationProvider has no method provideDebugConfigurations");
      const s = await this.getFolder(t);
      return r.provideDebugConfigurations(s, n);
    }).then((r) => {
      if (!r)
        throw new Error(
          "nothing returned from DebugConfigurationProvider.provideDebugConfigurations"
        );
      return r;
    });
  }
  $resolveDebugConfiguration(e, t, n, r) {
    return Mi(async () => {
      const s = this.getConfigProviderByHandle(e);
      if (!s)
        throw new Error("no DebugConfigurationProvider found");
      if (!s.resolveDebugConfiguration)
        throw new Error("DebugConfigurationProvider has no method resolveDebugConfiguration");
      const o = await this.getFolder(t);
      return s.resolveDebugConfiguration(o, n, r);
    });
  }
  $resolveDebugConfigurationWithSubstitutedVariables(e, t, n, r) {
    return Mi(async () => {
      const s = this.getConfigProviderByHandle(e);
      if (!s)
        throw new Error("no DebugConfigurationProvider found");
      if (!s.resolveDebugConfigurationWithSubstitutedVariables)
        throw new Error(
          "DebugConfigurationProvider has no method resolveDebugConfigurationWithSubstitutedVariables"
        );
      const o = await this.getFolder(t);
      return s.resolveDebugConfigurationWithSubstitutedVariables(o, n, r);
    });
  }
  async $provideDebugAdapter(e, t) {
    const n = this.getAdapterDescriptorFactoryByHandle(e);
    if (!n)
      return Promise.reject(new Error("no adapter descriptor factory found for handle"));
    const r = await this.getSession(t);
    return this.getAdapterDescriptor(n, r).then((s) => {
      if (!s)
        throw new Error(
          `Couldn't find a debug adapter descriptor for debug type '${r.type}'`
        );
      return this.convertToDto(s);
    });
  }
  async $acceptDebugSessionStarted(e) {
    const t = await this.getSession(e);
    this._onDidStartDebugSession.fire(t.api);
  }
  async $acceptDebugSessionTerminated(e) {
    const t = await this.getSession(e);
    t && (this._onDidTerminateDebugSession.fire(t.api), this._debugSessions.delete(t.id));
  }
  async $acceptDebugSessionActiveChanged(e) {
    var t;
    this._activeDebugSession = e ? await this.getSession(e) : void 0, this._onDidChangeActiveDebugSession.fire((t = this._activeDebugSession) == null ? void 0 : t.api);
  }
  async $acceptDebugSessionNameChanged(e, t) {
    const n = await this.getSession(e);
    n == null || n._acceptNameChanged(t);
  }
  async $acceptDebugSessionCustomEvent(e, t) {
    const r = {
      session: (await this.getSession(e)).api,
      event: t.event,
      body: t.body
    };
    this._onDidReceiveDebugSessionCustomEvent.fire(r);
  }
  convertToDto(e) {
    if (e instanceof Zm)
      return this.convertExecutableToDto(e);
    if (e instanceof _f)
      return this.convertServerToDto(e);
    if (e instanceof e_)
      return this.convertPipeServerToDto(e);
    if (e instanceof vf)
      return this.convertImplementationToDto(e);
    throw new Error("convertToDto unexpected type");
  }
  convertExecutableToDto(e) {
    return {
      type: "executable",
      command: e.command,
      args: e.args,
      options: e.options
    };
  }
  convertServerToDto(e) {
    return {
      type: "server",
      port: e.port,
      host: e.host
    };
  }
  convertPipeServerToDto(e) {
    return {
      type: "pipeServer",
      path: e.path
    };
  }
  convertImplementationToDto(e) {
    return {
      type: "implementation"
    };
  }
  getAdapterDescriptorFactoryByType(e) {
    const t = this._adapterFactories.filter((n) => n.type === e);
    if (t.length > 0)
      return t[0].factory;
  }
  getAdapterDescriptorFactoryByHandle(e) {
    const t = this._adapterFactories.filter((n) => n.handle === e);
    if (t.length > 0)
      return t[0].factory;
  }
  getConfigProviderByHandle(e) {
    const t = this._configProviders.filter((n) => n.handle === e);
    if (t.length > 0)
      return t[0].provider;
  }
  definesDebugType(e, t) {
    if (e.contributes) {
      const n = e.contributes.debuggers;
      if (n && n.length > 0) {
        for (const r of n)
          if (r.label && r.type && r.type === t)
            return !0;
      }
    }
    return !1;
  }
  getDebugAdapterTrackers(e) {
    const n = e.configuration.type, r = this._trackerFactories.filter((s) => s.type === n || s.type === "*").map(
      (s) => Mi(() => s.factory.createDebugAdapterTracker(e.api)).then((o) => o, (o) => null)
    );
    return Promise.race([
      Promise.all(r).then((s) => {
        const o = Xt(s);
        if (o.length > 0)
          return new aU(o);
      }),
      new Promise((s) => setTimeout(() => s(void 0), 1e3))
    ]).catch((s) => {
    });
  }
  async getAdapterDescriptor(e, t) {
    const n = t.configuration.debugServer;
    if (typeof n == "number")
      return Promise.resolve(new _f(n));
    if (e) {
      const s = await this._extensionService.getExtensionRegistry();
      return Mi(() => e.createDebugAdapterDescriptor(t.api, this.daExecutableFromPackage(t, s))).then((o) => {
        if (o)
          return o;
      });
    }
    const r = await this._extensionService.getExtensionRegistry();
    return Promise.resolve(this.daExecutableFromPackage(t, r));
  }
  daExecutableFromPackage(e, t) {
  }
  fireBreakpointChanges(e, t, n) {
    (e.length > 0 || t.length > 0 || n.length > 0) && this._onDidChangeBreakpoints.fire(Object.freeze({
      added: e,
      removed: t,
      changed: n
    }));
  }
  async getSession(e) {
    if (e)
      if (typeof e == "string") {
        const t = this._debugSessions.get(e);
        if (t)
          return t;
      } else {
        let t = this._debugSessions.get(e.id);
        if (!t) {
          const n = await this.getFolder(e.folderUri), r = e.parent ? this._debugSessions.get(e.parent) : void 0;
          t = new sU(
            this._debugServiceProxy,
            e.id,
            e.type,
            e.name,
            n,
            e.configuration,
            r == null ? void 0 : r.api
          ), this._debugSessions.set(t.id, t), this._debugServiceProxy.$sessionCached(t.id);
        }
        return t;
      }
    throw new Error("cannot find session");
  }
  getFolder(e) {
    if (e) {
      const t = x.revive(e);
      return this._workspaceService.resolveWorkspaceFolder(t);
    }
    return Promise.resolve(void 0);
  }
  extensionVisKey(e, t) {
    return `${e}\0${t}`;
  }
  serializeVisualization(e, t) {
    if (t) {
      if ("title" in t && "command" in t)
        return { type: ym.Command };
      if ("treeId" in t)
        return { type: ym.Tree, id: `${e}\0${t.treeId}` };
      throw new Error("Unsupported debug visualization type");
    }
  }
  getIconPathOrClass(e) {
    const t = this.getIconUris(e);
    let n, r;
    return "id" in t ? r = ci.asClassName(t) : n = t, {
      iconPath: n,
      iconClass: r
    };
  }
  getIconUris(e) {
    if (e instanceof Ji)
      return { id: e.id };
    const t = typeof e == "object" && "dark" in e ? e.dark : e, n = typeof e == "object" && "light" in e ? e.light : e;
    return {
      dark: typeof t == "string" ? x.file(t) : t,
      light: typeof n == "string" ? x.file(n) : n
    };
  }
};
Px = z([
  O(0, tt),
  O(1, Zs),
  O(2, na),
  O(3, eo),
  O(4, Mp),
  O(5, BS),
  O(6, ic),
  O(7, Cv)
], Px);
class sU {
  constructor(e, t, n, r, s, o, a) {
    this._debugServiceProxy = e, this._id = t, this._type = n, this._name = r, this._workspaceFolder = s, this._configuration = o, this._parentSession = a;
  }
  get api() {
    const e = this;
    return this.apiSession ?? (this.apiSession = Object.freeze({
      id: e._id,
      type: e._type,
      get name() {
        return e._name;
      },
      set name(t) {
        e._name = t, e._debugServiceProxy.$setDebugSessionName(e._id, t);
      },
      parentSession: e._parentSession,
      workspaceFolder: e._workspaceFolder,
      configuration: e._configuration,
      customRequest(t, n) {
        return e._debugServiceProxy.$customDebugAdapterRequest(e._id, t, n);
      },
      getDebugProtocolBreakpoint(t) {
        return e._debugServiceProxy.$getDebugProtocolBreakpoint(e._id, t.id);
      }
    }));
  }
  get id() {
    return this._id;
  }
  get type() {
    return this._type;
  }
  _acceptNameChanged(e) {
    this._name = e;
  }
  get configuration() {
    return this._configuration;
  }
}
class oU {
  constructor(e) {
    this.value = Object.freeze({
      append(t) {
        e.$appendDebugConsole(t);
      },
      appendLine(t) {
        this.append(t + `
`);
      }
    });
  }
}
class aU {
  constructor(e) {
    this.trackers = e;
  }
  onWillStartSession() {
    this.trackers.forEach((e) => e.onWillStartSession ? e.onWillStartSession() : void 0);
  }
  onWillReceiveMessage(e) {
    this.trackers.forEach((t) => t.onWillReceiveMessage ? t.onWillReceiveMessage(e) : void 0);
  }
  onDidSendMessage(e) {
    this.trackers.forEach((t) => t.onDidSendMessage ? t.onDidSendMessage(e) : void 0);
  }
  onWillStopSession() {
    this.trackers.forEach((e) => e.onWillStopSession ? e.onWillStopSession() : void 0);
  }
  onError(e) {
    this.trackers.forEach((t) => t.onError ? t.onError(e) : void 0);
  }
  onExit(e, t) {
    this.trackers.forEach((n) => n.onExit ? n.onExit(e, t) : void 0);
  }
}
class lU extends UF {
  constructor(e) {
    super(), this.implementation = e, e.onDidSendMessage((t) => {
      this.acceptMessage(t);
    });
  }
  startSession() {
    return Promise.resolve(void 0);
  }
  sendMessage(e) {
    this.implementation.handleMessage(e);
  }
  stopSession() {
    return this.implementation.dispose(), Promise.resolve(void 0);
  }
}
let Ax = class extends Px {
  constructor(e, t, n, r, s, o, a, l) {
    super(e, t, n, r, s, o, a, l);
  }
};
Ax = z([
  O(0, tt),
  O(1, Zs),
  O(2, na),
  O(3, eo),
  O(4, Mp),
  O(5, BS),
  O(6, ic),
  O(7, Cv)
], Ax);
function cU(i) {
  return "uri" in i && "ranges" in i && "preview" in i;
}
function uU(i) {
  return i.folderOptions.map((e) => ({
    folder: e.folder,
    excludes: e.excludes.map((t) => typeof t == "string" ? t : t.pattern),
    includes: e.includes,
    useGlobalIgnoreFiles: e.useIgnoreFiles.global,
    useIgnoreFiles: e.useIgnoreFiles.local,
    useParentIgnoreFiles: e.useIgnoreFiles.parent,
    followSymlinks: e.followSymlinks,
    maxResults: i.maxResults,
    session: i.session
  }));
}
class VA {
  constructor(e) {
    this.provider = e;
  }
  provideFileSearchResults(e, t, n) {
    return (async () => {
      const s = uU(t);
      return Promise.all(s.map((o) => this.provider.provideFileSearchResults({ pattern: e }, o, n)));
    })().then((s) => Xt(s).flat());
  }
}
function dU(i) {
  return i.folderOptions.map((e) => ({
    folder: e.folder,
    excludes: e.excludes.map((t) => typeof t == "string" ? t : t.pattern),
    includes: e.includes,
    useGlobalIgnoreFiles: e.useIgnoreFiles.global,
    useIgnoreFiles: e.useIgnoreFiles.local,
    useParentIgnoreFiles: e.useIgnoreFiles.parent,
    followSymlinks: e.followSymlinks,
    maxResults: i.maxResults,
    previewOptions: hU(i.previewOptions),
    maxFileSize: i.maxFileSize,
    encoding: e.encoding,
    afterContext: i.surroundingContext,
    beforeContext: i.surroundingContext
  }));
}
function hU(i) {
  return {
    matchLines: (i == null ? void 0 : i.matchLines) ?? C0.matchLines,
    charsPerLine: (i == null ? void 0 : i.charsPerLine) ?? C0.charsPerLine
  };
}
function fU(i) {
  if (cU(i)) {
    const e = Xn(i.ranges).map((t, n) => {
      const s = Xn(i.preview.matches)[n];
      return { sourceRange: t, previewRange: s };
    });
    return new Fo(i.uri, e, i.preview.text);
  } else
    return new kS(i.uri, i.text, i.lineNumber);
}
class pU {
  constructor(e) {
    this.provider = e;
  }
  provideTextSearchResults(e, t, n, r) {
    const s = (l) => {
      gU(l) && n.report(fU(l));
    };
    return (async () => Xt(await Promise.all(dU(t).map(
      (l) => this.provider.provideTextSearchResults(e, l, { report: (c) => s(c) }, r)
    ))).reduce((l, c) => ({ limitHit: l.limitHit || c.limitHit }), { limitHit: !1 }))().then((l) => ({
      limitHit: l.limitHit,
      message: Xt(Xn(l.message))
    }));
  }
}
function gU(i) {
  if (mU(i)) {
    if (Array.isArray(i.ranges)) {
      if (!Array.isArray(i.preview.matches))
        return console.warn("INVALID - A text search provider match's`ranges` and`matches` properties must have the same type."), !1;
      if (i.preview.matches.length !== i.ranges.length)
        return console.warn("INVALID - A text search provider match's`ranges` and`matches` properties must have the same length."), !1;
    } else if (Array.isArray(i.preview.matches))
      return console.warn("INVALID - A text search provider match's`ranges` and`matches` properties must have the same length."), !1;
  }
  return !0;
}
function mU(i) {
  return !!i.preview;
}
class zA extends Yr {
  constructor(e, t, n = () => !1) {
    const r = new fP(n, () => !1);
    super(r);
    const s = new mi();
    e.forEach((o, a) => {
      const l = o.folder.with({ query: "", fragment: "" });
      s.has(l) ? s.get(l).push({ fq: o, i: a }) : s.set(l, [{ fq: o, i: a }]);
    }), s.forEach((o, a) => {
      const l = /* @__PURE__ */ new Map();
      for (const c of o) {
        const u = t(c.fq, c.i);
        l.set(this.encodeKey(c.fq.folder), u);
      }
      super.set(a, l);
    });
  }
  findQueryFragmentAwareSubstr(e) {
    const t = super.findSubstr(e.with({ query: "", fragment: "" }));
    if (!t)
      return;
    const n = this.encodeKey(e);
    return t.get(n);
  }
  forEachFolderQueryInfo(e) {
    return this.forEach((t) => t.forEach((n) => e(n)));
  }
  encodeKey(e) {
    let t = "";
    return e.query && (t += e.query), e.fragment && (t += "#" + e.fragment), t;
  }
}
class _U {
  constructor(e, t, n) {
    this.config = e, this.provider = t, this.sessionLifecycle = n, this.isLimitHit = !1, this.resultCount = 0, this.isCanceled = !1, this.filePattern = e.filePattern, this.includePattern = e.includePattern && Wu(e.includePattern), this.maxResults = e.maxResults || void 0, this.exists = e.exists, this.activeCancellationTokens = /* @__PURE__ */ new Set(), this.globalExcludePattern = e.excludePattern && Wu(e.excludePattern);
  }
  cancel() {
    this.isCanceled = !0, this.activeCancellationTokens.forEach((e) => e.cancel()), this.activeCancellationTokens = /* @__PURE__ */ new Set();
  }
  search(e) {
    const t = this.config.folderQueries || [];
    return new Promise((n, r) => {
      const s = (o) => {
        this.resultCount++, e(o);
      };
      if (this.isCanceled)
        return n({ limitHit: this.isLimitHit });
      this.config.extraFileResources && this.config.extraFileResources.forEach((o) => {
        const a = o.toString(), l = yn(a);
        this.globalExcludePattern && this.globalExcludePattern(a, l) || this.matchFile(s, { base: o, basename: l });
      }), this.doSearch(t, s).then((o) => {
        n({
          limitHit: this.isLimitHit,
          stats: o || void 0
        });
      }, (o) => {
        r(new Error(wd(o)));
      });
    });
  }
  async doSearch(e, t) {
    var u, d;
    const n = new Lt(), r = e.map((f) => this.getSearchOptionsForFolder(f)), s = this.provider instanceof VA ? (u = this.sessionLifecycle) == null ? void 0 : u.tokenSource.token : (d = this.sessionLifecycle) == null ? void 0 : d.obj, o = {
      folderOptions: r,
      maxResults: this.config.maxResults ?? nA,
      session: s
    }, a = (f) => {
      const p = new aA(this.config, f), v = !p.hasSiblingExcludeClauses();
      return { queryTester: p, noSiblingsClauses: v, folder: f.folder, tree: this.initDirectoryTree() };
    }, l = new zA(e, a);
    let c;
    try {
      this.activeCancellationTokens.add(n), c = Js.create();
      const f = await this.provider.provideFileSearchResults(this.config.filePattern || "", o, n.token), p = c.elapsed(), v = Js.create();
      return this.isCanceled && !this.isLimitHit || (f && f.forEach((_) => {
        const m = l.findQueryFragmentAwareSubstr(_), E = pt.relative(m.folder.path, _.path);
        if (m.noSiblingsClauses) {
          const S = yn(_.path);
          this.matchFile(t, { base: m.folder, relativePath: E, basename: S });
          return;
        }
        this.addDirectoryEntries(m.tree, m.folder, E, t);
      }), this.isCanceled && !this.isLimitHit) ? null : (l.forEachFolderQueryInfo((_) => {
        this.matchDirectoryTree(_.tree, _.queryTester, t);
      }), {
        providerTime: p,
        postProcessTime: v.elapsed()
      });
    } finally {
      n.dispose(), this.activeCancellationTokens.delete(n);
    }
  }
  getSearchOptionsForFolder(e) {
    var s;
    const t = du(this.config.includePattern, e.includePattern);
    let n = (s = e.excludePattern) == null ? void 0 : s.map((o) => ({
      folder: o.folder,
      patterns: du(this.config.excludePattern, o.pattern)
    }));
    n != null && n.length || (n = [{
      folder: void 0,
      patterns: du(this.config.excludePattern, void 0)
    }]);
    const r = cA(n);
    return {
      folder: e.folder,
      excludes: r,
      includes: t,
      useIgnoreFiles: {
        local: !e.disregardIgnoreFiles,
        parent: !e.disregardParentIgnoreFiles,
        global: !e.disregardGlobalIgnoreFiles
      },
      followSymlinks: !e.ignoreSymlinks
    };
  }
  initDirectoryTree() {
    const e = {
      rootEntries: [],
      pathToEntries: /* @__PURE__ */ Object.create(null)
    };
    return e.pathToEntries["."] = e.rootEntries, e;
  }
  addDirectoryEntries({ pathToEntries: e }, t, n, r) {
    if (n === this.filePattern) {
      const o = yn(this.filePattern);
      this.matchFile(r, { base: t, relativePath: this.filePattern, basename: o });
    }
    function s(o) {
      const a = yn(o), l = Qc(o);
      let c = e[l];
      c || (c = e[l] = [], s(l)), c.push({
        base: t,
        relativePath: o,
        basename: a
      });
    }
    s(n);
  }
  matchDirectoryTree({ rootEntries: e, pathToEntries: t }, n, r) {
    const s = this, o = this.filePattern;
    function a(l) {
      const c = SM(() => l.map((u) => u.basename));
      for (let u = 0, d = l.length; u < d; u++) {
        const f = l[u], { relativePath: p, basename: v } = f;
        if (n.matchesExcludesSync(p, v, o !== v ? c : void 0))
          continue;
        const _ = t[p];
        if (_)
          a(_);
        else {
          if (p === o)
            continue;
          s.matchFile(r, f);
        }
        if (s.isLimitHit)
          break;
      }
    }
    a(e);
  }
  matchFile(e, t) {
    (!this.includePattern || t.relativePath && this.includePattern(t.relativePath, t.basename)) && ((this.exists || this.maxResults && this.resultCount >= this.maxResults) && (this.isLimitHit = !0, this.cancel()), this.isLimitHit || e(t));
  }
}
class vU {
  constructor() {
    this._obj = new Object(), this.tokenSource = new Lt();
  }
  get obj() {
    if (this._obj)
      return this._obj;
    throw new Error("Session object has been dereferenced.");
  }
  cancel() {
    this.tokenSource.cancel(), this._obj = void 0;
  }
}
const M1 = class M1 {
  constructor() {
    this.sessions = /* @__PURE__ */ new Map();
  }
  fileSearch(e, t, n, r) {
    const s = this.getSessionTokenSource(e.cacheKey), o = new _U(e, t, s);
    let a = 0;
    const l = (c) => {
      a += c.length, n(c.map((u) => this.rawMatchToSearchItem(u)));
    };
    return this.doSearch(o, M1.BATCH_SIZE, l, r).then((c) => ({
      limitHit: c.limitHit,
      stats: c.stats ? {
        fromCache: !1,
        type: "fileSearchProvider",
        resultCount: a,
        detailStats: c.stats
      } : void 0,
      messages: []
    }));
  }
  clearCache(e) {
    var t;
    (t = this.sessions.get(e)) == null || t.cancel(), this.sessions.delete(e);
  }
  getSessionTokenSource(e) {
    if (e)
      return this.sessions.has(e) || this.sessions.set(e, new vU()), this.sessions.get(e);
  }
  rawMatchToSearchItem(e) {
    return e.relativePath ? {
      resource: Ei(e.base, e.relativePath)
    } : {
      resource: e.base
    };
  }
  doSearch(e, t, n, r) {
    const s = r.onCancellationRequested(() => {
      e.cancel();
    }), o = (l) => {
      l && (a.push(l), t > 0 && a.length >= t && (n(a), a = []));
    };
    let a = [];
    return e.search(o).then((l) => (a.length && n(a), s.dispose(), l), (l) => (a.length && n(a), s.dispose(), Promise.reject(l)));
  }
};
M1.BATCH_SIZE = 512;
let Rx = M1;
class o4 {
  constructor(e, t, n) {
    this.queryProviderPair = e, this.fileUtils = t, this.processType = n, this.collector = null, this.isLimitHit = !1, this.resultCount = 0;
  }
  get query() {
    return this.queryProviderPair.query;
  }
  search(e, t, n) {
    const r = this.query.folderQueries || [], s = new Lt(t);
    return new Promise((o, a) => {
      this.collector = new bU(e);
      let l = !1;
      const c = (u, d) => {
        if (!(u instanceof I0) && !l && !this.isLimitHit) {
          const f = this.resultSize(u);
          u instanceof Fo && typeof this.query.maxResults == "number" && this.resultCount + f > this.query.maxResults && (this.isLimitHit = !0, l = !0, s.cancel(), u = this.trimResultToSize(u, this.query.maxResults - this.resultCount));
          const p = this.resultSize(u);
          this.resultCount += p;
          const v = u instanceof Fo;
          (p > 0 || !v) && this.collector.add(u, d);
        }
      };
      this.doSearch(r, c, s.token, n).then((u) => {
        s.dispose(), this.collector.flush(), o({
          limitHit: this.isLimitHit || (u == null ? void 0 : u.limitHit),
          messages: this.getMessagesFromResults(u),
          stats: {
            type: this.processType
          }
        });
      }, (u) => {
        s.dispose();
        const d = wd(u);
        a(new Error(d));
      });
    });
  }
  getMessagesFromResults(e) {
    return e != null && e.message ? Array.isArray(e.message) ? e.message : [e.message] : [];
  }
  resultSize(e) {
    return e instanceof Fo ? Array.isArray(e.ranges) ? e.ranges.length : 1 : 0;
  }
  trimResultToSize(e, t) {
    return new Fo(e.uri, e.ranges.slice(0, t), e.previewText);
  }
  async doSearch(e, t, n, r) {
    const s = new zA(e, (d, f) => ({ queryTester: new aA(this.query, d), folder: d.folder, folderIdx: f }), () => !0), o = [], a = {
      report: (d) => {
        if (d instanceof I0)
          r == null || r(d);
        else {
          if (d.uri === void 0)
            throw Error("Text search result URI is undefined. Please check provider implementation.");
          const f = s.findQueryFragmentAwareSubstr(d.uri), p = f.folder.scheme === fe.file ? EM(() => this.fileUtils.readdir(Z1(d.uri))) : void 0, v = rP(f.folder, d.uri);
          if (v) {
            const _ = f.queryTester.includedInQuery(v, yn(v), p);
            Go(_) ? o.push(_.then((m) => {
              m && t(d, f.folderIdx);
            })) : _ && t(d, f.folderIdx);
          }
        }
      }
    }, c = {
      folderOptions: e.map((d) => this.getSearchOptionsForFolder(d)),
      maxFileSize: this.query.maxFileSize,
      maxResults: this.query.maxResults ?? nA,
      previewOptions: this.query.previewOptions ?? C0,
      surroundingContext: this.query.surroundingContext ?? 0
    };
    "usePCRE2" in this.query && (c.usePCRE2 = this.query.usePCRE2);
    let u;
    return this.queryProviderPair.query.type === yl.aiText ? u = await this.queryProviderPair.provider.provideAITextSearchResults(this.queryProviderPair.query.contentPattern, c, a, n) : u = await this.queryProviderPair.provider.provideTextSearchResults(wU(this.queryProviderPair.query.contentPattern), c, a, n), o.length && await Promise.all(o), u;
  }
  getSearchOptionsForFolder(e) {
    var o;
    const t = du(this.query.includePattern, e.includePattern);
    let n = (o = e.excludePattern) == null ? void 0 : o.map((a) => ({
      folder: a.folder,
      patterns: du(this.query.excludePattern, a.pattern)
    }));
    (!n || n.length === 0) && (n = [{
      folder: void 0,
      patterns: du(this.query.excludePattern, void 0)
    }]);
    const r = cA(n);
    return {
      folder: x.from(e.folder),
      excludes: r,
      includes: t,
      useIgnoreFiles: {
        local: !e.disregardIgnoreFiles,
        parent: !e.disregardParentIgnoreFiles,
        global: !e.disregardGlobalIgnoreFiles
      },
      followSymlinks: !e.ignoreSymlinks,
      encoding: (e.fileEncoding && this.fileUtils.toCanonicalName(e.fileEncoding)) ?? ""
    };
  }
}
function wU(i) {
  return {
    isCaseSensitive: i.isCaseSensitive || !1,
    isRegExp: i.isRegExp || !1,
    isWordMatch: i.isWordMatch || !1,
    isMultiline: i.isMultiline || !1,
    pattern: i.pattern
  };
}
class bU {
  constructor(e) {
    this._onResult = e, this._currentFolderIdx = -1, this._currentFileMatch = null, this._batchedCollector = new Lx(512, (t) => this.sendItems(t));
  }
  add(e, t) {
    this._currentFileMatch && (this._currentFolderIdx !== t || !Kc(this._currentUri, e.uri)) && (this.pushToCollector(), this._currentFileMatch = null), this._currentFileMatch || (this._currentFolderIdx = t, this._currentFileMatch = {
      resource: e.uri,
      results: []
    }), this._currentFileMatch.results.push(yU(e));
  }
  pushToCollector() {
    const e = this._currentFileMatch && this._currentFileMatch.results ? this._currentFileMatch.results.length : 0;
    this._batchedCollector.addItem(this._currentFileMatch, e);
  }
  flush() {
    this.pushToCollector(), this._batchedCollector.flush();
  }
  sendItems(e) {
    this._onResult(e);
  }
}
function yU(i) {
  return i instanceof Fo ? {
    previewText: i.previewText,
    rangeLocations: i.ranges.map((e) => ({
      preview: {
        startLineNumber: e.previewRange.start.line,
        startColumn: e.previewRange.start.character,
        endLineNumber: e.previewRange.end.line,
        endColumn: e.previewRange.end.character
      },
      source: {
        startLineNumber: e.sourceRange.start.line,
        startColumn: e.sourceRange.start.character,
        endLineNumber: e.sourceRange.end.line,
        endColumn: e.sourceRange.end.character
      }
    }))
  } : {
    text: i.text,
    lineNumber: i.lineNumber
  };
}
const qc = class qc {
  constructor(e, t) {
    this.maxBatchSize = e, this.cb = t, this.totalNumberCompleted = 0, this.batch = [], this.batchSize = 0;
  }
  addItem(e, t) {
    e && this.addItemToBatch(e, t);
  }
  addItems(e, t) {
    e && this.addItemsToBatch(e, t);
  }
  addItemToBatch(e, t) {
    this.batch.push(e), this.batchSize += t, this.onUpdate();
  }
  addItemsToBatch(e, t) {
    this.batch = this.batch.concat(e), this.batchSize += t, this.onUpdate();
  }
  onUpdate() {
    this.totalNumberCompleted < qc.START_BATCH_AFTER_COUNT ? this.flush() : this.batchSize >= this.maxBatchSize ? this.flush() : this.timeoutHandle || (this.timeoutHandle = setTimeout(() => {
      this.flush();
    }, qc.TIMEOUT));
  }
  flush() {
    this.batchSize && (this.totalNumberCompleted += this.batchSize, this.cb(this.batch), this.batch = [], this.batchSize = 0, this.timeoutHandle && (clearTimeout(this.timeoutHandle), this.timeoutHandle = void 0));
  }
};
qc.TIMEOUT = 4e3, qc.START_BATCH_AFTER_COUNT = 50;
let Lx = qc;
const qA = me("IExtHostSearch");
let Nx = class {
  constructor(e, t, n) {
    this.extHostRpc = e, this._uriTransformer = t, this._logService = n, this._proxy = this.extHostRpc.getProxy(ie.MainThreadSearch), this._handlePool = 0, this._textSearchProvider = /* @__PURE__ */ new Map(), this._textSearchUsedSchemes = /* @__PURE__ */ new Set(), this._aiTextSearchProvider = /* @__PURE__ */ new Map(), this._aiTextSearchUsedSchemes = /* @__PURE__ */ new Set(), this._fileSearchProvider = /* @__PURE__ */ new Map(), this._fileSearchUsedSchemes = /* @__PURE__ */ new Set(), this._fileSearchManager = new Rx();
  }
  _transformScheme(e) {
    return this._uriTransformer.transformOutgoingScheme(e);
  }
  registerTextSearchProviderOld(e, t) {
    if (this._textSearchUsedSchemes.has(e))
      throw new Error(`a text search provider for the scheme '${e}' is already registered`);
    this._textSearchUsedSchemes.add(e);
    const n = this._handlePool++;
    return this._textSearchProvider.set(n, new pU(t)), this._proxy.$registerTextSearchProvider(n, this._transformScheme(e)), Ie(() => {
      this._textSearchUsedSchemes.delete(e), this._textSearchProvider.delete(n), this._proxy.$unregisterProvider(n);
    });
  }
  registerTextSearchProvider(e, t) {
    if (this._textSearchUsedSchemes.has(e))
      throw new Error(`a text search provider for the scheme '${e}' is already registered`);
    this._textSearchUsedSchemes.add(e);
    const n = this._handlePool++;
    return this._textSearchProvider.set(n, t), this._proxy.$registerTextSearchProvider(n, this._transformScheme(e)), Ie(() => {
      this._textSearchUsedSchemes.delete(e), this._textSearchProvider.delete(n), this._proxy.$unregisterProvider(n);
    });
  }
  registerAITextSearchProvider(e, t) {
    if (this._aiTextSearchUsedSchemes.has(e))
      throw new Error(
        `an AI text search provider for the scheme '${e}'is already registered`
      );
    this._aiTextSearchUsedSchemes.add(e);
    const n = this._handlePool++;
    return this._aiTextSearchProvider.set(n, t), this._proxy.$registerAITextSearchProvider(n, this._transformScheme(e)), Ie(() => {
      this._aiTextSearchUsedSchemes.delete(e), this._aiTextSearchProvider.delete(n), this._proxy.$unregisterProvider(n);
    });
  }
  registerFileSearchProviderOld(e, t) {
    if (this._fileSearchUsedSchemes.has(e))
      throw new Error(`a file search provider for the scheme '${e}' is already registered`);
    this._fileSearchUsedSchemes.add(e);
    const n = this._handlePool++;
    return this._fileSearchProvider.set(n, new VA(t)), this._proxy.$registerFileSearchProvider(n, this._transformScheme(e)), Ie(() => {
      this._fileSearchUsedSchemes.delete(e), this._fileSearchProvider.delete(n), this._proxy.$unregisterProvider(n);
    });
  }
  registerFileSearchProvider(e, t) {
    if (this._fileSearchUsedSchemes.has(e))
      throw new Error(`a file search provider for the scheme '${e}' is already registered`);
    this._fileSearchUsedSchemes.add(e);
    const n = this._handlePool++;
    return this._fileSearchProvider.set(n, t), this._proxy.$registerFileSearchProvider(n, this._transformScheme(e)), Ie(() => {
      this._fileSearchUsedSchemes.delete(e), this._fileSearchProvider.delete(n), this._proxy.$unregisterProvider(n);
    });
  }
  $provideFileSearchResults(e, t, n, r) {
    const s = fw(n), o = this._fileSearchProvider.get(e);
    if (o)
      return this._fileSearchManager.fileSearch(s, o, (a) => {
        this._proxy.$handleFileMatch(e, t, a.map((l) => l.resource));
      }, r);
    throw new Error("unknown provider: " + e);
  }
  async doInternalFileSearchWithCustomCallback(e, t, n) {
    return { messages: [] };
  }
  $clearCache(e) {
    return this._fileSearchManager.clearCache(e), Promise.resolve(void 0);
  }
  $provideTextSearchResults(e, t, n, r) {
    const s = this._textSearchProvider.get(e);
    if (!s || !s.provideTextSearchResults)
      throw new Error(`Unknown Text Search Provider ${e}`);
    const o = fw(n);
    return this.createTextSearchManager(o, s).search((l) => this._proxy.$handleTextMatch(e, t, l), r);
  }
  $provideAITextSearchResults(e, t, n, r) {
    const s = this._aiTextSearchProvider.get(e);
    if (!s || !s.provideAITextSearchResults)
      throw new Error(`Unknown AI Text Search Provider ${e}`);
    const o = fw(n);
    return this.createAITextSearchManager(o, s).search((l) => this._proxy.$handleTextMatch(e, t, l), r, (l) => this._proxy.$handleKeywordResult(e, t, l));
  }
  $enableExtensionHostSearch() {
  }
  async $getAIName(e) {
    const t = this._aiTextSearchProvider.get(e);
    if (!(!t || !t.provideAITextSearchResults))
      return t.name ?? "AI";
  }
  createTextSearchManager(e, t) {
    return new o4({ query: e, provider: t }, {
      readdir: (n) => Promise.resolve([]),
      toCanonicalName: (n) => n
    }, "textSearchProvider");
  }
  createAITextSearchManager(e, t) {
    return new o4({ query: e, provider: t }, {
      readdir: (n) => Promise.resolve([]),
      toCanonicalName: (n) => n
    }, "aiTextSearchProvider");
  }
};
Nx = z([
  O(0, tt),
  O(1, ev),
  O(2, ot)
], Nx);
function fw(i) {
  return {
    ...i,
    folderQueries: i.folderQueries && i.folderQueries.map(xU),
    extraFileResources: i.extraFileResources && i.extraFileResources.map((e) => x.revive(e))
  };
}
function xU(i) {
  return Wi(i);
}
const jA = me("IExtHostTerminalShellIntegration");
let Mx = class extends xe {
  constructor(e, t) {
    super(), this._extHostTerminalService = t, this._activeShellIntegrations = /* @__PURE__ */ new Map(), this._onDidChangeTerminalShellIntegration = new M(), this.onDidChangeTerminalShellIntegration = this._onDidChangeTerminalShellIntegration.event, this._onDidStartTerminalShellExecution = new M(), this.onDidStartTerminalShellExecution = this._onDidStartTerminalShellExecution.event, this._onDidEndTerminalShellExecution = new M(), this.onDidEndTerminalShellExecution = this._onDidEndTerminalShellExecution.event, this._proxy = e.getProxy(ie.MainThreadTerminalShellIntegration), this._register(Ie(() => {
      for (const [n, r] of this._activeShellIntegrations)
        r.dispose();
      this._activeShellIntegrations.clear();
    }));
  }
  $shellIntegrationChange(e) {
    const t = this._extHostTerminalService.getTerminalById(e);
    if (!t)
      return;
    const n = t.value;
    let r = this._activeShellIntegrations.get(e);
    r || (r = new EU(t.value, this._onDidStartTerminalShellExecution), this._activeShellIntegrations.set(e, r), r.store.add(t.onWillDispose(() => {
      var s;
      return (s = this._activeShellIntegrations.get(e)) == null ? void 0 : s.dispose();
    })), r.store.add(r.onDidRequestShellExecution((s) => this._proxy.$executeCommand(e, s))), r.store.add(r.onDidRequestEndExecution((s) => this._onDidEndTerminalShellExecution.fire(s))), r.store.add(r.onDidRequestChangeShellIntegration((s) => this._onDidChangeTerminalShellIntegration.fire(s))), t.shellIntegration = r.value), this._onDidChangeTerminalShellIntegration.fire({
      terminal: n,
      shellIntegration: r.value
    });
  }
  $shellExecutionStart(e, t, n, r, s) {
    var a;
    this._activeShellIntegrations.has(e) || this.$shellIntegrationChange(e);
    const o = {
      value: t,
      confidence: n,
      isTrusted: r
    };
    (a = this._activeShellIntegrations.get(e)) == null || a.startShellExecution(o, this._convertCwdToUri(s));
  }
  $shellExecutionEnd(e, t, n, r, s) {
    var a;
    const o = {
      value: t,
      confidence: n,
      isTrusted: r
    };
    (a = this._activeShellIntegrations.get(e)) == null || a.endShellExecution(o, s);
  }
  $shellExecutionData(e, t) {
    var n;
    (n = this._activeShellIntegrations.get(e)) == null || n.emitData(t);
  }
  $shellEnvChange(e, t, n, r) {
    var s;
    (s = this._activeShellIntegrations.get(e)) == null || s.setEnv(t, n, r);
  }
  $cwdChange(e, t) {
    var n;
    (n = this._activeShellIntegrations.get(e)) == null || n.setCwd(this._convertCwdToUri(t));
  }
  $closeTerminal(e) {
    var t;
    (t = this._activeShellIntegrations.get(e)) == null || t.dispose(), this._activeShellIntegrations.delete(e);
  }
  _convertCwdToUri(e) {
    return e ? x.file(e) : void 0;
  }
};
Mx = z([
  O(0, tt),
  O(1, bd)
], Mx);
class EU extends xe {
  get currentExecution() {
    return this._currentExecution;
  }
  constructor(e, t) {
    super(), this._terminal = e, this._onDidStartTerminalShellExecution = t, this._pendingExecutions = [], this.store = this._register(new Te()), this._onDidRequestChangeShellIntegration = this._register(new M()), this.onDidRequestChangeShellIntegration = this._onDidRequestChangeShellIntegration.event, this._onDidRequestShellExecution = this._register(new M()), this.onDidRequestShellExecution = this._onDidRequestShellExecution.event, this._onDidRequestEndExecution = this._register(new M()), this.onDidRequestEndExecution = this._onDidRequestEndExecution.event, this._onDidRequestNewExecution = this._register(new M()), this.onDidRequestNewExecution = this._onDidRequestNewExecution.event;
    const n = this;
    this.value = {
      get cwd() {
        return n._cwd;
      },
      get env() {
        if (n._env)
          return Object.freeze({
            isTrusted: n._env.isTrusted,
            value: Object.freeze({ ...n._env.value })
          });
      },
      executeCommand(r, s) {
        let o = r;
        if (s)
          for (const c of s)
            !c.match(/["'`]/) && c.match(/\s/) ? o += ` "${c}"` : o += ` ${c}`;
        n._onDidRequestShellExecution.fire(o);
        const a = {
          value: o,
          confidence: pf.High,
          isTrusted: !0
        };
        return n.requestNewShellExecution(a, n._cwd).value;
      }
    };
  }
  requestNewShellExecution(e, t) {
    const n = new a4(e, t ?? this._cwd);
    return Lg(e.value).length > 1 && (this._currentExecutionProperties = {
      isMultiLine: !0,
      unresolvedCommandLines: Lg(e.value)
    }), this._pendingExecutions.push(n), this._onDidRequestNewExecution.fire(e.value), n;
  }
  startShellExecution(e, t) {
    var r;
    if (this._pendingEndingExecution && (this._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._pendingEndingExecution.value, exitCode: void 0 }), this._pendingEndingExecution = void 0), this._currentExecution) {
      if ((r = this._currentExecutionProperties) != null && r.isMultiLine && this._currentExecutionProperties.unresolvedCommandLines) {
        const s = l4(this._currentExecutionProperties.unresolvedCommandLines, e);
        if (s) {
          this._currentExecutionProperties.unresolvedCommandLines = s.unresolvedCommandLines;
          return;
        }
      }
      this._currentExecution.endExecution(void 0), this._currentExecution.flush(), this._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value, exitCode: void 0 });
    }
    let n;
    if (e.confidence === pf.High)
      for (const [s, o] of this._pendingExecutions.entries())
        if (o.value.commandLine.value === e.value) {
          n = o, this._currentExecutionProperties = {
            isMultiLine: !1,
            unresolvedCommandLines: void 0
          }, n = o, this._pendingExecutions.splice(s, 1);
          break;
        } else {
          const a = l4(Lg(o.value.commandLine.value), e);
          if (a) {
            this._currentExecutionProperties = {
              isMultiLine: !0,
              unresolvedCommandLines: a.unresolvedCommandLines
            }, n = o, this._pendingExecutions.splice(s, 1);
            break;
          }
        }
    else
      n = this._pendingExecutions.shift();
    n || (n = new a4(e, t ?? this._cwd)), this._currentExecution = n, this._onDidStartTerminalShellExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value });
  }
  emitData(e) {
    var t;
    (t = this.currentExecution) == null || t.emitData(e);
  }
  endShellExecution(e, t) {
    var n, r;
    if (!((n = this._currentExecutionProperties) != null && n.isMultiLine && this._currentExecutionProperties.unresolvedCommandLines && this._currentExecutionProperties.unresolvedCommandLines.length > 0) && this._currentExecution) {
      const s = (r = this._currentExecutionProperties) != null && r.isMultiLine ? this._currentExecution.value.commandLine : e;
      this._currentExecution.endExecution(s);
      const o = this._currentExecution;
      this._pendingEndingExecution = o, this._currentExecution = void 0, o.flush().then(() => {
        this._pendingEndingExecution === o && (this._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: o.value, exitCode: t }), this._pendingEndingExecution = void 0);
      });
    }
  }
  setEnv(e, t, n) {
    const r = {};
    for (let s = 0; s < e.length; s++)
      r[e[s]] = t[s];
    this._env = { value: r, isTrusted: n }, this._fireChangeEvent();
  }
  setCwd(e) {
    let t = !1;
    x.isUri(this._cwd) ? t = !x.isUri(e) || this._cwd.toString() !== e.toString() : this._cwd !== e && (t = !0), t && (this._cwd = e, this._fireChangeEvent());
  }
  _fireChangeEvent() {
    this._onDidRequestChangeShellIntegration.fire({ terminal: this._terminal, shellIntegration: this.value });
  }
}
class a4 {
  constructor(e, t) {
    this._commandLine = e, this.cwd = t, this._isEnded = !1;
    const n = this;
    this.value = {
      get commandLine() {
        return n._commandLine;
      },
      get cwd() {
        return n.cwd;
      },
      read() {
        return n._createDataStream();
      }
    };
  }
  _createDataStream() {
    if (!this._dataStream) {
      if (this._isEnded)
        return Ol.EMPTY;
      this._dataStream = new SU();
    }
    return this._dataStream.createIterable();
  }
  emitData(e) {
    var t;
    this._isEnded || (t = this._dataStream) == null || t.emitData(e);
  }
  endExecution(e) {
    var t;
    e && (this._commandLine = e), (t = this._dataStream) == null || t.endExecution(), this._isEnded = !0;
  }
  async flush() {
    this._dataStream && (await this._dataStream.flush(), this._dataStream.dispose(), this._dataStream = void 0);
  }
}
class SU extends xe {
  constructor() {
    super(...arguments), this._iterables = [], this._emitters = [];
  }
  createIterable() {
    this._barrier || (this._barrier = new Jr());
    const e = this._barrier, t = new Ol(async (n) => {
      this._emitters.push(n), await e.wait();
    });
    return this._iterables.push(t), t;
  }
  emitData(e) {
    for (const t of this._emitters)
      t.emitOne(e);
  }
  endExecution() {
    var e;
    (e = this._barrier) == null || e.open();
  }
  async flush() {
    await Promise.all(this._iterables.map((e) => e.toPromise()));
  }
}
function Lg(i) {
  return i.split(`
`).map((e) => e.trim()).filter((e) => e.length > 0);
}
function l4(i, e) {
  if (i.length === 0)
    return !1;
  const t = [...i], n = Lg(e.value);
  if (t && t.length > 0) {
    for (; t.length > 0 && t[0] === n[0]; )
      t.shift(), n.shift();
    if (n.length === 0)
      return { unresolvedCommandLines: t };
  }
  return !1;
}
var wo;
(function(i) {
  i[i.CR = 13] = "CR", i[i.LF = 10] = "LF", i[i.COLON = 58] = "COLON", i[i.SPACE = 32] = "SPACE";
})(wo || (wo = {}));
class pw {
  constructor(e) {
    this.dataBuffer = "", this.eventTypeBuffer = "", this.buffer = [], this.endedOnCR = !1, this.onEventHandler = e, this.decoder = new TextDecoder("utf-8");
  }
  getLastEventId() {
    return this.lastEventIdBuffer;
  }
  getReconnectionTime() {
    return this.reconnectionTime;
  }
  feed(e) {
    if (e.length === 0)
      return;
    let t = 0;
    for (this.endedOnCR && e[0] === wo.LF && t++, this.endedOnCR = !1; t < e.length; ) {
      const n = e.indexOf(wo.CR, t), r = e.indexOf(wo.LF, t), s = n === -1 ? r : r === -1 ? n : Math.min(n, r);
      if (s === -1)
        break;
      let o = "";
      for (const a of this.buffer)
        o += this.decoder.decode(a, { stream: !0 });
      o += this.decoder.decode(e.subarray(t, s)), this.processLine(o), this.buffer.length = 0, t = s + (e[s] === wo.CR && e[s + 1] === wo.LF ? 2 : 1);
    }
    t < e.length ? this.buffer.push(e.subarray(t)) : this.endedOnCR = e[e.length - 1] === wo.CR;
  }
  processLine(e) {
    if (!e.length) {
      this.dispatchEvent();
      return;
    }
    if (e.startsWith(":"))
      return;
    let t, n;
    const r = e.indexOf(":");
    r === -1 ? (t = e, n = "") : (t = e.substring(0, r), n = e.substring(r + 1), n.startsWith(" ") && (n = n.substring(1))), this.processField(t, n);
  }
  processField(e, t) {
    switch (e) {
      case "event":
        this.eventTypeBuffer = t;
        break;
      case "data":
        this.dataBuffer += t, this.dataBuffer += `
`;
        break;
      case "id":
        t.includes("\0") ? this.currentEventId = void 0 : this.currentEventId = this.lastEventIdBuffer = t;
        break;
      case "retry":
        /^\d+$/.test(t) && (this.reconnectionTime = parseInt(t, 10));
        break;
    }
  }
  dispatchEvent() {
    if (this.dataBuffer === "") {
      this.dataBuffer = "", this.eventTypeBuffer = "";
      return;
    }
    this.dataBuffer.endsWith(`
`) && (this.dataBuffer = this.dataBuffer.substring(0, this.dataBuffer.length - 1));
    const e = {
      type: this.eventTypeBuffer || "message",
      data: this.dataBuffer
    };
    this.currentEventId !== void 0 && (e.id = this.currentEventId), this.reconnectionTime !== void 0 && (e.retry = this.reconnectionTime), this.onEventHandler(e), this.reset();
  }
  reset() {
    this.dataBuffer = "", this.eventTypeBuffer = "", this.currentEventId = void 0;
  }
}
const Ox = me("IExtHostMpcService");
let Fx = class extends xe {
  constructor(e, t, n) {
    super(), this._logService = t, this._extHostInitData = n, this._initialProviderPromises = /* @__PURE__ */ new Set(), this._sseEventSources = this._register(new Vg()), this._unresolvedMcpServers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadMcp);
  }
  $startMcp(e, t) {
    this._startMcp(e, Mf.fromSerialized(t));
  }
  _startMcp(e, t) {
    if (t.type === Vl.HTTP) {
      this._sseEventSources.set(e, new IU(e, t, this._proxy, this._logService));
      return;
    }
    throw new Error("not implemented");
  }
  $stopMcp(e) {
    this._sseEventSources.has(e) && (this._sseEventSources.deleteAndDispose(e), this._proxy.$onDidChangeState(e, { state: As.Kind.Stopped }));
  }
  $sendMessage(e, t) {
    var n;
    (n = this._sseEventSources.get(e)) == null || n.send(t);
  }
  async $waitForInitialCollectionProviders() {
    await Promise.all(this._initialProviderPromises);
  }
  async $resolveMcpLaunch(e, t) {
    const n = this._unresolvedMcpServers.get(e);
    if (!n)
      return;
    const r = n.servers.find((o) => o.label === t);
    if (!r)
      return;
    if (!n.provider.resolveMcpServerDefinition)
      return Eh.from(r);
    const s = await n.provider.resolveMcpServerDefinition(r, Dt.None);
    return s ? Eh.from(s) : void 0;
  }
  registerMcpConfigurationProvider(e, t, n) {
    var c, u;
    const r = new Te(), s = (u = (c = e.contributes) == null ? void 0 : c.mcpServerDefinitionProviders) == null ? void 0 : u.find((d) => d.id === t);
    if (!s)
      throw new Error(
        `MCP configuration providers must be registered in the contributes.mcpServerDefinitionProviders array within your package.json, but "${t}" was not`
      );
    const o = {
      id: fM(e.identifier, t),
      isTrustedByDefault: !0,
      label: (s == null ? void 0 : s.label) ?? e.displayName ?? e.name,
      scope: Kt.WORKSPACE,
      canResolveLaunch: typeof n.resolveMcpServerDefinition == "function",
      extensionId: e.identifier.value,
      configTarget: this._extHostInitData.remote.isRemote ? ri.USER_REMOTE : ri.USER
    }, a = async () => {
      const d = await n.provideMcpServerDefinitions(Dt.None);
      this._unresolvedMcpServers.set(o.id, { servers: d ?? [], provider: n });
      const f = [];
      for (const p of d ?? []) {
        let v = gt.toKey(e.identifier) + "/" + p.label;
        if (f.some((_) => _.id === v)) {
          let _ = 2;
          for (; f.some((m) => m.id === v + _); )
            _++;
          v = v + _;
        }
        f.push({
          id: v,
          label: p.label,
          cacheNonce: p.version || "$$NONE",
          launch: Eh.from(p)
        });
      }
      this._proxy.$upsertMcpCollection(o, f);
    };
    r.add(Ie(() => {
      this._unresolvedMcpServers.delete(o.id), this._proxy.$deleteMcpCollection(o.id);
    })), n.onDidChangeMcpServerDefinitions && r.add(n.onDidChangeMcpServerDefinitions(a)), n.onDidChangeServerDefinitions && r.add(n.onDidChangeServerDefinitions(a)), n.onDidChange && r.add(n.onDidChange(a));
    const l = new Promise((d) => {
      setTimeout(() => a().finally(() => {
        this._initialProviderPromises.delete(l), d();
      }), 0);
    });
    return this._initialProviderPromises.add(l), r;
  }
};
Fx = z([
  O(0, tt),
  O(1, ot),
  O(2, _i)
], Fx);
var _n;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Http = 1] = "Http", i[i.SSE = 2] = "SSE";
})(_n || (_n = {}));
const DU = 5, kU = [301, 302, 303, 307, 308];
class IU extends xe {
  constructor(e, t, n, r) {
    super(), this._id = e, this._launch = t, this._proxy = n, this._logService = r, this._requestSequencer = new wL(), this._postEndpoint = new Qo(), this._mode = { value: _n.Unknown }, this._cts = new Lt(), this._abortCtrl = new AbortController(), this._register(Ie(() => {
      this._abortCtrl.abort(), this._cts.dispose(!0);
    })), this._proxy.$onDidChangeState(this._id, { state: As.Kind.Running });
  }
  async send(e) {
    try {
      this._mode.value === _n.Unknown ? await this._requestSequencer.queue(() => this._send(e)) : await this._send(e);
    } catch (t) {
      const n = `Error sending message to ${this._launch.uri}: ${String(t)}`;
      this._proxy.$onDidChangeState(this._id, { state: As.Kind.Error, message: n });
    }
  }
  _send(e) {
    return this._mode.value === _n.SSE ? this._sendLegacySSE(this._mode.endpoint, e) : this._sendStreamableHttp(e, this._mode.value === _n.Http ? this._mode.sessionId : void 0);
  }
  async _sendStreamableHttp(e, t) {
    const n = new TextEncoder().encode(e), r = {
      ...Object.fromEntries(this._launch.headers),
      "Content-Type": "application/json",
      "Content-Length": String(n.length),
      Accept: "text/event-stream, application/json"
    };
    t && (r["Mcp-Session-Id"] = t), await this._addAuthHeader(r);
    const s = await this._fetchWithAuthRetry(this._launch.uri.toString(!0), {
      method: "POST",
      headers: r,
      body: n
    }, r), o = this._mode.value === _n.Unknown, a = s.headers.get("Mcp-Session-Id");
    if (a && (this._mode = { value: _n.Http, sessionId: a }), this._mode.value === _n.Unknown && s.status >= 400 && s.status < 500 && s.status !== 401 && s.status !== 403) {
      this._log(Me.Info, `${s.status} status sending message to ${this._launch.uri}, will attempt to fall back to legacy SSE`), this._sseFallbackWithMessage(e);
      return;
    }
    if (s.status >= 300) {
      const l = this._mode.value === _n.Http && !!this._mode.sessionId && (s.status === 400 || s.status === 404);
      this._proxy.$onDidChangeState(this._id, {
        state: As.Kind.Error,
        message: `${s.status} status sending message to ${this._launch.uri}: ${await this._getErrText(s)}` + (l ? "; will retry with new session ID" : ""),
        shouldRetry: l
      });
      return;
    }
    this._mode.value === _n.Unknown && (this._mode = { value: _n.Http, sessionId: void 0 }), o && this._attachStreamableBackchannel(), await this._handleSuccessfulStreamableHttp(s, e);
  }
  async _sseFallbackWithMessage(e) {
    const t = await this._attachSSE();
    t && (this._mode = { value: _n.SSE, endpoint: t }, await this._sendLegacySSE(t, e));
  }
  async _populateAuthMetadata(e, t) {
    var u;
    let n;
    if (t.headers.has("WWW-Authenticate")) {
      const d = t.headers.get("WWW-Authenticate"), { scheme: f, params: p } = TO(d);
      f === "Bearer" && p.resource_metadata && (n = p.resource_metadata);
    }
    let r, s, o;
    if (n) {
      const d = await this._getResourceMetadata(n);
      if (new URL(d.resource).toString() !== new URL(e).toString())
        throw new Error(
          `Protected Resource Metadata resource "${d.resource}" does not match MCP server resolved resource "${e}". The MCP server must follow OAuth spec https://datatracker.ietf.org/doc/html/rfc9728#PRConfigurationValidation`
        );
      r = (u = d.authorization_servers) == null ? void 0 : u[0], s = d.scopes_supported, o = d;
    }
    const a = new URL(t.url).origin;
    let l = {};
    r || (r = a, l = {
      ...Object.fromEntries(this._launch.headers)
    });
    try {
      const d = await this._getAuthorizationServerMetadata(r, l);
      this._authMetadata = {
        authorizationServer: x.parse(r),
        serverMetadata: d,
        resourceMetadata: o
      };
      return;
    } catch (d) {
      this._log(Me.Warning, `Error populating auth metadata: ${String(d)}`);
    }
    const c = CO(new URL(a));
    c.scopes_supported = s ?? c.scopes_supported ?? [], this._authMetadata = {
      authorizationServer: x.parse(r),
      serverMetadata: c,
      resourceMetadata: o
    };
  }
  async _getResourceMetadata(e) {
    const t = new URL(e), n = new URL(this._launch.uri.toString(!0));
    let r = {};
    t.origin === n.origin && (r = {
      ...Object.fromEntries(this._launch.headers)
    });
    const s = await this._fetch(e, {
      method: "GET",
      headers: {
        ...r,
        Accept: "application/json",
        "MCP-Protocol-Version": Nc.LATEST_PROTOCOL_VERSION
      }
    });
    if (s.status !== 200)
      throw new Error(
        `Failed to fetch resource metadata: ${s.status} ${await this._getErrText(s)}`
      );
    const o = await s.json();
    if (SO(o))
      return o;
    throw new Error(`Invalid resource metadata: ${JSON.stringify(o)}`);
  }
  async _getAuthorizationServerMetadata(e, t) {
    const n = new URL(e), r = n.pathname === "/" ? "" : n.pathname, s = new URL(xO, e).toString() + r;
    let o = await this._fetch(s, {
      method: "GET",
      headers: {
        ...t,
        Accept: "application/json",
        "MCP-Protocol-Version": Nc.LATEST_PROTOCOL_VERSION
      }
    });
    if (o.status !== 200) {
      const l = new URL(bC, e).toString() + r;
      if (o = await this._fetch(l, {
        method: "GET",
        headers: {
          ...t,
          Accept: "application/json",
          "MCP-Protocol-Version": Nc.LATEST_PROTOCOL_VERSION
        }
      }), o.status !== 200 && (o = await this._fetch(x.joinPath(x.parse(e), bC).toString(!0), {
        method: "GET",
        headers: {
          ...t,
          Accept: "application/json",
          "MCP-Protocol-Version": Nc.LATEST_PROTOCOL_VERSION
        }
      }), o.status !== 200))
        throw new Error(
          `Failed to fetch authorization server metadata: ${o.status} ${await this._getErrText(o)}`
        );
    }
    const a = await o.json();
    if (DO(a))
      return a;
    throw new Error(`Invalid authorization server metadata: ${JSON.stringify(a)}`);
  }
  async _handleSuccessfulStreamableHttp(e, t) {
    var n;
    if (e.status !== 202)
      switch ((n = e.headers.get("Content-Type")) == null ? void 0 : n.toLowerCase()) {
        case "text/event-stream": {
          const r = new pw((s) => {
            if (s.type === "message")
              this._proxy.$onDidReceiveMessage(this._id, s.data);
            else if (s.type === "endpoint")
              throw this._log(Me.Warning, `Received SSE endpoint from a POST to ${this._launch.uri}, will fall back to legacy SSE`), this._sseFallbackWithMessage(t), new Yn();
          });
          try {
            await this._doSSE(r, e);
          } catch (s) {
            this._log(Me.Warning, `Error reading SSE stream: ${String(s)}`);
          }
          break;
        }
        case "application/json":
          this._proxy.$onDidReceiveMessage(this._id, await e.text());
          break;
        default: {
          const r = await e.text();
          CU(r) ? this._proxy.$onDidReceiveMessage(this._id, r) : this._log(Me.Warning, `Unexpected ${e.status} response for request: ${r}`);
        }
      }
  }
  async _attachStreamableBackchannel() {
    var t;
    let e;
    for (let n = 0; !this._store.isDisposed; n++) {
      await ns(Math.min(n * 1e3, 3e4), this._cts.token);
      let r;
      try {
        const o = {
          ...Object.fromEntries(this._launch.headers),
          Accept: "text/event-stream"
        };
        await this._addAuthHeader(o), this._mode.value === _n.Http && this._mode.sessionId !== void 0 && (o["Mcp-Session-Id"] = this._mode.sessionId), e && (o["Last-Event-ID"] = e), r = await this._fetchWithAuthRetry(this._launch.uri.toString(!0), {
          method: "GET",
          headers: o
        }, o);
      } catch {
        this._log(Me.Info, `Error connecting to ${this._launch.uri} for async notifications, will retry`);
        continue;
      }
      if (r.status >= 400) {
        this._log(Me.Debug, `${r.status} status connecting to ${this._launch.uri} for async notifications; they will be disabled: ${await this._getErrText(r)}`);
        return;
      }
      (t = r.headers.get("content-type")) != null && t.toLowerCase().includes("text/event-stream") && (n = 0);
      const s = new pw((o) => {
        o.type === "message" && this._proxy.$onDidReceiveMessage(this._id, o.data), o.id && (e = o.id);
      });
      try {
        await this._doSSE(s, r);
      } catch (o) {
        this._log(Me.Info, `Error reading from async stream, we will reconnect: ${o}`);
      }
    }
  }
  async _attachSSE() {
    const e = new Qo(), t = {
      ...Object.fromEntries(this._launch.headers),
      Accept: "text/event-stream"
    };
    await this._addAuthHeader(t);
    let n;
    try {
      if (n = await this._fetchWithAuthRetry(this._launch.uri.toString(!0), {
        method: "GET",
        headers: t
      }, t), n.status >= 300) {
        this._proxy.$onDidChangeState(this._id, { state: As.Kind.Error, message: `${n.status} status connecting to ${this._launch.uri} as SSE: ${await this._getErrText(n)}` });
        return;
      }
    } catch (s) {
      this._proxy.$onDidChangeState(this._id, { state: As.Kind.Error, message: `Error connecting to ${this._launch.uri} as SSE: ${s}` });
      return;
    }
    const r = new pw((s) => {
      s.type === "message" ? this._proxy.$onDidReceiveMessage(this._id, s.data) : s.type === "endpoint" && e.complete(new URL(s.data, this._launch.uri.toString(!0)).toString());
    });
    return this._register(Ie(() => e.cancel())), this._doSSE(r, n).catch((s) => {
      this._proxy.$onDidChangeState(this._id, { state: As.Kind.Error, message: `Error reading SSE stream: ${String(s)}` });
    }), e.p;
  }
  async _sendLegacySSE(e, t) {
    const n = new TextEncoder().encode(t), r = {
      ...Object.fromEntries(this._launch.headers),
      "Content-Type": "application/json",
      "Content-Length": String(n.length)
    };
    await this._addAuthHeader(r);
    const s = await this._fetch(e, {
      method: "POST",
      headers: r,
      body: n
    });
    s.status >= 300 && this._log(Me.Warning, `${s.status} status sending message to ${this._postEndpoint}: ${await this._getErrText(s)}`);
  }
  async _doSSE(e, t) {
    if (!t.body)
      return;
    const n = t.body.getReader();
    let r;
    do {
      try {
        r = await BE(n.read(), this._cts.token);
      } catch (s) {
        if (n.cancel(), this._store.isDisposed)
          return;
        throw s;
      }
      r.value && e.feed(r.value);
    } while (!r.done);
  }
  async _addAuthHeader(e) {
    if (this._authMetadata)
      try {
        const t = await this._proxy.$getTokenFromServerMetadata(this._id, this._authMetadata.authorizationServer, this._authMetadata.serverMetadata, this._authMetadata.resourceMetadata);
        t && (e.Authorization = `Bearer ${t}`);
      } catch (t) {
        this._log(Me.Warning, `Error getting token from server metadata: ${String(t)}`);
      }
    return e;
  }
  _log(e, t) {
    this._store.isDisposed || this._proxy.$onDidPublishLog(this._id, e, t);
  }
  async _getErrText(e) {
    try {
      return await e.text();
    } catch {
      return e.statusText;
    }
  }
  async _fetchWithAuthRetry(e, t, n) {
    const r = () => this._fetch(e, t);
    let s = await r();
    return s.status === 401 && (this._authMetadata || (await this._populateAuthMetadata(e, s), await this._addAuthHeader(n), n.Authorization && (t.headers = n, s = await r()))), s;
  }
  async _fetch(e, t) {
    var s;
    if (ux(this._logService.getLevel(), Me.Trace)) {
      const o = { ...t, headers: { ...t.headers } };
      o.body && (o.body = new TextDecoder().decode(o.body)), (s = o.headers) != null && s.Authorization && (o.headers.Authorization = "***"), this._log(Me.Trace, `Fetching ${e} with options: ${JSON.stringify(o)}`);
    }
    let n = e, r;
    for (let o = 0; o < DU && (r = await fetch(n, {
      ...t,
      signal: this._abortCtrl.signal,
      redirect: "manual"
    }), !!kU.includes(r.status)); o++) {
      const a = r.headers.get("location");
      if (!a)
        break;
      const l = new URL(a, n).toString();
      this._log(Me.Trace, `Redirect (${r.status}) from ${n} to ${l}`), n = l, (r.status === 303 || (r.status === 301 || r.status === 302) && t.method === "POST") && (t.method = "GET", delete t.body);
    }
    if (ux(this._logService.getLevel(), Me.Trace)) {
      const o = {};
      r.headers.forEach((a, l) => {
        o[l] = a;
      }), this._log(Me.Trace, `Fetched ${n}: ${JSON.stringify({
        status: r.status,
        headers: o
      })}`);
    }
    return r;
  }
}
function CU(i) {
  try {
    return JSON.parse(i), !0;
  } catch {
    return !1;
  }
}
const GA = me("IExtHostDataChannels");
class TU {
  constructor() {
    this._channels = /* @__PURE__ */ new Map();
  }
  createDataChannel(e, t) {
    H(e, "dataChannels");
    let n = this._channels.get(t);
    return n || (n = new PU(t), this._channels.set(t, n)), n;
  }
  $onDidReceiveData(e, t) {
    const n = this._channels.get(e);
    n && n._fireDidReceiveData(t);
  }
}
class PU extends xe {
  constructor(e) {
    super(), this.channelId = e, this._onDidReceiveData = new M(), this.onDidReceiveData = this._onDidReceiveData.event, this._register(this._onDidReceiveData);
  }
  _fireDidReceiveData(e) {
    this._onDidReceiveData.fire({ data: e });
  }
  toString() {
    return `DataChannel(${this.channelId})`;
  }
}
vt(FS, sx, mt.Delayed);
vt(ta, o1, mt.Delayed);
vt(Lp, cx, mt.Delayed);
vt(ic, j0, mt.Eager);
vt(kv, Z0, mt.Eager);
vt(MS, rx, mt.Eager);
vt(eo, N0, mt.Eager);
vt(yv, F0, mt.Eager);
vt(Cv, Cx, mt.Eager);
vt(WA, Ax, mt.Eager);
vt(MA, fx, mt.Eager);
vt(yd, mx, mt.Eager);
vt(US, ox, mt.Eager);
vt(md, t7, mt.Eager);
vt(NA, hx, mt.Delayed);
vt(qA, Nx, mt.Eager);
vt(PS, pA, mt.Eager);
vt(UA, Dx, mt.Eager);
vt(bd, Q0, mt.Eager);
vt(jA, Mx, mt.Eager);
vt(RS, W0, mt.Eager);
vt(Sv, J0, mt.Eager);
vt(Dv, X0, mt.Eager);
vt(Zs, A0, mt.Eager);
vt(OS, CA, mt.Eager);
vt(Mp, kx, mt.Eager);
vt(BS, Tx, mt.Eager);
vt(Ox, Fx, mt.Eager);
vt(GA, TU, mt.Eager);
function QA(i, e, t, n, r, s) {
  if (Array.isArray(i)) {
    let o = 0;
    for (const a of i) {
      const l = QA(a, e, t, n, r, s);
      if (l === 10)
        return l;
      l > o && (o = l);
    }
    return o;
  } else {
    if (typeof i == "string")
      return i === "*" ? 5 : i === t ? 10 : 0;
    if (i) {
      const { language: o, pattern: a, scheme: l, hasAccessToAllModels: c, notebookType: u } = i;
      u && r && (e = r);
      let d = 0;
      if (l)
        if (l === e.scheme)
          d = 10;
        else if (l === "*")
          d = 5;
        else
          return 0;
      if (o)
        if (o === t)
          d = 10;
        else if (o === "*")
          d = Math.max(d, 5);
        else
          return 0;
      if (u)
        if (u === s)
          d = 10;
        else if (u === "*" && s !== void 0)
          d = Math.max(d, 5);
        else
          return 0;
      if (a) {
        let f;
        if (typeof a == "string" ? f = a : f = { ...a, base: Fu(a.base) }, f === e.fsPath || wh(f, e.fsPath))
          d = 10;
        else
          return 0;
      }
      return d;
    } else
      return 0;
  }
}
function KA(i) {
  return typeof i == "string" ? !1 : Array.isArray(i) ? i.some(KA) : !!i.notebookType;
}
var Ux;
(function(i) {
  i[i.None = 0] = "None", i[i.Indent = 1] = "Indent", i[i.IndentOutdent = 2] = "IndentOutdent", i[i.Outdent = 3] = "Outdent";
})(Ux || (Ux = {}));
var $x;
(function(i) {
  i[i.Complete = 100] = "Complete", i[i.Partial = 50] = "Partial", i[i.None = 0] = "None";
})($x || ($x = {}));
class AU {
  constructor(e) {
    this._relatedInformationProviders = /* @__PURE__ */ new Map(), this._nextHandle = 0, this._proxy = e.getProxy(ie.MainThreadAiRelatedInformation);
  }
  async $provideAiRelatedInformation(e, t, n) {
    if (this._relatedInformationProviders.size === 0)
      throw new Error("No related information providers registered");
    const r = this._relatedInformationProviders.get(e);
    if (!r)
      throw new Error("related information provider not found");
    return await r.provideRelatedInformation(t, n) ?? [];
  }
  getRelatedInformation(e, t, n) {
    return this._proxy.$getAiRelatedInformation(t, n);
  }
  registerRelatedInformationProvider(e, t, n) {
    const r = this._nextHandle;
    return this._nextHandle++, this._relatedInformationProviders.set(r, n), this._proxy.$registerAiRelatedInformationProvider(r, t), new je(() => {
      this._proxy.$unregisterAiRelatedInformationProvider(r), this._relatedInformationProviders.delete(r);
    });
  }
}
var ip;
(function(i) {
  i[i.Full = 1] = "Full", i[i.Delta = 2] = "Delta";
})(ip || (ip = {}));
function JA(i) {
  for (let e = 0, t = i.length; e < t; e += 4) {
    const n = i[e + 0], r = i[e + 1], s = i[e + 2], o = i[e + 3];
    i[e + 0] = o, i[e + 1] = s, i[e + 2] = r, i[e + 3] = n;
  }
}
function RU(i) {
  const e = new Uint8Array(i.buffer, i.byteOffset, i.length * 4);
  return HT() || JA(e), he.wrap(e);
}
function LU(i) {
  const e = i.buffer;
  if (HT() || JA(e), e.byteOffset % 4 === 0)
    return new Uint32Array(e.buffer, e.byteOffset, e.length / 4);
  {
    const t = new Uint8Array(e.byteLength);
    return t.set(e), new Uint32Array(t.buffer, t.byteOffset, t.length / 4);
  }
}
function Hx(i) {
  const e = new Uint32Array(NU(i));
  let t = 0;
  if (e[t++] = i.id, i.type === "full")
    e[t++] = ip.Full, e[t++] = i.data.length, e.set(i.data, t), t += i.data.length;
  else {
    e[t++] = ip.Delta, e[t++] = i.deltas.length;
    for (const n of i.deltas)
      e[t++] = n.start, e[t++] = n.deleteCount, n.data ? (e[t++] = n.data.length, e.set(n.data, t), t += n.data.length) : e[t++] = 0;
  }
  return RU(e);
}
function NU(i) {
  let e = 0;
  if (e += 2, i.type === "full")
    e += 1 + i.data.length;
  else {
    e += 1, e += 3 * i.deltas.length;
    for (const t of i.deltas)
      t.data && (e += t.data.length);
  }
  return e;
}
function c4(i) {
  const e = LU(i);
  let t = 0;
  const n = e[t++];
  if (e[t++] === ip.Full) {
    const a = e[t++], l = e.subarray(t, t + a);
    return t += a, {
      id: n,
      type: "full",
      data: l
    };
  }
  const s = e[t++], o = [];
  for (let a = 0; a < s; a++) {
    const l = e[t++], c = e[t++], u = e[t++];
    let d;
    u > 0 && (d = e.subarray(t, t + u), t += u), o[a] = { start: l, deleteCount: c, data: d };
  }
  return {
    id: n,
    type: "delta",
    deltas: o
  };
}
const MU = [
  new Le(
    "vscode.executeDocumentHighlights",
    "_executeDocumentHighlights",
    "Execute document highlight provider.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of DocumentHighlight-instances.",
      nr(id.to)
    )
  ),
  new Le(
    "vscode.executeDocumentSymbolProvider",
    "_executeDocumentSymbolProvider",
    "Execute document symbol provider.",
    [Q.Uri],
    new Ce(
      "A promise that resolves to an array of SymbolInformation and DocumentSymbol instances.",
      (i, e) => {
        if (PE(i))
          return;
        class t extends of {
          constructor() {
            super(...arguments), this.containerName = "";
          }
          static to(r) {
            const s = new t(
              r.name,
              Zn.to(r.kind),
              r.containerName || "",
              new $n(e[0], j.to(r.range))
            );
            return s.detail = r.detail, s.range = s.location.range, s.selectionRange = j.to(r.selectionRange), s.children = r.children ? r.children.map(t.to) : [], s;
          }
        }
        return i.map(t.to);
      }
    )
  ),
  new Le(
    "vscode.executeFormatDocumentProvider",
    "_executeFormatDocumentProvider",
    "Execute document format provider.",
    [Q.Uri, new Q("options", "Formatting options", (i) => !0, (i) => i)],
    new Ce(
      "A promise that resolves to an array of TextEdits.",
      nr(gi.to)
    )
  ),
  new Le(
    "vscode.executeFormatRangeProvider",
    "_executeFormatRangeProvider",
    "Execute range format provider.",
    [Q.Uri, Q.Range, new Q("options", "Formatting options", (i) => !0, (i) => i)],
    new Ce(
      "A promise that resolves to an array of TextEdits.",
      nr(gi.to)
    )
  ),
  new Le(
    "vscode.executeFormatOnTypeProvider",
    "_executeFormatOnTypeProvider",
    "Execute format on type provider.",
    [Q.Uri, Q.Position, new Q("ch", "Trigger character", (i) => typeof i == "string", (i) => i), new Q("options", "Formatting options", (i) => !0, (i) => i)],
    new Ce(
      "A promise that resolves to an array of TextEdits.",
      nr(gi.to)
    )
  ),
  new Le(
    "vscode.executeDefinitionProvider",
    "_executeDefinitionProvider",
    "Execute all definition providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.experimental.executeDefinitionProvider_recursive",
    "_executeDefinitionProvider_recursive",
    "Execute all definition providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.executeTypeDefinitionProvider",
    "_executeTypeDefinitionProvider",
    "Execute all type definition providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.experimental.executeTypeDefinitionProvider_recursive",
    "_executeTypeDefinitionProvider_recursive",
    "Execute all type definition providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.executeDeclarationProvider",
    "_executeDeclarationProvider",
    "Execute all declaration providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.experimental.executeDeclarationProvider_recursive",
    "_executeDeclarationProvider_recursive",
    "Execute all declaration providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.executeImplementationProvider",
    "_executeImplementationProvider",
    "Execute all implementation providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.experimental.executeImplementationProvider_recursive",
    "_executeImplementationProvider_recursive",
    "Execute all implementation providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location or LocationLink instances.",
      co
    )
  ),
  new Le(
    "vscode.executeReferenceProvider",
    "_executeReferenceProvider",
    "Execute all reference providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location-instances.",
      nr(hn.to)
    )
  ),
  new Le(
    "vscode.experimental.executeReferenceProvider",
    "_executeReferenceProvider_recursive",
    "Execute all reference providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Location-instances.",
      nr(hn.to)
    )
  ),
  new Le(
    "vscode.executeHoverProvider",
    "_executeHoverProvider",
    "Execute all hover providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Hover-instances.",
      nr(Uf.to)
    )
  ),
  new Le(
    "vscode.experimental.executeHoverProvider_recursive",
    "_executeHoverProvider_recursive",
    "Execute all hover providers.",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of Hover-instances.",
      nr(Uf.to)
    )
  ),
  new Le(
    "vscode.executeSelectionRangeProvider",
    "_executeSelectionRangeProvider",
    "Execute selection range provider.",
    [Q.Uri, new Q(
      "position",
      "A position in a text document",
      (i) => Array.isArray(i) && i.every((e) => Ke.isPosition(e)),
      (i) => i.map(ut.from)
    )],
    new Ce("A promise that resolves to an array of ranges.", (i) => i.map((e) => {
      let t;
      for (const n of e.reverse())
        t = new uf(j.to(n), t);
      return t;
    }))
  ),
  new Le(
    "vscode.executeWorkspaceSymbolProvider",
    "_executeWorkspaceSymbolProvider",
    "Execute all workspace symbol providers.",
    [Q.String.with("query", "Search string")],
    new Ce(
      "A promise that resolves to an array of SymbolInformation-instances.",
      (i) => i.map(zl.to)
    )
  ),
  new Le(
    "vscode.prepareCallHierarchy",
    "_executePrepareCallHierarchy",
    "Prepare call hierarchy at a position inside a document",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of CallHierarchyItem-instances",
      (i) => i.map(ql.to)
    )
  ),
  new Le(
    "vscode.provideIncomingCalls",
    "_executeProvideIncomingCalls",
    "Compute incoming calls for an item",
    [Q.CallHierarchyItem],
    new Ce(
      "A promise that resolves to an array of CallHierarchyIncomingCall-instances",
      (i) => i.map(jy.to)
    )
  ),
  new Le(
    "vscode.provideOutgoingCalls",
    "_executeProvideOutgoingCalls",
    "Compute outgoing calls for an item",
    [Q.CallHierarchyItem],
    new Ce(
      "A promise that resolves to an array of CallHierarchyOutgoingCall-instances",
      (i) => i.map(Gy.to)
    )
  ),
  new Le(
    "vscode.prepareRename",
    "_executePrepareRename",
    "Execute the prepareRename of rename provider.",
    [Q.Uri, Q.Position],
    new Ce("A promise that resolves to a range and placeholder text.", (i) => {
      if (i)
        return {
          range: j.to(i.range),
          placeholder: i.text
        };
    })
  ),
  new Le(
    "vscode.executeDocumentRenameProvider",
    "_executeDocumentRenameProvider",
    "Execute rename provider.",
    [Q.Uri, Q.Position, Q.String.with("newName", "The new symbol name")],
    new Ce("A promise that resolves to a WorkspaceEdit.", (i) => {
      if (i) {
        if (i.rejectReason)
          throw new Error(i.rejectReason);
        return kn.to(i);
      }
    })
  ),
  new Le(
    "vscode.executeLinkProvider",
    "_executeLinkProvider",
    "Execute document link provider.",
    [Q.Uri, Q.Number.with("linkResolveCount", "Number of links that should be resolved, only when links are unresolved.").optional()],
    new Ce(
      "A promise that resolves to an array of DocumentLink-instances.",
      (i) => i.map(_l.to)
    )
  ),
  new Le(
    "vscode.provideDocumentSemanticTokensLegend",
    "_provideDocumentSemanticTokensLegend",
    "Provide semantic tokens legend for a document",
    [Q.Uri],
    new Ce("A promise that resolves to SemanticTokensLegend.", (i) => {
      if (i)
        return new ny(i.tokenTypes, i.tokenModifiers);
    })
  ),
  new Le(
    "vscode.provideDocumentSemanticTokens",
    "_provideDocumentSemanticTokens",
    "Provide semantic tokens for a document",
    [Q.Uri],
    new Ce("A promise that resolves to SemanticTokens.", (i) => {
      if (!i)
        return;
      const e = c4(i);
      if (e.type === "full")
        return new Yu(e.data, void 0);
    })
  ),
  new Le(
    "vscode.provideDocumentRangeSemanticTokensLegend",
    "_provideDocumentRangeSemanticTokensLegend",
    "Provide semantic tokens legend for a document range",
    [Q.Uri, Q.Range.optional()],
    new Ce("A promise that resolves to SemanticTokensLegend.", (i) => {
      if (i)
        return new ny(i.tokenTypes, i.tokenModifiers);
    })
  ),
  new Le(
    "vscode.provideDocumentRangeSemanticTokens",
    "_provideDocumentRangeSemanticTokens",
    "Provide semantic tokens for a document range",
    [Q.Uri, Q.Range],
    new Ce("A promise that resolves to SemanticTokens.", (i) => {
      if (!i)
        return;
      const e = c4(i);
      if (e.type === "full")
        return new Yu(e.data, void 0);
    })
  ),
  new Le(
    "vscode.executeCompletionItemProvider",
    "_executeCompletionItemProvider",
    "Execute completion item provider.",
    [
      Q.Uri,
      Q.Position,
      Q.String.with("triggerCharacter", "Trigger completion when the user types the character, like `,` or `(`").optional(),
      Q.Number.with("itemResolveCount", "Number of completions to resolve (too large numbers slow down completions)").optional()
    ],
    new Ce(
      "A promise that resolves to a CompletionList-instance.",
      (i, e, t) => {
        if (!i)
          return new zu([]);
        const n = i.suggestions.map((r) => Zy.to(r, t));
        return new zu(n, i.incomplete);
      }
    )
  ),
  new Le(
    "vscode.executeSignatureHelpProvider",
    "_executeSignatureHelpProvider",
    "Execute signature help provider.",
    [Q.Uri, Q.Position, Q.String.with("triggerCharacter", "Trigger signature help when the user types the character, like `,` or `(`").optional()],
    new Ce("A promise that resolves to SignatureHelp.", (i) => {
      if (i)
        return $f.to(i);
    })
  ),
  new Le(
    "vscode.executeCodeLensProvider",
    "_executeCodeLensProvider",
    "Execute code lens provider.",
    [Q.Uri, Q.Number.with("itemResolveCount", "Number of lenses that should be resolved and returned. Will only return resolved lenses, will impact performance)").optional()],
    new Ce(
      "A promise that resolves to an array of CodeLens-instances.",
      (i, e, t) => nr((n) => new Hm(j.to(n.range), n.command && t.fromInternal(n.command)))(i)
    )
  ),
  new Le(
    "vscode.executeCodeActionProvider",
    "_executeCodeActionProvider",
    "Execute code action provider.",
    [
      Q.Uri,
      new Q(
        "rangeOrSelection",
        "Range in a text document. Some refactoring provider requires Selection object.",
        (i) => $e.isRange(i),
        (i) => os.isSelection(i) ? Cr.from(i) : j.from(i)
      ),
      Q.String.with("kind", "Code action kind to return code actions for").optional(),
      Q.Number.with("itemResolveCount", "Number of code actions to resolve (too large numbers slow down code actions)").optional()
    ],
    new Ce(
      "A promise that resolves to an array of Command-instances.",
      (i, e, t) => nr((n) => {
        if (n._isSynthetic) {
          if (!n.command)
            throw new Error("Synthetic code actions must have a command");
          return t.fromInternal(n.command);
        } else {
          const r = new cf(n.title, n.kind ? new Nt(n.kind) : void 0);
          return n.edit && (r.edit = kn.to(n.edit)), n.command && (r.command = t.fromInternal(n.command)), r.isPreferred = n.isPreferred, r;
        }
      })(i)
    )
  ),
  new Le(
    "vscode.executeDocumentColorProvider",
    "_executeDocumentColorProvider",
    "Execute document color provider.",
    [Q.Uri],
    new Ce(
      "A promise that resolves to an array of ColorInformation objects.",
      (i) => i ? i.map(
        (e) => new jm(j.to(e.range), nd.to(e.color))
      ) : []
    )
  ),
  new Le(
    "vscode.executeColorPresentationProvider",
    "_executeColorPresentationProvider",
    "Execute color presentation provider.",
    [
      new Q(
        "color",
        "The color to show and insert",
        (i) => i instanceof Gu,
        nd.from
      ),
      new Q(
        "context",
        "Context object with uri and range",
        (i) => !0,
        (i) => ({ uri: i.uri, range: j.from(i.range) })
      )
    ],
    new Ce(
      "A promise that resolves to an array of ColorPresentation objects.",
      (i) => i ? i.map(A_.to) : []
    )
  ),
  new Le(
    "vscode.executeInlayHintProvider",
    "_executeInlayHintProvider",
    "Execute inlay hints provider",
    [Q.Uri, Q.Range],
    new Ce(
      "A promise that resolves to an array of Inlay objects",
      (i, e, t) => i.map(e0.to.bind(void 0, t))
    )
  ),
  new Le(
    "vscode.executeFoldingRangeProvider",
    "_executeFoldingRangeProvider",
    "Execute folding range provider",
    [Q.Uri],
    new Ce(
      "A promise that resolves to an array of FoldingRange objects",
      (i, e) => {
        if (i)
          return i.map(N_.to);
      }
    )
  ),
  new Le(
    "vscode.resolveNotebookContentProviders",
    "_resolveNotebookContentProvider",
    "Resolve Notebook Content Providers",
    [],
    new Ce(
      "A promise that resolves to an array of NotebookContentProvider static info objects.",
      nr((i) => ({
        viewType: i.viewType,
        displayName: i.displayName,
        options: {
          transientOutputs: i.options.transientOutputs,
          transientCellMetadata: i.options.transientCellMetadata,
          transientDocumentMetadata: i.options.transientDocumentMetadata
        },
        filenamePattern: i.filenamePattern.map((e) => O_.to(e))
      }))
    )
  ),
  new Le(
    "vscode.executeInlineValueProvider",
    "_executeInlineValueProvider",
    "Execute inline value provider",
    [
      Q.Uri,
      Q.Range,
      new Q(
        "context",
        "An InlineValueContext",
        (i) => i && typeof i.frameId == "number" && i.stoppedLocation instanceof $e,
        (i) => D_.from(i)
      )
    ],
    new Ce("A promise that resolves to an array of InlineValue objects", (i) => i.map(S_.to))
  ),
  new Le(
    "vscode.open",
    "_workbench.open",
    "Opens the provided resource in the editor. Can be a text or binary file, or an http(s) URL. If you need more control over the options for opening a text file, use vscode.window.showTextDocument instead.",
    [
      new Q(
        "uriOrString",
        "Uri-instance or string (only http/https)",
        (i) => x.isUri(i) || typeof i == "string" && rL(i, fe.http, fe.https),
        (i) => i
      ),
      new Q(
        "columnOrOptions",
        "Either the column in which to open or editor options, see vscode.TextDocumentShowOptions",
        (i) => i === void 0 || typeof i == "number" || typeof i == "object",
        (i) => i && (typeof i == "number" ? [li.from(i), void 0] : [li.from(i.viewColumn), xh.from(i)])
      ).optional(),
      Q.String.with("label", "").optional()
    ],
    Ce.Void
  ),
  new Le(
    "vscode.openWith",
    "_workbench.openWith",
    "Opens the provided resource with a specific editor.",
    [
      Q.Uri.with("resource", "Resource to open"),
      Q.String.with("viewId", "Custom editor view id. This should be the viewType string for custom editors or the notebookType string for notebooks. Use 'default' to use VS Code's default text editor"),
      new Q(
        "columnOrOptions",
        "Either the column in which to open or editor options, see vscode.TextDocumentShowOptions",
        (i) => i === void 0 || typeof i == "number" || typeof i == "object",
        (i) => i && (typeof i == "number" ? [li.from(i), void 0] : [li.from(i.viewColumn), xh.from(i)])
      ).optional()
    ],
    Ce.Void
  ),
  new Le(
    "vscode.diff",
    "_workbench.diff",
    "Opens the provided resources in the diff editor to compare their contents.",
    [
      Q.Uri.with("left", "Left-hand side resource of the diff editor"),
      Q.Uri.with("right", "Right-hand side resource of the diff editor"),
      Q.String.with("title", "Human readable title for the diff editor").optional(),
      new Q(
        "columnOrOptions",
        "Either the column in which to open or editor options, see vscode.TextDocumentShowOptions",
        (i) => i === void 0 || typeof i == "object",
        (i) => i && [li.from(i.viewColumn), xh.from(i)]
      ).optional()
    ],
    Ce.Void
  ),
  new Le(
    "vscode.changes",
    "_workbench.changes",
    "Opens a list of resources in the changes editor to compare their contents.",
    [
      Q.String.with("title", "Human readable title for the changes editor"),
      new Q("resourceList", "List of resources to compare", (i) => {
        for (const e of i) {
          if (e.length !== 3)
            return !1;
          const [t, n, r] = e;
          if (!x.isUri(t) || !x.isUri(n) && n !== void 0 && n !== null || !x.isUri(r) && r !== void 0 && r !== null)
            return !1;
        }
        return !0;
      }, (i) => i)
    ],
    Ce.Void
  ),
  new Le(
    "vscode.prepareTypeHierarchy",
    "_executePrepareTypeHierarchy",
    "Prepare type hierarchy at a position inside a document",
    [Q.Uri, Q.Position],
    new Ce(
      "A promise that resolves to an array of TypeHierarchyItem-instances",
      (i) => i.map(vl.to)
    )
  ),
  new Le(
    "vscode.provideSupertypes",
    "_executeProvideSupertypes",
    "Compute supertypes for an item",
    [Q.TypeHierarchyItem],
    new Ce(
      "A promise that resolves to an array of TypeHierarchyItem-instances",
      (i) => i.map(vl.to)
    )
  ),
  new Le(
    "vscode.provideSubtypes",
    "_executeProvideSubtypes",
    "Compute subtypes for an item",
    [Q.TypeHierarchyItem],
    new Ce(
      "A promise that resolves to an array of TypeHierarchyItem-instances",
      (i) => i.map(vl.to)
    )
  ),
  new Le(
    "vscode.revealTestInExplorer",
    "_revealTestInExplorer",
    "Reveals a test instance in the explorer",
    [Q.TestItem],
    Ce.Void
  ),
  new Le(
    "vscode.startContinuousTestRun",
    "testing.startContinuousRunFromExtension",
    "Starts running the given tests with continuous run mode.",
    [Q.TestProfile, Q.Arr(Q.TestItem)],
    Ce.Void
  ),
  new Le(
    "vscode.stopContinuousTestRun",
    "testing.stopContinuousRunFromExtension",
    "Stops running the given tests with continuous run mode.",
    [Q.Arr(Q.TestItem)],
    Ce.Void
  ),
  new Le(
    "vscode.experimental.editSession.continue",
    "_workbench.editSessions.actions.continueEditSession",
    "Continue the current edit session in a different workspace",
    [Q.Uri.with("workspaceUri", "The target workspace to continue the current edit session in")],
    Ce.Void
  ),
  new Le(
    "setContext",
    "_setContext",
    "Set a custom context key value that can be used in when clauses.",
    [
      Q.String.with("name", "The context key name"),
      new Q("value", "The context key value", () => !0, (i) => i)
    ],
    Ce.Void
  ),
  new Le(
    "vscode.editorChat.start",
    "inlineChat.start",
    "Invoke a new editor chat session",
    [new Q("Run arguments", "", (i) => !0, (i) => {
      if (i)
        return {
          initialRange: i.initialRange ? j.from(i.initialRange) : void 0,
          initialSelection: os.isSelection(i.initialSelection) ? Cr.from(i.initialSelection) : void 0,
          message: i.message,
          attachments: i.attachments,
          autoSend: i.autoSend,
          position: i.position ? ut.from(i.position) : void 0
        };
    })],
    Ce.Void
  )
];
class OU {
  static register(e) {
    MU.forEach(e.registerApiCommand, e), this._registerValidateWhenClausesCommand(e);
  }
  static _registerValidateWhenClausesCommand(e) {
    e.registerCommand(!1, "_validateWhenClauses", g3);
  }
}
function nr(i) {
  return (e) => {
    if (Array.isArray(e))
      return e.map(i);
  };
}
function co(i) {
  if (!Array.isArray(i))
    return;
  const e = [];
  for (const t of i)
    f9(t) ? e.push(Ff.to(t)) : e.push(hn.to(t));
  return e;
}
let Bx = class {
  constructor(e, t) {
    this._proxy = e.getProxy(ie.MainThreadBulkEdits), this._versionInformationProvider = {
      getTextDocumentVersion: (n) => {
        var r;
        return (r = t.getDocument(n)) == null ? void 0 : r.version;
      },
      getNotebookDocumentVersion: () => {
      }
    };
  }
  applyWorkspaceEdit(e, t, n) {
    const r = new Ki(kn.from(e, this._versionInformationProvider));
    return this._proxy.$tryApplyWorkspaceEdit(r, void 0, (n == null ? void 0 : n.isRefactoring) ?? !1);
  }
};
Bx = z([
  O(0, tt)
], Bx);
function FU(i) {
  return !!i && typeof i.sessionId == "string" && i.$mid === rt.ChatViewContext;
}
var u4;
(function(i) {
  i[i.Info = 0] = "Info", i[i.Warning = 1] = "Warning", i[i.Error = 2] = "Error";
})(u4 || (u4 = {}));
var d4;
(function(i) {
  i[i.Complete = 1] = "Complete", i[i.Partial = 2] = "Partial", i[i.Omitted = 3] = "Omitted";
})(d4 || (d4 = {}));
var h4;
(function(i) {
  i[i.NoReason = 0] = "NoReason", i[i.FilteredContentRetry = 1] = "FilteredContentRetry", i[i.CopyrightContentRetry = 2] = "CopyrightContentRetry";
})(h4 || (h4 = {}));
var g1;
(function(i) {
  i[i.Down = 0] = "Down", i[i.Up = 1] = "Up";
})(g1 || (g1 = {}));
var f4;
(function(i) {
  i.IncorrectCode = "incorrectCode", i.DidNotFollowInstructions = "didNotFollowInstructions", i.IncompleteCode = "incompleteCode", i.MissingContext = "missingContext", i.PoorlyWrittenOrFormatted = "poorlyWrittenOrFormatted", i.RefusedAValidRequest = "refusedAValidRequest", i.OffensiveOrUnsafe = "offensiveOrUnsafe", i.Other = "other", i.WillReportIssue = "willReportIssue";
})(f4 || (f4 = {}));
var p4;
(function(i) {
  i[i.Action = 1] = "Action", i[i.Toolbar = 2] = "Toolbar";
})(p4 || (p4 = {}));
class Wx {
  constructor(e, t, n, r, s) {
    this._extension = e, this._request = t, this._proxy = n, this._commandsConverter = r, this._sessionDisposables = s, this._stopWatch = Js.create(!1), this._isClosed = !1;
  }
  close() {
    this._isClosed = !0;
  }
  get timings() {
    return {
      firstProgress: this._firstProgress,
      totalElapsed: this._stopWatch.elapsed()
    };
  }
  get apiObject() {
    if (!this._apiObject) {
      let n = function(l) {
        if (e._isClosed) {
          const c = new Error("Response stream has been closed");
          throw Error.captureStackTrace(c, l), c;
        }
      }, o = function(l, c) {
        if (r.push(c !== void 0 ? [l, c] : l) === 1 && queueMicrotask(() => {
          e._proxy.$handleProgressChunk(e._request.requestId, r).finally(() => {
            s.forEach((d) => d()), s.length = 0;
          }), r.length = 0;
        }), c !== void 0)
          return new Promise((d) => {
            s.push(d);
          });
      };
      const e = this;
      this._stopWatch.reset();
      let t = 0;
      const r = [], s = [], a = (l, c) => {
        if (typeof this._firstProgress > "u" && (l.kind === "markdownContent" || l.kind === "markdownVuln" || l.kind === "prepareToolInvocation") && (this._firstProgress = this._stopWatch.elapsed()), c) {
          const u = t++, d = o(l, u), f = {
            report: (p) => {
              d.then(() => {
                Dn.isMarkdownString(p.value) ? o(qf.from(p), u) : o(bl.from(p), u);
              });
            }
          };
          Promise.all([d, c(f)]).then(([p, v]) => {
            o(g0.from(v), u);
          });
        } else
          o(l);
      };
      this._apiObject = Object.freeze({
        clearToPreviousToolInvocation(l) {
          return n(this.markdown), o({ kind: "clearToPreviousToolInvocation", reason: l }), this;
        },
        markdown(l) {
          n(this.markdown);
          const c = new dv(l), u = Wf.from(c);
          return a(u), this;
        },
        markdownWithVulnerabilities(l, c) {
          n(this.markdown), c && H(e._extension, "chatParticipantAdditions");
          const u = new Pf(l, c), d = W_.from(u);
          return a(d), this;
        },
        codeblockUri(l, c) {
          n(this.codeblockUri), H(e._extension, "chatParticipantAdditions");
          const u = new pv(l, c), d = B_.from(u);
          return a(d), this;
        },
        filetree(l, c) {
          n(this.filetree);
          const u = new hv(l, c), d = Vf.from(u);
          return a(d), this;
        },
        anchor(l, c) {
          const u = new Af(l, c);
          return this.push(u);
        },
        button(l) {
          n(this.anchor);
          const c = new fv(l), u = Gf.from(c, e._commandsConverter, e._sessionDisposables);
          return a(u), this;
        },
        progress(l, c) {
          n(this.progress);
          const u = new Tg(l, c), d = c ? z_.from(u) : zf.from(u);
          return a(d, c), this;
        },
        warning(l) {
          n(this.progress), H(e._extension, "chatParticipantAdditions");
          const c = new Rf(l), u = qf.from(c);
          return a(u), this;
        },
        reference(l, c) {
          return this.reference2(l, c);
        },
        reference2(l, c, u) {
          var d;
          if (n(this.reference), typeof l == "object" && "variableName" in l && H(e._extension, "chatParticipantAdditions"), typeof l == "object" && "variableName" in l && !l.value) {
            const f = e._request.variables.variables.find((p) => p.name === l.variableName);
            if (f) {
              let p;
              if ((d = f.references) != null && d.length)
                p = f.references.map((v) => ({
                  kind: "reference",
                  reference: { variableName: l.variableName, value: v.reference }
                }));
              else {
                const v = new ml(l, c, u);
                p = [bl.from(v)];
              }
              return p.forEach((v) => a(v)), this;
            }
          } else {
            const f = new ml(l, c, u), p = bl.from(f);
            a(p);
          }
          return this;
        },
        codeCitation(l, c, u) {
          n(this.codeCitation), H(e._extension, "chatParticipantAdditions");
          const d = new m_(l, c, u), f = Q_.from(d);
          a(f);
        },
        textEdit(l, c) {
          n(this.textEdit), H(e._extension, "chatParticipantAdditions");
          const u = new Lf(l, c);
          u.isDone = c === !0 ? !0 : void 0;
          const d = q_.from(u);
          return a(d), this;
        },
        notebookEdit(l, c) {
          n(this.notebookEdit), H(e._extension, "chatParticipantAdditions");
          const u = new __(l, c), d = G_.from(u);
          return a(d), this;
        },
        confirmation(l, c, u, d) {
          n(this.confirmation), H(e._extension, "chatParticipantAdditions");
          const f = new g_(l, c, u, d), p = V_.from(f);
          return a(p), this;
        },
        prepareToolInvocation(l) {
          n(this.prepareToolInvocation), H(e._extension, "chatParticipantAdditions");
          const c = new Nf(l), u = jf.from(c);
          return a(u), this;
        },
        push(l) {
          if (n(this.push), (l instanceof Lf || l instanceof __ || l instanceof Pf || l instanceof Rf || l instanceof g_ || l instanceof m_ || l instanceof gv || l instanceof bS || l instanceof yS || l instanceof Tg) && H(e._extension, "chatParticipantAdditions"), l instanceof ml)
            this.reference2(l.value, l.iconPath, l.options);
          else if (l instanceof Tg) {
            const c = l.task ? z_.from(l) : zf.from(l);
            a(c, l.task);
          } else if (l instanceof Af) {
            const c = hd.from(l);
            if (l.resolve) {
              H(e._extension, "chatParticipantAdditions"), c.resolveId = dn();
              const u = new Lt();
              l.resolve(u.token).then(() => {
                const d = hd.from(l);
                e._proxy.$handleAnchorResolve(e._request.requestId, c.resolveId, d);
              }).then(() => u.dispose(), () => u.dispose()), e._sessionDisposables.add(Ie(() => u.dispose(!0)));
            }
            a(c);
          } else if (l instanceof Nf) {
            H(e._extension, "chatParticipantAdditions");
            const c = jf.from(l);
            return a(c), this;
          } else {
            const c = Qf.from(l, e._commandsConverter, e._sessionDisposables);
            a(c);
          }
          return this;
        }
      });
    }
    return this._apiObject;
  }
}
const Cs = class Cs extends xe {
  constructor(e, t, n, r, s, o, a) {
    super(), this._logService = t, this._commands = n, this._documents = r, this._languageModels = s, this._diagnostics = o, this._tools = a, this._agents = /* @__PURE__ */ new Map(), this._participantDetectionProviders = /* @__PURE__ */ new Map(), this._relatedFilesProviders = /* @__PURE__ */ new Map(), this._sessionDisposables = this._register(new Vg()), this._completionDisposables = this._register(new Vg()), this._inFlightRequests = /* @__PURE__ */ new Set(), this._onDidChangeChatRequestTools = this._register(new M()), this.onDidChangeChatRequestTools = this._onDidChangeChatRequestTools.event, this._onDidDisposeChatSession = this._register(new M()), this.onDidDisposeChatSession = this._onDidDisposeChatSession.event, this._proxy = e.getProxy(ie.MainThreadChatAgents2), n.registerArgumentProcessor({
      processArgument: (l) => FU(l) ? null : l
    });
  }
  transferActiveChat(e) {
    this._proxy.$transferActiveChatSession(e);
  }
  createChatAgent(e, t, n) {
    const r = Cs._idPool++, s = new g4(e, t, this._proxy, r, n);
    return this._agents.set(r, s), this._proxy.$registerAgent(r, e.identifier, t, {}, void 0), s.apiAgent;
  }
  createDynamicChatAgent(e, t, n, r) {
    const s = Cs._idPool++, o = new g4(e, t, this._proxy, s, r);
    return this._agents.set(s, o), this._proxy.$registerAgent(s, e.identifier, t, { isSticky: !0 }, n), o.apiAgent;
  }
  registerChatParticipantDetectionProvider(e, t) {
    const n = Cs._participantDetectionProviderIdPool++;
    return this._participantDetectionProviders.set(n, new UU(e, t)), this._proxy.$registerChatParticipantDetectionProvider(n), Ie(() => {
      this._participantDetectionProviders.delete(n), this._proxy.$unregisterChatParticipantDetectionProvider(n);
    });
  }
  registerRelatedFilesProvider(e, t, n) {
    const r = Cs._relatedFilesProviderIdPool++;
    return this._relatedFilesProviders.set(r, new $U(e, t)), this._proxy.$registerRelatedFilesProvider(r, n), Ie(() => {
      this._relatedFilesProviders.delete(r), this._proxy.$unregisterRelatedFilesProvider(r);
    });
  }
  async $provideRelatedFiles(e, t, n) {
    const r = this._relatedFilesProviders.get(e);
    if (!r)
      return Promise.resolve([]);
    const s = m0.to(t);
    return await r.provider.provideRelatedFiles(s, n) ?? void 0;
  }
  async $detectChatParticipant(e, t, n, r, s) {
    const o = this._participantDetectionProviders.get(e);
    if (!o)
      return;
    const { request: a, location: l, history: c } = await this._createRequest(t, n, o.extension), u = await this.getModelForRequest(a, o.extension), d = Kf.to(a, l, u, this.getDiagnosticsWhenEnabled(o.extension), this.getToolsForRequest(o.extension, a), o.extension, this._logService);
    return o.provider.provideParticipantDetection(d, { history: c }, { participants: r.participants, location: K_.to(r.location) }, s);
  }
  async _createRequest(e, t, n) {
    var a, l;
    const r = Wi(e), s = await this.prepareHistoryTurns(n, r.agentId, t);
    let o;
    if (((a = r.locationData) == null ? void 0 : a.type) === ln.Editor) {
      const c = this._documents.getDocument(r.locationData.document);
      o = new O5(c, Cr.to(r.locationData.selection), j.to(r.locationData.wholeRange));
    } else if (((l = r.locationData) == null ? void 0 : l.type) === ln.Notebook) {
      const c = this._documents.getDocument(r.locationData.sessionInputUri);
      o = new F5(c);
    }
    return { request: r, location: o, history: s };
  }
  async getModelForRequest(e, t) {
    let n;
    if (e.userSelectedModelId && (n = await this._languageModels.getLanguageModelByIdentifier(t, e.userSelectedModelId)), !n && (n = await this._languageModels.getDefaultLanguageModel(t), !n))
      throw new Error("Language model unavailable");
    return n;
  }
  async $setRequestPaused(e, t, n) {
    const r = this._agents.get(e);
    if (!r)
      return;
    const s = Bi.find(this._inFlightRequests, (o) => o.requestId === t);
    s && r.setChatRequestPauseState({ request: s.extRequest, isPaused: n });
  }
  async $setRequestTools(e, t) {
    const n = [...this._inFlightRequests].find((r) => r.requestId === e);
    if (n) {
      n.extRequest.tools.clear();
      for (const [r, s] of this.getToolsForRequest(n.extension, t))
        n.extRequest.tools.set(r, s);
      this._onDidChangeChatRequestTools.fire(n.extRequest);
    }
  }
  async $invokeAgent(e, t, n, r) {
    const s = this._agents.get(e);
    if (!s)
      throw new Error(
        `[CHAT](${e}) CANNOT invoke agent because the agent is not registered`
      );
    let o, a;
    try {
      const { request: l, location: c, history: u } = await this._createRequest(t, n, s.extension);
      let d = this._sessionDisposables.get(l.sessionId);
      d || (d = new Te(), this._sessionDisposables.set(l.sessionId, d)), o = new Wx(
        s.extension,
        l,
        this._proxy,
        this._commands.converter,
        d
      );
      const f = await this.getModelForRequest(l, s.extension), p = Kf.to(l, c, f, this.getDiagnosticsWhenEnabled(s.extension), this.getToolsForRequest(s.extension, l), s.extension, this._logService);
      a = { requestId: t.requestId, extRequest: p, extension: s.extension }, this._inFlightRequests.add(a);
      const v = s.invoke(p, { history: u }, o.apiObject, r);
      return await HU(1e3, Promise.resolve(v).then((_) => {
        if (_ != null && _.metadata)
          try {
            JSON.stringify(_.metadata);
          } catch (E) {
            const S = `result.metadata MUST be JSON.stringify-able. Got error: ${E.message}`;
            return this._logService.error(`[${s.extension.identifier.value}] [@${s.id}] ${S}`, s.extension), { errorDetails: { message: S }, timings: o == null ? void 0 : o.timings, nextQuestion: _.nextQuestion };
          }
        let m;
        return _ != null && _.errorDetails && (m = {
          ..._.errorDetails,
          responseIsIncomplete: !0
        }), (m != null && m.responseIsRedacted || m != null && m.isQuotaExceeded || m != null && m.confirmationButtons) && H(s.extension, "chatParticipantPrivate"), { errorDetails: m, timings: o == null ? void 0 : o.timings, metadata: _ == null ? void 0 : _.metadata, nextQuestion: _ == null ? void 0 : _.nextQuestion, details: _ == null ? void 0 : _.details };
      }), r);
    } catch (l) {
      this._logService.error(l, s.extension), l instanceof mr && l.cause && (l = l.cause);
      const c = l instanceof Error && l.name === "ChatQuotaExceeded";
      return { errorDetails: { message: wd(l), responseIsIncomplete: !0, isQuotaExceeded: c } };
    } finally {
      a && this._inFlightRequests.delete(a), o == null || o.close();
    }
  }
  getDiagnosticsWhenEnabled(e) {
    return dt(e, "chatReferenceDiagnostic") ? this._diagnostics.getDiagnostics() : [];
  }
  getToolsForRequest(e, t) {
    if (!t.userSelectedTools)
      return /* @__PURE__ */ new Map();
    const n = /* @__PURE__ */ new Map();
    for (const r of this._tools.getTools(e))
      typeof t.userSelectedTools[r.name] == "boolean" && n.set(r.name, t.userSelectedTools[r.name]);
    return n;
  }
  async prepareHistoryTurns(e, t, n) {
    const r = [];
    for (const s of n.history) {
      const o = uu.to(s.result), a = t === s.request.agentId ? o : { ...o, metadata: void 0 }, l = [], c = [];
      for (const p of s.request.variables.variables)
        if (p.kind === "tool")
          c.push(Jf.to(p));
        else if (p.kind === "toolset")
          c.push(...p.value.map(Jf.to));
        else {
          const v = J_.to(p, this.getDiagnosticsWhenEnabled(e), this._logService);
          v && l.push(v);
        }
      const u = dt(e, "chatParticipantPrivate") ? s.request.editedFileEvents : void 0, d = new v_(s.request.message, s.request.command, l, s.request.agentId, c, u);
      r.push(d);
      const f = Xt(s.response.map((p) => Qf.toContent(p, this._commands.converter)));
      r.push(new M5(f, a, s.request.agentId, s.request.command));
    }
    return r;
  }
  $releaseSession(e) {
    this._sessionDisposables.deleteAndDispose(e), this._onDidDisposeChatSession.fire(e);
  }
  async $provideFollowups(e, t, n, r, s) {
    const o = this._agents.get(t);
    if (!o)
      return Promise.resolve([]);
    const a = Wi(e), l = await this.prepareHistoryTurns(o.extension, o.id, r), c = uu.to(n);
    return (await o.provideFollowups(c, { history: l }, s)).filter((u) => {
      const d = !u.participant || Bi.some(this._agents.values(), (f) => f.id === u.participant && gt.equals(f.extension.identifier, o.extension.identifier));
      return d || this._logService.warn(`[@${o.id}] ChatFollowup refers to an unknown participant: ${u.participant}`), d;
    }).map((u) => $_.from(u, a));
  }
  $acceptFeedback(e, t, n) {
    const r = this._agents.get(e);
    if (!r)
      return;
    const s = uu.to(t);
    let o;
    switch (n.direction) {
      case g1.Down:
        o = Tf.Unhelpful;
        break;
      case g1.Up:
        o = Tf.Helpful;
        break;
    }
    const a = {
      result: s,
      kind: o,
      unhelpfulReason: dt(r.extension, "chatParticipantAdditions") ? n.reason : void 0
    };
    r.acceptFeedback(Object.freeze(a));
  }
  $acceptAction(e, t, n) {
    const r = this._agents.get(e);
    if (!r || n.action.kind === "vote")
      return;
    const s = v0.to(t, n, this._commands.converter);
    s && r.acceptAction(Object.freeze(s));
  }
  async $invokeCompletionProvider(e, t, n) {
    const r = this._agents.get(e);
    if (!r)
      return [];
    let s = this._completionDisposables.get(e);
    return s ? s.clear() : (s = new Te(), this._completionDisposables.set(e, s)), (await r.invokeCompletionProvider(t, n)).map(
      (a) => _0.from(a, this._commands.converter, s)
    );
  }
  async $provideChatTitle(e, t, n) {
    const r = this._agents.get(e);
    if (!r)
      return;
    const s = await this.prepareHistoryTurns(r.extension, r.id, { history: t });
    return await r.provideTitle({ history: s }, n);
  }
  async $provideChatSummary(e, t, n) {
    const r = this._agents.get(e);
    if (!r)
      return;
    const s = await this.prepareHistoryTurns(r.extension, r.id, { history: t });
    return await r.provideSummary({ history: s }, n);
  }
};
Cs._idPool = 0, Cs._participantDetectionProviderIdPool = 0, Cs._relatedFilesProviderIdPool = 0;
let Vx = Cs;
class UU {
  constructor(e, t) {
    this.extension = e, this.provider = t;
  }
}
class $U {
  constructor(e, t) {
    this.extension = e, this.provider = t;
  }
}
class g4 {
  constructor(e, t, n, r, s) {
    this.extension = e, this.id = t, this._proxy = n, this._handle = r, this._requestHandler = s, this._onDidReceiveFeedback = new M(), this._onDidPerformAction = new M(), this._pauseStateEmitter = new M();
  }
  acceptFeedback(e) {
    this._onDidReceiveFeedback.fire(e);
  }
  acceptAction(e) {
    this._onDidPerformAction.fire(e);
  }
  setChatRequestPauseState(e) {
    this._pauseStateEmitter.fire(e);
  }
  async invokeCompletionProvider(e, t) {
    return this._agentVariableProvider ? await this._agentVariableProvider.provider.provideCompletionItems(e, t) ?? [] : [];
  }
  async provideFollowups(e, t, n) {
    if (!this._followupProvider)
      return [];
    const r = await this._followupProvider.provideFollowups(e, t, n);
    return r ? r.filter((s) => !(s && "commandId" in s)).filter((s) => !(s && "message" in s)) : [];
  }
  async provideTitle(e, t) {
    if (this._titleProvider)
      return await this._titleProvider.provideChatTitle(e, t) ?? void 0;
  }
  async provideSummary(e, t) {
    if (this._summarizer)
      return await this._summarizer.provideChatSummary(e, t) ?? void 0;
  }
  get apiAgent() {
    let e = !1, t = !1;
    const n = () => {
      e || t || (t = !0, queueMicrotask(() => {
        this._proxy.$updateAgent(this._handle, {
          icon: this._iconPath ? this._iconPath instanceof x ? this._iconPath : "light" in this._iconPath ? this._iconPath.light : void 0 : void 0,
          iconDark: this._iconPath && "dark" in this._iconPath ? this._iconPath.dark : void 0,
          themeIcon: this._iconPath instanceof Ji ? this._iconPath : void 0,
          hasFollowups: this._followupProvider !== void 0,
          helpTextPrefix: !this._helpTextPrefix || typeof this._helpTextPrefix == "string" ? this._helpTextPrefix : Ne.from(this._helpTextPrefix),
          helpTextVariablesPrefix: !this._helpTextVariablesPrefix || typeof this._helpTextVariablesPrefix == "string" ? this._helpTextVariablesPrefix : Ne.from(this._helpTextVariablesPrefix),
          helpTextPostfix: !this._helpTextPostfix || typeof this._helpTextPostfix == "string" ? this._helpTextPostfix : Ne.from(this._helpTextPostfix),
          supportIssueReporting: this._supportIssueReporting,
          requester: this._requester,
          additionalWelcomeMessage: !this._additionalWelcomeMessage || typeof this._additionalWelcomeMessage == "string" ? this._additionalWelcomeMessage : Ne.from(this._additionalWelcomeMessage)
        }), t = !1;
      }));
    }, r = this;
    return {
      get id() {
        return r.id;
      },
      get iconPath() {
        return r._iconPath;
      },
      set iconPath(s) {
        r._iconPath = s, n();
      },
      get requestHandler() {
        return r._requestHandler;
      },
      set requestHandler(s) {
        ST(typeof s == "function", "Invalid request handler"), r._requestHandler = s;
      },
      get followupProvider() {
        return r._followupProvider;
      },
      set followupProvider(s) {
        r._followupProvider = s, n();
      },
      get helpTextPrefix() {
        return H(r.extension, "defaultChatParticipant"), r._helpTextPrefix;
      },
      set helpTextPrefix(s) {
        H(r.extension, "defaultChatParticipant"), r._helpTextPrefix = s, n();
      },
      get helpTextVariablesPrefix() {
        return H(r.extension, "defaultChatParticipant"), r._helpTextVariablesPrefix;
      },
      set helpTextVariablesPrefix(s) {
        H(r.extension, "defaultChatParticipant"), r._helpTextVariablesPrefix = s, n();
      },
      get helpTextPostfix() {
        return H(r.extension, "defaultChatParticipant"), r._helpTextPostfix;
      },
      set helpTextPostfix(s) {
        H(r.extension, "defaultChatParticipant"), r._helpTextPostfix = s, n();
      },
      get supportIssueReporting() {
        return H(r.extension, "chatParticipantPrivate"), r._supportIssueReporting;
      },
      set supportIssueReporting(s) {
        H(r.extension, "chatParticipantPrivate"), r._supportIssueReporting = s, n();
      },
      get onDidReceiveFeedback() {
        return r._onDidReceiveFeedback.event;
      },
      set participantVariableProvider(s) {
        if (H(r.extension, "chatParticipantAdditions"), r._agentVariableProvider = s, s) {
          if (!s.triggerCharacters.length)
            throw new Error("triggerCharacters are required");
          r._proxy.$registerAgentCompletionsProvider(r._handle, r.id, s.triggerCharacters);
        } else
          r._proxy.$unregisterAgentCompletionsProvider(r._handle, r.id);
      },
      get participantVariableProvider() {
        return H(r.extension, "chatParticipantAdditions"), r._agentVariableProvider;
      },
      set additionalWelcomeMessage(s) {
        H(r.extension, "defaultChatParticipant"), r._additionalWelcomeMessage = s, n();
      },
      get additionalWelcomeMessage() {
        return H(r.extension, "defaultChatParticipant"), r._additionalWelcomeMessage;
      },
      set titleProvider(s) {
        H(r.extension, "defaultChatParticipant"), r._titleProvider = s, n();
      },
      get titleProvider() {
        return H(r.extension, "defaultChatParticipant"), r._titleProvider;
      },
      set summarizer(s) {
        H(r.extension, "defaultChatParticipant"), r._summarizer = s;
      },
      get summarizer() {
        return H(r.extension, "defaultChatParticipant"), r._summarizer;
      },
      get onDidChangePauseState() {
        return H(r.extension, "chatParticipantAdditions"), r._pauseStateEmitter.event;
      },
      onDidPerformAction: dt(this.extension, "chatParticipantAdditions") ? this._onDidPerformAction.event : void 0,
      set requester(s) {
        r._requester = s, n();
      },
      get requester() {
        return r._requester;
      },
      dispose() {
        e = !0, r._followupProvider = void 0, r._onDidReceiveFeedback.dispose(), r._proxy.$unregisterAgent(r._handle);
      }
    };
  }
  invoke(e, t, n, r) {
    return this._requestHandler(e, t, n, r);
  }
}
function HU(i, e, t) {
  return new Promise((n, r) => {
    const s = t.onCancellationRequested(async () => {
      s.dispose(), await ns(i), n(void 0);
    });
    e.then(n, r).finally(() => s.dispose());
  });
}
class BU {
  constructor(e) {
    this._items = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadChatStatus);
  }
  createChatStatusItem(e, t) {
    const n = WU(e.identifier, t);
    if (this._items.has(n))
      throw new Error(`Chat status item '${t}' already exists`);
    const r = {
      id: n,
      title: "",
      description: "",
      detail: ""
    };
    let s = !1, o = !1;
    const a = () => {
      if (s)
        throw new Error("Chat status item is disposed");
      o && this._proxy.$setEntry(t, r);
    }, l = Object.freeze({
      id: t,
      get title() {
        return r.title;
      },
      set title(c) {
        r.title = c, a();
      },
      get description() {
        return r.description;
      },
      set description(c) {
        r.description = c, a();
      },
      get detail() {
        return r.detail;
      },
      set detail(c) {
        r.detail = c, a();
      },
      show: () => {
        o = !0, a();
      },
      hide: () => {
        o = !1, this._proxy.$disposeEntry(t);
      },
      dispose: () => {
        s = !0, this._proxy.$disposeEntry(t), this._items.delete(n);
      }
    });
    return this._items.set(n, l), l;
  }
}
function WU(i, e) {
  return `${gt.toKey(i)}.${e}`;
}
class VU {
  constructor(e) {
    const t = e.getProxy(ie.MainThreadClipboard);
    this.value = Object.freeze({
      readText() {
        return t.$readText();
      },
      writeText(n) {
        return t.$writeText(n);
      }
    });
  }
}
const YA = "vscode-cdn.net", zU = `vscode-resource.${YA}`, zx = `'self' https://*.${YA}`;
function Ih(i, e) {
  return i.scheme === fe.http || i.scheme === fe.https ? i : (e && e.authority && e.isRemote && i.scheme === fe.file && (i = x.from({
    scheme: fe.vscodeRemote,
    authority: e.authority,
    path: i.path
  })), x.from({
    scheme: fe.https,
    authority: `${i.scheme}+${qU(i.authority)}.${zU}`,
    path: i.path,
    fragment: i.fragment,
    query: i.query
  }));
}
function qU(i) {
  return i.replace(/./g, (e) => {
    const t = e.charCodeAt(0);
    return t >= L.a && t <= L.z || t >= L.A && t <= L.Z || t >= L.Digit0 && t <= L.Digit9 ? e : "-" + t.toString(16).padStart(4, "0");
  });
}
class jU {
  constructor(e, t, n) {
    this._proxy = e, this._editors = t, this._remoteInfo = n, this._handlePool = 0, this._disposables = new Te(), this._insets = /* @__PURE__ */ new Map(), this._disposables.add(t.onDidChangeVisibleTextEditors(() => {
      const r = t.getVisibleTextEditors();
      for (const s of this._insets.values())
        r.indexOf(s.editor) < 0 && s.inset.dispose();
    }));
  }
  dispose() {
    this._insets.forEach((e) => e.inset.dispose()), this._disposables.dispose();
  }
  createWebviewEditorInset(e, t, n, r, s) {
    let o;
    for (const p of this._editors.getVisibleTextEditors(!0))
      if (p.value === e) {
        o = p;
        break;
      }
    if (!o)
      throw new Error("not a visible editor");
    const a = this, l = this._handlePool++, c = new M(), u = new M(), d = new class {
      constructor() {
        this._html = "", this._options = /* @__PURE__ */ Object.create(null);
      }
      asWebviewUri(p) {
        return Ih(p, a._remoteInfo);
      }
      get cspSource() {
        return zx;
      }
      set options(p) {
        this._options = p, a._proxy.$setOptions(l, p);
      }
      get options() {
        return this._options;
      }
      set html(p) {
        this._html = p, a._proxy.$setHtml(l, p);
      }
      get html() {
        return this._html;
      }
      get onDidReceiveMessage() {
        return c.event;
      }
      postMessage(p) {
        return a._proxy.$postMessage(l, p);
      }
    }(), f = new class {
      constructor() {
        this.editor = e, this.line = t, this.height = n, this.webview = d, this.onDidDispose = u.event;
      }
      dispose() {
        a._insets.has(l) && (a._insets.delete(l), a._proxy.$disposeEditorInset(l), u.fire(), u.dispose(), c.dispose());
      }
    }();
    return this._proxy.$createEditorInset(l, o.id, o.value.document.uri, t + 1, n, r || {}, s.identifier, s.extensionLocation), this._insets.set(l, { editor: e, inset: f, onDidReceiveMessage: c }), f;
  }
  $onDidDispose(e) {
    const t = this._insets.get(e);
    t && t.inset.dispose();
  }
  $onDidReceiveMessage(e, t) {
    const n = this._insets.get(e);
    n == null || n.onDidReceiveMessage.fire(t);
  }
}
const O1 = class O1 {
  constructor(e) {
    this.providers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadCodeMapper);
  }
  async $mapCode(e, t, n) {
    const r = this.providers.get(e);
    if (!r)
      throw new Error(`Received request to map code for unknown provider handle ${e}`);
    const s = {
      textEdit: (l, c) => {
        c = Xn(c), this._proxy.$handleProgress(t.requestId, {
          uri: l,
          edits: c.map(gi.from)
        });
      },
      notebookEdit: (l, c) => {
        c = Xn(c), this._proxy.$handleProgress(t.requestId, {
          uri: l,
          edits: c.map(j_.from)
        });
      }
    }, o = {
      location: t.location,
      chatRequestId: t.chatRequestId,
      chatRequestModel: t.chatRequestModel,
      chatSessionId: t.chatSessionId,
      codeBlocks: t.codeBlocks.map((l) => ({
        code: l.code,
        resource: x.revive(l.resource),
        markdownBeforeBlock: l.markdownBeforeBlock
      }))
    };
    return await r.provideMappedEdits(o, s, n) ?? null;
  }
  registerMappedEditsProvider(e, t) {
    const n = O1._providerHandlePool++;
    return this._proxy.$registerCodeMapperProvider(n, e.displayName ?? e.name), this.providers.set(n, t), {
      dispose: () => this._proxy.$unregisterCodeMapperProvider(n)
    };
  }
};
O1._providerHandlePool = 0;
let qx = O1;
function GU(i, e, t) {
  const n = i.getProxy(ie.MainThreadComments), p = class p {
    constructor() {
      this._commentControllers = /* @__PURE__ */ new Map(), this._commentControllersByExtension = new Ko(), e.registerArgumentProcessor({
        processArgument: (m) => {
          if (m && m.$mid === rt.CommentController) {
            const E = this._commentControllers.get(m.handle);
            return E ? E.value : m;
          } else if (m && m.$mid === rt.CommentThread) {
            const E = m, S = this._commentControllers.get(E.commentControlHandle);
            if (!S)
              return E;
            const k = S.getCommentThread(E.commentThreadHandle);
            return k ? k.value : E;
          } else if (m && (m.$mid === rt.CommentThreadReply || m.$mid === rt.CommentThreadInstance)) {
            const E = this._commentControllers.get(m.thread.commentControlHandle);
            if (!E)
              return m;
            const S = E.getCommentThread(m.thread.commentThreadHandle);
            return S ? m.$mid === rt.CommentThreadInstance ? S.value : {
              thread: S.value,
              text: m.text
            } : m;
          } else if (m && m.$mid === rt.CommentNode) {
            const E = this._commentControllers.get(m.thread.commentControlHandle);
            if (!E)
              return m;
            const S = E.getCommentThread(m.thread.commentThreadHandle);
            if (!S)
              return m;
            const k = m.commentUniqueId, q = S.getCommentByUniqueId(k);
            return q || m;
          } else if (m && m.$mid === rt.CommentThreadNode) {
            const E = this._commentControllers.get(m.thread.commentControlHandle);
            if (!E)
              return m;
            const S = E.getCommentThread(m.thread.commentThreadHandle);
            if (!S)
              return m;
            const k = m.text, q = m.commentUniqueId, B = S.getCommentByUniqueId(q);
            return B ? (typeof B.body == "string" ? B.body = k : B.body = new Dn(k), B) : m;
          }
          return m;
        }
      });
    }
    createCommentController(m, E, S) {
      const k = p.handlePool++, q = new o(m, k, E, S);
      this._commentControllers.set(q.handle, q);
      const B = this._commentControllersByExtension.get(m.identifier) || [];
      return B.push(q), this._commentControllersByExtension.set(m.identifier, B), q.value;
    }
    async $createCommentThreadTemplate(m, E, S, k) {
      const q = this._commentControllers.get(m);
      q && q.$createCommentThreadTemplate(E, S, k);
    }
    async $setActiveComment(m, E) {
      const S = this._commentControllers.get(m);
      S && S.$setActiveComment(E ?? void 0);
    }
    async $updateCommentThreadTemplate(m, E, S) {
      const k = this._commentControllers.get(m);
      k && k.$updateCommentThreadTemplate(E, S);
    }
    $deleteCommentThread(m, E) {
      const S = this._commentControllers.get(m);
      S == null || S.$deleteCommentThread(E);
    }
    async $updateCommentThread(m, E, S) {
      const k = this._commentControllers.get(m);
      k == null || k.$updateCommentThread(E, S);
    }
    async $provideCommentingRanges(m, E, S) {
      const k = this._commentControllers.get(m);
      if (!k || !k.commentingRangeProvider)
        return Promise.resolve(void 0);
      const q = await t.ensureDocumentData(x.revive(E));
      return Mi(async () => {
        var G;
        const B = await ((G = k.commentingRangeProvider) == null ? void 0 : G.provideCommentingRanges(q.document, S));
        let te;
        return Array.isArray(B) ? te = {
          ranges: B,
          fileComments: !1
        } : B ? te = {
          ranges: B.ranges || [],
          fileComments: B.enableFileComments || !1
        } : te = B ?? void 0, te;
      }).then((B) => {
        let te;
        return B && (te = {
          ranges: B.ranges.map((G) => j.from(G)),
          fileComments: B.fileComments
        }), te;
      });
    }
    $toggleReaction(m, E, S, k, q) {
      const B = this._commentControllers.get(m);
      return !B || !B.reactionHandler ? Promise.resolve(void 0) : Mi(() => {
        const te = B.getCommentThread(E);
        if (te) {
          const G = te.getCommentByUniqueId(k.uniqueIdInThread);
          if (B !== void 0 && G && B.reactionHandler)
            return B.reactionHandler(G, c(q));
        }
        return Promise.resolve(void 0);
      });
    }
  };
  p.handlePool = 0;
  let r = p;
  const v = class v {
    set threadId(m) {
      this._id = m;
    }
    get threadId() {
      return this._id;
    }
    get id() {
      return this._id;
    }
    get resource() {
      return this._uri;
    }
    get uri() {
      return this._uri;
    }
    set range(m) {
      (m === void 0 != (this._range === void 0) || !m || !this._range || !m.isEqual(this._range)) && (this._range = m, this.modifications.range = m, this._onDidUpdateCommentThread.fire());
    }
    get range() {
      return this._range;
    }
    set canReply(m) {
      this._canReply !== m && (this._canReply = m, this.modifications.canReply = m, this._onDidUpdateCommentThread.fire());
    }
    get canReply() {
      return this._canReply;
    }
    get label() {
      return this._label;
    }
    set label(m) {
      this._label = m, this.modifications.label = m, this._onDidUpdateCommentThread.fire();
    }
    get contextValue() {
      return this._contextValue;
    }
    set contextValue(m) {
      this._contextValue = m, this.modifications.contextValue = m, this._onDidUpdateCommentThread.fire();
    }
    get comments() {
      return this._comments;
    }
    set comments(m) {
      this._comments = m, this.modifications.comments = m, this._onDidUpdateCommentThread.fire();
    }
    get collapsibleState() {
      return this._collapseState;
    }
    set collapsibleState(m) {
      this._collapseState !== m && (this._collapseState = m, this.modifications.collapsibleState = m, this._onDidUpdateCommentThread.fire());
    }
    get state() {
      return this._state;
    }
    set state(m) {
      this._state = m, typeof m == "object" ? (H(this.extensionDescription, "commentThreadApplicability"), this.modifications.state = m.resolved, this.modifications.applicability = m.applicability) : this.modifications.state = m, this._onDidUpdateCommentThread.fire();
    }
    get isDisposed() {
      return this._isDiposed;
    }
    constructor(m, E, S, k, q, B, te, G, ae) {
      this._commentControllerHandle = E, this._id = S, this._uri = k, this._range = q, this._comments = B, this.extensionDescription = te, this._isTemplate = G, this.handle = v._handlePool++, this.commentHandle = 0, this.modifications = /* @__PURE__ */ Object.create(null), this._onDidUpdateCommentThread = new M(), this.onDidUpdateCommentThread = this._onDidUpdateCommentThread.event, this._canReply = !0, this._commentsMap = /* @__PURE__ */ new Map(), this._acceptInputDisposables = new $s(), this._acceptInputDisposables.value = new Te(), this._id === void 0 && (this._id = `${m}.${this.handle}`), n.$createCommentThread(E, this.handle, this._id, this._uri, j.from(this._range), this._comments.map(
        (Ee) => a(this, Ee, this._commentsMap, this.extensionDescription)
      ), te.identifier, this._isTemplate, ae), this._localDisposables = [], this._isDiposed = !1, this._localDisposables.push(this.onDidUpdateCommentThread(() => {
        this.eventuallyUpdateCommentThread();
      })), this._localDisposables.push({
        dispose: () => {
          n.$deleteCommentThread(E, this.handle);
        }
      });
      const K = this;
      this.value = {
        get uri() {
          return K.uri;
        },
        get range() {
          return K.range;
        },
        set range(Ee) {
          K.range = Ee;
        },
        get comments() {
          return K.comments;
        },
        set comments(Ee) {
          K.comments = Ee;
        },
        get collapsibleState() {
          return K.collapsibleState;
        },
        set collapsibleState(Ee) {
          K.collapsibleState = Ee;
        },
        get canReply() {
          return K.canReply;
        },
        set canReply(Ee) {
          K.canReply = Ee;
        },
        get contextValue() {
          return K.contextValue;
        },
        set contextValue(Ee) {
          K.contextValue = Ee;
        },
        get label() {
          return K.label;
        },
        set label(Ee) {
          K.label = Ee;
        },
        get state() {
          return K.state;
        },
        set state(Ee) {
          K.state = Ee;
        },
        reveal: (Ee, He) => K.reveal(Ee, He),
        hide: () => K.hide(),
        dispose: () => {
          K.dispose();
        }
      };
    }
    updateIsTemplate() {
      this._isTemplate && (this._isTemplate = !1, this.modifications.isTemplate = !1);
    }
    eventuallyUpdateCommentThread() {
      if (this._isDiposed)
        return;
      this.updateIsTemplate(), this._acceptInputDisposables.value || (this._acceptInputDisposables.value = new Te());
      const m = (S) => Object.prototype.hasOwnProperty.call(this.modifications, S), E = {};
      m("range") && (E.range = j.from(this._range)), m("label") && (E.label = this.label), m("contextValue") && (E.contextValue = this.contextValue ?? null), m("comments") && (E.comments = this._comments.map(
        (S) => a(this, S, this._commentsMap, this.extensionDescription)
      )), m("collapsibleState") && (E.collapseState = u(this._collapseState)), m("canReply") && (E.canReply = this.canReply), m("state") && (E.state = d(this._state)), m("applicability") && (E.applicability = f(this._state)), m("isTemplate") && (E.isTemplate = this._isTemplate), this.modifications = {}, n.$updateCommentThread(this._commentControllerHandle, this.handle, this._id, this._uri, E);
    }
    getCommentByUniqueId(m) {
      for (const E of this._commentsMap) {
        const S = E[0], k = E[1];
        if (m === k)
          return S;
      }
    }
    async reveal(m, E) {
      H(this.extensionDescription, "commentReveal");
      let S;
      m && m.body !== void 0 ? S = m : E = E ?? m;
      let k = S ? this._commentsMap.get(S) : void 0;
      k ?? (k = this._commentsMap.get(this._comments[0]));
      let q = !0, B = !1;
      return (E == null ? void 0 : E.focus) === Sf.Reply ? (B = !0, q = !1) : (E == null ? void 0 : E.focus) === Sf.Comment && (q = !1), n.$revealCommentThread(this._commentControllerHandle, this.handle, k, { preserveFocus: q, focusReply: B });
    }
    async hide() {
      return n.$hideCommentThread(this._commentControllerHandle, this.handle);
    }
    dispose() {
      this._isDiposed = !0, this._acceptInputDisposables.dispose(), this._localDisposables.forEach((m) => m.dispose());
    }
  };
  v._handlePool = 0;
  let s = v;
  class o {
    get id() {
      return this._id;
    }
    get label() {
      return this._label;
    }
    get handle() {
      return this._handle;
    }
    get commentingRangeProvider() {
      return this._commentingRangeProvider;
    }
    set commentingRangeProvider(m) {
      this._commentingRangeProvider = m, m != null && m.resourceHints && H(this._extension, "commentingRangeHint"), n.$updateCommentingRanges(this.handle, m == null ? void 0 : m.resourceHints);
    }
    get reactionHandler() {
      return this._reactionHandler;
    }
    set reactionHandler(m) {
      this._reactionHandler = m, n.$updateCommentControllerFeatures(this.handle, { reactionHandler: !!m });
    }
    get options() {
      return this._options;
    }
    set options(m) {
      this._options = m, n.$updateCommentControllerFeatures(this.handle, { options: this._options });
    }
    get activeComment() {
      return H(this._extension, "activeComment"), this._activeComment;
    }
    get activeCommentThread() {
      var m;
      return H(this._extension, "activeComment"), (m = this._activeThread) == null ? void 0 : m.value;
    }
    constructor(m, E, S, k) {
      this._extension = m, this._handle = E, this._id = S, this._label = k, this._threads = /* @__PURE__ */ new Map(), n.$registerCommentController(this.handle, S, k, this._extension.identifier.value);
      const q = this;
      this.value = Object.freeze({
        id: q.id,
        label: q.label,
        get options() {
          return q.options;
        },
        set options(B) {
          q.options = B;
        },
        get commentingRangeProvider() {
          return q.commentingRangeProvider;
        },
        set commentingRangeProvider(B) {
          q.commentingRangeProvider = B;
        },
        get reactionHandler() {
          return q.reactionHandler;
        },
        set reactionHandler(B) {
          q.reactionHandler = B;
        },
        get activeCommentThread() {
          return q.activeCommentThread;
        },
        createCommentThread(B, te, G) {
          return q.createCommentThread(B, te, G).value;
        },
        dispose: () => {
          q.dispose();
        }
      }), this._localDisposables = [], this._localDisposables.push({
        dispose: () => {
          n.$unregisterCommentController(this.handle);
        }
      });
    }
    createCommentThread(m, E, S) {
      const k = new s(
        this.id,
        this.handle,
        void 0,
        m,
        E,
        S,
        this._extension,
        !1
      );
      return this._threads.set(k.handle, k), k;
    }
    $setActiveComment(m) {
      if (!m) {
        this._activeComment = void 0, this._activeThread = void 0;
        return;
      }
      const E = this._threads.get(m.commentThreadHandle);
      E && (this._activeComment = m.uniqueIdInThread ? E.getCommentByUniqueId(m.uniqueIdInThread) : void 0, this._activeThread = E);
    }
    $createCommentThreadTemplate(m, E, S) {
      const k = new s(
        this.id,
        this.handle,
        void 0,
        x.revive(m),
        j.to(E),
        [],
        this._extension,
        !0,
        S
      );
      return k.collapsibleState = Ic.Expanded, this._threads.set(k.handle, k), k;
    }
    $updateCommentThreadTemplate(m, E) {
      const S = this._threads.get(m);
      S && (S.range = j.to(E));
    }
    $updateCommentThread(m, E) {
      const S = this._threads.get(m);
      if (!S)
        return;
      ((q) => Object.prototype.hasOwnProperty.call(E, q))("collapseState") && (S.collapsibleState = u(E.collapseState));
    }
    $deleteCommentThread(m) {
      const E = this._threads.get(m);
      E == null || E.dispose(), this._threads.delete(m);
    }
    getCommentThread(m) {
      return this._threads.get(m);
    }
    dispose() {
      this._threads.forEach((m) => {
        m.dispose();
      }), this._localDisposables.forEach((m) => m.dispose());
    }
  }
  function a(_, m, E, S) {
    var q, B;
    let k = E.get(m);
    return k || (k = ++_.commentHandle, E.set(m, k)), m.state !== void 0 && H(S, "commentsDraftState"), (q = m.reactions) != null && q.some((te) => te.reactors !== void 0) && H(S, "commentReactor"), {
      mode: m.mode,
      contextValue: m.contextValue,
      uniqueIdInThread: k,
      body: typeof m.body == "string" ? m.body : Ne.from(m.body),
      userName: m.author.name,
      userIconPath: m.author.iconPath,
      label: m.label,
      commentReactions: m.reactions ? m.reactions.map((te) => l(te)) : void 0,
      state: m.state,
      timestamp: (B = m.timestamp) == null ? void 0 : B.toJSON()
    };
  }
  function l(_) {
    return {
      label: _.label,
      iconPath: _.iconPath ? vv(_.iconPath) : void 0,
      count: _.count,
      hasReacted: _.authorHasReacted,
      reactors: _.reactors && _.reactors.length > 0 && typeof _.reactors[0] != "string" ? _.reactors.map((m) => m.name) : _.reactors
    };
  }
  function c(_) {
    var m;
    return {
      label: _.label || "",
      count: _.count || 0,
      iconPath: _.iconPath ? x.revive(_.iconPath) : "",
      authorHasReacted: _.hasReacted || !1,
      reactors: (m = _.reactors) == null ? void 0 : m.map((E) => ({ name: E }))
    };
  }
  function u(_) {
    if (_ !== void 0)
      switch (_) {
        case yf.Expanded:
          return Ic.Expanded;
        case yf.Collapsed:
          return Ic.Collapsed;
      }
    return Ic.Collapsed;
  }
  function d(_) {
    let m;
    if (typeof _ == "object" ? m = _.resolved : m = _, m !== void 0)
      switch (m) {
        case xf.Unresolved:
          return hh.Unresolved;
        case xf.Resolved:
          return hh.Resolved;
      }
    return hh.Unresolved;
  }
  function f(_) {
    let m;
    if (typeof _ == "object" && (m = _.applicability), m !== void 0)
      switch (m) {
        case Ef.Current:
          return fh.Current;
        case Ef.Outdated:
          return fh.Outdated;
      }
    return fh.Current;
  }
  return new r();
}
var Zp = { exports: {} }, m4;
function QU() {
  return m4 || (m4 = 1, (function(i, e) {
    e = i.exports = et;
    var t;
    typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? t = function() {
      var D = Array.prototype.slice.call(arguments, 0);
      D.unshift("SEMVER"), console.log.apply(console, D);
    } : t = function() {
    }, e.SEMVER_SPEC_VERSION = "2.0.0";
    var n = 256, r = Number.MAX_SAFE_INTEGER || 9007199254740991, s = 16, o = e.re = [], a = e.src = [], l = 0, c = l++;
    a[c] = "0|[1-9]\\d*";
    var u = l++;
    a[u] = "[0-9]+";
    var d = l++;
    a[d] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
    var f = l++;
    a[f] = "(" + a[c] + ")\\.(" + a[c] + ")\\.(" + a[c] + ")";
    var p = l++;
    a[p] = "(" + a[u] + ")\\.(" + a[u] + ")\\.(" + a[u] + ")";
    var v = l++;
    a[v] = "(?:" + a[c] + "|" + a[d] + ")";
    var _ = l++;
    a[_] = "(?:" + a[u] + "|" + a[d] + ")";
    var m = l++;
    a[m] = "(?:-(" + a[v] + "(?:\\." + a[v] + ")*))";
    var E = l++;
    a[E] = "(?:-?(" + a[_] + "(?:\\." + a[_] + ")*))";
    var S = l++;
    a[S] = "[0-9A-Za-z-]+";
    var k = l++;
    a[k] = "(?:\\+(" + a[S] + "(?:\\." + a[S] + ")*))";
    var q = l++, B = "v?" + a[f] + a[m] + "?" + a[k] + "?";
    a[q] = "^" + B + "$";
    var te = "[v=\\s]*" + a[p] + a[E] + "?" + a[k] + "?", G = l++;
    a[G] = "^" + te + "$";
    var ae = l++;
    a[ae] = "((?:<|>)?=?)";
    var K = l++;
    a[K] = a[u] + "|x|X|\\*";
    var Ee = l++;
    a[Ee] = a[c] + "|x|X|\\*";
    var He = l++;
    a[He] = "[v=\\s]*(" + a[Ee] + ")(?:\\.(" + a[Ee] + ")(?:\\.(" + a[Ee] + ")(?:" + a[m] + ")?" + a[k] + "?)?)?";
    var Re = l++;
    a[Re] = "[v=\\s]*(" + a[K] + ")(?:\\.(" + a[K] + ")(?:\\.(" + a[K] + ")(?:" + a[E] + ")?" + a[k] + "?)?)?";
    var Z = l++;
    a[Z] = "^" + a[ae] + "\\s*" + a[He] + "$";
    var Y = l++;
    a[Y] = "^" + a[ae] + "\\s*" + a[Re] + "$";
    var ee = l++;
    a[ee] = "(?:^|[^\\d])(\\d{1," + s + "})(?:\\.(\\d{1," + s + "}))?(?:\\.(\\d{1," + s + "}))?(?:$|[^\\d])";
    var re = l++;
    a[re] = "(?:~>?)";
    var ce = l++;
    a[ce] = "(\\s*)" + a[re] + "\\s+", o[ce] = new RegExp(a[ce], "g");
    var Oe = "$1~", Ve = l++;
    a[Ve] = "^" + a[re] + a[He] + "$";
    var Qe = l++;
    a[Qe] = "^" + a[re] + a[Re] + "$";
    var It = l++;
    a[It] = "(?:\\^)";
    var Zt = l++;
    a[Zt] = "(\\s*)" + a[It] + "\\s+", o[Zt] = new RegExp(a[Zt], "g");
    var ht = "$1^", Mt = l++;
    a[Mt] = "^" + a[It] + a[He] + "$";
    var fn = l++;
    a[fn] = "^" + a[It] + a[Re] + "$";
    var vi = l++;
    a[vi] = "^" + a[ae] + "\\s*(" + te + ")$|^$";
    var Ar = l++;
    a[Ar] = "^" + a[ae] + "\\s*(" + B + ")$|^$";
    var er = l++;
    a[er] = "(\\s*)" + a[ae] + "\\s*(" + te + "|" + a[He] + ")", o[er] = new RegExp(a[er], "g");
    var zi = "$1$2$3", Ed = l++;
    a[Ed] = "^\\s*(" + a[He] + ")\\s+-\\s+(" + a[He] + ")\\s*$";
    var Op = l++;
    a[Op] = "^\\s*(" + a[Re] + ")\\s+-\\s+(" + a[Re] + ")\\s*$";
    var to = l++;
    a[to] = "(<|>)?=?\\s*\\*";
    for (var Bn = 0; Bn < l; Bn++)
      t(Bn, a[Bn]), o[Bn] || (o[Bn] = new RegExp(a[Bn]));
    e.parse = qe;
    function qe(D, U) {
      if (D instanceof et)
        return D;
      if (typeof D != "string" || D.length > n)
        return null;
      var W = U ? o[G] : o[q];
      if (!W.test(D))
        return null;
      try {
        return new et(D, U);
      } catch {
        return null;
      }
    }
    e.valid = Pv;
    function Pv(D, U) {
      var W = qe(D, U);
      return W ? W.version : null;
    }
    e.clean = Av;
    function Av(D, U) {
      var W = qe(D.trim().replace(/^[=v]+/, ""), U);
      return W ? W.version : null;
    }
    e.SemVer = et;
    function et(D, U) {
      if (D instanceof et) {
        if (D.loose === U)
          return D;
        D = D.version;
      } else if (typeof D != "string")
        throw new TypeError("Invalid Version: " + D);
      if (D.length > n)
        throw new TypeError("version is longer than " + n + " characters");
      if (!(this instanceof et))
        return new et(D, U);
      t("SemVer", D, U), this.loose = U;
      var W = D.trim().match(U ? o[G] : o[q]);
      if (!W)
        throw new TypeError("Invalid Version: " + D);
      if (this.raw = D, this.major = +W[1], this.minor = +W[2], this.patch = +W[3], this.major > r || this.major < 0)
        throw new TypeError("Invalid major version");
      if (this.minor > r || this.minor < 0)
        throw new TypeError("Invalid minor version");
      if (this.patch > r || this.patch < 0)
        throw new TypeError("Invalid patch version");
      W[4] ? this.prerelease = W[4].split(".").map(function(ue) {
        if (/^[0-9]+$/.test(ue)) {
          var X = +ue;
          if (X >= 0 && X < r)
            return X;
        }
        return ue;
      }) : this.prerelease = [], this.build = W[5] ? W[5].split(".") : [], this.format();
    }
    et.prototype.format = function() {
      return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
    }, et.prototype.toString = function() {
      return this.version;
    }, et.prototype.compare = function(D) {
      return t("SemVer.compare", this.version, this.loose, D), D instanceof et || (D = new et(D, this.loose)), this.compareMain(D) || this.comparePre(D);
    }, et.prototype.compareMain = function(D) {
      return D instanceof et || (D = new et(D, this.loose)), io(this.major, D.major) || io(this.minor, D.minor) || io(this.patch, D.patch);
    }, et.prototype.comparePre = function(D) {
      if (D instanceof et || (D = new et(D, this.loose)), this.prerelease.length && !D.prerelease.length)
        return -1;
      if (!this.prerelease.length && D.prerelease.length)
        return 1;
      if (!this.prerelease.length && !D.prerelease.length)
        return 0;
      var U = 0;
      do {
        var W = this.prerelease[U], ue = D.prerelease[U];
        if (t("prerelease compare", U, W, ue), W === void 0 && ue === void 0)
          return 0;
        if (ue === void 0)
          return 1;
        if (W === void 0)
          return -1;
        if (W === ue)
          continue;
        return io(W, ue);
      } while (++U);
    }, et.prototype.inc = function(D, U) {
      switch (D) {
        case "premajor":
          this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", U);
          break;
        case "preminor":
          this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", U);
          break;
        case "prepatch":
          this.prerelease.length = 0, this.inc("patch", U), this.inc("pre", U);
          break;
        case "prerelease":
          this.prerelease.length === 0 && this.inc("patch", U), this.inc("pre", U);
          break;
        case "major":
          (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
          break;
        case "minor":
          (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
          break;
        case "patch":
          this.prerelease.length === 0 && this.patch++, this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0)
            this.prerelease = [0];
          else {
            for (var W = this.prerelease.length; --W >= 0; )
              typeof this.prerelease[W] == "number" && (this.prerelease[W]++, W = -2);
            W === -1 && this.prerelease.push(0);
          }
          U && (this.prerelease[0] === U ? isNaN(this.prerelease[1]) && (this.prerelease = [U, 0]) : this.prerelease = [U, 0]);
          break;
        default:
          throw new Error("invalid increment argument: " + D);
      }
      return this.format(), this.raw = this.version, this;
    }, e.inc = ra;
    function ra(D, U, W, ue) {
      typeof W == "string" && (ue = W, W = void 0);
      try {
        return new et(D, W).inc(U, ue).version;
      } catch {
        return null;
      }
    }
    e.diff = Fp;
    function Fp(D, U) {
      if (Dd(D, U))
        return null;
      var W = qe(D), ue = qe(U);
      if (W.prerelease.length || ue.prerelease.length) {
        for (var X in W)
          if ((X === "major" || X === "minor" || X === "patch") && W[X] !== ue[X])
            return "pre" + X;
        return "prerelease";
      }
      for (var X in W)
        if ((X === "major" || X === "minor" || X === "patch") && W[X] !== ue[X])
          return X;
    }
    e.compareIdentifiers = io;
    var Up = /^[0-9]+$/;
    function io(D, U) {
      var W = Up.test(D), ue = Up.test(U);
      return W && ue && (D = +D, U = +U), W && !ue ? -1 : ue && !W ? 1 : D < U ? -1 : D > U ? 1 : 0;
    }
    e.rcompareIdentifiers = Rv;
    function Rv(D, U) {
      return io(U, D);
    }
    e.major = Lv;
    function Lv(D, U) {
      return new et(D, U).major;
    }
    e.minor = $p;
    function $p(D, U) {
      return new et(D, U).minor;
    }
    e.patch = Nv;
    function Nv(D, U) {
      return new et(D, U).patch;
    }
    e.compare = pn;
    function pn(D, U, W) {
      return new et(D, W).compare(new et(U, W));
    }
    e.compareLoose = Sd;
    function Sd(D, U) {
      return pn(D, U, !0);
    }
    e.rcompare = Mv;
    function Mv(D, U, W) {
      return pn(U, D, W);
    }
    e.sort = Ov;
    function Ov(D, U) {
      return D.sort(function(W, ue) {
        return e.compare(W, ue, U);
      });
    }
    e.rsort = no;
    function no(D, U) {
      return D.sort(function(W, ue) {
        return e.rcompare(W, ue, U);
      });
    }
    e.gt = nc;
    function nc(D, U, W) {
      return pn(D, U, W) > 0;
    }
    e.lt = rc;
    function rc(D, U, W) {
      return pn(D, U, W) < 0;
    }
    e.eq = Dd;
    function Dd(D, U, W) {
      return pn(D, U, W) === 0;
    }
    e.neq = sa;
    function sa(D, U, W) {
      return pn(D, U, W) !== 0;
    }
    e.gte = tr;
    function tr(D, U, W) {
      return pn(D, U, W) >= 0;
    }
    e.lte = sc;
    function sc(D, U, W) {
      return pn(D, U, W) <= 0;
    }
    e.cmp = oc;
    function oc(D, U, W, ue) {
      var X;
      switch (U) {
        case "===":
          typeof D == "object" && (D = D.version), typeof W == "object" && (W = W.version), X = D === W;
          break;
        case "!==":
          typeof D == "object" && (D = D.version), typeof W == "object" && (W = W.version), X = D !== W;
          break;
        case "":
        case "=":
        case "==":
          X = Dd(D, W, ue);
          break;
        case "!=":
          X = sa(D, W, ue);
          break;
        case ">":
          X = nc(D, W, ue);
          break;
        case ">=":
          X = tr(D, W, ue);
          break;
        case "<":
          X = rc(D, W, ue);
          break;
        case "<=":
          X = sc(D, W, ue);
          break;
        default:
          throw new TypeError("Invalid operator: " + U);
      }
      return X;
    }
    e.Comparator = gn;
    function gn(D, U) {
      if (D instanceof gn) {
        if (D.loose === U)
          return D;
        D = D.value;
      }
      if (!(this instanceof gn))
        return new gn(D, U);
      t("comparator", D, U), this.loose = U, this.parse(D), this.semver === ro ? this.value = "" : this.value = this.operator + this.semver.version, t("comp", this);
    }
    var ro = {};
    gn.prototype.parse = function(D) {
      var U = this.loose ? o[vi] : o[Ar], W = D.match(U);
      if (!W)
        throw new TypeError("Invalid comparator: " + D);
      this.operator = W[1], this.operator === "=" && (this.operator = ""), W[2] ? this.semver = new et(W[2], this.loose) : this.semver = ro;
    }, gn.prototype.toString = function() {
      return this.value;
    }, gn.prototype.test = function(D) {
      return t("Comparator.test", D, this.loose), this.semver === ro ? !0 : (typeof D == "string" && (D = new et(D, this.loose)), oc(D, this.operator, this.semver, this.loose));
    }, gn.prototype.intersects = function(D, U) {
      if (!(D instanceof gn))
        throw new TypeError("a Comparator is required");
      var W;
      if (this.operator === "")
        return W = new zt(D.value, U), at(this.value, W, U);
      if (D.operator === "")
        return W = new zt(this.value, U), at(D.semver, W, U);
      var ue = (this.operator === ">=" || this.operator === ">") && (D.operator === ">=" || D.operator === ">"), X = (this.operator === "<=" || this.operator === "<") && (D.operator === "<=" || D.operator === "<"), Pe = this.semver.version === D.semver.version, ze = (this.operator === ">=" || this.operator === "<=") && (D.operator === ">=" || D.operator === "<="), Ye = oc(this.semver, "<", D.semver, U) && (this.operator === ">=" || this.operator === ">") && (D.operator === "<=" || D.operator === "<"), lt = oc(this.semver, ">", D.semver, U) && (this.operator === "<=" || this.operator === "<") && (D.operator === ">=" || D.operator === ">");
      return ue || X || Pe && ze || Ye || lt;
    }, e.Range = zt;
    function zt(D, U) {
      if (D instanceof zt)
        return D.loose === U ? D : new zt(D.raw, U);
      if (D instanceof gn)
        return new zt(D.value, U);
      if (!(this instanceof zt))
        return new zt(D, U);
      if (this.loose = U, this.raw = D, this.set = D.split(/\s*\|\|\s*/).map(function(W) {
        return this.parseRange(W.trim());
      }, this).filter(function(W) {
        return W.length;
      }), !this.set.length)
        throw new TypeError("Invalid SemVer Range: " + D);
      this.format();
    }
    zt.prototype.format = function() {
      return this.range = this.set.map(function(D) {
        return D.join(" ").trim();
      }).join("||").trim(), this.range;
    }, zt.prototype.toString = function() {
      return this.range;
    }, zt.prototype.parseRange = function(D) {
      var U = this.loose;
      D = D.trim(), t("range", D, U);
      var W = U ? o[Op] : o[Ed];
      D = D.replace(W, Cd), t("hyphen replace", D), D = D.replace(o[er], zi), t("comparator trim", D, o[er]), D = D.replace(o[ce], Oe), D = D.replace(o[Zt], ht), D = D.split(/\s+/).join(" ");
      var ue = U ? o[vi] : o[Ar], X = D.split(" ").map(function(Pe) {
        return kd(Pe, U);
      }).join(" ").split(/\s+/);
      return this.loose && (X = X.filter(function(Pe) {
        return !!Pe.match(ue);
      })), X = X.map(function(Pe) {
        return new gn(Pe, U);
      }), X;
    }, zt.prototype.intersects = function(D, U) {
      if (!(D instanceof zt))
        throw new TypeError("a Range is required");
      return this.set.some(function(W) {
        return W.every(function(ue) {
          return D.set.some(function(X) {
            return X.every(function(Pe) {
              return ue.intersects(Pe, U);
            });
          });
        });
      });
    }, e.toComparators = oa;
    function oa(D, U) {
      return new zt(D, U).set.map(function(W) {
        return W.map(function(ue) {
          return ue.value;
        }).join(" ").trim().split(" ");
      });
    }
    function kd(D, U) {
      return t("comp", D), D = Id(D, U), t("caret", D), D = Fv(D, U), t("tildes", D), D = $v(D, U), t("xrange", D), D = Rr(D, U), t("stars", D), D;
    }
    function Ui(D) {
      return !D || D.toLowerCase() === "x" || D === "*";
    }
    function Fv(D, U) {
      return D.trim().split(/\s+/).map(function(W) {
        return Uv(W, U);
      }).join(" ");
    }
    function Uv(D, U) {
      var W = U ? o[Qe] : o[Ve];
      return D.replace(W, function(ue, X, Pe, ze, Ye) {
        t("tilde", D, ue, X, Pe, ze, Ye);
        var lt;
        return Ui(X) ? lt = "" : Ui(Pe) ? lt = ">=" + X + ".0.0 <" + (+X + 1) + ".0.0" : Ui(ze) ? lt = ">=" + X + "." + Pe + ".0 <" + X + "." + (+Pe + 1) + ".0" : Ye ? (t("replaceTilde pr", Ye), Ye.charAt(0) !== "-" && (Ye = "-" + Ye), lt = ">=" + X + "." + Pe + "." + ze + Ye + " <" + X + "." + (+Pe + 1) + ".0") : lt = ">=" + X + "." + Pe + "." + ze + " <" + X + "." + (+Pe + 1) + ".0", t("tilde return", lt), lt;
      });
    }
    function Id(D, U) {
      return D.trim().split(/\s+/).map(function(W) {
        return Hp(W, U);
      }).join(" ");
    }
    function Hp(D, U) {
      t("caret", D, U);
      var W = U ? o[fn] : o[Mt];
      return D.replace(W, function(ue, X, Pe, ze, Ye) {
        t("caret", D, ue, X, Pe, ze, Ye);
        var lt;
        return Ui(X) ? lt = "" : Ui(Pe) ? lt = ">=" + X + ".0.0 <" + (+X + 1) + ".0.0" : Ui(ze) ? X === "0" ? lt = ">=" + X + "." + Pe + ".0 <" + X + "." + (+Pe + 1) + ".0" : lt = ">=" + X + "." + Pe + ".0 <" + (+X + 1) + ".0.0" : Ye ? (t("replaceCaret pr", Ye), Ye.charAt(0) !== "-" && (Ye = "-" + Ye), X === "0" ? Pe === "0" ? lt = ">=" + X + "." + Pe + "." + ze + Ye + " <" + X + "." + Pe + "." + (+ze + 1) : lt = ">=" + X + "." + Pe + "." + ze + Ye + " <" + X + "." + (+Pe + 1) + ".0" : lt = ">=" + X + "." + Pe + "." + ze + Ye + " <" + (+X + 1) + ".0.0") : (t("no pr"), X === "0" ? Pe === "0" ? lt = ">=" + X + "." + Pe + "." + ze + " <" + X + "." + Pe + "." + (+ze + 1) : lt = ">=" + X + "." + Pe + "." + ze + " <" + X + "." + (+Pe + 1) + ".0" : lt = ">=" + X + "." + Pe + "." + ze + " <" + (+X + 1) + ".0.0"), t("caret return", lt), lt;
      });
    }
    function $v(D, U) {
      return t("replaceXRanges", D, U), D.split(/\s+/).map(function(W) {
        return T(W, U);
      }).join(" ");
    }
    function T(D, U) {
      D = D.trim();
      var W = U ? o[Y] : o[Z];
      return D.replace(W, function(ue, X, Pe, ze, Ye, lt) {
        t("xRange", D, ue, X, Pe, ze, Ye, lt);
        var Wn = Ui(Pe), Vn = Wn || Ui(ze), w = Vn || Ui(Ye), b = w;
        return X === "=" && b && (X = ""), Wn ? X === ">" || X === "<" ? ue = "<0.0.0" : ue = "*" : X && b ? (Vn && (ze = 0), w && (Ye = 0), X === ">" ? (X = ">=", Vn ? (Pe = +Pe + 1, ze = 0, Ye = 0) : w && (ze = +ze + 1, Ye = 0)) : X === "<=" && (X = "<", Vn ? Pe = +Pe + 1 : ze = +ze + 1), ue = X + Pe + "." + ze + "." + Ye) : Vn ? ue = ">=" + Pe + ".0.0 <" + (+Pe + 1) + ".0.0" : w && (ue = ">=" + Pe + "." + ze + ".0 <" + Pe + "." + (+ze + 1) + ".0"), t("xRange return", ue), ue;
      });
    }
    function Rr(D, U) {
      return t("replaceStars", D, U), D.trim().replace(o[to], "");
    }
    function Cd(D, U, W, ue, X, Pe, ze, Ye, lt, Wn, Vn, w, b) {
      return Ui(W) ? U = "" : Ui(ue) ? U = ">=" + W + ".0.0" : Ui(X) ? U = ">=" + W + "." + ue + ".0" : U = ">=" + U, Ui(lt) ? Ye = "" : Ui(Wn) ? Ye = "<" + (+lt + 1) + ".0.0" : Ui(Vn) ? Ye = "<" + lt + "." + (+Wn + 1) + ".0" : w ? Ye = "<=" + lt + "." + Wn + "." + Vn + "-" + w : Ye = "<=" + Ye, (U + " " + Ye).trim();
    }
    zt.prototype.test = function(D) {
      if (!D)
        return !1;
      typeof D == "string" && (D = new et(D, this.loose));
      for (var U = 0; U < this.set.length; U++)
        if (ge(this.set[U], D))
          return !0;
      return !1;
    };
    function ge(D, U) {
      for (var W = 0; W < D.length; W++)
        if (!D[W].test(U))
          return !1;
      if (U.prerelease.length) {
        for (var W = 0; W < D.length; W++)
          if (t(D[W].semver), D[W].semver !== ro && D[W].semver.prerelease.length > 0) {
            var ue = D[W].semver;
            if (ue.major === U.major && ue.minor === U.minor && ue.patch === U.patch)
              return !0;
          }
        return !1;
      }
      return !0;
    }
    e.satisfies = at;
    function at(D, U, W) {
      try {
        U = new zt(U, W);
      } catch {
        return !1;
      }
      return U.test(D);
    }
    e.maxSatisfying = Hv;
    function Hv(D, U, W) {
      var ue = null, X = null;
      try {
        var Pe = new zt(U, W);
      } catch {
        return null;
      }
      return D.forEach(function(ze) {
        Pe.test(ze) && (!ue || X.compare(ze) === -1) && (ue = ze, X = new et(ue, W));
      }), ue;
    }
    e.minSatisfying = Bv;
    function Bv(D, U, W) {
      var ue = null, X = null;
      try {
        var Pe = new zt(U, W);
      } catch {
        return null;
      }
      return D.forEach(function(ze) {
        Pe.test(ze) && (!ue || X.compare(ze) === 1) && (ue = ze, X = new et(ue, W));
      }), ue;
    }
    e.validRange = Wv;
    function Wv(D, U) {
      try {
        return new zt(D, U).range || "*";
      } catch {
        return null;
      }
    }
    e.ltr = Vv;
    function Vv(D, U, W) {
      return Td(D, U, "<", W);
    }
    e.gtr = ac;
    function ac(D, U, W) {
      return Td(D, U, ">", W);
    }
    e.outside = Td;
    function Td(D, U, W, ue) {
      D = new et(D, ue), U = new zt(U, ue);
      var X, Pe, ze, Ye, lt;
      switch (W) {
        case ">":
          X = nc, Pe = sc, ze = rc, Ye = ">", lt = ">=";
          break;
        case "<":
          X = rc, Pe = tr, ze = nc, Ye = "<", lt = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (at(D, U, ue))
        return !1;
      for (var Wn = 0; Wn < U.set.length; ++Wn) {
        var Vn = U.set[Wn], w = null, b = null;
        if (Vn.forEach(function(I) {
          I.semver === ro && (I = new gn(">=0.0.0")), w = w || I, b = b || I, X(I.semver, w.semver, ue) ? w = I : ze(I.semver, b.semver, ue) && (b = I);
        }), w.operator === Ye || w.operator === lt || (!b.operator || b.operator === Ye) && Pe(D, b.semver))
          return !1;
        if (b.operator === lt && ze(D, b.semver))
          return !1;
      }
      return !0;
    }
    e.prerelease = zv;
    function zv(D, U) {
      var W = qe(D, U);
      return W && W.prerelease.length ? W.prerelease : null;
    }
    e.intersects = qv;
    function qv(D, U, W) {
      return D = new zt(D, W), U = new zt(U, W), D.intersects(U);
    }
    e.coerce = Bp;
    function Bp(D) {
      if (D instanceof et)
        return D;
      if (typeof D != "string")
        return null;
      var U = D.match(o[ee]);
      return U == null ? null : qe((U[1] || "0") + "." + (U[2] || "0") + "." + (U[3] || "0"));
    }
  })(Zp, Zp.exports)), Zp.exports;
}
QU();
const XA = /^(\^|>=)?((\d+)|x)\.((\d+)|x)\.((\d+)|x)(\-.*)?$/, KU = /^-(\d{4})(\d{2})(\d{2})$/;
function JU(i) {
  return i = i.trim(), i === "*" || XA.test(i);
}
function ZA(i) {
  if (!JU(i))
    return null;
  if (i = i.trim(), i === "*")
    return {
      hasCaret: !1,
      hasGreaterEquals: !1,
      majorBase: 0,
      majorMustEqual: !1,
      minorBase: 0,
      minorMustEqual: !1,
      patchBase: 0,
      patchMustEqual: !1,
      preRelease: null
    };
  const e = i.match(XA);
  return e ? {
    hasCaret: e[1] === "^",
    hasGreaterEquals: e[1] === ">=",
    majorBase: e[2] === "x" ? 0 : parseInt(e[2], 10),
    majorMustEqual: e[2] !== "x",
    minorBase: e[4] === "x" ? 0 : parseInt(e[4], 10),
    minorMustEqual: e[4] !== "x",
    patchBase: e[6] === "x" ? 0 : parseInt(e[6], 10),
    patchMustEqual: e[6] !== "x",
    preRelease: e[8] || null
  } : null;
}
function eR(i) {
  if (!i)
    return null;
  const e = i.majorBase, t = i.majorMustEqual, n = i.minorBase;
  let r = i.minorMustEqual;
  const s = i.patchBase;
  let o = i.patchMustEqual;
  i.hasCaret && (e === 0 || (r = !1), o = !1);
  let a = 0;
  if (i.preRelease) {
    const l = KU.exec(i.preRelease);
    if (l) {
      const [, c, u, d] = l;
      a = Date.UTC(Number(c), Number(u) - 1, Number(d));
    }
  }
  return {
    majorBase: e,
    majorMustEqual: t,
    minorBase: n,
    minorMustEqual: r,
    patchBase: s,
    patchMustEqual: o,
    isMinimum: i.hasGreaterEquals,
    notBefore: a
  };
}
class YU {
  constructor() {
    this.buffers = [];
  }
  add(e) {
    let t = this.buffers.indexOf(e);
    return t < 0 && (t = this.buffers.length, this.buffers.push(e)), t;
  }
}
function XU(i, e) {
  if (e.serializeBuffersForPostMessage) {
    const t = new YU(), r = JSON.stringify(i, (o, a) => {
      if (a instanceof ArrayBuffer)
        return {
          $$vscode_array_buffer_reference$$: !0,
          index: t.add(a)
        };
      if (ArrayBuffer.isView(a)) {
        const l = ZU(a);
        if (l)
          return {
            $$vscode_array_buffer_reference$$: !0,
            index: t.add(a.buffer),
            view: {
              type: l,
              byteLength: a.byteLength,
              byteOffset: a.byteOffset
            }
          };
      }
      return a;
    }), s = t.buffers.map((o) => {
      const a = new Uint8Array(o);
      return he.wrap(a);
    });
    return { message: r, buffers: s };
  } else
    return { message: JSON.stringify(i), buffers: [] };
}
function ZU(i) {
  switch (i.constructor.name) {
    case "Int8Array":
      return Gt.Int8Array;
    case "Uint8Array":
      return Gt.Uint8Array;
    case "Uint8ClampedArray":
      return Gt.Uint8ClampedArray;
    case "Int16Array":
      return Gt.Int16Array;
    case "Uint16Array":
      return Gt.Uint16Array;
    case "Int32Array":
      return Gt.Int32Array;
    case "Uint32Array":
      return Gt.Uint32Array;
    case "Float32Array":
      return Gt.Float32Array;
    case "Float64Array":
      return Gt.Float64Array;
    case "BigInt64Array":
      return Gt.BigInt64Array;
    case "BigUint64Array":
      return Gt.BigUint64Array;
  }
}
function e$(i, e) {
  const t = e.map((s) => {
    const o = new ArrayBuffer(s.byteLength);
    return new Uint8Array(o).set(s.buffer), o;
  }), n = e.length ? (s, o) => {
    if (o && typeof o == "object" && o.$$vscode_array_buffer_reference$$) {
      const a = o, { index: l } = a, c = t[l];
      if (a.view)
        switch (a.view.type) {
          case Gt.Int8Array:
            return new Int8Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Int8Array.BYTES_PER_ELEMENT
            );
          case Gt.Uint8Array:
            return new Uint8Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Uint8Array.BYTES_PER_ELEMENT
            );
          case Gt.Uint8ClampedArray:
            return new Uint8ClampedArray(
              c,
              a.view.byteOffset,
              a.view.byteLength / Uint8ClampedArray.BYTES_PER_ELEMENT
            );
          case Gt.Int16Array:
            return new Int16Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Int16Array.BYTES_PER_ELEMENT
            );
          case Gt.Uint16Array:
            return new Uint16Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Uint16Array.BYTES_PER_ELEMENT
            );
          case Gt.Int32Array:
            return new Int32Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Int32Array.BYTES_PER_ELEMENT
            );
          case Gt.Uint32Array:
            return new Uint32Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Uint32Array.BYTES_PER_ELEMENT
            );
          case Gt.Float32Array:
            return new Float32Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Float32Array.BYTES_PER_ELEMENT
            );
          case Gt.Float64Array:
            return new Float64Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / Float64Array.BYTES_PER_ELEMENT
            );
          case Gt.BigInt64Array:
            return new BigInt64Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / BigInt64Array.BYTES_PER_ELEMENT
            );
          case Gt.BigUint64Array:
            return new BigUint64Array(
              c,
              a.view.byteOffset,
              a.view.byteLength / BigUint64Array.BYTES_PER_ELEMENT
            );
          default:
            throw new Error("Unknown array buffer view type");
        }
      return c;
    }
    return o;
  } : void 0;
  return { message: JSON.parse(i, n), arrayBuffers: t };
}
var Ka, Ja, hp, fp, pp, Br, Ya, Xa, Za, el, gp, mu, tl;
class t$ {
  constructor(e, t, n, r, s, o, a) {
    ye(this, Ka);
    ye(this, Ja);
    ye(this, hp);
    ye(this, fp);
    ye(this, pp);
    ye(this, Br);
    ye(this, Ya);
    ye(this, Xa);
    ye(this, Za);
    ye(this, el);
    ye(this, gp);
    ye(this, mu);
    ye(this, tl);
    le(this, Ya, ""), le(this, Za, !1), le(this, el, !1), this._onMessageEmitter = new M(), this.onDidReceiveMessage = this._onMessageEmitter.event, le(this, tl, new M()), this._onDidDispose = N(this, tl).event, le(this, Ka, e), le(this, Ja, t), le(this, Xa, n), le(this, fp, r), le(this, pp, s), le(this, Br, o), le(this, gp, gd(o)), le(this, mu, i$(o)), le(this, hp, a);
  }
  dispose() {
    le(this, Za, !0), N(this, tl).fire(), N(this, tl).dispose(), this._onMessageEmitter.dispose();
  }
  asWebviewUri(e) {
    return le(this, el, !0), Ih(e, N(this, fp));
  }
  get cspSource() {
    const e = N(this, Br).extensionLocation;
    if (e.scheme === fe.https || e.scheme === fe.http) {
      let t = e.toString();
      return t.endsWith("/") || (t += "/"), t + " " + zx;
    }
    return zx;
  }
  get html() {
    return this.assertNotDisposed(), N(this, Ya);
  }
  set html(e) {
    this.assertNotDisposed(), N(this, Ya) !== e && (le(this, Ya, e), N(this, mu) && !N(this, el) && /(["'])vscode-resource:([^\s'"]+?)(["'])/i.test(e) && (le(this, el, !0), N(this, hp).report("Webview vscode-resource: uris", N(this, Br), "Please migrate to use the 'webview.asWebviewUri' api instead: https://aka.ms/vscode-webview-use-aswebviewuri")), N(this, Ja).$setHtml(N(this, Ka), this.rewriteOldResourceUrlsIfNeeded(e)));
  }
  get options() {
    return this.assertNotDisposed(), N(this, Xa);
  }
  set options(e) {
    this.assertNotDisposed(), un(N(this, Xa), e) || N(this, Ja).$setOptions(N(this, Ka), tR(N(this, Br), N(this, pp), e)), le(this, Xa, e);
  }
  async postMessage(e) {
    if (N(this, Za))
      return !1;
    const t = XU(e, { serializeBuffersForPostMessage: N(this, gp) });
    return N(this, Ja).$postMessage(N(this, Ka), t.message, ...t.buffers);
  }
  assertNotDisposed() {
    if (N(this, Za))
      throw new Error("Webview is disposed");
  }
  rewriteOldResourceUrlsIfNeeded(e) {
    var r;
    if (!N(this, mu))
      return e;
    const t = ((r = N(this, Br).extensionLocation) == null ? void 0 : r.scheme) === fe.vscodeRemote, n = N(this, Br).extensionLocation.scheme === fe.vscodeRemote ? N(this, Br).extensionLocation.authority : void 0;
    return e.replace(/(["'])(?:vscode-resource):(\/\/([^\s\/'"]+?)(?=\/))?([^\s'"]+?)(["'])/gi, (s, o, a, l, c, u) => {
      const d = x.from({
        scheme: l || "file",
        path: decodeURIComponent(c)
      }), f = Ih(d, { isRemote: t, authority: n }).toString();
      return `${o}${f}${u}`;
    }).replace(/(["'])(?:vscode-webview-resource):(\/\/[^\s\/'"]+\/([^\s\/'"]+?)(?=\/))?([^\s'"]+?)(["'])/gi, (s, o, a, l, c, u) => {
      const d = x.from({
        scheme: l || "file",
        path: decodeURIComponent(c)
      }), f = Ih(d, { isRemote: t, authority: n }).toString();
      return `${o}${f}${u}`;
    });
  }
}
Ka = new WeakMap(), Ja = new WeakMap(), hp = new WeakMap(), fp = new WeakMap(), pp = new WeakMap(), Br = new WeakMap(), Ya = new WeakMap(), Xa = new WeakMap(), Za = new WeakMap(), el = new WeakMap(), gp = new WeakMap(), mu = new WeakMap(), tl = new WeakMap();
function gd(i) {
  try {
    const e = eR(ZA(i.engines.vscode));
    return !!e && e.majorBase >= 1 && e.minorBase >= 57;
  } catch {
    return !1;
  }
}
function i$(i) {
  try {
    const e = eR(ZA(i.engines.vscode));
    return e ? e.majorBase < 1 || e.majorBase === 1 && e.minorBase < 60 : !1;
  } catch {
    return !1;
  }
}
class n$ extends xe {
  constructor(e, t, n, r, s) {
    super(), this.remoteInfo = t, this.workspace = n, this._logService = r, this._deprecationService = s, this._webviews = /* @__PURE__ */ new Map(), this._webviewProxy = e.getProxy(ie.MainThreadWebviews);
  }
  dispose() {
    super.dispose();
    for (const e of this._webviews.values())
      e.dispose();
    this._webviews.clear();
  }
  $onMessage(e, t, n) {
    const r = this.getWebview(e);
    if (r) {
      const { message: s } = e$(t, n.value);
      r._onMessageEmitter.fire(s);
    }
  }
  $onMissingCsp(e, t) {
    this._logService.warn(`${t} created a webview without a content security policy: https://aka.ms/vscode-webview-missing-csp`);
  }
  createNewWebview(e, t, n) {
    const r = new t$(
      e,
      this._webviewProxy,
      r$(t),
      this.remoteInfo,
      this.workspace,
      n,
      this._deprecationService
    );
    this._webviews.set(e, r);
    const s = r._onDidDispose(() => {
      s.dispose(), this.deleteWebview(e);
    });
    return r;
  }
  deleteWebview(e) {
    this._webviews.delete(e);
  }
  getWebview(e) {
    return this._webviews.get(e);
  }
}
function m1(i) {
  return { id: i.identifier, location: i.extensionLocation };
}
function tR(i, e, t) {
  return {
    enableCommandUris: t.enableCommandUris,
    enableScripts: t.enableScripts,
    enableForms: t.enableForms,
    portMapping: t.portMapping,
    localResourceRoots: t.localResourceRoots || s$(i, e)
  };
}
function r$(i) {
  var e;
  return {
    enableCommandUris: i.enableCommandUris,
    enableScripts: i.enableScripts,
    enableForms: i.enableForms,
    portMapping: i.portMapping,
    localResourceRoots: (e = i.localResourceRoots) == null ? void 0 : e.map((t) => x.from(t))
  };
}
function s$(i, e) {
  return [
    ...((e == null ? void 0 : e.getWorkspaceFolders()) || []).map((t) => t.uri),
    i.extensionLocation
  ];
}
const F1 = class F1 {
  constructor(e) {
    this.id = e, this._data = /* @__PURE__ */ new Map(), this._idPool = 1;
  }
  add(e) {
    const t = this._idPool++;
    return this._data.set(t, e), this.logDebugInfo(), t;
  }
  get(e, t) {
    return this._data.has(e) ? this._data.get(e)[t] : void 0;
  }
  delete(e) {
    this._data.delete(e), this.logDebugInfo();
  }
  logDebugInfo() {
    F1.enableDebugLogging && console.log(`${this.id} cache size - ${this._data.size}`);
  }
};
F1.enableDebugLogging = !1;
let Hn = F1;
class o$ {
  constructor(e, t) {
    this.document = e, this._storagePath = t, this._backupCounter = 1, this._edits = new Hn("custom documents");
  }
  addEdit(e) {
    return this._edits.add([e]);
  }
  async undo(e, t) {
    await this.getEdit(e).undo(), t || this.disposeBackup();
  }
  async redo(e, t) {
    await this.getEdit(e).redo(), t || this.disposeBackup();
  }
  disposeEdits(e) {
    for (const t of e)
      this._edits.delete(t);
  }
  getNewBackupUri() {
    if (!this._storagePath)
      throw new Error("Backup requires a valid storage path");
    const e = h$(this.document.uri) + this._backupCounter++;
    return Ei(this._storagePath, e);
  }
  updateBackup(e) {
    var t;
    (t = this._backup) == null || t.delete(), this._backup = e;
  }
  disposeBackup() {
    var e;
    (e = this._backup) == null || e.delete(), this._backup = void 0;
  }
  getEdit(e) {
    const t = this._edits.get(e, 0);
    if (!t)
      throw new Error("No edit found");
    return t;
  }
}
class a$ {
  constructor() {
    this._documents = /* @__PURE__ */ new Map();
  }
  get(e, t) {
    return this._documents.get(this.key(e, t));
  }
  add(e, t, n) {
    const r = this.key(e, t.uri);
    if (this._documents.has(r))
      throw new Error(
        `Document already exists for viewType:${e} resource:${t.uri}`
      );
    const s = new o$(t, n);
    return this._documents.set(r, s), s;
  }
  delete(e, t) {
    const n = this.key(e, t.uri);
    this._documents.delete(n);
  }
  key(e, t) {
    return `${e}@@@${t}`;
  }
}
var $o;
(function(i) {
  i[i.Text = 0] = "Text", i[i.Custom = 1] = "Custom";
})($o || ($o = {}));
class l$ {
  constructor() {
    this._providers = /* @__PURE__ */ new Map();
  }
  addTextProvider(e, t, n) {
    return this.add(e, { type: $o.Text, extension: t, provider: n });
  }
  addCustomProvider(e, t, n) {
    return this.add(e, { type: $o.Custom, extension: t, provider: n });
  }
  get(e) {
    return this._providers.get(e);
  }
  add(e, t) {
    if (this._providers.has(e))
      throw new Error(`Provider for viewType:${e} already registered`);
    return this._providers.set(e, t), new je(() => this._providers.delete(e));
  }
}
class c$ {
  constructor(e, t, n, r, s) {
    this._extHostDocuments = t, this._extensionStoragePaths = n, this._extHostWebview = r, this._extHostWebviewPanels = s, this._editorProviders = new l$(), this._documents = new a$(), this._proxy = e.getProxy(ie.MainThreadCustomEditors);
  }
  registerCustomEditorProvider(e, t, n, r) {
    const s = new Te();
    return u$(n) ? (s.add(this._editorProviders.addTextProvider(t, e, n)), this._proxy.$registerTextEditorProvider(m1(e), t, r.webviewOptions || {}, {
      supportsMove: !!n.moveCustomTextEditor
    }, gd(e))) : (s.add(this._editorProviders.addCustomProvider(t, e, n)), eg(n) && s.add(n.onDidChangeCustomDocument((o) => {
      const a = this.getCustomDocumentEntry(t, o.document.uri);
      if (d$(o)) {
        const l = a.addEdit(o);
        this._proxy.$onDidEdit(o.document.uri, t, l, o.label);
      } else
        this._proxy.$onContentChange(o.document.uri, t);
    })), this._proxy.$registerCustomEditorProvider(m1(e), t, r.webviewOptions || {}, !!r.supportsMultipleEditorsPerDocument, gd(e))), je.from(s, new je(() => {
      this._proxy.$unregisterEditorProvider(t);
    }));
  }
  async $createCustomDocument(e, t, n, r, s) {
    const o = this._editorProviders.get(t);
    if (!o)
      throw new Error(`No provider found for '${t}'`);
    if (o.type !== $o.Custom)
      throw new Error(`Invalid provide type for '${t}'`);
    const a = x.revive(e), l = await o.provider.openCustomDocument(a, { backupId: n, untitledDocumentData: r == null ? void 0 : r.buffer }, s);
    let c;
    return eg(o.provider) && this._extensionStoragePaths && (c = this._extensionStoragePaths.workspaceValue(o.extension) ?? this._extensionStoragePaths.globalValue(o.extension)), this._documents.add(t, l, c), { editable: eg(o.provider) };
  }
  async $disposeCustomDocument(e, t) {
    const n = this._editorProviders.get(t);
    if (!n)
      throw new Error(`No provider found for '${t}'`);
    if (n.type !== $o.Custom)
      throw new Error(`Invalid provider type for '${t}'`);
    const r = x.revive(e), { document: s } = this.getCustomDocumentEntry(t, r);
    this._documents.delete(t, s), s.dispose();
  }
  async $resolveCustomEditor(e, t, n, r, s, o) {
    const a = this._editorProviders.get(n);
    if (!a)
      throw new Error(`No provider found for '${n}'`);
    const l = li.to(s), c = this._extHostWebview.createNewWebview(t, r.contentOptions, a.extension), u = this._extHostWebviewPanels.createNewWebviewPanel(t, n, r.title, l, r.options, c, r.active), d = x.revive(e);
    switch (a.type) {
      case $o.Custom: {
        const { document: f } = this.getCustomDocumentEntry(n, d);
        return a.provider.resolveCustomEditor(f, u, o);
      }
      case $o.Text: {
        const f = this._extHostDocuments.getDocument(d);
        return a.provider.resolveCustomTextEditor(f, u, o);
      }
      default:
        throw new Error("Unknown webview provider type");
    }
  }
  $disposeEdits(e, t, n) {
    this.getCustomDocumentEntry(t, e).disposeEdits(n);
  }
  async $onMoveCustomEditor(e, t, n) {
    const r = this._editorProviders.get(n);
    if (!r)
      throw new Error(`No provider found for '${n}'`);
    if (!r.provider.moveCustomTextEditor)
      throw new Error(`Provider does not implement move '${n}'`);
    const s = this._extHostWebviewPanels.getWebviewPanel(e);
    if (!s)
      throw new Error("No webview found");
    const o = x.revive(t), a = this._extHostDocuments.getDocument(o);
    await r.provider.moveCustomTextEditor(a, s, Dt.None);
  }
  async $undo(e, t, n, r) {
    return this.getCustomDocumentEntry(t, e).undo(n, r);
  }
  async $redo(e, t, n, r) {
    return this.getCustomDocumentEntry(t, e).redo(n, r);
  }
  async $revert(e, t, n) {
    const r = this.getCustomDocumentEntry(t, e);
    await this.getCustomEditorProvider(t).revertCustomDocument(r.document, n), r.disposeBackup();
  }
  async $onSave(e, t, n) {
    const r = this.getCustomDocumentEntry(t, e);
    await this.getCustomEditorProvider(t).saveCustomDocument(r.document, n), r.disposeBackup();
  }
  async $onSaveAs(e, t, n, r) {
    const s = this.getCustomDocumentEntry(t, e);
    return this.getCustomEditorProvider(t).saveCustomDocumentAs(s.document, x.revive(n), r);
  }
  async $backup(e, t, n) {
    const r = this.getCustomDocumentEntry(t, e), o = await this.getCustomEditorProvider(t).backupCustomDocument(r.document, {
      destination: r.getNewBackupUri()
    }, n);
    return r.updateBackup(o), o.id;
  }
  getCustomDocumentEntry(e, t) {
    const n = this._documents.get(e, x.revive(t));
    if (!n)
      throw new Error("No custom document found");
    return n;
  }
  getCustomEditorProvider(e) {
    const t = this._editorProviders.get(e), n = t == null ? void 0 : t.provider;
    if (!n || !eg(n))
      throw new Error("Custom document is not editable");
    return n;
  }
}
function eg(i) {
  return !!i.onDidChangeCustomDocument;
}
function u$(i) {
  return typeof i.resolveCustomTextEditor == "function";
}
function d$(i) {
  return typeof i.undo == "function" && typeof i.redo == "function";
}
function h$(i) {
  const e = i.scheme === fe.file || i.scheme === fe.untitled ? i.fsPath : i.toString();
  return Yh(e) + "";
}
var ma, Fs, Io, xi;
const XS = class XS {
  constructor(e, t, n, r, s, o, a, l) {
    ye(this, Fs);
    ye(this, Io);
    ye(this, xi);
    this._name = e, this._owner = t, this._maxDiagnosticsTotal = n, this._maxDiagnosticsPerFile = r, this._modelVersionIdProvider = s, this._isDisposed = !1, this._maxDiagnosticsTotal = Math.max(r, n), le(this, xi, new mi((c) => o.getComparisonKey(c))), le(this, Fs, a), le(this, Io, l);
  }
  dispose() {
    var e;
    this._isDisposed || (N(this, Io).fire([...N(this, xi).keys()]), (e = N(this, Fs)) == null || e.$clear(this._owner), N(this, xi).clear(), this._isDisposed = !0);
  }
  get name() {
    return this._checkDisposed(), this._name;
  }
  set(e, t) {
    if (!e) {
      this.clear();
      return;
    }
    this._checkDisposed();
    let n = [];
    if (x.isUri(e)) {
      if (!t) {
        this.delete(e);
        return;
      }
      N(this, xi).set(e, t.slice()), n = [e];
    } else if (Array.isArray(e)) {
      n = [];
      let o;
      e = [...e].sort(XS._compareIndexedTuplesByUri);
      for (const a of e) {
        const [l, c] = a;
        if ((!o || l.toString() !== o.toString()) && (o && N(this, xi).get(o).length === 0 && N(this, xi).delete(o), o = l, n.push(l), N(this, xi).set(l, [])), c) {
          const u = N(this, xi).get(l);
          u == null || u.push(...c);
        } else {
          const u = N(this, xi).get(l);
          u && (u.length = 0);
        }
      }
    }
    if (N(this, Io).fire(n), !N(this, Fs))
      return;
    const r = [];
    let s = 0;
    for (const o of n) {
      let a = [];
      const l = N(this, xi).get(o);
      if (l)
        if (l.length > this._maxDiagnosticsPerFile) {
          a = [];
          const c = [Ri.Error, Ri.Warning, Ri.Information, Ri.Hint];
          e: for (let u = 0; u < 4; u++)
            for (const d of l)
              if (d.severity === c[u] && a.push({ ...ed.from(d), modelVersionId: this._modelVersionIdProvider(o) }) === this._maxDiagnosticsPerFile)
                break e;
          a.push({
            severity: on.Info,
            message: h(
              2622,
              "Not showing {0} further errors and warnings.",
              l.length - this._maxDiagnosticsPerFile
            ),
            startLineNumber: a[a.length - 1].startLineNumber,
            startColumn: a[a.length - 1].startColumn,
            endLineNumber: a[a.length - 1].endLineNumber,
            endColumn: a[a.length - 1].endColumn
          });
        } else
          a = l.map(
            (c) => ({ ...ed.from(c), modelVersionId: this._modelVersionIdProvider(o) })
          );
      if (r.push([o, a]), s += a.length, s > this._maxDiagnosticsTotal)
        break;
    }
    N(this, Fs).$changeMany(this._owner, r);
  }
  delete(e) {
    var t;
    this._checkDisposed(), N(this, Io).fire([e]), N(this, xi).delete(e), (t = N(this, Fs)) == null || t.$changeMany(this._owner, [[e, void 0]]);
  }
  clear() {
    var e;
    this._checkDisposed(), N(this, Io).fire([...N(this, xi).keys()]), N(this, xi).clear(), (e = N(this, Fs)) == null || e.$clear(this._owner);
  }
  forEach(e, t) {
    this._checkDisposed();
    for (const [n, r] of this)
      e.call(t, n, r, this);
  }
  *[Symbol.iterator]() {
    this._checkDisposed();
    for (const e of N(this, xi).keys())
      yield [e, this.get(e)];
  }
  get(e) {
    this._checkDisposed();
    const t = N(this, xi).get(e);
    return Array.isArray(t) ? Object.freeze(t.slice(0)) : [];
  }
  has(e) {
    return this._checkDisposed(), Array.isArray(N(this, xi).get(e));
  }
  _checkDisposed() {
    if (this._isDisposed)
      throw new Error("illegal state - object is disposed");
  }
  static _compareIndexedTuplesByUri(e, t) {
    return e[0].toString() < t[0].toString() ? -1 : e[0].toString() > t[0].toString() ? 1 : 0;
  }
};
Fs = new WeakMap(), Io = new WeakMap(), xi = new WeakMap();
let _1 = XS;
var Kr;
let jx = (Kr = class {
  static _mapper(e) {
    const t = new mi();
    for (const n of e)
      t.set(n, n);
    return { uris: Object.freeze(Array.from(t.values())) };
  }
  constructor(e, t, n, r) {
    this._logService = t, this._fileSystemInfoService = n, this._extHostDocumentsAndEditors = r, this._collections = /* @__PURE__ */ new Map(), this._onDidChangeDiagnostics = new t8({ merge: (s) => s.flat(), delay: 50 }), this.onDidChangeDiagnostics = Pt.map(this._onDidChangeDiagnostics.event, ma._mapper), this._proxy = e.getProxy(ie.MainThreadDiagnostics);
  }
  createDiagnosticCollection(e, t) {
    const { _collections: n, _proxy: r, _onDidChangeDiagnostics: s, _logService: o, _fileSystemInfoService: a, _extHostDocumentsAndEditors: l } = this, c = new class {
      $changeMany(f, p) {
        r.$changeMany(f, p), o.trace("[DiagnosticCollection] change many (extension, owner, uris)", e.value, f, p.length === 0 ? "CLEARING" : p);
      }
      $clear(f) {
        r.$clear(f), o.trace("[DiagnosticCollection] remove all (extension, owner)", e.value, f);
      }
      dispose() {
        r.dispose();
      }
    }();
    let u;
    if (!t)
      t = "_generated_diagnostic_collection_name_#" + ma._idPool++, u = t;
    else if (!n.has(t))
      u = t;
    else {
      this._logService.warn(`DiagnosticCollection with name '${t}' does already exist.`);
      do
        u = t + ma._idPool++;
      while (n.has(u));
    }
    return new class extends _1 {
      constructor() {
        super(t, u, ma._maxDiagnosticsTotal, ma._maxDiagnosticsPerFile, (f) => {
          var p;
          return (p = l.getDocument(f)) == null ? void 0 : p.version;
        }, a.extUri, c, s), n.set(u, this);
      }
      dispose() {
        super.dispose(), n.delete(u);
      }
    }();
  }
  getDiagnostics(e) {
    if (e)
      return this._getDiagnostics(e);
    {
      const t = /* @__PURE__ */ new Map(), n = [];
      for (const r of this._collections.values())
        r.forEach((s, o) => {
          let a = t.get(s.toString());
          typeof a > "u" && (a = n.length, t.set(s.toString(), a), n.push([s, []])), n[a][1] = n[a][1].concat(...o);
        });
      return n;
    }
  }
  _getDiagnostics(e) {
    let t = [];
    for (const n of this._collections.values())
      n.has(e) && (t = t.concat(n.get(e)));
    return t;
  }
  $acceptMarkersChange(e) {
    if (!this._mirrorCollection) {
      const t = "_generated_mirror", n = new _1(
        t,
        t,
        Number.MAX_SAFE_INTEGER,
        Number.MAX_SAFE_INTEGER,
        (r) => {
        },
        this._fileSystemInfoService.extUri,
        void 0,
        this._onDidChangeDiagnostics
      );
      this._collections.set(t, n), this._mirrorCollection = n;
    }
    for (const [t, n] of e)
      this._mirrorCollection.set(x.revive(t), n.map(ed.to));
  }
}, ma = Kr, Kr._idPool = 0, Kr._maxDiagnosticsPerFile = 1e3, Kr._maxDiagnosticsTotal = 1.1 * Kr._maxDiagnosticsPerFile, Kr);
jx = ma = z([
  O(1, ot),
  O(2, md)
], jx);
class f$ {
  constructor(e) {
    this._proxy = e.getProxy(ie.MainThreadDialogs);
  }
  showOpenDialog(e) {
    return this._proxy.$showOpenDialog(e).then((t) => t ? t.map((n) => x.revive(n)) : void 0);
  }
  showSaveDialog(e) {
    return this._proxy.$showSaveDialog(e).then((t) => t ? x.revive(t) : void 0);
  }
}
const U1 = class U1 {
  constructor(e, t, n) {
    this._documentsAndEditors = t, this._logService = n, this._documentContentProviders = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadDocumentContentProviders);
  }
  registerTextDocumentContentProvider(e, t) {
    if (Object.keys(fe).indexOf(e) >= 0)
      throw new Error(`scheme '${e}' already registered`);
    const n = U1._handlePool++;
    this._documentContentProviders.set(n, t), this._proxy.$registerTextContentProvider(n, e);
    let r;
    if (typeof t.onDidChange == "function") {
      let s;
      r = t.onDidChange(async (o) => {
        if (o.scheme !== e) {
          this._logService.warn(`Provider for scheme '${e}' is firing event for schema '${o.scheme}' which will be IGNORED`);
          return;
        }
        if (!this._documentsAndEditors.getDocument(o))
          return;
        s && await s;
        const a = this.$provideTextDocumentContent(n, o).then(async (l) => {
          if (!l && typeof l != "string")
            return;
          const c = this._documentsAndEditors.getDocument(o);
          if (!c)
            return;
          const u = JT(l);
          if (!c.equalLines(u))
            return this._proxy.$onVirtualDocumentChange(o, l);
        }).catch(Fi).finally(() => {
          s === a && (s = void 0);
        });
        s = a;
      });
    }
    return new je(() => {
      this._documentContentProviders.delete(n) && this._proxy.$unregisterTextContentProvider(n), r && (r.dispose(), r = void 0);
    });
  }
  $provideTextDocumentContent(e, t) {
    const n = this._documentContentProviders.get(e);
    return n ? Promise.resolve(n.provideTextDocumentContent(x.revive(t), Dt.None)) : Promise.reject(new Error(`unsupported uri-scheme: ${t.scheme}`));
  }
};
U1._handlePool = 0;
let Gx = U1;
class p$ {
  constructor(e, t, n, r = { timeout: 1500, errors: 3 }) {
    this._logService = e, this._documents = t, this._mainThreadBulkEdits = n, this._thresholds = r, this._callbacks = new ea(), this._badListeners = /* @__PURE__ */ new WeakMap();
  }
  dispose() {
    this._callbacks.clear();
  }
  getOnWillSaveTextDocumentEvent(e) {
    return (t, n, r) => {
      const o = { dispose: this._callbacks.push([t, n, e]) };
      return Array.isArray(r) && r.push(o), o;
    };
  }
  async $participateInSave(e, t) {
    const n = x.revive(e);
    let r = !1;
    const s = setTimeout(() => r = !0, this._thresholds.timeout), o = [];
    try {
      for (const a of [...this._callbacks]) {
        if (r)
          break;
        const l = this._documents.getDocument(n), c = await this._deliverEventAsyncAndBlameBadListeners(a, { document: l, reason: R_.to(t) });
        o.push(c);
      }
    } finally {
      clearTimeout(s);
    }
    return o;
  }
  _deliverEventAsyncAndBlameBadListeners([e, t, n], r) {
    const s = this._badListeners.get(e);
    return typeof s == "number" && s > this._thresholds.errors ? Promise.resolve(!1) : this._deliverEventAsync(n, e, t, r).then(() => !0, (o) => {
      if (this._logService.error(`onWillSaveTextDocument-listener from extension '${n.identifier.value}' threw ERROR`), this._logService.error(o), !(o instanceof Error) || o.message !== "concurrent_edits") {
        const a = this._badListeners.get(e);
        this._badListeners.set(e, a ? a + 1 : 1), typeof a == "number" && a > this._thresholds.errors && this._logService.info(`onWillSaveTextDocument-listener from extension '${n.identifier.value}' will now be IGNORED because of timeouts and/or errors`);
      }
      return !1;
    });
  }
  _deliverEventAsync(e, t, n, r) {
    const s = [], o = Date.now(), { document: a, reason: l } = r, { version: c } = a, u = Object.freeze({
      document: a,
      reason: l,
      waitUntil(d) {
        if (Object.isFrozen(s))
          throw TE("waitUntil can not be called async");
        s.push(Promise.resolve(d));
      }
    });
    try {
      t.apply(n, [u]);
    } catch (d) {
      return Promise.reject(d);
    }
    return new Promise((d, f) => {
      const p = setTimeout(() => f(new Error("timeout")), this._thresholds.timeout);
      return Promise.all(s).then((v) => {
        this._logService.debug(`onWillSaveTextDocument-listener from extension '${e.identifier.value}' finished after ${Date.now() - o}ms`), clearTimeout(p), d(v);
      }).catch((v) => {
        clearTimeout(p), f(v);
      });
    }).then((d) => {
      const f = { edits: [] };
      for (const p of d)
        if (Array.isArray(p) && p.every((v) => v instanceof Jo))
          for (const { newText: v, newEol: _, range: m } of p)
            f.edits.push({
              resource: a.uri,
              versionId: void 0,
              textEdit: {
                range: m && j.from(m),
                text: v,
                eol: _ && rd.from(_)
              }
            });
      if (f.edits.length !== 0)
        return c === a.version ? this._mainThreadBulkEdits.$tryApplyWorkspaceEdit(new Ki(f)) : Promise.reject(new Error("concurrent_edits"));
    });
  }
}
class g$ {
  constructor(e, t) {
    this._onDidAddDocument = new M(), this._onDidRemoveDocument = new M(), this._onDidChangeDocument = new M(), this._onDidChangeDocumentWithReason = new M(), this._onDidSaveDocument = new M(), this.onDidAddDocument = this._onDidAddDocument.event, this.onDidRemoveDocument = this._onDidRemoveDocument.event, this.onDidChangeDocument = this._onDidChangeDocument.event, this.onDidChangeDocumentWithReason = this._onDidChangeDocumentWithReason.event, this.onDidSaveDocument = this._onDidSaveDocument.event, this._toDispose = new Te(), this._documentLoader = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadDocuments), this._documentsAndEditors = t, this._documentsAndEditors.onDidRemoveDocuments((n) => {
      for (const r of n)
        this._onDidRemoveDocument.fire(r.document);
    }, void 0, this._toDispose), this._documentsAndEditors.onDidAddDocuments((n) => {
      for (const r of n)
        this._onDidAddDocument.fire(r.document);
    }, void 0, this._toDispose);
  }
  dispose() {
    this._toDispose.dispose();
  }
  getAllDocumentData() {
    return [...this._documentsAndEditors.allDocuments()];
  }
  getDocumentData(e) {
    if (!e)
      return;
    const t = this._documentsAndEditors.getDocument(e);
    if (t)
      return t;
  }
  getDocument(e) {
    const t = this.getDocumentData(e);
    if (!(t != null && t.document))
      throw new Error(`Unable to retrieve document from URI '${e}'`);
    return t.document;
  }
  ensureDocumentData(e, t) {
    const n = this._documentsAndEditors.getDocument(e);
    if (n && (!(t != null && t.encoding) || n.document.encoding === t.encoding))
      return Promise.resolve(n);
    let r = this._documentLoader.get(e.toString());
    return r ? t != null && t.encoding && (r = r.then((s) => s.document.encoding !== t.encoding ? this.ensureDocumentData(e, t) : s)) : (r = this._proxy.$tryOpenDocument(e, t).then((s) => {
      this._documentLoader.delete(e.toString());
      const o = x.revive(s);
      return Nu(this._documentsAndEditors.getDocument(o));
    }, (s) => (this._documentLoader.delete(e.toString()), Promise.reject(s))), this._documentLoader.set(e.toString(), r)), r;
  }
  createDocumentData(e) {
    return this._proxy.$tryCreateDocument(e).then((t) => x.revive(t));
  }
  $acceptModelLanguageChanged(e, t) {
    const n = x.revive(e), r = this._documentsAndEditors.getDocument(n);
    if (!r)
      throw new Error("unknown document");
    this._onDidRemoveDocument.fire(r.document), r._acceptLanguageId(t), this._onDidAddDocument.fire(r.document);
  }
  $acceptModelSaved(e) {
    const t = x.revive(e), n = this._documentsAndEditors.getDocument(t);
    if (!n)
      throw new Error("unknown document");
    this.$acceptDirtyStateChanged(e, !1), this._onDidSaveDocument.fire(n.document);
  }
  $acceptDirtyStateChanged(e, t) {
    const n = x.revive(e), r = this._documentsAndEditors.getDocument(n);
    if (!r)
      throw new Error("unknown document");
    r._acceptIsDirty(t), this._onDidChangeDocument.fire({
      document: r.document,
      contentChanges: [],
      reason: void 0
    }), this._onDidChangeDocumentWithReason.fire({
      document: r.document,
      contentChanges: [],
      reason: void 0,
      detailedReason: void 0
    });
  }
  $acceptEncodingChanged(e, t) {
    const n = x.revive(e), r = this._documentsAndEditors.getDocument(n);
    if (!r)
      throw new Error("unknown document");
    r._acceptEncoding(t), this._onDidChangeDocument.fire({
      document: r.document,
      contentChanges: [],
      reason: void 0
    }), this._onDidChangeDocumentWithReason.fire({
      document: r.document,
      contentChanges: [],
      reason: void 0,
      detailedReason: void 0
    });
  }
  $acceptModelChanged(e, t, n) {
    const r = x.revive(e), s = this._documentsAndEditors.getDocument(r);
    if (!s)
      throw new Error("unknown document");
    s._acceptIsDirty(n), s.onEvents(t);
    let o;
    t.isUndoing ? o = ff.Undo : t.isRedoing && (o = ff.Redo), this._onDidChangeDocument.fire(Jw({
      document: s.document,
      contentChanges: t.changes.map((a) => ({
        range: j.to(a.range),
        rangeOffset: a.rangeOffset,
        rangeLength: a.rangeLength,
        text: a.text
      })),
      reason: o
    })), this._onDidChangeDocumentWithReason.fire(Jw({
      document: s.document,
      contentChanges: t.changes.map((a) => ({
        range: j.to(a.range),
        rangeOffset: a.rangeOffset,
        rangeLength: a.rangeLength,
        text: a.text
      })),
      reason: o,
      detailedReason: t.detailedReason ? {
        source: t.detailedReason.source,
        metadata: t.detailedReason
      } : void 0
    }));
  }
  setWordDefinitionFor(e, t) {
    bF(e, t);
  }
}
class m$ {
  constructor(e) {
    this._provider = /* @__PURE__ */ new Map(), this._onDidChange = new M(), this.onDidChange = this._onDidChange.event, this._allKnownModels = /* @__PURE__ */ new Set(), this._handlePool = 0, this._proxy = e.getProxy(ie.MainThreadEmbeddings);
  }
  registerEmbeddingsProvider(e, t, n) {
    if (this._allKnownModels.has(t))
      throw new Error("An embeddings provider for this model is already registered");
    const r = this._handlePool++;
    return this._proxy.$registerEmbeddingProvider(r, t), this._provider.set(r, { id: t, provider: n }), Ie(() => {
      this._allKnownModels.delete(t), this._proxy.$unregisterEmbeddingProvider(r), this._provider.delete(r);
    });
  }
  async computeEmbeddings(e, t, n) {
    n ?? (n = Dt.None);
    let r = !1;
    typeof t == "string" && (t = [t], r = !0);
    const s = await this._proxy.$computeEmbeddings(e, t, n);
    if (s.length !== t.length)
      throw new Error();
    if (r) {
      if (s.length !== 1)
        throw new Error();
      return s[0];
    }
    return s;
  }
  async $provideEmbeddings(e, t, n) {
    const r = this._provider.get(e);
    if (!r)
      return [];
    const s = await r.provider.provideEmbeddings(t, n);
    return s || [];
  }
  get embeddingsModels() {
    return Array.from(this._allKnownModels);
  }
  $acceptEmbeddingModels(e) {
    this._allKnownModels = new Set(e), this._onDidChange.fire();
  }
}
class _$ {
  constructor(e) {
    this._AiEmbeddingVectorProviders = /* @__PURE__ */ new Map(), this._nextHandle = 0, this._proxy = e.getProxy(ie.MainThreadAiEmbeddingVector);
  }
  async $provideAiEmbeddingVector(e, t, n) {
    if (this._AiEmbeddingVectorProviders.size === 0)
      throw new Error("No embedding vector providers registered");
    const r = this._AiEmbeddingVectorProviders.get(e);
    if (!r)
      throw new Error("Embedding vector provider not found");
    const s = await r.provideEmbeddingVector(t, n);
    if (!s)
      throw new Error("Embedding vector provider returned undefined");
    return s;
  }
  registerEmbeddingVectorProvider(e, t, n) {
    const r = this._nextHandle;
    return this._nextHandle++, this._AiEmbeddingVectorProviders.set(r, n), this._proxy.$registerAiEmbeddingVectorProvider(t, r), new je(() => {
      this._proxy.$unregisterAiEmbeddingVectorProvider(r), this._AiEmbeddingVectorProviders.delete(r);
    });
  }
}
var De;
(function(i) {
  i[i.Invalid = 0] = "Invalid", i[i.Start = 1] = "Start", i[i.H = 2] = "H", i[i.HT = 3] = "HT", i[i.HTT = 4] = "HTT", i[i.HTTP = 5] = "HTTP", i[i.F = 6] = "F", i[i.FI = 7] = "FI", i[i.FIL = 8] = "FIL", i[i.BeforeColon = 9] = "BeforeColon", i[i.AfterColon = 10] = "AfterColon", i[i.AlmostThere = 11] = "AlmostThere", i[i.End = 12] = "End", i[i.Accept = 13] = "Accept", i[i.LastKnownState = 14] = "LastKnownState";
})(De || (De = {}));
class v$ {
  constructor(e, t, n) {
    const r = new Uint8Array(e * t);
    for (let s = 0, o = e * t; s < o; s++)
      r[s] = n;
    this._data = r, this.rows = e, this.cols = t;
  }
  get(e, t) {
    return this._data[e * this.cols + t];
  }
  set(e, t, n) {
    this._data[e * this.cols + t] = n;
  }
}
class iR {
  constructor(e) {
    let t = 0, n = De.Invalid;
    for (let s = 0, o = e.length; s < o; s++) {
      const [a, l, c] = e[s];
      l > t && (t = l), a > n && (n = a), c > n && (n = c);
    }
    t++, n++;
    const r = new v$(n, t, De.Invalid);
    for (let s = 0, o = e.length; s < o; s++) {
      const [a, l, c] = e[s];
      r.set(a, l, c);
    }
    this._states = r, this._maxCharCode = t;
  }
  nextState(e, t) {
    return t < 0 || t >= this._maxCharCode ? De.Invalid : this._states.get(e, t);
  }
}
let gw = null;
function w$() {
  return gw === null && (gw = new iR([
    [De.Start, L.h, De.H],
    [De.Start, L.H, De.H],
    [De.Start, L.f, De.F],
    [De.Start, L.F, De.F],
    [De.H, L.t, De.HT],
    [De.H, L.T, De.HT],
    [De.HT, L.t, De.HTT],
    [De.HT, L.T, De.HTT],
    [De.HTT, L.p, De.HTTP],
    [De.HTT, L.P, De.HTTP],
    [De.HTTP, L.s, De.BeforeColon],
    [De.HTTP, L.S, De.BeforeColon],
    [De.HTTP, L.Colon, De.AfterColon],
    [De.F, L.i, De.FI],
    [De.F, L.I, De.FI],
    [De.FI, L.l, De.FIL],
    [De.FI, L.L, De.FIL],
    [De.FIL, L.e, De.BeforeColon],
    [De.FIL, L.E, De.BeforeColon],
    [De.BeforeColon, L.Colon, De.AfterColon],
    [De.AfterColon, L.Slash, De.AlmostThere],
    [De.AlmostThere, L.Slash, De.End]
  ])), gw;
}
var Wt;
(function(i) {
  i[i.None = 0] = "None", i[i.ForceTermination = 1] = "ForceTermination", i[i.CannotEndIn = 2] = "CannotEndIn";
})(Wt || (Wt = {}));
let Bd = null;
function b$() {
  if (Bd === null) {
    Bd = new Iv(Wt.None);
    const i = ` 	<>'"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…|`;
    for (let t = 0; t < i.length; t++)
      Bd.set(i.charCodeAt(t), Wt.ForceTermination);
    const e = ".,;:";
    for (let t = 0; t < e.length; t++)
      Bd.set(e.charCodeAt(t), Wt.CannotEndIn);
  }
  return Bd;
}
class v1 {
  static _createLink(e, t, n, r, s) {
    let o = s - 1;
    do {
      const a = t.charCodeAt(o);
      if (e.get(a) !== Wt.CannotEndIn)
        break;
      o--;
    } while (o > r);
    if (r > 0) {
      const a = t.charCodeAt(r - 1), l = t.charCodeAt(o);
      (a === L.OpenParen && l === L.CloseParen || a === L.OpenSquareBracket && l === L.CloseSquareBracket || a === L.OpenCurlyBrace && l === L.CloseCurlyBrace) && o--;
    }
    return {
      range: {
        startLineNumber: n,
        startColumn: r + 1,
        endLineNumber: n,
        endColumn: o + 2
      },
      url: t.substring(r, o + 1)
    };
  }
  static computeLinks(e, t = w$()) {
    const n = b$(), r = [];
    for (let s = 1, o = e.getLineCount(); s <= o; s++) {
      const a = e.getLineContent(s), l = a.length;
      let c = 0, u = 0, d = 0, f = De.Start, p = !1, v = !1, _ = !1, m = !1;
      for (; c < l; ) {
        let E = !1;
        const S = a.charCodeAt(c);
        if (f === De.Accept) {
          let k;
          switch (S) {
            case L.OpenParen:
              p = !0, k = Wt.None;
              break;
            case L.CloseParen:
              k = p ? Wt.None : Wt.ForceTermination;
              break;
            case L.OpenSquareBracket:
              _ = !0, v = !0, k = Wt.None;
              break;
            case L.CloseSquareBracket:
              _ = !1, k = v ? Wt.None : Wt.ForceTermination;
              break;
            case L.OpenCurlyBrace:
              m = !0, k = Wt.None;
              break;
            case L.CloseCurlyBrace:
              k = m ? Wt.None : Wt.ForceTermination;
              break;
            case L.SingleQuote:
            case L.DoubleQuote:
            case L.BackTick:
              d === S ? k = Wt.ForceTermination : d === L.SingleQuote || d === L.DoubleQuote || d === L.BackTick ? k = Wt.None : k = Wt.ForceTermination;
              break;
            case L.Asterisk:
              k = d === L.Asterisk ? Wt.ForceTermination : Wt.None;
              break;
            case L.Space:
              k = _ ? Wt.None : Wt.ForceTermination;
              break;
            default:
              k = n.get(S);
          }
          k === Wt.ForceTermination && (r.push(v1._createLink(n, a, s, u, c)), E = !0);
        } else if (f === De.End) {
          let k;
          S === L.OpenSquareBracket ? (v = !0, k = Wt.None) : k = n.get(S), k === Wt.ForceTermination ? E = !0 : f = De.Accept;
        } else
          f = t.nextState(f, S), f === De.Invalid && (E = !0);
        E && (f = De.Start, p = !1, v = !1, m = !1, u = c + 1, d = S), c++;
      }
      f === De.Accept && r.push(v1._createLink(n, a, s, u, l));
    }
    return r;
  }
}
class y$ {
  constructor() {
    this._schemes = [];
  }
  add(e) {
    this._stateMachine = void 0, this._schemes.push(e);
  }
  delete(e) {
    const t = this._schemes.indexOf(e);
    t >= 0 && (this._schemes.splice(t, 1), this._stateMachine = void 0);
  }
  _initStateMachine() {
    if (!this._stateMachine) {
      const e = this._schemes.sort(), t = [];
      let n, r, s = De.LastKnownState, o = De.LastKnownState;
      for (const a of e) {
        let l = n ? z8(n, a) : 0;
        for (l === 0 ? r = De.Start : r = o; l < a.length; l++)
          l + 1 === a.length ? (s = o, o = De.BeforeColon) : o += 1, t.push([r, a.toUpperCase().charCodeAt(l), o]), t.push([r, a.toLowerCase().charCodeAt(l), o]), r = o;
        n = a, o = s;
      }
      t.push([De.BeforeColon, L.Colon, De.AfterColon]), t.push([De.AfterColon, L.Slash, De.End]), this._stateMachine = new iR(t);
    }
  }
  provideDocumentLinks(e) {
    this._initStateMachine();
    const t = [], n = v1.computeLinks({
      getLineContent(r) {
        return e.lineAt(r - 1).text;
      },
      getLineCount() {
        return e.lineCount;
      }
    }, this._stateMachine);
    for (const r of n) {
      const s = _l.to(r);
      s.target && t.push(s);
    }
    return t;
  }
}
class w1 {
  constructor(e, t) {
    this._extHostLanguageFeatures = t, this._linkProvider = new y$(), this._fsProvider = /* @__PURE__ */ new Map(), this._registeredSchemes = /* @__PURE__ */ new Set(), this._watches = /* @__PURE__ */ new Map(), this._handlePool = 0, this._proxy = e.getProxy(ie.MainThreadFileSystem);
  }
  dispose() {
    var e;
    (e = this._linkProviderRegistration) == null || e.dispose();
  }
  registerFileSystemProvider(e, t, n, r = {}) {
    if (w1._validateFileSystemProvider(n), this._registeredSchemes.has(t))
      throw new Error(`a provider for the scheme '${t}' is already registered`);
    this._linkProviderRegistration || (this._linkProviderRegistration = this._extHostLanguageFeatures.registerDocumentLinkProvider(e, "*", this._linkProvider));
    const s = this._handlePool++;
    this._linkProvider.add(t), this._registeredSchemes.add(t), this._fsProvider.set(s, n);
    let o = zr.FileReadWrite;
    r.isCaseSensitive && (o += zr.PathCaseSensitive), r.isReadonly && (o += zr.Readonly), typeof n.copy == "function" && (o += zr.FileFolderCopy), typeof n.open == "function" && typeof n.close == "function" && typeof n.read == "function" && typeof n.write == "function" && (H(e, "fsChunks"), o += zr.FileOpenReadWriteClose);
    let a;
    r.isReadonly && Kl(r.isReadonly) && r.isReadonly.value !== "" && (a = {
      value: r.isReadonly.value,
      isTrusted: r.isReadonly.isTrusted,
      supportThemeIcons: r.isReadonly.supportThemeIcons,
      supportHtml: r.isReadonly.supportHtml,
      baseUri: r.isReadonly.baseUri,
      uris: r.isReadonly.uris
    }), this._proxy.$registerFileSystemProvider(s, t, o, a).catch((c) => {
      console.error(`FAILED to register filesystem provider of ${e.identifier.value}-extension for the scheme ${t}`), console.error(c);
    });
    const l = n.onDidChangeFile((c) => {
      const u = [];
      for (const d of c) {
        const { uri: f, type: p } = d;
        if (f.scheme !== t)
          continue;
        let v;
        switch (p) {
          case su.Changed:
            v = sh.UPDATED;
            break;
          case su.Created:
            v = sh.ADDED;
            break;
          case su.Deleted:
            v = sh.DELETED;
            break;
          default:
            throw new Error("Unknown FileChangeType");
        }
        u.push({ resource: f, type: v });
      }
      this._proxy.$onFileSystemChange(s, u);
    });
    return Ie(() => {
      l.dispose(), this._linkProvider.delete(t), this._registeredSchemes.delete(t), this._fsProvider.delete(s), this._proxy.$unregisterProvider(s);
    });
  }
  static _validateFileSystemProvider(e) {
    if (!e)
      throw new Error("MISSING provider");
    if (typeof e.watch != "function")
      throw new Error("Provider does NOT implement watch");
    if (typeof e.stat != "function")
      throw new Error("Provider does NOT implement stat");
    if (typeof e.readDirectory != "function")
      throw new Error("Provider does NOT implement readDirectory");
    if (typeof e.createDirectory != "function")
      throw new Error("Provider does NOT implement createDirectory");
    if (typeof e.readFile != "function")
      throw new Error("Provider does NOT implement readFile");
    if (typeof e.writeFile != "function")
      throw new Error("Provider does NOT implement writeFile");
    if (typeof e.delete != "function")
      throw new Error("Provider does NOT implement delete");
    if (typeof e.rename != "function")
      throw new Error("Provider does NOT implement rename");
  }
  static _asIStat(e) {
    const { type: t, ctime: n, mtime: r, size: s, permissions: o } = e;
    return { type: t, ctime: n, mtime: r, size: s, permissions: o };
  }
  $stat(e, t) {
    return Promise.resolve(this._getFsProvider(e).stat(x.revive(t))).then((n) => w1._asIStat(n));
  }
  $readdir(e, t) {
    return Promise.resolve(this._getFsProvider(e).readDirectory(x.revive(t)));
  }
  $readFile(e, t) {
    return Promise.resolve(this._getFsProvider(e).readFile(x.revive(t))).then((n) => he.wrap(n));
  }
  $writeFile(e, t, n, r) {
    return Promise.resolve(this._getFsProvider(e).writeFile(x.revive(t), n.buffer, r));
  }
  $delete(e, t, n) {
    return Promise.resolve(this._getFsProvider(e).delete(x.revive(t), n));
  }
  $rename(e, t, n, r) {
    return Promise.resolve(this._getFsProvider(e).rename(x.revive(t), x.revive(n), r));
  }
  $copy(e, t, n, r) {
    const s = this._getFsProvider(e);
    if (!s.copy)
      throw new Error('FileSystemProvider does not implement "copy"');
    return Promise.resolve(s.copy(x.revive(t), x.revive(n), r));
  }
  $mkdir(e, t) {
    return Promise.resolve(this._getFsProvider(e).createDirectory(x.revive(t)));
  }
  $watch(e, t, n, r) {
    const s = this._getFsProvider(e).watch(x.revive(n), r);
    this._watches.set(t, s);
  }
  $unwatch(e, t) {
    const n = this._watches.get(t);
    n && (n.dispose(), this._watches.delete(t));
  }
  $open(e, t, n) {
    const r = this._getFsProvider(e);
    if (!r.open)
      throw new Error('FileSystemProvider does not implement "open"');
    return Promise.resolve(r.open(x.revive(t), n));
  }
  $close(e, t) {
    const n = this._getFsProvider(e);
    if (!n.close)
      throw new Error('FileSystemProvider does not implement "close"');
    return Promise.resolve(n.close(t));
  }
  $read(e, t, n, r) {
    const s = this._getFsProvider(e);
    if (!s.read)
      throw new Error('FileSystemProvider does not implement "read"');
    const o = he.alloc(r);
    return Promise.resolve(s.read(t, n, o.buffer, 0, r)).then((a) => o.slice(0, a));
  }
  $write(e, t, n, r) {
    const s = this._getFsProvider(e);
    if (!s.write)
      throw new Error('FileSystemProvider does not implement "write"');
    return Promise.resolve(s.write(t, n, r.buffer, 0, r.byteLength));
  }
  _getFsProvider(e) {
    const t = this._fsProvider.get(e);
    if (!t) {
      const n = new Error();
      throw n.name = "ENOPRO", n.message = "no provider", n;
    }
    return t;
  }
}
const $1 = class $1 extends xe {
  constructor(e, t, n, r) {
    super(), this.onFileChanges = e, this.onLogMessage = t, this.verboseLogging = n, this.options = r, this.watcherDisposables = this._register(new $s()), this.requests = void 0, this.restartCounter = 0;
  }
  init() {
    const e = new Te();
    this.watcherDisposables.value = e, this.watcher = this.createWatcher(e), this.watcher.setVerboseLogging(this.verboseLogging), e.add(this.watcher.onDidChangeFile((t) => this.onFileChanges(t))), e.add(this.watcher.onDidLogMessage((t) => this.onLogMessage(t))), e.add(this.watcher.onDidError((t) => this.onError(t.error, t.request)));
  }
  onError(e, t) {
    this.canRestart(e, t) ? this.restartCounter < $1.MAX_RESTARTS && this.requests ? (this.error(`restarting watcher after unexpected error: ${e}`), this.restart(this.requests)) : this.error(`gave up attempting to restart watcher after unexpected error: ${e}`) : this.error(e);
  }
  canRestart(e, t) {
    return !(!this.options.restartOnError || t || e.indexOf("No space left on device") !== -1 || e.indexOf("EMFILE") !== -1);
  }
  restart(e) {
    this.restartCounter++, this.init(), this.watch(e);
  }
  async watch(e) {
    var t;
    this.requests = e, await ((t = this.watcher) == null ? void 0 : t.watch(e));
  }
  async setVerboseLogging(e) {
    var t;
    this.verboseLogging = e, await ((t = this.watcher) == null ? void 0 : t.setVerboseLogging(e));
  }
  error(e) {
    this.onLogMessage({ type: "error", message: `[File Watcher (${this.options.type})] ${e}` });
  }
  trace(e) {
    this.onLogMessage({ type: "trace", message: `[File Watcher (${this.options.type})] ${e}` });
  }
  dispose() {
    return this.watcher = void 0, super.dispose();
  }
};
$1.MAX_RESTARTS = 5;
let _4 = $1;
function x$(i, e) {
  return typeof e == "string" && !e.startsWith(Na) && !Gg(e) ? { base: i, pattern: e } : e;
}
class E$ {
  get ignoreCreateEvents() {
    return !!(this._config & 1);
  }
  get ignoreChangeEvents() {
    return !!(this._config & 2);
  }
  get ignoreDeleteEvents() {
    return !!(this._config & 4);
  }
  constructor(e, t, n, r, s, o, a) {
    this.session = Math.random(), this._onDidCreate = new M(), this._onDidChange = new M(), this._onDidDelete = new M(), this._config = 0, a.ignoreCreateEvents && (this._config += 1), a.ignoreChangeEvents && (this._config += 2), a.ignoreDeleteEvents && (this._config += 4);
    const l = Wu(o), c = typeof o == "string", u = s((d) => {
      if (!(typeof d.session == "number" && d.session !== this.session)) {
        if (!a.ignoreCreateEvents)
          for (const f of d.created) {
            const p = x.revive(f);
            l(p.fsPath) && (!c || n.getWorkspaceFolder(p)) && this._onDidCreate.fire(p);
          }
        if (!a.ignoreChangeEvents)
          for (const f of d.changed) {
            const p = x.revive(f);
            l(p.fsPath) && (!c || n.getWorkspaceFolder(p)) && this._onDidChange.fire(p);
          }
        if (!a.ignoreDeleteEvents)
          for (const f of d.deleted) {
            const p = x.revive(f);
            l(p.fsPath) && (!c || n.getWorkspaceFolder(p)) && this._onDidDelete.fire(p);
          }
      }
    });
    this._disposable = je.from(this.ensureWatching(e, n, t, r, o, a, !1), this._onDidCreate, this._onDidChange, this._onDidDelete, u);
  }
  ensureWatching(e, t, n, r, s, o, a) {
    const l = je.from();
    if (typeof s == "string" || o.ignoreChangeEvents && o.ignoreCreateEvents && o.ignoreDeleteEvents)
      return l;
    const c = e.getProxy(ie.MainThreadFileSystemEventService);
    let u = !1;
    (s.pattern.includes(Na) || s.pattern.includes(vb)) && (u = !0);
    const d = [];
    let f, p;
    if (a)
      (o.ignoreChangeEvents || o.ignoreCreateEvents || o.ignoreDeleteEvents) && (p = ho.UPDATED | ho.ADDED | ho.DELETED, o.ignoreChangeEvents && (p &= ~ho.UPDATED), o.ignoreCreateEvents && (p &= ~ho.ADDED), o.ignoreDeleteEvents && (p &= ~ho.DELETED));
    else if (u && d.length === 0) {
      const v = t.getWorkspaceFolder(x.revive(s.baseUri)), _ = n.getConfiguration("files", v).get("watcherExclude");
      if (_)
        for (const m in _)
          m && _[m] === !0 && d.push(m);
    } else if (!u) {
      const v = t.getWorkspaceFolder(x.revive(s.baseUri));
      if (v) {
        const _ = n.getConfiguration("files", v).get("watcherExclude");
        if (_) {
          for (const m in _)
            if (m && _[m] === !0) {
              const E = `${Bw(m, "/")}/${Na}`;
              f || (f = []), f.push(x$(v.uri.fsPath, E));
            }
        }
        if (!f || f.length === 0)
          return l;
      }
    }
    return c.$watch(r.identifier.value, this.session, s.baseUri, { recursive: u, excludes: d, includes: f, filter: p }, !!a), je.from({ dispose: () => c.$unwatch(this.session) });
  }
  dispose() {
    this._disposable.dispose();
  }
  get onDidCreate() {
    return this._onDidCreate.event;
  }
  get onDidChange() {
    return this._onDidChange.event;
  }
  get onDidDelete() {
    return this._onDidDelete.event;
  }
}
class S$ {
  get created() {
    return this._created.value;
  }
  get changed() {
    return this._changed.value;
  }
  get deleted() {
    return this._deleted.value;
  }
  constructor(e) {
    this._events = e, this._created = new Qi(() => this._events.created.map(x.revive)), this._changed = new Qi(() => this._events.changed.map(x.revive)), this._deleted = new Qi(() => this._events.deleted.map(x.revive)), this.session = this._events.session;
  }
}
class D$ {
  constructor(e, t, n) {
    this._mainContext = e, this._logService = t, this._extHostDocumentsAndEditors = n, this._onFileSystemEvent = new M(), this._onDidRenameFile = new M(), this._onDidCreateFile = new M(), this._onDidDeleteFile = new M(), this._onWillRenameFile = new th(), this._onWillCreateFile = new th(), this._onWillDeleteFile = new th(), this.onDidRenameFile = this._onDidRenameFile.event, this.onDidCreateFile = this._onDidCreateFile.event, this.onDidDeleteFile = this._onDidDeleteFile.event;
  }
  createFileSystemWatcher(e, t, n, r, s) {
    return new E$(
      this._mainContext,
      t,
      e,
      n,
      this._onFileSystemEvent.event,
      En.from(r),
      s
    );
  }
  $onFileEvent(e) {
    this._onFileSystemEvent.fire(new S$(e));
  }
  $onDidRunFileOperation(e, t) {
    switch (e) {
      case Or.MOVE:
        this._onDidRenameFile.fire(Object.freeze({ files: t.map((n) => ({ oldUri: x.revive(n.source), newUri: x.revive(n.target) })) }));
        break;
      case Or.DELETE:
        this._onDidDeleteFile.fire(Object.freeze({ files: t.map((n) => x.revive(n.target)) }));
        break;
      case Or.CREATE:
      case Or.COPY:
        this._onDidCreateFile.fire(Object.freeze({ files: t.map((n) => x.revive(n.target)) }));
        break;
    }
  }
  getOnWillRenameFileEvent(e) {
    return this._createWillExecuteEvent(e, this._onWillRenameFile);
  }
  getOnWillCreateFileEvent(e) {
    return this._createWillExecuteEvent(e, this._onWillCreateFile);
  }
  getOnWillDeleteFileEvent(e) {
    return this._createWillExecuteEvent(e, this._onWillDeleteFile);
  }
  _createWillExecuteEvent(e, t) {
    return (n, r, s) => {
      const o = function(l) {
        n.call(r, l);
      };
      return o.extension = e, t.event(o, void 0, s);
    };
  }
  async $onWillRunFileOperation(e, t, n, r) {
    switch (e) {
      case Or.MOVE:
        return await this._fireWillEvent(this._onWillRenameFile, { files: t.map((s) => ({ oldUri: x.revive(s.source), newUri: x.revive(s.target) })) }, n, r);
      case Or.DELETE:
        return await this._fireWillEvent(this._onWillDeleteFile, { files: t.map((s) => x.revive(s.target)) }, n, r);
      case Or.CREATE:
      case Or.COPY:
        return await this._fireWillEvent(this._onWillCreateFile, { files: t.map((s) => x.revive(s.target)) }, n, r);
    }
  }
  async _fireWillEvent(e, t, n, r) {
    const s = /* @__PURE__ */ new Set(), o = [];
    if (await e.fireAsync(t, r, async (l, c) => {
      const u = Date.now(), d = await Promise.resolve(l);
      d instanceof $l && (o.push([c.extension, d]), s.add(c.extension.displayName ?? c.extension.identifier.value)), Date.now() - u > n && this._logService.warn("SLOW file-participant", c.extension.identifier);
    }), r.isCancellationRequested || o.length === 0)
      return;
    const a = { edits: [] };
    for (const [, l] of o) {
      const { edits: c } = kn.from(l, {
        getTextDocumentVersion: (u) => {
          var d;
          return (d = this._extHostDocumentsAndEditors.getDocument(u)) == null ? void 0 : d.version;
        },
        getNotebookDocumentVersion: () => {
        }
      });
      a.edits = a.edits.concat(c);
    }
    return { edit: a, extensionNames: Array.from(s) };
  }
}
class k$ {
  constructor(e, t, n, r, s) {
    this._extHostNotebooks = t, this._textDocumentsAndEditors = n, this._commands = r;
    const o = new Le(
      "interactive.open",
      "_interactive.open",
      "Open interactive window and return notebook editor and input URI",
      [
        new Q("showOptions", "Show Options", (a) => !0, (a) => a),
        new Q("resource", "Interactive resource Uri", (a) => !0, (a) => a),
        new Q("controllerId", "Notebook controller Id", (a) => !0, (a) => a),
        new Q("title", "Interactive editor title", (a) => !0, (a) => a)
      ],
      new Ce("Notebook and input URI", (a) => {
        if (s.debug("[ExtHostInteractive] open iw with notebook editor id", a.notebookEditorId), a.notebookEditorId !== void 0) {
          const l = this._extHostNotebooks.getEditorById(a.notebookEditorId);
          return s.debug("[ExtHostInteractive] notebook editor found", l.id), { notebookUri: x.revive(a.notebookUri), inputUri: x.revive(a.inputUri), notebookEditor: l.apiEditor };
        }
        return s.debug("[ExtHostInteractive] notebook editor not found, uris for the interactive document", a.notebookUri, a.inputUri), { notebookUri: x.revive(a.notebookUri), inputUri: x.revive(a.inputUri) };
      })
    );
    this._commands.registerApiCommand(o);
  }
  $willAddInteractiveDocument(e, t, n, r) {
    this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
      addedDocuments: [{
        EOL: t,
        lines: [""],
        languageId: n,
        uri: e,
        isDirty: !1,
        versionId: 1,
        encoding: "utf8"
      }]
    });
  }
  $willRemoveInteractiveDocument(e, t) {
    this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
      removedDocuments: [e]
    });
  }
}
class I$ {
  constructor(e) {
    this._handlePool = 0, this._proxy = e.getProxy(ie.MainThreadLabelService);
  }
  $registerResourceLabelFormatter(e) {
    const t = this._handlePool++;
    return this._proxy.$registerResourceLabelFormatter(t, e), Ie(() => {
      this._proxy.$unregisterResourceLabelFormatter(t);
    });
  }
}
var bo;
(function(i) {
  i[i.LTR = 0] = "LTR", i[i.RTL = 1] = "RTL";
})(bo || (bo = {}));
class Cn extends ft {
  constructor(e, t, n, r) {
    super(e, t, n, r), this.selectionStartLineNumber = e, this.selectionStartColumn = t, this.positionLineNumber = n, this.positionColumn = r;
  }
  toString() {
    return "[" + this.selectionStartLineNumber + "," + this.selectionStartColumn + " -> " + this.positionLineNumber + "," + this.positionColumn + "]";
  }
  equalsSelection(e) {
    return Cn.selectionsEqual(this, e);
  }
  static selectionsEqual(e, t) {
    return e.selectionStartLineNumber === t.selectionStartLineNumber && e.selectionStartColumn === t.selectionStartColumn && e.positionLineNumber === t.positionLineNumber && e.positionColumn === t.positionColumn;
  }
  getDirection() {
    return this.selectionStartLineNumber === this.startLineNumber && this.selectionStartColumn === this.startColumn ? bo.LTR : bo.RTL;
  }
  setEndPosition(e, t) {
    return this.getDirection() === bo.LTR ? new Cn(this.startLineNumber, this.startColumn, e, t) : new Cn(e, t, this.startLineNumber, this.startColumn);
  }
  getPosition() {
    return new On(this.positionLineNumber, this.positionColumn);
  }
  getSelectionStart() {
    return new On(this.selectionStartLineNumber, this.selectionStartColumn);
  }
  setStartPosition(e, t) {
    return this.getDirection() === bo.LTR ? new Cn(e, t, this.endLineNumber, this.endColumn) : new Cn(this.endLineNumber, this.endColumn, e, t);
  }
  static fromPositions(e, t = e) {
    return new Cn(e.lineNumber, e.column, t.lineNumber, t.column);
  }
  static fromRange(e, t) {
    return t === bo.LTR ? new Cn(
      e.startLineNumber,
      e.startColumn,
      e.endLineNumber,
      e.endColumn
    ) : new Cn(
      e.endLineNumber,
      e.endColumn,
      e.startLineNumber,
      e.startColumn
    );
  }
  static liftSelection(e) {
    return new Cn(
      e.selectionStartLineNumber,
      e.selectionStartColumn,
      e.positionLineNumber,
      e.positionColumn
    );
  }
  static selectionsArrEqual(e, t) {
    if (e && !t || !e && t)
      return !1;
    if (!e && !t)
      return !0;
    if (e.length !== t.length)
      return !1;
    for (let n = 0, r = e.length; n < r; n++)
      if (!this.selectionsEqual(e[n], t[n]))
        return !1;
    return !0;
  }
  static isISelection(e) {
    return e && typeof e.selectionStartLineNumber == "number" && typeof e.selectionStartColumn == "number" && typeof e.positionLineNumber == "number" && typeof e.positionColumn == "number";
  }
  static createWithDirection(e, t, n, r, s) {
    return s === bo.LTR ? new Cn(e, t, n, r) : new Cn(n, r, e, t);
  }
}
class b1 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDocumentSymbols(e, t) {
    const n = this._documents.getDocument(e), r = await this._provider.provideDocumentSymbols(n, t);
    if (!PE(r))
      return r[0] instanceof af ? r.map(qy.from) : b1._asDocumentSymbolTree(r);
  }
  static _asDocumentSymbolTree(e) {
    var r, s;
    e = e.slice(0).sort((o, a) => {
      let l = o.location.range.start.compareTo(a.location.range.start);
      return l === 0 && (l = a.location.range.end.compareTo(o.location.range.end)), l;
    });
    const t = [], n = [];
    for (const o of e) {
      const a = {
        name: o.name || "!!MISSING: name!!",
        kind: Zn.from(o.kind),
        tags: ((r = o.tags) == null ? void 0 : r.map(Ys.from)) || [],
        detail: "",
        containerName: o.containerName,
        range: j.from(o.location.range),
        selectionRange: j.from(o.location.range),
        children: []
      };
      for (; ; ) {
        if (n.length === 0) {
          n.push(a), t.push(a);
          break;
        }
        const l = n[n.length - 1];
        if (ft.containsRange(l.range, a.range) && !ft.equalsRange(l.range, a.range)) {
          (s = l.children) == null || s.push(a), n.push(a);
          break;
        }
        n.pop();
      }
    }
    return t;
  }
}
class tg {
  constructor(e, t, n, r, s, o) {
    this._documents = e, this._commands = t, this._provider = n, this._extension = r, this._extTelemetry = s, this._logService = o, this._cache = new Hn("CodeLens"), this._disposables = /* @__PURE__ */ new Map();
  }
  async provideCodeLenses(e, t) {
    const n = this._documents.getDocument(e), r = await this._provider.provideCodeLenses(n, t);
    if (!r || t.isCancellationRequested)
      return;
    const s = this._cache.add(r), o = new Te();
    this._disposables.set(s, o);
    const a = {
      cacheId: s,
      lenses: []
    };
    for (let l = 0; l < r.length; l++) {
      if (!$e.isRange(r[l].range)) {
        console.warn("INVALID code lens, range is not defined", this._extension.identifier.value);
        continue;
      }
      a.lenses.push({
        cacheId: [s, l],
        range: j.from(r[l].range),
        command: this._commands.toInternal(r[l].command, o)
      });
    }
    return a;
  }
  async resolveCodeLens(e, t) {
    const n = e.cacheId && this._cache.get(...e.cacheId);
    if (!n)
      return;
    let r;
    if (typeof this._provider.resolveCodeLens != "function" || n.isResolved ? r = n : r = await this._provider.resolveCodeLens(n, t), r || (r = n), t.isCancellationRequested)
      return;
    const s = e.cacheId && this._disposables.get(e.cacheId[0]);
    if (s) {
      if (!r.command) {
        const o = new Error(
          "INVALID code lens resolved, lacks command: " + this._extension.identifier.value
        );
        this._extTelemetry.onExtensionError(this._extension.identifier, o), this._logService.error(o);
        return;
      }
      return e.command = this._commands.toInternal(r.command, s), e;
    }
  }
  releaseCodeLenses(e) {
    var t;
    (t = this._disposables.get(e)) == null || t.dispose(), this._disposables.delete(e), this._cache.delete(e);
  }
}
function Tv(i) {
  return Array.isArray(i) ? i.map(Ff.from) : i ? [Ff.from(i)] : [];
}
class v4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDefinition(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideDefinition(r, s, n);
    return Tv(o);
  }
}
class w4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDeclaration(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideDeclaration(r, s, n);
    return Tv(o);
  }
}
class b4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideImplementation(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideImplementation(r, s, n);
    return Tv(o);
  }
}
class y4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideTypeDefinition(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideTypeDefinition(r, s, n);
    return Tv(o);
  }
}
const H1 = class H1 {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._hoverCounter = 0, this._hoverMap = /* @__PURE__ */ new Map();
  }
  async provideHover(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t);
    let a;
    if (n && n.verbosityRequest) {
      const d = n.verbosityRequest.previousHover.id, f = this._hoverMap.get(d);
      if (!f)
        throw new Error(`Hover with id ${d} not found`);
      const p = { verbosityDelta: n.verbosityRequest.verbosityDelta, previousHover: f };
      a = await this._provider.provideHover(s, o, r, p);
    } else
      a = await this._provider.provideHover(s, o, r);
    if (!a || PE(a.contents))
      return;
    a.range || (a.range = s.getWordRangeAtPosition(o)), a.range || (a.range = new $e(o, o));
    const l = Uf.from(a), c = this._hoverCounter;
    if (this._hoverMap.size === H1.HOVER_MAP_MAX_SIZE) {
      const d = Math.min(...this._hoverMap.keys());
      this._hoverMap.delete(d);
    }
    return this._hoverMap.set(c, a), this._hoverCounter += 1, {
      ...l,
      id: c
    };
  }
  releaseHover(e) {
    this._hoverMap.delete(e);
  }
};
H1.HOVER_MAP_MAX_SIZE = 10;
let Ch = H1;
class x4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideEvaluatableExpression(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideEvaluatableExpression(r, s, n);
    if (o)
      return Qy.from(o);
  }
}
class E4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideInlineValues(e, t, n, r) {
    const s = this._documents.getDocument(e), o = await this._provider.provideInlineValues(s, j.to(t), D_.to(n), r);
    if (Array.isArray(o))
      return o.map((a) => S_.from(a));
  }
}
class S4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDocumentHighlights(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideDocumentHighlights(r, s, n);
    if (Array.isArray(o))
      return o.map(id.from);
  }
}
class D4 {
  constructor(e, t, n) {
    this._documents = e, this._provider = t, this._logService = n;
  }
  async provideMultiDocumentHighlights(e, t, n, r) {
    const s = this._documents.getDocument(e), o = n.map((c) => {
      try {
        return this._documents.getDocument(c);
      } catch (u) {
        this._logService.error("Error: Unable to retrieve document from URI: " + c + ". Error message: " + u);
        return;
      }
    }).filter((c) => c !== void 0), a = ut.to(t), l = await this._provider.provideMultiDocumentHighlights(s, a, o, r);
    if (Array.isArray(l))
      return l.map(Ky.from);
  }
}
class k4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideLinkedEditingRanges(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.provideLinkedEditingRanges(r, s, n);
    if (o && Array.isArray(o.ranges))
      return {
        ranges: Xt(o.ranges.map(j.from)),
        wordPattern: o.wordPattern
      };
  }
}
class I4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideReferences(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t), a = await this._provider.provideReferences(s, o, n, r);
    if (Array.isArray(a))
      return a.map(hn.from);
  }
}
const jc = class jc {
  constructor(e, t, n, r, s, o, a) {
    this._documents = e, this._commands = t, this._diagnostics = n, this._provider = r, this._logService = s, this._extension = o, this._apiDeprecation = a, this._cache = new Hn("CodeAction"), this._disposables = /* @__PURE__ */ new Map();
  }
  async provideCodeActions(e, t, n, r) {
    var p;
    const s = this._documents.getDocument(e), o = Cn.isISelection(t) ? Cr.to(t) : j.to(t), a = [];
    for (const v of this._diagnostics.getDiagnostics(e))
      if (o.intersection(v.range) && a.push(v) > jc._maxCodeActionsPerFile)
        break;
    const l = {
      diagnostics: a,
      only: n.only ? new Nt(n.only) : void 0,
      triggerKind: c0.to(n.trigger)
    }, c = await this._provider.provideCodeActions(s, o, l, r);
    if (!yp(c) || r.isCancellationRequested)
      return;
    const u = this._cache.add(c), d = new Te();
    this._disposables.set(u, d);
    const f = [];
    for (let v = 0; v < c.length; v++) {
      const _ = c[v];
      if (_)
        if (jc._isCommand(_) && !(_ instanceof cf))
          this._apiDeprecation.report("CodeActionProvider.provideCodeActions - return commands", this._extension, "Return 'CodeAction' instances instead."), f.push({
            _isSynthetic: !0,
            title: _.title,
            command: this._commands.toInternal(_, d)
          });
        else {
          const m = _;
          l.only && (m.kind ? l.only.contains(m.kind) || this._logService.warn(`${this._extension.identifier.value} - Code actions of kind '${l.only.value}' requested but returned code action is of kind '${m.kind.value}'. Code action will be dropped. Please check 'CodeActionContext.only' to only return requested code actions.`) : this._logService.warn(`${this._extension.identifier.value} - Code actions of kind '${l.only.value}' requested but returned code action does not have a 'kind'. Code action will be dropped. Please set 'CodeAction.kind'.`));
          const E = m.ranges ?? [];
          f.push({
            cacheId: [u, v],
            title: m.title,
            command: m.command && this._commands.toInternal(m.command, d),
            diagnostics: m.diagnostics && m.diagnostics.map(ed.from),
            edit: m.edit && kn.from(m.edit, void 0),
            kind: m.kind && m.kind.value,
            isPreferred: m.isPreferred,
            isAI: dt(this._extension, "codeActionAI") ? m.isAI : !1,
            ranges: dt(this._extension, "codeActionRanges") ? Xt(E.map(j.from)) : void 0,
            disabled: (p = m.disabled) == null ? void 0 : p.reason
          });
        }
    }
    return { cacheId: u, actions: f };
  }
  async resolveCodeAction(e, t) {
    const [n, r] = e, s = this._cache.get(n, r);
    if (!s || jc._isCommand(s))
      return {};
    if (!this._provider.resolveCodeAction)
      return {};
    const o = await this._provider.resolveCodeAction(s, t) ?? s;
    let a;
    o.edit && (a = kn.from(o.edit, void 0));
    let l;
    if (o.command) {
      const c = this._disposables.get(n);
      c && (l = this._commands.toInternal(o.command, c));
    }
    return { edit: a, command: l };
  }
  releaseCodeActions(e) {
    var t;
    (t = this._disposables.get(e)) == null || t.dispose(), this._disposables.delete(e), this._cache.delete(e);
  }
  static _isCommand(e) {
    return typeof e.command == "string" && typeof e.title == "string";
  }
};
jc._maxCodeActionsPerFile = 1e3;
let Mc = jc;
class Wd {
  constructor(e, t, n, r, s) {
    this._proxy = e, this._documents = t, this._provider = n, this._handle = r, this._extension = s, this._editsCache = new Hn("DocumentPasteEdit.edits");
  }
  async prepareDocumentPaste(e, t, n, r) {
    if (!this._provider.prepareDocumentPaste)
      return;
    this._cachedPrepare = void 0;
    const s = this._documents.getDocument(e), o = t.map((d) => j.to(d)), a = ud.toDataTransfer(n, () => {
      throw new fR();
    });
    if (await this._provider.prepareDocumentPaste(s, o, a, r), r.isCancellationRequested)
      return;
    const l = Array.from(a).filter(([, d]) => !(d instanceof Ym)), c = /* @__PURE__ */ new Map(), u = await Promise.all(Array.from(l, async ([d, f]) => {
      const p = dn();
      return c.set(p, f), [d, await wl.from(d, f, p)];
    }));
    return this._cachedPrepare = c, { items: u };
  }
  async providePasteEdits(e, t, n, r, s, o) {
    if (!this._provider.provideDocumentPasteEdits)
      return [];
    const a = this._documents.getDocument(t), l = n.map((p) => j.to(p)), c = r.items.map(([p, v]) => {
      var m;
      const _ = (m = this._cachedPrepare) == null ? void 0 : m.get(v.id);
      return _ ? [p, _] : [
        p,
        wl.to(p, v, async (E) => (await this._proxy.$resolvePasteFileData(this._handle, e, E)).buffer)
      ];
    }), u = new Ku(c), d = await this._provider.provideDocumentPasteEdits(a, l, u, {
      only: s.only ? new hs(s.only) : void 0,
      triggerKind: s.triggerKind
    }, o);
    if (!d || o.isCancellationRequested)
      return [];
    const f = this._editsCache.add(d);
    return d.map((p, v) => {
      var _;
      return {
        _cacheId: [f, v],
        title: p.title ?? h(
          2625,
          "Paste using '{0}' extension",
          this._extension.displayName || this._extension.name
        ),
        kind: p.kind,
        yieldTo: (_ = p.yieldTo) == null ? void 0 : _.map((m) => m.value),
        insertText: typeof p.insertText == "string" ? p.insertText : { snippet: p.insertText.value },
        additionalEdit: p.additionalEdit ? kn.from(p.additionalEdit, void 0) : void 0
      };
    });
  }
  async resolvePasteEdit(e, t) {
    const [n, r] = e, s = this._editsCache.get(n, r);
    if (!s || !this._provider.resolveDocumentPasteEdit)
      return {};
    const o = await this._provider.resolveDocumentPasteEdit(s, t) ?? s;
    return {
      insertText: o.insertText,
      additionalEdit: o.additionalEdit ? kn.from(o.additionalEdit, void 0) : void 0
    };
  }
  releasePasteEdits(e) {
    this._editsCache.delete(e);
  }
}
class C4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDocumentFormattingEdits(e, t, n) {
    const r = this._documents.getDocument(e), s = await this._provider.provideDocumentFormattingEdits(r, t, n);
    if (Array.isArray(s))
      return s.map(gi.from);
  }
}
class mw {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDocumentRangeFormattingEdits(e, t, n, r) {
    const s = this._documents.getDocument(e), o = j.to(t), a = await this._provider.provideDocumentRangeFormattingEdits(s, o, n, r);
    if (Array.isArray(a))
      return a.map(gi.from);
  }
  async provideDocumentRangesFormattingEdits(e, t, n, r) {
    ST(typeof this._provider.provideDocumentRangesFormattingEdits == "function", "INVALID invocation of `provideDocumentRangesFormattingEdits`");
    const s = this._documents.getDocument(e), o = t.map(j.to), a = await this._provider.provideDocumentRangesFormattingEdits(s, o, n, r);
    if (Array.isArray(a))
      return a.map(gi.from);
  }
}
class T4 {
  constructor(e, t) {
    this._documents = e, this._provider = t, this.autoFormatTriggerCharacters = [];
  }
  async provideOnTypeFormattingEdits(e, t, n, r, s) {
    const o = this._documents.getDocument(e), a = ut.to(t), l = await this._provider.provideOnTypeFormattingEdits(o, a, n, r, s);
    if (Array.isArray(l))
      return l.map(gi.from);
  }
}
class ig {
  constructor(e, t) {
    this._provider = e, this._logService = t, this._cache = new Hn("WorkspaceSymbols");
  }
  async provideWorkspaceSymbols(e, t) {
    const n = await this._provider.provideWorkspaceSymbols(e, t);
    if (!yp(n))
      return { symbols: [] };
    const r = this._cache.add(n), s = {
      cacheId: r,
      symbols: []
    };
    for (let o = 0; o < n.length; o++) {
      const a = n[o];
      if (!a || !a.name) {
        this._logService.warn("INVALID SymbolInformation", a);
        continue;
      }
      s.symbols.push({
        ...zl.from(a),
        cacheId: [r, o]
      });
    }
    return s;
  }
  async resolveWorkspaceSymbol(e, t) {
    if (typeof this._provider.resolveWorkspaceSymbol != "function" || !e.cacheId)
      return e;
    const n = this._cache.get(...e.cacheId);
    if (n) {
      const r = await this._provider.resolveWorkspaceSymbol(n, t);
      return r && Fl(e, zl.from(r), !0);
    }
  }
  releaseWorkspaceSymbols(e) {
    this._cache.delete(e);
  }
}
class Va {
  static supportsResolving(e) {
    return typeof e.prepareRename == "function";
  }
  constructor(e, t, n) {
    this._documents = e, this._provider = t, this._logService = n;
  }
  async provideRenameEdits(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t);
    try {
      const a = await this._provider.provideRenameEdits(s, o, n, r);
      return a ? kn.from(a) : void 0;
    } catch (a) {
      const l = Va._asMessage(a);
      return l ? { rejectReason: l, edits: void 0 } : Promise.reject(a);
    }
  }
  async resolveRenameLocation(e, t, n) {
    if (typeof this._provider.prepareRename != "function")
      return Promise.resolve(void 0);
    const r = this._documents.getDocument(e), s = ut.to(t);
    try {
      const o = await this._provider.prepareRename(r, s, n);
      let a, l;
      if ($e.isRange(o) ? (a = o, l = r.getText(o)) : ai(o) && (a = o.range, l = o.placeholder), !a || !l)
        return;
      if (a.start.line > s.line || a.end.line < s.line) {
        this._logService.warn("INVALID rename location: position line must be within range start/end lines");
        return;
      }
      return { range: j.from(a), text: l };
    } catch (o) {
      const a = Va._asMessage(o);
      return a ? { rejectReason: a, range: void 0, text: void 0 } : Promise.reject(o);
    }
  }
  static _asMessage(e) {
    return typeof e == "string" ? e : e instanceof Error && typeof e.message == "string" ? e.message : void 0;
  }
}
const Fh = class Fh {
  constructor(e, t, n) {
    this._documents = e, this._provider = t, this._logService = n;
  }
  async supportsAutomaticNewSymbolNamesTriggerKind() {
    return this._provider.supportsAutomaticTriggerKind;
  }
  async provideNewSymbolNames(e, t, n, r) {
    const s = this._documents.getDocument(e), o = j.to(t);
    try {
      const a = Fh.languageTriggerKindToVSCodeTriggerKind[n], l = await this._provider.provideNewSymbolNames(s, o, a, r);
      return l ? l.map(
        (c) => typeof c == "string" ? { newSymbolName: c } : { newSymbolName: c.newSymbolName, tags: c.tags }
      ) : void 0;
    } catch (a) {
      this._logService.error(Fh._asMessage(a) ?? JSON.stringify(a, null, "	"));
      return;
    }
  }
  static _asMessage(e) {
    return typeof e == "string" ? e : e instanceof Error && typeof e.message == "string" ? e.message : void 0;
  }
};
Fh.languageTriggerKindToVSCodeTriggerKind = {
  [pm.Invoke]: bf.Invoke,
  [pm.Automatic]: bf.Automatic
};
let Th = Fh;
class _w {
  constructor(e, t) {
    this.resultId = e, this.tokens = t;
  }
}
class wn {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._nextResultId = 1, this._previousResults = /* @__PURE__ */ new Map();
  }
  async provideDocumentSemanticTokens(e, t, n) {
    const r = this._documents.getDocument(e), s = t !== 0 ? this._previousResults.get(t) : null;
    let o = typeof (s == null ? void 0 : s.resultId) == "string" && typeof this._provider.provideDocumentSemanticTokensEdits == "function" ? await this._provider.provideDocumentSemanticTokensEdits(r, s.resultId, n) : await this._provider.provideDocumentSemanticTokens(r, n);
    return s && this._previousResults.delete(t), o ? (o = wn._fixProvidedSemanticTokens(o), this._send(wn._convertToEdits(s, o), o)) : null;
  }
  async releaseDocumentSemanticColoring(e) {
    this._previousResults.delete(e);
  }
  static _fixProvidedSemanticTokens(e) {
    return wn._isSemanticTokens(e) ? wn._isCorrectSemanticTokens(e) ? e : new Yu(new Uint32Array(e.data), e.resultId) : wn._isSemanticTokensEdits(e) ? wn._isCorrectSemanticTokensEdits(e) ? e : new kg(e.edits.map((t) => new y5(t.start, t.deleteCount, t.data ? new Uint32Array(t.data) : t.data)), e.resultId) : e;
  }
  static _isSemanticTokens(e) {
    return e && !!e.data;
  }
  static _isCorrectSemanticTokens(e) {
    return e.data instanceof Uint32Array;
  }
  static _isSemanticTokensEdits(e) {
    return e && Array.isArray(e.edits);
  }
  static _isCorrectSemanticTokensEdits(e) {
    for (const t of e.edits)
      if (!(t.data instanceof Uint32Array))
        return !1;
    return !0;
  }
  static _convertToEdits(e, t) {
    if (!wn._isSemanticTokens(t) || !e || !e.tokens)
      return t;
    const n = e.tokens, r = n.length, s = t.data, o = s.length;
    let a = 0;
    const l = Math.min(r, o);
    for (; a < l && n[a] === s[a]; )
      a++;
    if (a === r && a === o)
      return new kg([], t.resultId);
    let c = 0;
    const u = l - a;
    for (; c < u && n[r - c - 1] === s[o - c - 1]; )
      c++;
    return new kg([{
      start: a,
      deleteCount: r - a - c,
      data: s.subarray(a, o - c)
    }], t.resultId);
  }
  _send(e, t) {
    if (wn._isSemanticTokens(e)) {
      const n = this._nextResultId++;
      return this._previousResults.set(n, new _w(e.resultId, e.data)), Hx({
        id: n,
        type: "full",
        data: e.data
      });
    }
    if (wn._isSemanticTokensEdits(e)) {
      const n = this._nextResultId++;
      return wn._isSemanticTokens(t) ? this._previousResults.set(n, new _w(t.resultId, t.data)) : this._previousResults.set(n, new _w(e.resultId)), Hx({
        id: n,
        type: "delta",
        deltas: (e.edits || []).map(
          (r) => ({ start: r.start, deleteCount: r.deleteCount, data: r.data })
        )
      });
    }
    return null;
  }
}
class P4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideDocumentRangeSemanticTokens(e, t, n) {
    const r = this._documents.getDocument(e), s = await this._provider.provideDocumentRangeSemanticTokens(r, j.to(t), n);
    return s ? this._send(s) : null;
  }
  _send(e) {
    return Hx({
      id: 0,
      type: "full",
      data: e.data
    });
  }
}
class ba {
  static supportsResolving(e) {
    return typeof e.resolveCompletionItem == "function";
  }
  constructor(e, t, n, r, s) {
    this._documents = e, this._commands = t, this._provider = n, this._apiDeprecation = r, this._extension = s, this._cache = new Hn("CompletionItem"), this._disposables = /* @__PURE__ */ new Map();
  }
  async provideCompletionItems(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t), a = s.getWordRangeAtPosition(o) || new $e(o, o), l = a.with({ end: o }), c = new Js(), u = await this._provider.provideCompletionItems(s, o, r, Yy.to(n));
    if (!u || r.isCancellationRequested)
      return;
    const d = Array.isArray(u) ? new zu(u) : u, f = ba.supportsResolving(this._provider) ? this._cache.add(d.items) : this._cache.add([]), p = new Te();
    this._disposables.set(f, p);
    const v = [], _ = {
      x: f,
      [Ec.completions]: v,
      [Ec.defaultRanges]: { replace: j.from(a), insert: j.from(l) },
      [Ec.isIncomplete]: d.isIncomplete || void 0,
      [Ec.duration]: c.elapsed()
    };
    for (let m = 0; m < d.items.length; m++) {
      const E = d.items[m], S = this._convertCompletionItem(E, [f, m], l, a);
      v.push(S);
    }
    return _;
  }
  async resolveCompletionItem(e, t) {
    if (typeof this._provider.resolveCompletionItem != "function")
      return;
    const n = this._cache.get(...e);
    if (!n)
      return;
    const r = this._convertCompletionItem(n, e), s = await this._provider.resolveCompletionItem(n, t);
    if (!s)
      return;
    const o = this._convertCompletionItem(s, e);
    return (r[Be.insertText] !== o[Be.insertText] || r[Be.insertTextRules] !== o[Be.insertTextRules]) && this._apiDeprecation.report("CompletionItem.insertText", this._extension, "extension MAY NOT change 'insertText' of a CompletionItem during resolve"), (r[Be.commandIdent] !== o[Be.commandIdent] || r[Be.commandId] !== o[Be.commandId] || !un(r[Be.commandArguments], o[Be.commandArguments])) && this._apiDeprecation.report("CompletionItem.command", this._extension, "extension MAY NOT change 'command' of a CompletionItem during resolve"), {
      ...r,
      [Be.documentation]: o[Be.documentation],
      [Be.detail]: o[Be.detail],
      [Be.additionalTextEdits]: o[Be.additionalTextEdits],
      [Be.insertText]: o[Be.insertText],
      [Be.insertTextRules]: o[Be.insertTextRules],
      [Be.commandIdent]: o[Be.commandIdent],
      [Be.commandId]: o[Be.commandId],
      [Be.commandArguments]: o[Be.commandArguments]
    };
  }
  releaseCompletionItems(e) {
    var t;
    (t = this._disposables.get(e)) == null || t.dispose(), this._disposables.delete(e), this._cache.delete(e);
  }
  _convertCompletionItem(e, t, n, r) {
    var c;
    const s = this._disposables.get(t[0]);
    if (!s)
      throw Error("DisposableStore is missing...");
    const o = this._commands.toInternal(e.command, s), a = {
      x: t,
      [Be.label]: e.label,
      [Be.kind]: e.kind !== void 0 ? I_.from(e.kind) : void 0,
      [Be.kindModifier]: e.tags && e.tags.map(k_.from),
      [Be.detail]: e.detail,
      [Be.documentation]: typeof e.documentation > "u" ? void 0 : Ne.fromStrict(e.documentation),
      [Be.sortText]: e.sortText !== e.label ? e.sortText : void 0,
      [Be.filterText]: e.filterText !== e.label ? e.filterText : void 0,
      [Be.preselect]: e.preselect || void 0,
      [Be.insertTextRules]: e.keepWhitespace ? dl.KeepWhitespace : dl.None,
      [Be.commitCharacters]: (c = e.commitCharacters) == null ? void 0 : c.join(""),
      [Be.additionalTextEdits]: e.additionalTextEdits && e.additionalTextEdits.map(gi.from),
      [Be.commandIdent]: o == null ? void 0 : o.$ident,
      [Be.commandId]: o == null ? void 0 : o.id,
      [Be.commandArguments]: o != null && o.$ident || o == null ? void 0 : o.arguments
    };
    e.textEdit ? (this._apiDeprecation.report("CompletionItem.textEdit", this._extension, "Use 'CompletionItem.insertText' and 'CompletionItem.range' instead."), a[Be.insertText] = e.textEdit.newText) : typeof e.insertText == "string" ? a[Be.insertText] = e.insertText : e.insertText instanceof Hl && (a[Be.insertText] = e.insertText.value, a[Be.insertTextRules] |= dl.InsertAsSnippet);
    let l;
    return e.textEdit ? l = e.textEdit.range : e.range && (l = e.range), $e.isRange(l) ? a[Be.range] = j.from(l) : l && (!(n != null && n.isEqual(l.inserting)) || !(r != null && r.isEqual(l.replacing))) && (a[Be.range] = {
      insert: j.from(l.inserting),
      replace: j.from(l.replacing)
    }), a;
  }
}
class ua {
  constructor(e, t, n, r) {
    this._extension = e, this._documents = t, this._provider = n, this._commands = r, this._references = new C$(), this.languageTriggerKindToVSCodeTriggerKind = {
      [um.Automatic]: wf.Automatic,
      [um.Explicit]: wf.Invoke
    }, this._isAdditionsProposedApiEnabled = dt(this._extension, "inlineCompletionsAdditions");
  }
  get supportsHandleEvents() {
    return dt(this._extension, "inlineCompletionsAdditions") && (typeof this._provider.handleDidShowCompletionItem == "function" || typeof this._provider.handleDidPartiallyAcceptCompletionItem == "function" || typeof this._provider.handleDidRejectCompletionItem == "function" || typeof this._provider.handleEndOfLifetime == "function");
  }
  async provideInlineCompletions(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t), a = await this._provider.provideInlineCompletionItems(s, o, {
      selectedCompletionInfo: n.selectedSuggestionInfo ? {
        range: j.to(n.selectedSuggestionInfo.range),
        text: n.selectedSuggestionInfo.text
      } : void 0,
      triggerKind: this.languageTriggerKindToVSCodeTriggerKind[n.triggerKind],
      requestUuid: n.requestUuid,
      requestIssuedDateTime: n.requestIssuedDateTime
    }, r);
    if (!a)
      return;
    const { resultItems: l, list: c } = Array.isArray(a) ? { resultItems: a, list: void 0 } : { resultItems: a.items, list: a }, u = this._isAdditionsProposedApiEnabled ? Array.isArray(a) ? [] : a.commands || [] : [], d = this._isAdditionsProposedApiEnabled && !Array.isArray(a) ? a.enableForwardStability : void 0;
    let f;
    return {
      pid: this._references.createReferenceId({
        dispose() {
          f == null || f.dispose();
        },
        items: l,
        list: c
      }),
      items: l.map((v, _) => {
        let m;
        v.command && (f || (f = new Te()), m = this._commands.toInternal(v.command, f));
        let E;
        v.action && (f || (f = new Te()), E = this._commands.toInternal(v.action, f));
        const S = v.insertText;
        return {
          insertText: typeof S == "string" ? S : { snippet: S.value },
          filterText: v.filterText,
          range: v.range ? j.from(v.range) : void 0,
          showRange: this._isAdditionsProposedApiEnabled && v.showRange ? j.from(v.showRange) : void 0,
          command: m,
          action: E,
          idx: _,
          completeBracketPairs: this._isAdditionsProposedApiEnabled ? v.completeBracketPairs : !1,
          isInlineEdit: this._isAdditionsProposedApiEnabled ? v.isInlineEdit : !1,
          showInlineEditMenu: this._isAdditionsProposedApiEnabled ? v.showInlineEditMenu : !1,
          displayLocation: v.displayLocation && this._isAdditionsProposedApiEnabled ? {
            range: j.from(v.displayLocation.range),
            label: v.displayLocation.label
          } : void 0,
          warning: v.warning && this._isAdditionsProposedApiEnabled ? {
            message: Ne.from(v.warning.message),
            icon: v.warning.icon ? e1.fromThemeIcon(v.warning.icon) : void 0
          } : void 0
        };
      }),
      commands: u.map((v) => (f || (f = new Te()), Xy.from(v, this._commands, f))),
      suppressSuggestions: !1,
      enableForwardStability: d
    };
  }
  disposeCompletions(e, t) {
    const n = this._references.get(e);
    if (this._provider.handleListEndOfLifetime && this._isAdditionsProposedApiEnabled && (n != null && n.list)) {
      let s = function(o) {
        switch (o.kind) {
          case "lostRace":
            return { kind: Ts.LostRace };
          case "tokenCancellation":
            return { kind: Ts.TokenCancellation };
          case "other":
            return { kind: Ts.Other };
          case "empty":
            return { kind: Ts.Empty };
          case "notTaken":
            return { kind: Ts.NotTaken };
          default:
            return { kind: Ts.Other };
        }
      };
      this._provider.handleListEndOfLifetime(n.list, s(t));
    }
    const r = this._references.disposeReferenceId(e);
    r == null || r.dispose();
  }
  handleDidShowCompletionItem(e, t, n) {
    var s;
    const r = (s = this._references.get(e)) == null ? void 0 : s.items[t];
    r && this._provider.handleDidShowCompletionItem && this._isAdditionsProposedApiEnabled && this._provider.handleDidShowCompletionItem(r, n);
  }
  handlePartialAccept(e, t, n, r) {
    var o;
    const s = (o = this._references.get(e)) == null ? void 0 : o.items[t];
    s && this._provider.handleDidPartiallyAcceptCompletionItem && this._isAdditionsProposedApiEnabled && (this._provider.handleDidPartiallyAcceptCompletionItem(s, n), this._provider.handleDidPartiallyAcceptCompletionItem(s, y0.to(r)));
  }
  handleEndOfLifetime(e, t, n) {
    var s;
    const r = (s = this._references.get(e)) == null ? void 0 : s.items[t];
    if (r && this._provider.handleEndOfLifetime && this._isAdditionsProposedApiEnabled) {
      const o = E0.to(n, (a) => {
        var l;
        return (l = this._references.get(a.pid)) == null ? void 0 : l.items[a.idx];
      });
      this._provider.handleEndOfLifetime(r, o);
    }
  }
  handleRejection(e, t) {
    var r;
    const n = (r = this._references.get(e)) == null ? void 0 : r.items[t];
    n && this._provider.handleDidRejectCompletionItem && this._isAdditionsProposedApiEnabled && this._provider.handleDidRejectCompletionItem(n);
  }
}
class C$ {
  constructor() {
    this._references = /* @__PURE__ */ new Map(), this._idPool = 1;
  }
  createReferenceId(e) {
    const t = this._idPool++;
    return this._references.set(t, e), t;
  }
  disposeReferenceId(e) {
    const t = this._references.get(e);
    return this._references.delete(e), t;
  }
  get(e) {
    return this._references.get(e);
  }
}
class vw {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._cache = new Hn("SignatureHelp");
  }
  async provideSignatureHelp(e, t, n, r) {
    const s = this._documents.getDocument(e), o = ut.to(t), a = this.reviveContext(n), l = await this._provider.provideSignatureHelp(s, o, r, a);
    if (l) {
      const c = this._cache.add([l]);
      return { ...$f.from(l), id: c };
    }
  }
  reviveContext(e) {
    let t;
    if (e.activeSignatureHelp) {
      const n = $f.to(e.activeSignatureHelp), r = this._cache.get(e.activeSignatureHelp.id, 0);
      r ? (t = r, t.activeSignature = n.activeSignature, t.activeParameter = n.activeParameter) : t = n;
    }
    return { ...e, activeSignatureHelp: t };
  }
  releaseSignatureHelp(e) {
    this._cache.delete(e);
  }
}
class ng {
  constructor(e, t, n, r, s) {
    this._documents = e, this._commands = t, this._provider = n, this._logService = r, this._extension = s, this._cache = new Hn("InlayHints"), this._disposables = /* @__PURE__ */ new Map();
  }
  async provideInlayHints(e, t, n) {
    const r = this._documents.getDocument(e), s = j.to(t), o = await this._provider.provideInlayHints(r, s, n);
    if (!Array.isArray(o) || o.length === 0) {
      this._logService.trace(`[InlayHints] NO inlay hints from '${this._extension.identifier.value}' for range ${JSON.stringify(t)}`);
      return;
    }
    if (n.isCancellationRequested)
      return;
    const a = this._cache.add(o);
    this._disposables.set(a, new Te());
    const l = { hints: [], cacheId: a };
    for (let c = 0; c < o.length; c++)
      this._isValidInlayHint(o[c], s) && l.hints.push(this._convertInlayHint(o[c], [a, c]));
    return this._logService.trace(`[InlayHints] ${l.hints.length} inlay hints from '${this._extension.identifier.value}' for range ${JSON.stringify(t)}`), l;
  }
  async resolveInlayHint(e, t) {
    if (typeof this._provider.resolveInlayHint != "function")
      return;
    const n = this._cache.get(...e);
    if (!n)
      return;
    const r = await this._provider.resolveInlayHint(n, t);
    if (r && this._isValidInlayHint(r))
      return this._convertInlayHint(r, e);
  }
  releaseHints(e) {
    var t;
    (t = this._disposables.get(e)) == null || t.dispose(), this._disposables.delete(e), this._cache.delete(e);
  }
  _isValidInlayHint(e, t) {
    return e.label.length === 0 || Array.isArray(e.label) && e.label.every((n) => n.value.length === 0) ? (console.log("INVALID inlay hint, empty label", e), !1) : !(t && !t.contains(e.position));
  }
  _convertInlayHint(e, t) {
    const n = this._disposables.get(t[0]);
    if (!n)
      throw Error("DisposableStore is missing...");
    const r = {
      label: "",
      cacheId: t,
      tooltip: Ne.fromStrict(e.tooltip),
      position: ut.from(e.position),
      textEdits: e.textEdits && e.textEdits.map(gi.from),
      kind: e.kind && P_.from(e.kind),
      paddingLeft: e.paddingLeft,
      paddingRight: e.paddingRight
    };
    if (typeof e.label == "string")
      r.label = e.label;
    else {
      const s = [];
      r.label = s;
      for (const o of e.label) {
        if (!o.value) {
          console.warn("INVALID inlay hint, empty label part", this._extension.identifier.value);
          continue;
        }
        const a = {
          label: o.value,
          tooltip: Ne.fromStrict(o.tooltip)
        };
        $n.isLocation(o.location) && (a.location = hn.from(o.location)), o.command && (a.command = this._commands.toInternal(o.command, n)), s.push(a);
      }
    }
    return r;
  }
}
class Ho {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._cache = new Hn("DocumentLink");
  }
  async provideLinks(e, t) {
    const n = this._documents.getDocument(e), r = await this._provider.provideDocumentLinks(n, t);
    if (!(!Array.isArray(r) || r.length === 0) && !t.isCancellationRequested) {
      if (typeof this._provider.resolveDocumentLink != "function")
        return { links: r.filter(Ho._validateLink).map(_l.from) };
      {
        const s = this._cache.add(r), o = { links: [], cacheId: s };
        for (let a = 0; a < r.length; a++) {
          if (!Ho._validateLink(r[a]))
            continue;
          const l = _l.from(r[a]);
          l.cacheId = [s, a], o.links.push(l);
        }
        return o;
      }
    }
  }
  static _validateLink(e) {
    return e.target && e.target.path.length > 5e4 ? (console.warn("DROPPING link because it is too long"), !1) : !0;
  }
  async resolveLink(e, t) {
    if (typeof this._provider.resolveDocumentLink != "function")
      return;
    const n = this._cache.get(...e);
    if (!n)
      return;
    const r = await this._provider.resolveDocumentLink(n, t);
    if (!(!r || !Ho._validateLink(r)))
      return _l.from(r);
  }
  releaseLinks(e) {
    this._cache.delete(e);
  }
}
class ww {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideColors(e, t) {
    const n = this._documents.getDocument(e), r = await this._provider.provideDocumentColors(n, t);
    return Array.isArray(r) ? r.map((o) => ({
      color: nd.from(o.color),
      range: j.from(o.range)
    })) : [];
  }
  async provideColorPresentations(e, t, n) {
    const r = this._documents.getDocument(e), s = j.to(t.range), o = nd.to(t.color), a = await this._provider.provideColorPresentations(o, { document: r, range: s }, n);
    if (Array.isArray(a))
      return a.map(A_.from);
  }
}
class A4 {
  constructor(e, t) {
    this._documents = e, this._provider = t;
  }
  async provideFoldingRanges(e, t, n) {
    const r = this._documents.getDocument(e), s = await this._provider.provideFoldingRanges(r, t, n);
    if (Array.isArray(s))
      return s.map(N_.from);
  }
}
class R4 {
  constructor(e, t, n) {
    this._documents = e, this._provider = t, this._logService = n;
  }
  async provideSelectionRanges(e, t, n) {
    const r = this._documents.getDocument(e), s = t.map(ut.to), o = await this._provider.provideSelectionRanges(r, s, n);
    if (!yp(o))
      return [];
    if (o.length !== s.length)
      return this._logService.warn("BAD selection ranges, provider must return ranges for each position"), [];
    const a = [];
    for (let l = 0; l < s.length; l++) {
      const c = [];
      a.push(c);
      let u = s[l], d = o[l];
      for (; ; ) {
        if (!d.range.contains(u))
          throw new Error("INVALID selection range, must contain the previous range");
        if (c.push(i0.from(d)), !d.parent)
          break;
        u = d.range, d = d.parent;
      }
    }
    return a;
  }
}
class Vd {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._idPool = new HS(""), this._cache = /* @__PURE__ */ new Map();
  }
  async prepareSession(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.prepareCallHierarchy(r, s, n);
    if (!o)
      return;
    const a = this._idPool.nextId();
    return this._cache.set(a, /* @__PURE__ */ new Map()), Array.isArray(o) ? o.map((l) => this._cacheAndConvertItem(a, l)) : [this._cacheAndConvertItem(a, o)];
  }
  async provideCallsTo(e, t, n) {
    const r = this._itemFromCache(e, t);
    if (!r)
      throw new Error("missing call hierarchy item");
    const s = await this._provider.provideCallHierarchyIncomingCalls(r, n);
    if (s)
      return s.map((o) => ({
        from: this._cacheAndConvertItem(e, o.from),
        fromRanges: o.fromRanges.map((a) => j.from(a))
      }));
  }
  async provideCallsFrom(e, t, n) {
    const r = this._itemFromCache(e, t);
    if (!r)
      throw new Error("missing call hierarchy item");
    const s = await this._provider.provideCallHierarchyOutgoingCalls(r, n);
    if (s)
      return s.map((o) => ({
        to: this._cacheAndConvertItem(e, o.to),
        fromRanges: o.fromRanges.map((a) => j.from(a))
      }));
  }
  releaseSession(e) {
    this._cache.delete(e);
  }
  _cacheAndConvertItem(e, t) {
    const n = this._cache.get(e), r = ql.from(t, e, n.size.toString(36));
    return n.set(r._itemId, t), r;
  }
  _itemFromCache(e, t) {
    const n = this._cache.get(e);
    return n == null ? void 0 : n.get(t);
  }
}
class zd {
  constructor(e, t) {
    this._documents = e, this._provider = t, this._idPool = new HS(""), this._cache = /* @__PURE__ */ new Map();
  }
  async prepareSession(e, t, n) {
    const r = this._documents.getDocument(e), s = ut.to(t), o = await this._provider.prepareTypeHierarchy(r, s, n);
    if (!o)
      return;
    const a = this._idPool.nextId();
    return this._cache.set(a, /* @__PURE__ */ new Map()), Array.isArray(o) ? o.map((l) => this._cacheAndConvertItem(a, l)) : [this._cacheAndConvertItem(a, o)];
  }
  async provideSupertypes(e, t, n) {
    const r = this._itemFromCache(e, t);
    if (!r)
      throw new Error("missing type hierarchy item");
    const s = await this._provider.provideTypeHierarchySupertypes(r, n);
    if (s)
      return s.map((o) => this._cacheAndConvertItem(e, o));
  }
  async provideSubtypes(e, t, n) {
    const r = this._itemFromCache(e, t);
    if (!r)
      throw new Error("missing type hierarchy item");
    const s = await this._provider.provideTypeHierarchySubtypes(r, n);
    if (s)
      return s.map((o) => this._cacheAndConvertItem(e, o));
  }
  releaseSession(e) {
    this._cache.delete(e);
  }
  _cacheAndConvertItem(e, t) {
    const n = this._cache.get(e), r = vl.from(t, e, n.size.toString(36));
    return n.set(r._itemId, t), r;
  }
  _itemFromCache(e, t) {
    const n = this._cache.get(e);
    return n == null ? void 0 : n.get(t);
  }
}
class rg {
  constructor(e, t, n, r, s) {
    this._proxy = e, this._documents = t, this._provider = n, this._handle = r, this._extension = s, this._cache = new Hn("DocumentDropEdit");
  }
  async provideDocumentOnDropEdits(e, t, n, r, s) {
    const o = this._documents.getDocument(t), a = ut.to(n), l = ud.toDataTransfer(r, async (f) => (await this._proxy.$resolveDocumentOnDropFileData(this._handle, e, f)).buffer), c = await this._provider.provideDocumentDropEdits(o, a, l, s);
    if (!c)
      return;
    const u = Xn(c), d = this._cache.add(u);
    return u.map((f, p) => {
      var v, _;
      return {
        _cacheId: [d, p],
        title: f.title ?? h(
          2626,
          "Drop using '{0}' extension",
          this._extension.displayName || this._extension.name
        ),
        kind: (v = f.kind) == null ? void 0 : v.value,
        yieldTo: (_ = f.yieldTo) == null ? void 0 : _.map((m) => m.value),
        insertText: typeof f.insertText == "string" ? f.insertText : { snippet: f.insertText.value },
        additionalEdit: f.additionalEdit ? kn.from(f.additionalEdit, void 0) : void 0
      };
    });
  }
  async resolveDropEdit(e, t) {
    const [n, r] = e, s = this._cache.get(n, r);
    if (!s || !this._provider.resolveDocumentDropEdit)
      return {};
    const o = await this._provider.resolveDocumentDropEdit(s, t) ?? s;
    return { additionalEdit: o.additionalEdit ? kn.from(o.additionalEdit, void 0) : void 0 };
  }
  releaseDropEdits(e) {
    this._cache.delete(e);
  }
}
class qd {
  constructor(e, t) {
    this.adapter = e, this.extension = t;
  }
}
const ei = class ei {
  constructor(e, t, n, r, s, o, a, l) {
    this._uriTransformer = t, this._documents = n, this._commands = r, this._diagnostics = s, this._logService = o, this._apiDeprecation = a, this._extensionTelemetry = l, this._adapter = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadLanguageFeatures);
  }
  _transformDocumentSelector(e, t) {
    return Zu.from(e, this._uriTransformer, t);
  }
  _createDisposable(e) {
    return new je(() => {
      this._adapter.delete(e), this._proxy.$unregister(e);
    });
  }
  _nextHandle() {
    return ei._handlePool++;
  }
  async _withAdapter(e, t, n, r, s, o = !1) {
    const a = this._adapter.get(e);
    if (!a || !(a.adapter instanceof t))
      return r;
    const l = Date.now();
    o || this._logService.trace(`[${a.extension.identifier.value}] INVOKE provider '${n.toString().replace(/[\r\n]/g, "")}'`);
    const c = n(a.adapter, a.extension);
    return Promise.resolve(c).catch((u) => {
      cs(u) || (this._logService.error(`[${a.extension.identifier.value}] provider FAILED`), this._logService.error(u), this._extensionTelemetry.onExtensionError(a.extension.identifier, u));
    }).finally(() => {
      o || this._logService.trace(`[${a.extension.identifier.value}] provider DONE after ${Date.now() - l}ms`);
    }), Dt.isCancellationToken(s) ? BE(c, s) : c;
  }
  _addNewAdapter(e, t) {
    const n = this._nextHandle();
    return this._adapter.set(n, new qd(e, t)), n;
  }
  static _extLabel(e) {
    return e.displayName || e.name;
  }
  static _extId(e) {
    return e.identifier.value;
  }
  registerDocumentSymbolProvider(e, t, n, r) {
    const s = this._addNewAdapter(new b1(this._documents, n), e), o = r && r.label || ei._extLabel(e);
    return this._proxy.$registerDocumentSymbolProvider(s, this._transformDocumentSelector(t, e), o), this._createDisposable(s);
  }
  $provideDocumentSymbols(e, t, n) {
    return this._withAdapter(e, b1, (r) => r.provideDocumentSymbols(x.revive(t), n), void 0, n);
  }
  registerCodeLensProvider(e, t, n) {
    const r = this._nextHandle(), s = typeof n.onDidChangeCodeLenses == "function" ? this._nextHandle() : void 0;
    this._adapter.set(r, new qd(new tg(
      this._documents,
      this._commands.converter,
      n,
      e,
      this._extensionTelemetry,
      this._logService
    ), e)), this._proxy.$registerCodeLensSupport(r, this._transformDocumentSelector(t, e), s);
    let o = this._createDisposable(r);
    if (s !== void 0) {
      const a = n.onDidChangeCodeLenses((l) => this._proxy.$emitCodeLensEvent(s));
      o = je.from(o, a);
    }
    return o;
  }
  $provideCodeLenses(e, t, n) {
    return this._withAdapter(e, tg, (r) => r.provideCodeLenses(x.revive(t), n), void 0, n, t.scheme === "output");
  }
  $resolveCodeLens(e, t, n) {
    return this._withAdapter(e, tg, (r) => r.resolveCodeLens(t, n), void 0, void 0, !0);
  }
  $releaseCodeLenses(e, t) {
    this._withAdapter(e, tg, (n) => Promise.resolve(n.releaseCodeLenses(t)), void 0, void 0, !0);
  }
  registerDefinitionProvider(e, t, n) {
    const r = this._addNewAdapter(new v4(this._documents, n), e);
    return this._proxy.$registerDefinitionSupport(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideDefinition(e, t, n, r) {
    return this._withAdapter(e, v4, (s) => s.provideDefinition(x.revive(t), n, r), [], r);
  }
  registerDeclarationProvider(e, t, n) {
    const r = this._addNewAdapter(new w4(this._documents, n), e);
    return this._proxy.$registerDeclarationSupport(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideDeclaration(e, t, n, r) {
    return this._withAdapter(e, w4, (s) => s.provideDeclaration(x.revive(t), n, r), [], r);
  }
  registerImplementationProvider(e, t, n) {
    const r = this._addNewAdapter(new b4(this._documents, n), e);
    return this._proxy.$registerImplementationSupport(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideImplementation(e, t, n, r) {
    return this._withAdapter(e, b4, (s) => s.provideImplementation(x.revive(t), n, r), [], r);
  }
  registerTypeDefinitionProvider(e, t, n) {
    const r = this._addNewAdapter(new y4(this._documents, n), e);
    return this._proxy.$registerTypeDefinitionSupport(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideTypeDefinition(e, t, n, r) {
    return this._withAdapter(e, y4, (s) => s.provideTypeDefinition(x.revive(t), n, r), [], r);
  }
  registerHoverProvider(e, t, n, r) {
    const s = this._addNewAdapter(new Ch(this._documents, n), e);
    return this._proxy.$registerHoverProvider(s, this._transformDocumentSelector(t, e)), this._createDisposable(s);
  }
  $provideHover(e, t, n, r, s) {
    return this._withAdapter(e, Ch, (o) => o.provideHover(x.revive(t), n, r, s), void 0, s);
  }
  $releaseHover(e, t) {
    this._withAdapter(e, Ch, (n) => Promise.resolve(n.releaseHover(t)), void 0, void 0);
  }
  registerEvaluatableExpressionProvider(e, t, n, r) {
    const s = this._addNewAdapter(new x4(this._documents, n), e);
    return this._proxy.$registerEvaluatableExpressionProvider(s, this._transformDocumentSelector(t, e)), this._createDisposable(s);
  }
  $provideEvaluatableExpression(e, t, n, r) {
    return this._withAdapter(e, x4, (s) => s.provideEvaluatableExpression(x.revive(t), n, r), void 0, r);
  }
  registerInlineValuesProvider(e, t, n, r) {
    const s = typeof n.onDidChangeInlineValues == "function" ? this._nextHandle() : void 0, o = this._addNewAdapter(new E4(this._documents, n), e);
    this._proxy.$registerInlineValuesProvider(o, this._transformDocumentSelector(t, e), s);
    let a = this._createDisposable(o);
    if (s !== void 0) {
      const l = n.onDidChangeInlineValues((c) => this._proxy.$emitInlineValuesEvent(s));
      a = je.from(a, l);
    }
    return a;
  }
  $provideInlineValues(e, t, n, r, s) {
    return this._withAdapter(e, E4, (o) => o.provideInlineValues(x.revive(t), n, r, s), void 0, s);
  }
  registerDocumentHighlightProvider(e, t, n) {
    const r = this._addNewAdapter(new S4(this._documents, n), e);
    return this._proxy.$registerDocumentHighlightProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  registerMultiDocumentHighlightProvider(e, t, n) {
    const r = this._addNewAdapter(new D4(this._documents, n, this._logService), e);
    return this._proxy.$registerMultiDocumentHighlightProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideDocumentHighlights(e, t, n, r) {
    return this._withAdapter(e, S4, (s) => s.provideDocumentHighlights(x.revive(t), n, r), void 0, r);
  }
  $provideMultiDocumentHighlights(e, t, n, r, s) {
    return this._withAdapter(e, D4, (o) => o.provideMultiDocumentHighlights(x.revive(t), n, r.map((a) => x.revive(a)), s), void 0, s);
  }
  registerLinkedEditingRangeProvider(e, t, n) {
    const r = this._addNewAdapter(new k4(this._documents, n), e);
    return this._proxy.$registerLinkedEditingRangeProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideLinkedEditingRanges(e, t, n, r) {
    return this._withAdapter(e, k4, async (s) => {
      const o = await s.provideLinkedEditingRanges(x.revive(t), n, r);
      if (o)
        return {
          ranges: o.ranges,
          wordPattern: o.wordPattern ? ei._serializeRegExp(o.wordPattern) : void 0
        };
    }, void 0, r);
  }
  registerReferenceProvider(e, t, n) {
    const r = this._addNewAdapter(new I4(this._documents, n), e);
    return this._proxy.$registerReferenceSupport(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideReferences(e, t, n, r, s) {
    return this._withAdapter(e, I4, (o) => o.provideReferences(x.revive(t), n, r, s), void 0, s);
  }
  registerCodeActionProvider(e, t, n, r) {
    var a, l;
    const s = new Te(), o = this._addNewAdapter(new Mc(
      this._documents,
      this._commands.converter,
      this._diagnostics,
      n,
      this._logService,
      e,
      this._apiDeprecation
    ), e);
    return this._proxy.$registerCodeActionSupport(o, this._transformDocumentSelector(t, e), {
      providedKinds: (a = r == null ? void 0 : r.providedCodeActionKinds) == null ? void 0 : a.map((c) => c.value),
      documentation: (l = r == null ? void 0 : r.documentation) == null ? void 0 : l.map((c) => ({
        kind: c.kind.value,
        command: this._commands.converter.toInternal(c.command, s)
      }))
    }, ei._extLabel(e), ei._extId(e), !!n.resolveCodeAction), s.add(this._createDisposable(o)), s;
  }
  $provideCodeActions(e, t, n, r, s) {
    return this._withAdapter(e, Mc, (o) => o.provideCodeActions(x.revive(t), n, r, s), void 0, s);
  }
  $resolveCodeAction(e, t, n) {
    return this._withAdapter(e, Mc, (r) => r.resolveCodeAction(t, n), {}, void 0);
  }
  $releaseCodeActions(e, t) {
    this._withAdapter(e, Mc, (n) => Promise.resolve(n.releaseCodeActions(t)), void 0, void 0);
  }
  registerDocumentFormattingEditProvider(e, t, n) {
    const r = this._addNewAdapter(new C4(this._documents, n), e);
    return this._proxy.$registerDocumentFormattingSupport(r, this._transformDocumentSelector(t, e), e.identifier, e.displayName || e.name), this._createDisposable(r);
  }
  $provideDocumentFormattingEdits(e, t, n, r) {
    return this._withAdapter(e, C4, (s) => s.provideDocumentFormattingEdits(x.revive(t), n, r), void 0, r);
  }
  registerDocumentRangeFormattingEditProvider(e, t, n) {
    const r = typeof n.provideDocumentRangesFormattingEdits == "function", s = this._addNewAdapter(new mw(this._documents, n), e);
    return this._proxy.$registerRangeFormattingSupport(s, this._transformDocumentSelector(t, e), e.identifier, e.displayName || e.name, r), this._createDisposable(s);
  }
  $provideDocumentRangeFormattingEdits(e, t, n, r, s) {
    return this._withAdapter(e, mw, (o) => o.provideDocumentRangeFormattingEdits(x.revive(t), n, r, s), void 0, s);
  }
  $provideDocumentRangesFormattingEdits(e, t, n, r, s) {
    return this._withAdapter(e, mw, (o) => o.provideDocumentRangesFormattingEdits(x.revive(t), n, r, s), void 0, s);
  }
  registerOnTypeFormattingEditProvider(e, t, n, r) {
    const s = this._addNewAdapter(new T4(this._documents, n), e);
    return this._proxy.$registerOnTypeFormattingSupport(s, this._transformDocumentSelector(t, e), r, e.identifier), this._createDisposable(s);
  }
  $provideOnTypeFormattingEdits(e, t, n, r, s, o) {
    return this._withAdapter(e, T4, (a) => a.provideOnTypeFormattingEdits(x.revive(t), n, r, s, o), void 0, o);
  }
  registerWorkspaceSymbolProvider(e, t) {
    const n = this._addNewAdapter(new ig(t, this._logService), e);
    return this._proxy.$registerNavigateTypeSupport(n, typeof t.resolveWorkspaceSymbol == "function"), this._createDisposable(n);
  }
  $provideWorkspaceSymbols(e, t, n) {
    return this._withAdapter(e, ig, (r) => r.provideWorkspaceSymbols(t, n), { symbols: [] }, n);
  }
  $resolveWorkspaceSymbol(e, t, n) {
    return this._withAdapter(e, ig, (r) => r.resolveWorkspaceSymbol(t, n), void 0, void 0);
  }
  $releaseWorkspaceSymbols(e, t) {
    this._withAdapter(e, ig, (n) => n.releaseWorkspaceSymbols(t), void 0, void 0);
  }
  registerRenameProvider(e, t, n) {
    const r = this._addNewAdapter(new Va(this._documents, n, this._logService), e);
    return this._proxy.$registerRenameSupport(r, this._transformDocumentSelector(t, e), Va.supportsResolving(n)), this._createDisposable(r);
  }
  $provideRenameEdits(e, t, n, r, s) {
    return this._withAdapter(e, Va, (o) => o.provideRenameEdits(x.revive(t), n, r, s), void 0, s);
  }
  $resolveRenameLocation(e, t, n, r) {
    return this._withAdapter(e, Va, (s) => s.resolveRenameLocation(x.revive(t), n, r), void 0, r);
  }
  registerNewSymbolNamesProvider(e, t, n) {
    const r = this._addNewAdapter(new Th(this._documents, n, this._logService), e);
    return this._proxy.$registerNewSymbolNamesProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $supportsAutomaticNewSymbolNamesTriggerKind(e) {
    return this._withAdapter(e, Th, (t) => t.supportsAutomaticNewSymbolNamesTriggerKind(), !1, void 0);
  }
  $provideNewSymbolNames(e, t, n, r, s) {
    return this._withAdapter(e, Th, (o) => o.provideNewSymbolNames(x.revive(t), n, r, s), void 0, s);
  }
  registerDocumentSemanticTokensProvider(e, t, n, r) {
    const s = this._addNewAdapter(new wn(this._documents, n), e), o = typeof n.onDidChangeSemanticTokens == "function" ? this._nextHandle() : void 0;
    this._proxy.$registerDocumentSemanticTokensProvider(s, this._transformDocumentSelector(t, e), r, o);
    let a = this._createDisposable(s);
    if (o) {
      const l = n.onDidChangeSemanticTokens((c) => this._proxy.$emitDocumentSemanticTokensEvent(o));
      a = je.from(a, l);
    }
    return a;
  }
  $provideDocumentSemanticTokens(e, t, n, r) {
    return this._withAdapter(e, wn, (s) => s.provideDocumentSemanticTokens(x.revive(t), n, r), null, r);
  }
  $releaseDocumentSemanticTokens(e, t) {
    this._withAdapter(e, wn, (n) => n.releaseDocumentSemanticColoring(t), void 0, void 0);
  }
  registerDocumentRangeSemanticTokensProvider(e, t, n, r) {
    const s = this._addNewAdapter(new P4(this._documents, n), e);
    return this._proxy.$registerDocumentRangeSemanticTokensProvider(s, this._transformDocumentSelector(t, e), r), this._createDisposable(s);
  }
  $provideDocumentRangeSemanticTokens(e, t, n, r) {
    return this._withAdapter(e, P4, (s) => s.provideDocumentRangeSemanticTokens(x.revive(t), n, r), null, r);
  }
  registerCompletionItemProvider(e, t, n, r) {
    const s = this._addNewAdapter(new ba(
      this._documents,
      this._commands.converter,
      n,
      this._apiDeprecation,
      e
    ), e);
    return this._proxy.$registerCompletionsProvider(s, this._transformDocumentSelector(t, e), r, ba.supportsResolving(n), e.identifier), this._createDisposable(s);
  }
  $provideCompletionItems(e, t, n, r, s) {
    return this._withAdapter(e, ba, (o) => o.provideCompletionItems(x.revive(t), n, r, s), void 0, s);
  }
  $resolveCompletionItem(e, t, n) {
    return this._withAdapter(e, ba, (r) => r.resolveCompletionItem(t, n), void 0, n);
  }
  $releaseCompletionItems(e, t) {
    this._withAdapter(e, ba, (n) => n.releaseCompletionItems(t), void 0, void 0);
  }
  registerInlineCompletionsProvider(e, t, n, r) {
    var c;
    const s = typeof n.onDidChange == "function" && dt(e, "inlineCompletionsAdditions") ? this._nextHandle() : void 0, o = new ua(e, this._documents, n, this._commands.converter), a = this._addNewAdapter(o, e);
    let l = this._createDisposable(a);
    if (s !== void 0) {
      const u = n.onDidChange((d) => this._proxy.$emitInlineCompletionsChange(s));
      l = je.from(l, u);
    }
    return this._proxy.$registerInlineCompletionsSupport(a, this._transformDocumentSelector(t, e), o.supportsHandleEvents, gt.toKey(e.identifier.value), e.version, r != null && r.groupId ? gt.toKey(r.groupId) : void 0, ((c = r == null ? void 0 : r.yieldTo) == null ? void 0 : c.map((u) => gt.toKey(u))) || [], r == null ? void 0 : r.displayName, r == null ? void 0 : r.debounceDelayMs, s), l;
  }
  $provideInlineCompletions(e, t, n, r, s) {
    return this._withAdapter(e, ua, (o) => o.provideInlineCompletions(x.revive(t), n, r, s), void 0, void 0);
  }
  $handleInlineCompletionDidShow(e, t, n, r) {
    this._withAdapter(e, ua, async (s) => {
      s.handleDidShowCompletionItem(t, n, r);
    }, void 0, void 0);
  }
  $handleInlineCompletionPartialAccept(e, t, n, r, s) {
    this._withAdapter(e, ua, async (o) => {
      o.handlePartialAccept(t, n, r, s);
    }, void 0, void 0);
  }
  $handleInlineCompletionEndOfLifetime(e, t, n, r) {
    this._withAdapter(e, ua, async (s) => {
      s.handleEndOfLifetime(t, n, r);
    }, void 0, void 0);
  }
  $handleInlineCompletionRejection(e, t, n) {
    this._withAdapter(e, ua, async (r) => {
      r.handleRejection(t, n);
    }, void 0, void 0);
  }
  $freeInlineCompletionsList(e, t, n) {
    this._withAdapter(e, ua, async (r) => {
      r.disposeCompletions(t, n);
    }, void 0, void 0);
  }
  registerSignatureHelpProvider(e, t, n, r) {
    const s = Array.isArray(r) ? { triggerCharacters: r, retriggerCharacters: [] } : r, o = this._addNewAdapter(new vw(this._documents, n), e);
    return this._proxy.$registerSignatureHelpProvider(o, this._transformDocumentSelector(t, e), s), this._createDisposable(o);
  }
  $provideSignatureHelp(e, t, n, r, s) {
    return this._withAdapter(e, vw, (o) => o.provideSignatureHelp(x.revive(t), n, r, s), void 0, s);
  }
  $releaseSignatureHelp(e, t) {
    this._withAdapter(e, vw, (n) => n.releaseSignatureHelp(t), void 0, void 0);
  }
  registerInlayHintsProvider(e, t, n) {
    const r = typeof n.onDidChangeInlayHints == "function" ? this._nextHandle() : void 0, s = this._addNewAdapter(new ng(
      this._documents,
      this._commands.converter,
      n,
      this._logService,
      e
    ), e);
    this._proxy.$registerInlayHintsProvider(s, this._transformDocumentSelector(t, e), typeof n.resolveInlayHint == "function", r, ei._extLabel(e));
    let o = this._createDisposable(s);
    if (r !== void 0) {
      const a = n.onDidChangeInlayHints((l) => this._proxy.$emitInlayHintsEvent(r));
      o = je.from(o, a);
    }
    return o;
  }
  $provideInlayHints(e, t, n, r) {
    return this._withAdapter(e, ng, (s) => s.provideInlayHints(x.revive(t), n, r), void 0, r);
  }
  $resolveInlayHint(e, t, n) {
    return this._withAdapter(e, ng, (r) => r.resolveInlayHint(t, n), void 0, n);
  }
  $releaseInlayHints(e, t) {
    this._withAdapter(e, ng, (n) => n.releaseHints(t), void 0, void 0);
  }
  registerDocumentLinkProvider(e, t, n) {
    const r = this._addNewAdapter(new Ho(this._documents, n), e);
    return this._proxy.$registerDocumentLinkProvider(r, this._transformDocumentSelector(t, e), typeof n.resolveDocumentLink == "function"), this._createDisposable(r);
  }
  $provideDocumentLinks(e, t, n) {
    return this._withAdapter(e, Ho, (r) => r.provideLinks(x.revive(t), n), void 0, n, t.scheme === "output");
  }
  $resolveDocumentLink(e, t, n) {
    return this._withAdapter(e, Ho, (r) => r.resolveLink(t, n), void 0, void 0, !0);
  }
  $releaseDocumentLinks(e, t) {
    this._withAdapter(e, Ho, (n) => n.releaseLinks(t), void 0, void 0, !0);
  }
  registerColorProvider(e, t, n) {
    const r = this._addNewAdapter(new ww(this._documents, n), e);
    return this._proxy.$registerDocumentColorProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideDocumentColors(e, t, n) {
    return this._withAdapter(e, ww, (r) => r.provideColors(x.revive(t), n), [], n);
  }
  $provideColorPresentations(e, t, n, r) {
    return this._withAdapter(e, ww, (s) => s.provideColorPresentations(x.revive(t), n, r), void 0, r);
  }
  registerFoldingRangeProvider(e, t, n) {
    const r = this._nextHandle(), s = typeof n.onDidChangeFoldingRanges == "function" ? this._nextHandle() : void 0;
    this._adapter.set(r, new qd(new A4(this._documents, n), e)), this._proxy.$registerFoldingRangeProvider(r, this._transformDocumentSelector(t, e), e.identifier, s);
    let o = this._createDisposable(r);
    if (s !== void 0) {
      const a = n.onDidChangeFoldingRanges(() => this._proxy.$emitFoldingRangeEvent(s));
      o = je.from(o, a);
    }
    return o;
  }
  $provideFoldingRanges(e, t, n, r) {
    return this._withAdapter(e, A4, (s) => s.provideFoldingRanges(x.revive(t), n, r), void 0, r);
  }
  registerSelectionRangeProvider(e, t, n) {
    const r = this._addNewAdapter(new R4(this._documents, n, this._logService), e);
    return this._proxy.$registerSelectionRangeProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $provideSelectionRanges(e, t, n, r) {
    return this._withAdapter(e, R4, (s) => s.provideSelectionRanges(x.revive(t), n, r), [], r);
  }
  registerCallHierarchyProvider(e, t, n) {
    const r = this._addNewAdapter(new Vd(this._documents, n), e);
    return this._proxy.$registerCallHierarchyProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $prepareCallHierarchy(e, t, n, r) {
    return this._withAdapter(e, Vd, (s) => Promise.resolve(s.prepareSession(x.revive(t), n, r)), void 0, r);
  }
  $provideCallHierarchyIncomingCalls(e, t, n, r) {
    return this._withAdapter(e, Vd, (s) => s.provideCallsTo(t, n, r), void 0, r);
  }
  $provideCallHierarchyOutgoingCalls(e, t, n, r) {
    return this._withAdapter(e, Vd, (s) => s.provideCallsFrom(t, n, r), void 0, r);
  }
  $releaseCallHierarchy(e, t) {
    this._withAdapter(e, Vd, (n) => Promise.resolve(n.releaseSession(t)), void 0, void 0);
  }
  registerTypeHierarchyProvider(e, t, n) {
    const r = this._addNewAdapter(new zd(this._documents, n), e);
    return this._proxy.$registerTypeHierarchyProvider(r, this._transformDocumentSelector(t, e)), this._createDisposable(r);
  }
  $prepareTypeHierarchy(e, t, n, r) {
    return this._withAdapter(e, zd, (s) => Promise.resolve(s.prepareSession(x.revive(t), n, r)), void 0, r);
  }
  $provideTypeHierarchySupertypes(e, t, n, r) {
    return this._withAdapter(e, zd, (s) => s.provideSupertypes(t, n, r), void 0, r);
  }
  $provideTypeHierarchySubtypes(e, t, n, r) {
    return this._withAdapter(e, zd, (s) => s.provideSubtypes(t, n, r), void 0, r);
  }
  $releaseTypeHierarchy(e, t) {
    this._withAdapter(e, zd, (n) => Promise.resolve(n.releaseSession(t)), void 0, void 0);
  }
  registerDocumentOnDropEditProvider(e, t, n, r) {
    var o;
    const s = this._nextHandle();
    return this._adapter.set(s, new qd(new rg(this._proxy, this._documents, n, s, e), e)), this._proxy.$registerDocumentOnDropEditProvider(s, this._transformDocumentSelector(t, e), r ? {
      supportsResolve: !!n.resolveDocumentDropEdit,
      dropMimeTypes: r.dropMimeTypes,
      providedDropKinds: (o = r.providedDropEditKinds) == null ? void 0 : o.map((a) => a.value)
    } : void 0), this._createDisposable(s);
  }
  $provideDocumentOnDropEdits(e, t, n, r, s, o) {
    return this._withAdapter(e, rg, (a) => Promise.resolve(a.provideDocumentOnDropEdits(t, x.revive(n), r, s, o)), void 0, void 0);
  }
  $resolveDropEdit(e, t, n) {
    return this._withAdapter(e, rg, (r) => r.resolveDropEdit(t, n), {}, void 0);
  }
  $releaseDocumentOnDropEdits(e, t) {
    this._withAdapter(e, rg, (n) => Promise.resolve(n.releaseDropEdits(t)), void 0, void 0);
  }
  registerDocumentPasteEditProvider(e, t, n, r) {
    var o;
    const s = this._nextHandle();
    return this._adapter.set(s, new qd(new Wd(this._proxy, this._documents, n, s, e), e)), this._proxy.$registerPasteEditProvider(s, this._transformDocumentSelector(t, e), {
      supportsCopy: !!n.prepareDocumentPaste,
      supportsPaste: !!n.provideDocumentPasteEdits,
      supportsResolve: !!n.resolveDocumentPasteEdit,
      providedPasteEditKinds: (o = r.providedPasteEditKinds) == null ? void 0 : o.map((a) => a.value),
      copyMimeTypes: r.copyMimeTypes,
      pasteMimeTypes: r.pasteMimeTypes
    }), this._createDisposable(s);
  }
  $prepareDocumentPaste(e, t, n, r, s) {
    return this._withAdapter(e, Wd, (o) => o.prepareDocumentPaste(x.revive(t), n, r, s), void 0, s);
  }
  $providePasteEdits(e, t, n, r, s, o, a) {
    return this._withAdapter(e, Wd, (l) => l.providePasteEdits(t, x.revive(n), r, s, o, a), void 0, a);
  }
  $resolvePasteEdit(e, t, n) {
    return this._withAdapter(e, Wd, (r) => r.resolvePasteEdit(t, n), {}, void 0);
  }
  $releasePasteEdits(e, t) {
    this._withAdapter(e, Wd, (n) => Promise.resolve(n.releasePasteEdits(t)), void 0, void 0);
  }
  static _serializeRegExp(e) {
    return {
      pattern: e.source,
      flags: e.flags
    };
  }
  static _serializeIndentationRule(e) {
    return {
      decreaseIndentPattern: ei._serializeRegExp(e.decreaseIndentPattern),
      increaseIndentPattern: ei._serializeRegExp(e.increaseIndentPattern),
      indentNextLinePattern: e.indentNextLinePattern ? ei._serializeRegExp(e.indentNextLinePattern) : void 0,
      unIndentedLinePattern: e.unIndentedLinePattern ? ei._serializeRegExp(e.unIndentedLinePattern) : void 0
    };
  }
  static _serializeOnEnterRule(e) {
    return {
      beforeText: ei._serializeRegExp(e.beforeText),
      afterText: e.afterText ? ei._serializeRegExp(e.afterText) : void 0,
      previousLineText: e.previousLineText ? ei._serializeRegExp(e.previousLineText) : void 0,
      action: e.action
    };
  }
  static _serializeOnEnterRules(e) {
    return e.map(ei._serializeOnEnterRule);
  }
  static _serializeAutoClosingPair(e) {
    return {
      open: e.open,
      close: e.close,
      notIn: e.notIn ? e.notIn.map((t) => ju.toString(t)) : void 0
    };
  }
  static _serializeAutoClosingPairs(e) {
    return e.map(ei._serializeAutoClosingPair);
  }
  setLanguageConfiguration(e, t, n) {
    const { wordPattern: r } = n;
    if (r && KT(r))
      throw new Error(
        `Invalid language configuration: wordPattern '${r}' is not allowed to match the empty string.`
      );
    r ? this._documents.setWordDefinitionFor(t, r) : this._documents.setWordDefinitionFor(t, void 0), n.__electricCharacterSupport && this._apiDeprecation.report("LanguageConfiguration.__electricCharacterSupport", e, "Do not use."), n.__characterPairSupport && this._apiDeprecation.report("LanguageConfiguration.__characterPairSupport", e, "Do not use.");
    const s = this._nextHandle(), o = {
      comments: n.comments,
      brackets: n.brackets,
      wordPattern: n.wordPattern ? ei._serializeRegExp(n.wordPattern) : void 0,
      indentationRules: n.indentationRules ? ei._serializeIndentationRule(n.indentationRules) : void 0,
      onEnterRules: n.onEnterRules ? ei._serializeOnEnterRules(n.onEnterRules) : void 0,
      __electricCharacterSupport: n.__electricCharacterSupport,
      __characterPairSupport: n.__characterPairSupport,
      autoClosingPairs: n.autoClosingPairs ? ei._serializeAutoClosingPairs(n.autoClosingPairs) : void 0
    };
    return this._proxy.$setLanguageConfiguration(s, t, o), this._createDisposable(s);
  }
  $setWordDefinitions(e) {
    for (const t of e)
      this._documents.setWordDefinitionFor(t.languageId, new RegExp(t.regexSource, t.regexFlags));
  }
};
ei._handlePool = 0;
let Qx = ei;
var np;
(function(i) {
  i.Internal = { type: "internal", label: "Built-In" };
  function e(r) {
    switch (r.type) {
      case "extension":
        return `extension:${r.extensionId.value}`;
      case "mcp":
        return `mcp:${r.collectionId}:${r.definitionId}`;
      case "user":
        return `user:${r.file.toString()}`;
      case "internal":
        return "internal";
    }
  }
  i.toKey = e;
  function t(r, s) {
    return e(r) === e(s);
  }
  i.equals = t;
  function n(r) {
    return r.type === "internal" ? { ordinal: 1, label: h(5425, "Built-In") } : r.type === "mcp" ? { ordinal: 2, label: h(5426, "MCP Server: {0}", r.label) } : r.type === "user" ? { ordinal: 0, label: h(5427, "User Defined") } : { ordinal: 3, label: h(5428, "Extension: {0}", r.label) };
  }
  i.classify = n;
})(np || (np = {}));
function T$(i) {
  return typeof i == "object" && typeof i.sessionId == "string";
}
const P$ = me("notebookService"), A$ = me("codeMapperService"), R$ = me("IChatService"), L4 = "vscode_editFile", Kx = "vscode_editFile_internal", N4 = {
  id: Kx,
  displayName: "",
  modelDescription: "",
  source: np.Internal
};
let Jx = class {
  constructor(e, t, n) {
    this.chatService = e, this.codeMapperService = t, this.notebookService = n;
  }
  async invoke(e, t, n, r) {
    var p, v;
    if (!e.context)
      throw new Error("toolInvocationToken is required for this tool");
    const s = e.parameters, o = x.revive(s.uri), a = ((p = yb.parse(o)) == null ? void 0 : p.notebook) || o, l = this.chatService.getSession((v = e.context) == null ? void 0 : v.sessionId), c = l.getRequests().at(-1);
    l.acceptResponseProgress(c, {
      kind: "markdownContent",
      content: new Gh("\n````\n")
    }), l.acceptResponseProgress(c, {
      kind: "codeblockUri",
      uri: a,
      isEdit: !0
    }), l.acceptResponseProgress(c, {
      kind: "markdownContent",
      content: new Gh("\n````\n")
    }), this.notebookService.hasSupportedNotebooks(a) && this.notebookService.getNotebookTextModel(a) ? l.acceptResponseProgress(c, {
      kind: "notebookEdit",
      edits: [],
      uri: a
    }) : l.acceptResponseProgress(c, {
      kind: "textEdit",
      edits: [],
      uri: a
    });
    const u = l.editingSession;
    if (!u)
      throw new Error("This tool must be called from within an editing session");
    const d = await this.codeMapperService.mapCode({
      codeBlocks: [{ code: s.code, resource: a, markdownBeforeBlock: s.explanation }],
      location: "tool",
      chatRequestId: e.chatRequestId,
      chatRequestModel: e.modelId,
      chatSessionId: e.context.sessionId
    }, {
      textEdit: (_, m) => {
        l.acceptResponseProgress(c, { kind: "textEdit", uri: _, edits: m });
      },
      notebookEdit(_, m) {
        l.acceptResponseProgress(c, { kind: "notebookEdit", uri: _, edits: m });
      }
    }, r);
    if (this.notebookService.hasSupportedNotebooks(a) && this.notebookService.getNotebookTextModel(a) ? l.acceptResponseProgress(c, { kind: "notebookEdit", uri: a, edits: [], done: !0 }) : l.acceptResponseProgress(c, { kind: "textEdit", uri: a, edits: [], done: !0 }), d != null && d.errorMessage)
      throw new Error(d.errorMessage);
    let f;
    return await new Promise((_) => {
      let m = !1;
      f = J5((E) => {
        const S = u.entries.read(E), k = S == null ? void 0 : S.find((q) => q.modifiedURI.toString() === a.toString());
        k && (k.isCurrentlyBeingModifiedBy.read(E) ? m = !0 : m && _(!0));
      });
    }).finally(() => {
      f.dispose();
    }), {
      content: [{ kind: "text", value: "The file was edited successfully" }]
    };
  }
  async prepareToolInvocation(e, t) {
    return {
      presentation: "hidden"
    };
  }
};
Jx = z([
  O(0, R$),
  O(1, A$),
  O(2, P$)
], Jx);
const L$ = me("ILanguageModelToolsService"), N$ = me("chatTodoListService"), M$ = "chat.todoListTool.enabled", O$ = "manage_todo_list", M4 = {
  id: O$,
  toolReferenceName: "todos",
  when: Jt.equals(`config.${M$}`, !0),
  canBeReferencedInPrompt: !0,
  icon: ci.fromId(_e.checklist.id),
  displayName: "Update Todo List",
  userDescription: "Manage and track todo items for task planning",
  modelDescription: `Manage a structured todo list to track progress and plan tasks throughout your coding session. Use this tool VERY frequently to ensure task visibility and proper planning.

When to use this tool:
- Complex multi-step work requiring planning and tracking
- When user provides multiple tasks or requests (numbered/comma-separated)
- After receiving new instructions that require multiple steps
- BEFORE starting work on any todo (mark as in-progress)
- IMMEDIATELY after completing each todo (mark completed individually)
- When breaking down larger tasks into smaller actionable steps
- To give users visibility into your progress and planning

When NOT to use:
- Single, trivial tasks that can be completed in one step
- Purely conversational/informational requests
- When just reading files or performing simple searches

CRITICAL workflow:
1. Plan tasks by writing todo list with specific, actionable items
2. Mark ONE todo as in-progress before starting work
3. Complete the work for that specific todo
4. Mark that todo as completed IMMEDIATELY
5. Move to next todo and repeat

Todo states:
- not-started: Todo not yet begun
- in-progress: Currently working (limit ONE at a time)
- completed: Finished successfully

IMPORTANT: Mark todos completed as soon as they are done. Do not batch completions.`,
  source: np.Internal,
  inputSchema: {
    type: "object",
    properties: {
      operation: {
        type: "string",
        enum: ["write", "read"],
        description: "write: Replace entire todo list with new content. read: Retrieve current todo list. ALWAYS provide complete list when writing - partial updates not supported."
      },
      todoList: {
        type: "array",
        description: "Complete array of all todo items (required for write operation, ignored for read). Must include ALL items - both existing and new.",
        items: {
          type: "object",
          properties: {
            id: {
              type: "number",
              description: "Unique identifier for the todo. Use sequential numbers starting from 1."
            },
            title: {
              type: "string",
              description: "Concise action-oriented todo label (3-7 words). Displayed in UI."
            },
            description: {
              type: "string",
              description: "Detailed context, requirements, or implementation notes. Include file paths, specific methods, or acceptance criteria."
            },
            status: {
              type: "string",
              enum: ["not-started", "in-progress", "completed"],
              description: "not-started: Not begun | in-progress: Currently working (max 1) | completed: Fully finished with no blockers"
            }
          },
          required: ["id", "title", "description", "status"]
        }
      }
    },
    required: ["operation"]
  }
};
let Yx = class extends xe {
  constructor(e, t) {
    super(), this.chatTodoListService = e, this.logService = t;
  }
  async invoke(e, t, n, r) {
    var a;
    const s = (a = e.context) == null ? void 0 : a.sessionId;
    if (s === void 0)
      throw new Error("A chat session ID is required for this tool");
    const o = e.parameters;
    this.logService.debug(`ManageTodoListTool: Invoking with options ${JSON.stringify(o)}`);
    try {
      const l = this.chatTodoListService.getChatTodoListStorage();
      switch (o.operation) {
        case "read":
          return {
            content: [{
              kind: "text",
              value: this.handleRead(l, s)
            }]
          };
        case "write": {
          const c = o.todoList.map((u) => ({
            id: u.id,
            title: u.title,
            description: u.description,
            status: u.status
          }));
          return l.setTodoList(s, c), {
            content: [{
              kind: "text",
              value: "Successfully wrote todo list"
            }]
          };
        }
        default:
          return {
            content: [{
              kind: "text",
              value: "Error: Unknown operation"
            }]
          };
      }
    } catch (l) {
      return {
        content: [{
          kind: "text",
          value: `Error: ${l instanceof Error ? l.message : "Unknown error"}`
        }]
      };
    }
  }
  async prepareToolInvocation(e, t) {
    if (!e.chatSessionId)
      throw new Error("chatSessionId undefined");
    const r = this.chatTodoListService.getChatTodoListStorage().getTodoList(e.chatSessionId), s = e.parameters;
    let o;
    switch (s.operation) {
      case "write": {
        s.todoList && (o = this.generatePastTenseMessage(r, s.todoList));
        break;
      }
      case "read": {
        o = "Read todo list";
        break;
      }
    }
    const l = (s.todoList ?? r).map((c) => ({
      id: c.id.toString(),
      title: c.title,
      description: c.description,
      status: c.status
    }));
    return {
      pastTenseMessage: new Gh(o ?? "Updated todo list"),
      toolSpecificData: {
        kind: "todoList",
        sessionId: e.chatSessionId,
        todoList: l
      }
    };
  }
  generatePastTenseMessage(e, t) {
    if (e.length === 0)
      return `Created ${t.length} todo${t.length === 1 ? "" : "s"}`;
    const n = new Map(e.map((a) => [a.id, a])), r = t.filter((a) => {
      const l = n.get(a.id);
      return l && l.status !== "in-progress" && a.status === "in-progress";
    });
    if (r.length > 0) {
      const a = r[0], l = t.length;
      return `Starting (${t.findIndex((u) => u.id === a.id) + 1}/${l}) *${a.title}*`;
    }
    const s = t.filter((a) => {
      const l = n.get(a.id);
      return l && l.status !== "completed" && a.status === "completed";
    });
    if (s.length > 0) {
      const a = s[0], l = t.length;
      return `Completed (${t.findIndex((u) => u.id === a.id) + 1}/${l}) *${a.title}*`;
    }
    const o = t.filter((a) => !n.has(a.id));
    return o.length > 0 ? `Added ${o.length} todo${o.length === 1 ? "" : "s"}` : "Updated todo list";
  }
  handleRead(e, t) {
    const n = e.getTodoList(t);
    return n.length === 0 ? "No todo list found." : `# Task List

${this.formatTodoListAsMarkdownTaskList(n)}`;
  }
  formatTodoListAsMarkdownTaskList(e) {
    return e.length === 0 ? "" : e.map((t) => {
      let n;
      switch (t.status) {
        case "completed":
          n = "[x]";
          break;
        case "in-progress":
          n = "[-]";
          break;
        case "not-started":
        default:
          n = "[ ]";
          break;
      }
      const r = [`- ${n} ${t.title}`];
      return t.description && t.description.trim() && r.push(`  - ${t.description.trim()}`), r.join(`
`);
    }).join(`
`);
  }
};
Yx = z([
  O(0, N$),
  O(1, ot)
], Yx);
var _u;
let O4 = (_u = class extends xe {
  constructor(e, t) {
    super();
    const n = t.createInstance(Jx);
    this._register(e.registerToolData(N4)), this._register(e.registerToolImplementation(N4.id, n));
    const r = t.createInstance(Yx);
    this._register(e.registerToolData(M4)), this._register(e.registerToolImplementation(M4.id, r));
  }
}, _u.ID = "chat.builtinTools", _u);
O4 = z([
  O(0, L$),
  O(1, Dp)
], O4);
const F$ = "vscode_fetchWebPage_internal", nR = me("commandService"), WS = new class {
  constructor() {
    this._commands = /* @__PURE__ */ new Map(), this._onDidRegisterCommand = new M(), this.onDidRegisterCommand = this._onDidRegisterCommand.event;
  }
  registerCommand(i, e) {
    if (!i)
      throw new Error("invalid command");
    if (typeof i == "string") {
      if (!e)
        throw new Error("invalid command");
      return this.registerCommand({ id: i, handler: e });
    }
    if (i.metadata && Array.isArray(i.metadata.args)) {
      const o = [];
      for (const l of i.metadata.args)
        o.push(l.constraint);
      const a = i.handler;
      i.handler = function(l, ...c) {
        return TR(c, o), a(l, ...c);
      };
    }
    const { id: t } = i;
    let n = this._commands.get(t);
    n || (n = new ea(), this._commands.set(t, n));
    const r = n.unshift(i), s = Ie(() => {
      r();
      const o = this._commands.get(t);
      o != null && o.isEmpty() && this._commands.delete(t);
    });
    return this._onDidRegisterCommand.fire(t), s;
  }
  registerCommandAlias(i, e) {
    return WS.registerCommand(i, (t, ...n) => t.get(nR).executeCommand(e, ...n));
  }
  getCommand(i) {
    const e = this._commands.get(i);
    if (!(!e || e.isEmpty()))
      return Bi.first(e);
  }
  getCommands() {
    const i = /* @__PURE__ */ new Map();
    for (const e of this._commands.keys()) {
      const t = this.getCommand(e);
      t && i.set(e, t);
    }
    return i;
  }
}();
WS.registerCommand("noop", () => {
});
var C;
(function(i) {
  i[i.DependsOnKbLayout = -1] = "DependsOnKbLayout", i[i.Unknown = 0] = "Unknown", i[i.Backspace = 1] = "Backspace", i[i.Tab = 2] = "Tab", i[i.Enter = 3] = "Enter", i[i.Shift = 4] = "Shift", i[i.Ctrl = 5] = "Ctrl", i[i.Alt = 6] = "Alt", i[i.PauseBreak = 7] = "PauseBreak", i[i.CapsLock = 8] = "CapsLock", i[i.Escape = 9] = "Escape", i[i.Space = 10] = "Space", i[i.PageUp = 11] = "PageUp", i[i.PageDown = 12] = "PageDown", i[i.End = 13] = "End", i[i.Home = 14] = "Home", i[i.LeftArrow = 15] = "LeftArrow", i[i.UpArrow = 16] = "UpArrow", i[i.RightArrow = 17] = "RightArrow", i[i.DownArrow = 18] = "DownArrow", i[i.Insert = 19] = "Insert", i[i.Delete = 20] = "Delete", i[i.Digit0 = 21] = "Digit0", i[i.Digit1 = 22] = "Digit1", i[i.Digit2 = 23] = "Digit2", i[i.Digit3 = 24] = "Digit3", i[i.Digit4 = 25] = "Digit4", i[i.Digit5 = 26] = "Digit5", i[i.Digit6 = 27] = "Digit6", i[i.Digit7 = 28] = "Digit7", i[i.Digit8 = 29] = "Digit8", i[i.Digit9 = 30] = "Digit9", i[i.KeyA = 31] = "KeyA", i[i.KeyB = 32] = "KeyB", i[i.KeyC = 33] = "KeyC", i[i.KeyD = 34] = "KeyD", i[i.KeyE = 35] = "KeyE", i[i.KeyF = 36] = "KeyF", i[i.KeyG = 37] = "KeyG", i[i.KeyH = 38] = "KeyH", i[i.KeyI = 39] = "KeyI", i[i.KeyJ = 40] = "KeyJ", i[i.KeyK = 41] = "KeyK", i[i.KeyL = 42] = "KeyL", i[i.KeyM = 43] = "KeyM", i[i.KeyN = 44] = "KeyN", i[i.KeyO = 45] = "KeyO", i[i.KeyP = 46] = "KeyP", i[i.KeyQ = 47] = "KeyQ", i[i.KeyR = 48] = "KeyR", i[i.KeyS = 49] = "KeyS", i[i.KeyT = 50] = "KeyT", i[i.KeyU = 51] = "KeyU", i[i.KeyV = 52] = "KeyV", i[i.KeyW = 53] = "KeyW", i[i.KeyX = 54] = "KeyX", i[i.KeyY = 55] = "KeyY", i[i.KeyZ = 56] = "KeyZ", i[i.Meta = 57] = "Meta", i[i.ContextMenu = 58] = "ContextMenu", i[i.F1 = 59] = "F1", i[i.F2 = 60] = "F2", i[i.F3 = 61] = "F3", i[i.F4 = 62] = "F4", i[i.F5 = 63] = "F5", i[i.F6 = 64] = "F6", i[i.F7 = 65] = "F7", i[i.F8 = 66] = "F8", i[i.F9 = 67] = "F9", i[i.F10 = 68] = "F10", i[i.F11 = 69] = "F11", i[i.F12 = 70] = "F12", i[i.F13 = 71] = "F13", i[i.F14 = 72] = "F14", i[i.F15 = 73] = "F15", i[i.F16 = 74] = "F16", i[i.F17 = 75] = "F17", i[i.F18 = 76] = "F18", i[i.F19 = 77] = "F19", i[i.F20 = 78] = "F20", i[i.F21 = 79] = "F21", i[i.F22 = 80] = "F22", i[i.F23 = 81] = "F23", i[i.F24 = 82] = "F24", i[i.NumLock = 83] = "NumLock", i[i.ScrollLock = 84] = "ScrollLock", i[i.Semicolon = 85] = "Semicolon", i[i.Equal = 86] = "Equal", i[i.Comma = 87] = "Comma", i[i.Minus = 88] = "Minus", i[i.Period = 89] = "Period", i[i.Slash = 90] = "Slash", i[i.Backquote = 91] = "Backquote", i[i.BracketLeft = 92] = "BracketLeft", i[i.Backslash = 93] = "Backslash", i[i.BracketRight = 94] = "BracketRight", i[i.Quote = 95] = "Quote", i[i.OEM_8 = 96] = "OEM_8", i[i.IntlBackslash = 97] = "IntlBackslash", i[i.Numpad0 = 98] = "Numpad0", i[i.Numpad1 = 99] = "Numpad1", i[i.Numpad2 = 100] = "Numpad2", i[i.Numpad3 = 101] = "Numpad3", i[i.Numpad4 = 102] = "Numpad4", i[i.Numpad5 = 103] = "Numpad5", i[i.Numpad6 = 104] = "Numpad6", i[i.Numpad7 = 105] = "Numpad7", i[i.Numpad8 = 106] = "Numpad8", i[i.Numpad9 = 107] = "Numpad9", i[i.NumpadMultiply = 108] = "NumpadMultiply", i[i.NumpadAdd = 109] = "NumpadAdd", i[i.NUMPAD_SEPARATOR = 110] = "NUMPAD_SEPARATOR", i[i.NumpadSubtract = 111] = "NumpadSubtract", i[i.NumpadDecimal = 112] = "NumpadDecimal", i[i.NumpadDivide = 113] = "NumpadDivide", i[i.KEY_IN_COMPOSITION = 114] = "KEY_IN_COMPOSITION", i[i.ABNT_C1 = 115] = "ABNT_C1", i[i.ABNT_C2 = 116] = "ABNT_C2", i[i.AudioVolumeMute = 117] = "AudioVolumeMute", i[i.AudioVolumeUp = 118] = "AudioVolumeUp", i[i.AudioVolumeDown = 119] = "AudioVolumeDown", i[i.BrowserSearch = 120] = "BrowserSearch", i[i.BrowserHome = 121] = "BrowserHome", i[i.BrowserBack = 122] = "BrowserBack", i[i.BrowserForward = 123] = "BrowserForward", i[i.MediaTrackNext = 124] = "MediaTrackNext", i[i.MediaTrackPrevious = 125] = "MediaTrackPrevious", i[i.MediaStop = 126] = "MediaStop", i[i.MediaPlayPause = 127] = "MediaPlayPause", i[i.LaunchMediaPlayer = 128] = "LaunchMediaPlayer", i[i.LaunchMail = 129] = "LaunchMail", i[i.LaunchApp2 = 130] = "LaunchApp2", i[i.Clear = 131] = "Clear", i[i.MAX_VALUE = 132] = "MAX_VALUE";
})(C || (C = {}));
var A;
(function(i) {
  i[i.DependsOnKbLayout = -1] = "DependsOnKbLayout", i[i.None = 0] = "None", i[i.Hyper = 1] = "Hyper", i[i.Super = 2] = "Super", i[i.Fn = 3] = "Fn", i[i.FnLock = 4] = "FnLock", i[i.Suspend = 5] = "Suspend", i[i.Resume = 6] = "Resume", i[i.Turbo = 7] = "Turbo", i[i.Sleep = 8] = "Sleep", i[i.WakeUp = 9] = "WakeUp", i[i.KeyA = 10] = "KeyA", i[i.KeyB = 11] = "KeyB", i[i.KeyC = 12] = "KeyC", i[i.KeyD = 13] = "KeyD", i[i.KeyE = 14] = "KeyE", i[i.KeyF = 15] = "KeyF", i[i.KeyG = 16] = "KeyG", i[i.KeyH = 17] = "KeyH", i[i.KeyI = 18] = "KeyI", i[i.KeyJ = 19] = "KeyJ", i[i.KeyK = 20] = "KeyK", i[i.KeyL = 21] = "KeyL", i[i.KeyM = 22] = "KeyM", i[i.KeyN = 23] = "KeyN", i[i.KeyO = 24] = "KeyO", i[i.KeyP = 25] = "KeyP", i[i.KeyQ = 26] = "KeyQ", i[i.KeyR = 27] = "KeyR", i[i.KeyS = 28] = "KeyS", i[i.KeyT = 29] = "KeyT", i[i.KeyU = 30] = "KeyU", i[i.KeyV = 31] = "KeyV", i[i.KeyW = 32] = "KeyW", i[i.KeyX = 33] = "KeyX", i[i.KeyY = 34] = "KeyY", i[i.KeyZ = 35] = "KeyZ", i[i.Digit1 = 36] = "Digit1", i[i.Digit2 = 37] = "Digit2", i[i.Digit3 = 38] = "Digit3", i[i.Digit4 = 39] = "Digit4", i[i.Digit5 = 40] = "Digit5", i[i.Digit6 = 41] = "Digit6", i[i.Digit7 = 42] = "Digit7", i[i.Digit8 = 43] = "Digit8", i[i.Digit9 = 44] = "Digit9", i[i.Digit0 = 45] = "Digit0", i[i.Enter = 46] = "Enter", i[i.Escape = 47] = "Escape", i[i.Backspace = 48] = "Backspace", i[i.Tab = 49] = "Tab", i[i.Space = 50] = "Space", i[i.Minus = 51] = "Minus", i[i.Equal = 52] = "Equal", i[i.BracketLeft = 53] = "BracketLeft", i[i.BracketRight = 54] = "BracketRight", i[i.Backslash = 55] = "Backslash", i[i.IntlHash = 56] = "IntlHash", i[i.Semicolon = 57] = "Semicolon", i[i.Quote = 58] = "Quote", i[i.Backquote = 59] = "Backquote", i[i.Comma = 60] = "Comma", i[i.Period = 61] = "Period", i[i.Slash = 62] = "Slash", i[i.CapsLock = 63] = "CapsLock", i[i.F1 = 64] = "F1", i[i.F2 = 65] = "F2", i[i.F3 = 66] = "F3", i[i.F4 = 67] = "F4", i[i.F5 = 68] = "F5", i[i.F6 = 69] = "F6", i[i.F7 = 70] = "F7", i[i.F8 = 71] = "F8", i[i.F9 = 72] = "F9", i[i.F10 = 73] = "F10", i[i.F11 = 74] = "F11", i[i.F12 = 75] = "F12", i[i.PrintScreen = 76] = "PrintScreen", i[i.ScrollLock = 77] = "ScrollLock", i[i.Pause = 78] = "Pause", i[i.Insert = 79] = "Insert", i[i.Home = 80] = "Home", i[i.PageUp = 81] = "PageUp", i[i.Delete = 82] = "Delete", i[i.End = 83] = "End", i[i.PageDown = 84] = "PageDown", i[i.ArrowRight = 85] = "ArrowRight", i[i.ArrowLeft = 86] = "ArrowLeft", i[i.ArrowDown = 87] = "ArrowDown", i[i.ArrowUp = 88] = "ArrowUp", i[i.NumLock = 89] = "NumLock", i[i.NumpadDivide = 90] = "NumpadDivide", i[i.NumpadMultiply = 91] = "NumpadMultiply", i[i.NumpadSubtract = 92] = "NumpadSubtract", i[i.NumpadAdd = 93] = "NumpadAdd", i[i.NumpadEnter = 94] = "NumpadEnter", i[i.Numpad1 = 95] = "Numpad1", i[i.Numpad2 = 96] = "Numpad2", i[i.Numpad3 = 97] = "Numpad3", i[i.Numpad4 = 98] = "Numpad4", i[i.Numpad5 = 99] = "Numpad5", i[i.Numpad6 = 100] = "Numpad6", i[i.Numpad7 = 101] = "Numpad7", i[i.Numpad8 = 102] = "Numpad8", i[i.Numpad9 = 103] = "Numpad9", i[i.Numpad0 = 104] = "Numpad0", i[i.NumpadDecimal = 105] = "NumpadDecimal", i[i.IntlBackslash = 106] = "IntlBackslash", i[i.ContextMenu = 107] = "ContextMenu", i[i.Power = 108] = "Power", i[i.NumpadEqual = 109] = "NumpadEqual", i[i.F13 = 110] = "F13", i[i.F14 = 111] = "F14", i[i.F15 = 112] = "F15", i[i.F16 = 113] = "F16", i[i.F17 = 114] = "F17", i[i.F18 = 115] = "F18", i[i.F19 = 116] = "F19", i[i.F20 = 117] = "F20", i[i.F21 = 118] = "F21", i[i.F22 = 119] = "F22", i[i.F23 = 120] = "F23", i[i.F24 = 121] = "F24", i[i.Open = 122] = "Open", i[i.Help = 123] = "Help", i[i.Select = 124] = "Select", i[i.Again = 125] = "Again", i[i.Undo = 126] = "Undo", i[i.Cut = 127] = "Cut", i[i.Copy = 128] = "Copy", i[i.Paste = 129] = "Paste", i[i.Find = 130] = "Find", i[i.AudioVolumeMute = 131] = "AudioVolumeMute", i[i.AudioVolumeUp = 132] = "AudioVolumeUp", i[i.AudioVolumeDown = 133] = "AudioVolumeDown", i[i.NumpadComma = 134] = "NumpadComma", i[i.IntlRo = 135] = "IntlRo", i[i.KanaMode = 136] = "KanaMode", i[i.IntlYen = 137] = "IntlYen", i[i.Convert = 138] = "Convert", i[i.NonConvert = 139] = "NonConvert", i[i.Lang1 = 140] = "Lang1", i[i.Lang2 = 141] = "Lang2", i[i.Lang3 = 142] = "Lang3", i[i.Lang4 = 143] = "Lang4", i[i.Lang5 = 144] = "Lang5", i[i.Abort = 145] = "Abort", i[i.Props = 146] = "Props", i[i.NumpadParenLeft = 147] = "NumpadParenLeft", i[i.NumpadParenRight = 148] = "NumpadParenRight", i[i.NumpadBackspace = 149] = "NumpadBackspace", i[i.NumpadMemoryStore = 150] = "NumpadMemoryStore", i[i.NumpadMemoryRecall = 151] = "NumpadMemoryRecall", i[i.NumpadMemoryClear = 152] = "NumpadMemoryClear", i[i.NumpadMemoryAdd = 153] = "NumpadMemoryAdd", i[i.NumpadMemorySubtract = 154] = "NumpadMemorySubtract", i[i.NumpadClear = 155] = "NumpadClear", i[i.NumpadClearEntry = 156] = "NumpadClearEntry", i[i.ControlLeft = 157] = "ControlLeft", i[i.ShiftLeft = 158] = "ShiftLeft", i[i.AltLeft = 159] = "AltLeft", i[i.MetaLeft = 160] = "MetaLeft", i[i.ControlRight = 161] = "ControlRight", i[i.ShiftRight = 162] = "ShiftRight", i[i.AltRight = 163] = "AltRight", i[i.MetaRight = 164] = "MetaRight", i[i.BrightnessUp = 165] = "BrightnessUp", i[i.BrightnessDown = 166] = "BrightnessDown", i[i.MediaPlay = 167] = "MediaPlay", i[i.MediaRecord = 168] = "MediaRecord", i[i.MediaFastForward = 169] = "MediaFastForward", i[i.MediaRewind = 170] = "MediaRewind", i[i.MediaTrackNext = 171] = "MediaTrackNext", i[i.MediaTrackPrevious = 172] = "MediaTrackPrevious", i[i.MediaStop = 173] = "MediaStop", i[i.Eject = 174] = "Eject", i[i.MediaPlayPause = 175] = "MediaPlayPause", i[i.MediaSelect = 176] = "MediaSelect", i[i.LaunchMail = 177] = "LaunchMail", i[i.LaunchApp2 = 178] = "LaunchApp2", i[i.LaunchApp1 = 179] = "LaunchApp1", i[i.SelectTask = 180] = "SelectTask", i[i.LaunchScreenSaver = 181] = "LaunchScreenSaver", i[i.BrowserSearch = 182] = "BrowserSearch", i[i.BrowserHome = 183] = "BrowserHome", i[i.BrowserBack = 184] = "BrowserBack", i[i.BrowserForward = 185] = "BrowserForward", i[i.BrowserStop = 186] = "BrowserStop", i[i.BrowserRefresh = 187] = "BrowserRefresh", i[i.BrowserFavorites = 188] = "BrowserFavorites", i[i.ZoomToggle = 189] = "ZoomToggle", i[i.MailReply = 190] = "MailReply", i[i.MailForward = 191] = "MailForward", i[i.MailSend = 192] = "MailSend", i[i.MAX_VALUE = 193] = "MAX_VALUE";
})(A || (A = {}));
class VS {
  constructor() {
    this._keyCodeToStr = [], this._strToKeyCode = /* @__PURE__ */ Object.create(null);
  }
  define(e, t) {
    this._keyCodeToStr[e] = t, this._strToKeyCode[t.toLowerCase()] = e;
  }
  keyCodeToStr(e) {
    return this._keyCodeToStr[e];
  }
  strToKeyCode(e) {
    return this._strToKeyCode[e.toLowerCase()] || C.Unknown;
  }
}
const Ng = new VS(), Xx = new VS(), Zx = new VS(), U$ = new Array(230), $$ = /* @__PURE__ */ Object.create(null), H$ = /* @__PURE__ */ Object.create(null), eE = [];
for (let i = 0; i <= A.MAX_VALUE; i++)
  C.DependsOnKbLayout;
for (let i = 0; i <= C.MAX_VALUE; i++)
  eE[i] = A.DependsOnKbLayout;
(function() {
  const e = [
    [1, A.None, "None", C.Unknown, "unknown", 0, "VK_UNKNOWN", "", ""],
    [1, A.Hyper, "Hyper", C.Unknown, "", 0, "", "", ""],
    [1, A.Super, "Super", C.Unknown, "", 0, "", "", ""],
    [1, A.Fn, "Fn", C.Unknown, "", 0, "", "", ""],
    [1, A.FnLock, "FnLock", C.Unknown, "", 0, "", "", ""],
    [1, A.Suspend, "Suspend", C.Unknown, "", 0, "", "", ""],
    [1, A.Resume, "Resume", C.Unknown, "", 0, "", "", ""],
    [1, A.Turbo, "Turbo", C.Unknown, "", 0, "", "", ""],
    [1, A.Sleep, "Sleep", C.Unknown, "", 0, "VK_SLEEP", "", ""],
    [1, A.WakeUp, "WakeUp", C.Unknown, "", 0, "", "", ""],
    [0, A.KeyA, "KeyA", C.KeyA, "A", 65, "VK_A", "", ""],
    [0, A.KeyB, "KeyB", C.KeyB, "B", 66, "VK_B", "", ""],
    [0, A.KeyC, "KeyC", C.KeyC, "C", 67, "VK_C", "", ""],
    [0, A.KeyD, "KeyD", C.KeyD, "D", 68, "VK_D", "", ""],
    [0, A.KeyE, "KeyE", C.KeyE, "E", 69, "VK_E", "", ""],
    [0, A.KeyF, "KeyF", C.KeyF, "F", 70, "VK_F", "", ""],
    [0, A.KeyG, "KeyG", C.KeyG, "G", 71, "VK_G", "", ""],
    [0, A.KeyH, "KeyH", C.KeyH, "H", 72, "VK_H", "", ""],
    [0, A.KeyI, "KeyI", C.KeyI, "I", 73, "VK_I", "", ""],
    [0, A.KeyJ, "KeyJ", C.KeyJ, "J", 74, "VK_J", "", ""],
    [0, A.KeyK, "KeyK", C.KeyK, "K", 75, "VK_K", "", ""],
    [0, A.KeyL, "KeyL", C.KeyL, "L", 76, "VK_L", "", ""],
    [0, A.KeyM, "KeyM", C.KeyM, "M", 77, "VK_M", "", ""],
    [0, A.KeyN, "KeyN", C.KeyN, "N", 78, "VK_N", "", ""],
    [0, A.KeyO, "KeyO", C.KeyO, "O", 79, "VK_O", "", ""],
    [0, A.KeyP, "KeyP", C.KeyP, "P", 80, "VK_P", "", ""],
    [0, A.KeyQ, "KeyQ", C.KeyQ, "Q", 81, "VK_Q", "", ""],
    [0, A.KeyR, "KeyR", C.KeyR, "R", 82, "VK_R", "", ""],
    [0, A.KeyS, "KeyS", C.KeyS, "S", 83, "VK_S", "", ""],
    [0, A.KeyT, "KeyT", C.KeyT, "T", 84, "VK_T", "", ""],
    [0, A.KeyU, "KeyU", C.KeyU, "U", 85, "VK_U", "", ""],
    [0, A.KeyV, "KeyV", C.KeyV, "V", 86, "VK_V", "", ""],
    [0, A.KeyW, "KeyW", C.KeyW, "W", 87, "VK_W", "", ""],
    [0, A.KeyX, "KeyX", C.KeyX, "X", 88, "VK_X", "", ""],
    [0, A.KeyY, "KeyY", C.KeyY, "Y", 89, "VK_Y", "", ""],
    [0, A.KeyZ, "KeyZ", C.KeyZ, "Z", 90, "VK_Z", "", ""],
    [0, A.Digit1, "Digit1", C.Digit1, "1", 49, "VK_1", "", ""],
    [0, A.Digit2, "Digit2", C.Digit2, "2", 50, "VK_2", "", ""],
    [0, A.Digit3, "Digit3", C.Digit3, "3", 51, "VK_3", "", ""],
    [0, A.Digit4, "Digit4", C.Digit4, "4", 52, "VK_4", "", ""],
    [0, A.Digit5, "Digit5", C.Digit5, "5", 53, "VK_5", "", ""],
    [0, A.Digit6, "Digit6", C.Digit6, "6", 54, "VK_6", "", ""],
    [0, A.Digit7, "Digit7", C.Digit7, "7", 55, "VK_7", "", ""],
    [0, A.Digit8, "Digit8", C.Digit8, "8", 56, "VK_8", "", ""],
    [0, A.Digit9, "Digit9", C.Digit9, "9", 57, "VK_9", "", ""],
    [0, A.Digit0, "Digit0", C.Digit0, "0", 48, "VK_0", "", ""],
    [1, A.Enter, "Enter", C.Enter, "Enter", 13, "VK_RETURN", "", ""],
    [1, A.Escape, "Escape", C.Escape, "Escape", 27, "VK_ESCAPE", "", ""],
    [1, A.Backspace, "Backspace", C.Backspace, "Backspace", 8, "VK_BACK", "", ""],
    [1, A.Tab, "Tab", C.Tab, "Tab", 9, "VK_TAB", "", ""],
    [1, A.Space, "Space", C.Space, "Space", 32, "VK_SPACE", "", ""],
    [0, A.Minus, "Minus", C.Minus, "-", 189, "VK_OEM_MINUS", "-", "OEM_MINUS"],
    [0, A.Equal, "Equal", C.Equal, "=", 187, "VK_OEM_PLUS", "=", "OEM_PLUS"],
    [0, A.BracketLeft, "BracketLeft", C.BracketLeft, "[", 219, "VK_OEM_4", "[", "OEM_4"],
    [0, A.BracketRight, "BracketRight", C.BracketRight, "]", 221, "VK_OEM_6", "]", "OEM_6"],
    [0, A.Backslash, "Backslash", C.Backslash, "\\", 220, "VK_OEM_5", "\\", "OEM_5"],
    [0, A.IntlHash, "IntlHash", C.Unknown, "", 0, "", "", ""],
    [0, A.Semicolon, "Semicolon", C.Semicolon, ";", 186, "VK_OEM_1", ";", "OEM_1"],
    [0, A.Quote, "Quote", C.Quote, "'", 222, "VK_OEM_7", "'", "OEM_7"],
    [0, A.Backquote, "Backquote", C.Backquote, "`", 192, "VK_OEM_3", "`", "OEM_3"],
    [0, A.Comma, "Comma", C.Comma, ",", 188, "VK_OEM_COMMA", ",", "OEM_COMMA"],
    [0, A.Period, "Period", C.Period, ".", 190, "VK_OEM_PERIOD", ".", "OEM_PERIOD"],
    [0, A.Slash, "Slash", C.Slash, "/", 191, "VK_OEM_2", "/", "OEM_2"],
    [1, A.CapsLock, "CapsLock", C.CapsLock, "CapsLock", 20, "VK_CAPITAL", "", ""],
    [1, A.F1, "F1", C.F1, "F1", 112, "VK_F1", "", ""],
    [1, A.F2, "F2", C.F2, "F2", 113, "VK_F2", "", ""],
    [1, A.F3, "F3", C.F3, "F3", 114, "VK_F3", "", ""],
    [1, A.F4, "F4", C.F4, "F4", 115, "VK_F4", "", ""],
    [1, A.F5, "F5", C.F5, "F5", 116, "VK_F5", "", ""],
    [1, A.F6, "F6", C.F6, "F6", 117, "VK_F6", "", ""],
    [1, A.F7, "F7", C.F7, "F7", 118, "VK_F7", "", ""],
    [1, A.F8, "F8", C.F8, "F8", 119, "VK_F8", "", ""],
    [1, A.F9, "F9", C.F9, "F9", 120, "VK_F9", "", ""],
    [1, A.F10, "F10", C.F10, "F10", 121, "VK_F10", "", ""],
    [1, A.F11, "F11", C.F11, "F11", 122, "VK_F11", "", ""],
    [1, A.F12, "F12", C.F12, "F12", 123, "VK_F12", "", ""],
    [1, A.PrintScreen, "PrintScreen", C.Unknown, "", 0, "", "", ""],
    [1, A.ScrollLock, "ScrollLock", C.ScrollLock, "ScrollLock", 145, "VK_SCROLL", "", ""],
    [1, A.Pause, "Pause", C.PauseBreak, "PauseBreak", 19, "VK_PAUSE", "", ""],
    [1, A.Insert, "Insert", C.Insert, "Insert", 45, "VK_INSERT", "", ""],
    [1, A.Home, "Home", C.Home, "Home", 36, "VK_HOME", "", ""],
    [1, A.PageUp, "PageUp", C.PageUp, "PageUp", 33, "VK_PRIOR", "", ""],
    [1, A.Delete, "Delete", C.Delete, "Delete", 46, "VK_DELETE", "", ""],
    [1, A.End, "End", C.End, "End", 35, "VK_END", "", ""],
    [1, A.PageDown, "PageDown", C.PageDown, "PageDown", 34, "VK_NEXT", "", ""],
    [1, A.ArrowRight, "ArrowRight", C.RightArrow, "RightArrow", 39, "VK_RIGHT", "Right", ""],
    [1, A.ArrowLeft, "ArrowLeft", C.LeftArrow, "LeftArrow", 37, "VK_LEFT", "Left", ""],
    [1, A.ArrowDown, "ArrowDown", C.DownArrow, "DownArrow", 40, "VK_DOWN", "Down", ""],
    [1, A.ArrowUp, "ArrowUp", C.UpArrow, "UpArrow", 38, "VK_UP", "Up", ""],
    [1, A.NumLock, "NumLock", C.NumLock, "NumLock", 144, "VK_NUMLOCK", "", ""],
    [1, A.NumpadDivide, "NumpadDivide", C.NumpadDivide, "NumPad_Divide", 111, "VK_DIVIDE", "", ""],
    [1, A.NumpadMultiply, "NumpadMultiply", C.NumpadMultiply, "NumPad_Multiply", 106, "VK_MULTIPLY", "", ""],
    [1, A.NumpadSubtract, "NumpadSubtract", C.NumpadSubtract, "NumPad_Subtract", 109, "VK_SUBTRACT", "", ""],
    [1, A.NumpadAdd, "NumpadAdd", C.NumpadAdd, "NumPad_Add", 107, "VK_ADD", "", ""],
    [1, A.NumpadEnter, "NumpadEnter", C.Enter, "", 0, "", "", ""],
    [1, A.Numpad1, "Numpad1", C.Numpad1, "NumPad1", 97, "VK_NUMPAD1", "", ""],
    [1, A.Numpad2, "Numpad2", C.Numpad2, "NumPad2", 98, "VK_NUMPAD2", "", ""],
    [1, A.Numpad3, "Numpad3", C.Numpad3, "NumPad3", 99, "VK_NUMPAD3", "", ""],
    [1, A.Numpad4, "Numpad4", C.Numpad4, "NumPad4", 100, "VK_NUMPAD4", "", ""],
    [1, A.Numpad5, "Numpad5", C.Numpad5, "NumPad5", 101, "VK_NUMPAD5", "", ""],
    [1, A.Numpad6, "Numpad6", C.Numpad6, "NumPad6", 102, "VK_NUMPAD6", "", ""],
    [1, A.Numpad7, "Numpad7", C.Numpad7, "NumPad7", 103, "VK_NUMPAD7", "", ""],
    [1, A.Numpad8, "Numpad8", C.Numpad8, "NumPad8", 104, "VK_NUMPAD8", "", ""],
    [1, A.Numpad9, "Numpad9", C.Numpad9, "NumPad9", 105, "VK_NUMPAD9", "", ""],
    [1, A.Numpad0, "Numpad0", C.Numpad0, "NumPad0", 96, "VK_NUMPAD0", "", ""],
    [1, A.NumpadDecimal, "NumpadDecimal", C.NumpadDecimal, "NumPad_Decimal", 110, "VK_DECIMAL", "", ""],
    [0, A.IntlBackslash, "IntlBackslash", C.IntlBackslash, "OEM_102", 226, "VK_OEM_102", "", ""],
    [1, A.ContextMenu, "ContextMenu", C.ContextMenu, "ContextMenu", 93, "", "", ""],
    [1, A.Power, "Power", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadEqual, "NumpadEqual", C.Unknown, "", 0, "", "", ""],
    [1, A.F13, "F13", C.F13, "F13", 124, "VK_F13", "", ""],
    [1, A.F14, "F14", C.F14, "F14", 125, "VK_F14", "", ""],
    [1, A.F15, "F15", C.F15, "F15", 126, "VK_F15", "", ""],
    [1, A.F16, "F16", C.F16, "F16", 127, "VK_F16", "", ""],
    [1, A.F17, "F17", C.F17, "F17", 128, "VK_F17", "", ""],
    [1, A.F18, "F18", C.F18, "F18", 129, "VK_F18", "", ""],
    [1, A.F19, "F19", C.F19, "F19", 130, "VK_F19", "", ""],
    [1, A.F20, "F20", C.F20, "F20", 131, "VK_F20", "", ""],
    [1, A.F21, "F21", C.F21, "F21", 132, "VK_F21", "", ""],
    [1, A.F22, "F22", C.F22, "F22", 133, "VK_F22", "", ""],
    [1, A.F23, "F23", C.F23, "F23", 134, "VK_F23", "", ""],
    [1, A.F24, "F24", C.F24, "F24", 135, "VK_F24", "", ""],
    [1, A.Open, "Open", C.Unknown, "", 0, "", "", ""],
    [1, A.Help, "Help", C.Unknown, "", 0, "", "", ""],
    [1, A.Select, "Select", C.Unknown, "", 0, "", "", ""],
    [1, A.Again, "Again", C.Unknown, "", 0, "", "", ""],
    [1, A.Undo, "Undo", C.Unknown, "", 0, "", "", ""],
    [1, A.Cut, "Cut", C.Unknown, "", 0, "", "", ""],
    [1, A.Copy, "Copy", C.Unknown, "", 0, "", "", ""],
    [1, A.Paste, "Paste", C.Unknown, "", 0, "", "", ""],
    [1, A.Find, "Find", C.Unknown, "", 0, "", "", ""],
    [1, A.AudioVolumeMute, "AudioVolumeMute", C.AudioVolumeMute, "AudioVolumeMute", 173, "VK_VOLUME_MUTE", "", ""],
    [1, A.AudioVolumeUp, "AudioVolumeUp", C.AudioVolumeUp, "AudioVolumeUp", 175, "VK_VOLUME_UP", "", ""],
    [1, A.AudioVolumeDown, "AudioVolumeDown", C.AudioVolumeDown, "AudioVolumeDown", 174, "VK_VOLUME_DOWN", "", ""],
    [1, A.NumpadComma, "NumpadComma", C.NUMPAD_SEPARATOR, "NumPad_Separator", 108, "VK_SEPARATOR", "", ""],
    [0, A.IntlRo, "IntlRo", C.ABNT_C1, "ABNT_C1", 193, "VK_ABNT_C1", "", ""],
    [1, A.KanaMode, "KanaMode", C.Unknown, "", 0, "", "", ""],
    [0, A.IntlYen, "IntlYen", C.Unknown, "", 0, "", "", ""],
    [1, A.Convert, "Convert", C.Unknown, "", 0, "", "", ""],
    [1, A.NonConvert, "NonConvert", C.Unknown, "", 0, "", "", ""],
    [1, A.Lang1, "Lang1", C.Unknown, "", 0, "", "", ""],
    [1, A.Lang2, "Lang2", C.Unknown, "", 0, "", "", ""],
    [1, A.Lang3, "Lang3", C.Unknown, "", 0, "", "", ""],
    [1, A.Lang4, "Lang4", C.Unknown, "", 0, "", "", ""],
    [1, A.Lang5, "Lang5", C.Unknown, "", 0, "", "", ""],
    [1, A.Abort, "Abort", C.Unknown, "", 0, "", "", ""],
    [1, A.Props, "Props", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadParenLeft, "NumpadParenLeft", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadParenRight, "NumpadParenRight", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadBackspace, "NumpadBackspace", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadMemoryStore, "NumpadMemoryStore", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadMemoryRecall, "NumpadMemoryRecall", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadMemoryClear, "NumpadMemoryClear", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadMemoryAdd, "NumpadMemoryAdd", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadMemorySubtract, "NumpadMemorySubtract", C.Unknown, "", 0, "", "", ""],
    [1, A.NumpadClear, "NumpadClear", C.Clear, "Clear", 12, "VK_CLEAR", "", ""],
    [1, A.NumpadClearEntry, "NumpadClearEntry", C.Unknown, "", 0, "", "", ""],
    [1, A.None, "", C.Ctrl, "Ctrl", 17, "VK_CONTROL", "", ""],
    [1, A.None, "", C.Shift, "Shift", 16, "VK_SHIFT", "", ""],
    [1, A.None, "", C.Alt, "Alt", 18, "VK_MENU", "", ""],
    [1, A.None, "", C.Meta, "Meta", 91, "VK_COMMAND", "", ""],
    [1, A.ControlLeft, "ControlLeft", C.Ctrl, "", 0, "VK_LCONTROL", "", ""],
    [1, A.ShiftLeft, "ShiftLeft", C.Shift, "", 0, "VK_LSHIFT", "", ""],
    [1, A.AltLeft, "AltLeft", C.Alt, "", 0, "VK_LMENU", "", ""],
    [1, A.MetaLeft, "MetaLeft", C.Meta, "", 0, "VK_LWIN", "", ""],
    [1, A.ControlRight, "ControlRight", C.Ctrl, "", 0, "VK_RCONTROL", "", ""],
    [1, A.ShiftRight, "ShiftRight", C.Shift, "", 0, "VK_RSHIFT", "", ""],
    [1, A.AltRight, "AltRight", C.Alt, "", 0, "VK_RMENU", "", ""],
    [1, A.MetaRight, "MetaRight", C.Meta, "", 0, "VK_RWIN", "", ""],
    [1, A.BrightnessUp, "BrightnessUp", C.Unknown, "", 0, "", "", ""],
    [1, A.BrightnessDown, "BrightnessDown", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaPlay, "MediaPlay", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaRecord, "MediaRecord", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaFastForward, "MediaFastForward", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaRewind, "MediaRewind", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaTrackNext, "MediaTrackNext", C.MediaTrackNext, "MediaTrackNext", 176, "VK_MEDIA_NEXT_TRACK", "", ""],
    [1, A.MediaTrackPrevious, "MediaTrackPrevious", C.MediaTrackPrevious, "MediaTrackPrevious", 177, "VK_MEDIA_PREV_TRACK", "", ""],
    [1, A.MediaStop, "MediaStop", C.MediaStop, "MediaStop", 178, "VK_MEDIA_STOP", "", ""],
    [1, A.Eject, "Eject", C.Unknown, "", 0, "", "", ""],
    [1, A.MediaPlayPause, "MediaPlayPause", C.MediaPlayPause, "MediaPlayPause", 179, "VK_MEDIA_PLAY_PAUSE", "", ""],
    [1, A.MediaSelect, "MediaSelect", C.LaunchMediaPlayer, "LaunchMediaPlayer", 181, "VK_MEDIA_LAUNCH_MEDIA_SELECT", "", ""],
    [1, A.LaunchMail, "LaunchMail", C.LaunchMail, "LaunchMail", 180, "VK_MEDIA_LAUNCH_MAIL", "", ""],
    [1, A.LaunchApp2, "LaunchApp2", C.LaunchApp2, "LaunchApp2", 183, "VK_MEDIA_LAUNCH_APP2", "", ""],
    [1, A.LaunchApp1, "LaunchApp1", C.Unknown, "", 0, "VK_MEDIA_LAUNCH_APP1", "", ""],
    [1, A.SelectTask, "SelectTask", C.Unknown, "", 0, "", "", ""],
    [1, A.LaunchScreenSaver, "LaunchScreenSaver", C.Unknown, "", 0, "", "", ""],
    [1, A.BrowserSearch, "BrowserSearch", C.BrowserSearch, "BrowserSearch", 170, "VK_BROWSER_SEARCH", "", ""],
    [1, A.BrowserHome, "BrowserHome", C.BrowserHome, "BrowserHome", 172, "VK_BROWSER_HOME", "", ""],
    [1, A.BrowserBack, "BrowserBack", C.BrowserBack, "BrowserBack", 166, "VK_BROWSER_BACK", "", ""],
    [1, A.BrowserForward, "BrowserForward", C.BrowserForward, "BrowserForward", 167, "VK_BROWSER_FORWARD", "", ""],
    [1, A.BrowserStop, "BrowserStop", C.Unknown, "", 0, "VK_BROWSER_STOP", "", ""],
    [1, A.BrowserRefresh, "BrowserRefresh", C.Unknown, "", 0, "VK_BROWSER_REFRESH", "", ""],
    [1, A.BrowserFavorites, "BrowserFavorites", C.Unknown, "", 0, "VK_BROWSER_FAVORITES", "", ""],
    [1, A.ZoomToggle, "ZoomToggle", C.Unknown, "", 0, "", "", ""],
    [1, A.MailReply, "MailReply", C.Unknown, "", 0, "", "", ""],
    [1, A.MailForward, "MailForward", C.Unknown, "", 0, "", "", ""],
    [1, A.MailSend, "MailSend", C.Unknown, "", 0, "", "", ""],
    [1, A.None, "", C.KEY_IN_COMPOSITION, "KeyInComposition", 229, "", "", ""],
    [1, A.None, "", C.ABNT_C2, "ABNT_C2", 194, "VK_ABNT_C2", "", ""],
    [1, A.None, "", C.OEM_8, "OEM_8", 223, "VK_OEM_8", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_KANA", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_HANGUL", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_JUNJA", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_FINAL", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_HANJA", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_KANJI", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_CONVERT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_NONCONVERT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_ACCEPT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_MODECHANGE", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_SELECT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_PRINT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_EXECUTE", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_SNAPSHOT", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_HELP", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_APPS", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_PROCESSKEY", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_PACKET", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_DBE_SBCSCHAR", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_DBE_DBCSCHAR", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_ATTN", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_CRSEL", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_EXSEL", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_EREOF", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_PLAY", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_ZOOM", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_NONAME", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_PA1", "", ""],
    [1, A.None, "", C.Unknown, "", 0, "VK_OEM_CLEAR", "", ""]
  ], t = [], n = [];
  for (const r of e) {
    const [s, o, a, l, c, u, d, f, p] = r;
    if (n[o] || (n[o] = !0, $$[a] = o, H$[a.toLowerCase()] = o, s && l !== C.Unknown && l !== C.Enter && l !== C.Ctrl && l !== C.Shift && l !== C.Alt && l !== C.Meta && (eE[l] = o)), !t[l]) {
      if (t[l] = !0, !c)
        throw new Error(
          `String representation missing for key code ${l} around scan code ${a}`
        );
      Ng.define(l, c), Xx.define(l, f || c), Zx.define(l, p || f || c);
    }
    u && (U$[u] = l);
  }
  eE[C.Enter] = A.Enter;
})();
var F4;
(function(i) {
  function e(a) {
    return Ng.keyCodeToStr(a);
  }
  i.toString = e;
  function t(a) {
    return Ng.strToKeyCode(a);
  }
  i.fromString = t;
  function n(a) {
    return Xx.keyCodeToStr(a);
  }
  i.toUserSettingsUS = n;
  function r(a) {
    return Zx.keyCodeToStr(a);
  }
  i.toUserSettingsGeneral = r;
  function s(a) {
    return Xx.strToKeyCode(a) || Zx.strToKeyCode(a);
  }
  i.fromUserSettings = s;
  function o(a) {
    if (a >= C.Numpad0 && a <= C.NumpadDivide)
      return null;
    switch (a) {
      case C.UpArrow:
        return "Up";
      case C.DownArrow:
        return "Down";
      case C.LeftArrow:
        return "Left";
      case C.RightArrow:
        return "Right";
    }
    return Ng.keyCodeToStr(a);
  }
  i.toElectronAccelerator = o;
})(F4 || (F4 = {}));
var U4;
(function(i) {
  i[i.CtrlCmd = 2048] = "CtrlCmd", i[i.Shift = 1024] = "Shift", i[i.Alt = 512] = "Alt", i[i.WinCtrl = 256] = "WinCtrl";
})(U4 || (U4 = {}));
var ya;
(function(i) {
  i[i.CtrlCmd = 2048] = "CtrlCmd", i[i.Shift = 1024] = "Shift", i[i.Alt = 512] = "Alt", i[i.WinCtrl = 256] = "WinCtrl", i[i.KeyCode = 255] = "KeyCode";
})(ya || (ya = {}));
function $4(i, e) {
  if (typeof i == "number") {
    if (i === 0)
      return null;
    const t = (i & 65535) >>> 0, n = (i & 4294901760) >>> 16;
    return n !== 0 ? new Mg([
      sg(t, e),
      sg(n, e)
    ]) : new Mg([sg(t, e)]);
  } else {
    const t = [];
    for (let n = 0; n < i.length; n++)
      t.push(sg(i[n], e));
    return new Mg(t);
  }
}
function sg(i, e) {
  const t = !!(i & ya.CtrlCmd), n = !!(i & ya.WinCtrl), r = e === is.Macintosh ? n : t, s = !!(i & ya.Shift), o = !!(i & ya.Alt), a = e === is.Macintosh ? t : n, l = i & ya.KeyCode;
  return new zS(r, s, o, a, l);
}
class zS {
  constructor(e, t, n, r, s) {
    this.ctrlKey = e, this.shiftKey = t, this.altKey = n, this.metaKey = r, this.keyCode = s;
  }
  equals(e) {
    return e instanceof zS && this.ctrlKey === e.ctrlKey && this.shiftKey === e.shiftKey && this.altKey === e.altKey && this.metaKey === e.metaKey && this.keyCode === e.keyCode;
  }
  getHashCode() {
    const e = this.ctrlKey ? "1" : "0", t = this.shiftKey ? "1" : "0", n = this.altKey ? "1" : "0", r = this.metaKey ? "1" : "0";
    return `K${e}${t}${n}${r}${this.keyCode}`;
  }
  isModifierKey() {
    return this.keyCode === C.Unknown || this.keyCode === C.Ctrl || this.keyCode === C.Meta || this.keyCode === C.Alt || this.keyCode === C.Shift;
  }
  toKeybinding() {
    return new Mg([this]);
  }
  isDuplicateModifierCase() {
    return this.ctrlKey && this.keyCode === C.Ctrl || this.shiftKey && this.keyCode === C.Shift || this.altKey && this.keyCode === C.Alt || this.metaKey && this.keyCode === C.Meta;
  }
}
class Mg {
  constructor(e) {
    if (e.length === 0)
      throw Ge("chords");
    this.chords = e;
  }
  getHashCode() {
    let e = "";
    for (let t = 0, n = this.chords.length; t < n; t++)
      t !== 0 && (e += ";"), e += this.chords[t].getHashCode();
    return e;
  }
  equals(e) {
    if (e === null || this.chords.length !== e.chords.length)
      return !1;
    for (let t = 0; t < this.chords.length; t++)
      if (!this.chords[t].equals(e.chords[t]))
        return !1;
    return !0;
  }
}
var H4;
(function(i) {
  i[i.EditorCore = 0] = "EditorCore", i[i.EditorContrib = 100] = "EditorContrib", i[i.WorkbenchContrib = 200] = "WorkbenchContrib", i[i.BuiltinExtension = 300] = "BuiltinExtension", i[i.ExternalExtension = 400] = "ExternalExtension";
})(H4 || (H4 = {}));
class qS {
  constructor() {
    this._coreKeybindings = new ea(), this._extensionKeybindings = [], this._cachedMergedKeybindings = null;
  }
  static bindToCurrentPlatform(e) {
    if (Vp === is.Windows) {
      if (e && e.win)
        return e.win;
    } else if (Vp === is.Macintosh) {
      if (e && e.mac)
        return e.mac;
    } else if (e && e.linux)
      return e.linux;
    return e;
  }
  registerKeybindingRule(e) {
    const t = qS.bindToCurrentPlatform(e), n = new Te();
    if (t && t.primary) {
      const r = $4(t.primary, Vp);
      r && n.add(this._registerDefaultKeybinding(r, e.id, e.args, e.weight, 0, e.when));
    }
    if (t && Array.isArray(t.secondary))
      for (let r = 0, s = t.secondary.length; r < s; r++) {
        const o = t.secondary[r], a = $4(o, Vp);
        a && n.add(this._registerDefaultKeybinding(a, e.id, e.args, e.weight, -r - 1, e.when));
      }
    return n;
  }
  setExtensionKeybindings(e) {
    const t = [];
    let n = 0;
    for (const r of e)
      r.keybinding && (t[n++] = {
        keybinding: r.keybinding,
        command: r.id,
        commandArgs: r.args,
        when: r.when,
        weight1: r.weight,
        weight2: 0,
        extensionId: r.extensionId || null,
        isBuiltinExtension: r.isBuiltinExtension || !1
      });
    this._extensionKeybindings = t, this._cachedMergedKeybindings = null;
  }
  registerCommandAndKeybindingRule(e) {
    return LE(this.registerKeybindingRule(e), WS.registerCommand(e));
  }
  _registerDefaultKeybinding(e, t, n, r, s, o) {
    const a = this._coreKeybindings.push({
      keybinding: e,
      command: t,
      commandArgs: n,
      when: o,
      weight1: r,
      weight2: s,
      extensionId: null,
      isBuiltinExtension: !1
    });
    return this._cachedMergedKeybindings = null, Ie(() => {
      a(), this._cachedMergedKeybindings = null;
    });
  }
  getDefaultKeybindings() {
    return this._cachedMergedKeybindings || (this._cachedMergedKeybindings = Array.from(this._coreKeybindings).concat(this._extensionKeybindings), this._cachedMergedKeybindings.sort(V$)), this._cachedMergedKeybindings.slice(0);
  }
}
const B$ = new qS(), W$ = {
  EditorModes: "platform.keybindingsRegistry"
};
ui.add(W$.EditorModes, B$);
function V$(i, e) {
  if (i.weight1 !== e.weight1)
    return i.weight1 - e.weight1;
  if (i.command && e.command) {
    if (i.command < e.command)
      return -1;
    if (i.command > e.command)
      return 1;
  }
  return i.weight2 - e.weight2;
}
var Og;
function z$(i) {
  return i.command !== void 0;
}
const y = class y {
  static for(e) {
    return y._instances.get(e) ?? new y(e);
  }
  constructor(e) {
    if (y._instances.has(e))
      throw new TypeError(
        `MenuId with identifier '${e}' already exists. Use MenuId.for(ident) or a unique identifier`
      );
    y._instances.set(e, this), this.id = e;
  }
};
y._instances = /* @__PURE__ */ new Map(), y.CommandPalette = new y("CommandPalette"), y.DebugBreakpointsContext = new y("DebugBreakpointsContext"), y.DebugCallStackContext = new y("DebugCallStackContext"), y.DebugConsoleContext = new y("DebugConsoleContext"), y.DebugVariablesContext = new y("DebugVariablesContext"), y.NotebookVariablesContext = new y("NotebookVariablesContext"), y.DebugHoverContext = new y("DebugHoverContext"), y.DebugWatchContext = new y("DebugWatchContext"), y.DebugToolBar = new y("DebugToolBar"), y.DebugToolBarStop = new y("DebugToolBarStop"), y.DebugDisassemblyContext = new y("DebugDisassemblyContext"), y.DebugCallStackToolbar = new y("DebugCallStackToolbar"), y.DebugCreateConfiguration = new y("DebugCreateConfiguration"), y.EditorContext = new y("EditorContext"), y.SimpleEditorContext = new y("SimpleEditorContext"), y.EditorContent = new y("EditorContent"), y.EditorLineNumberContext = new y("EditorLineNumberContext"), y.EditorContextCopy = new y("EditorContextCopy"), y.EditorContextPeek = new y("EditorContextPeek"), y.EditorContextShare = new y("EditorContextShare"), y.EditorTitle = new y("EditorTitle"), y.CompactWindowEditorTitle = new y("CompactWindowEditorTitle"), y.EditorTitleRun = new y("EditorTitleRun"), y.EditorTitleContext = new y("EditorTitleContext"), y.EditorTitleContextShare = new y("EditorTitleContextShare"), y.EmptyEditorGroup = new y("EmptyEditorGroup"), y.EmptyEditorGroupContext = new y("EmptyEditorGroupContext"), y.EditorTabsBarContext = new y("EditorTabsBarContext"), y.EditorTabsBarShowTabsSubmenu = new y("EditorTabsBarShowTabsSubmenu"), y.EditorTabsBarShowTabsZenModeSubmenu = new y("EditorTabsBarShowTabsZenModeSubmenu"), y.EditorActionsPositionSubmenu = new y("EditorActionsPositionSubmenu"), y.EditorSplitMoveSubmenu = new y("EditorSplitMoveSubmenu"), y.ExplorerContext = new y("ExplorerContext"), y.ExplorerContextShare = new y("ExplorerContextShare"), y.ExtensionContext = new y("ExtensionContext"), y.ExtensionEditorContextMenu = new y("ExtensionEditorContextMenu"), y.GlobalActivity = new y("GlobalActivity"), y.CommandCenter = new y("CommandCenter"), y.CommandCenterCenter = new y("CommandCenterCenter"), y.LayoutControlMenuSubmenu = new y("LayoutControlMenuSubmenu"), y.LayoutControlMenu = new y("LayoutControlMenu"), y.MenubarMainMenu = new y("MenubarMainMenu"), y.MenubarAppearanceMenu = new y("MenubarAppearanceMenu"), y.MenubarDebugMenu = new y("MenubarDebugMenu"), y.MenubarEditMenu = new y("MenubarEditMenu"), y.MenubarCopy = new y("MenubarCopy"), y.MenubarFileMenu = new y("MenubarFileMenu"), y.MenubarGoMenu = new y("MenubarGoMenu"), y.MenubarHelpMenu = new y("MenubarHelpMenu"), y.MenubarLayoutMenu = new y("MenubarLayoutMenu"), y.MenubarNewBreakpointMenu = new y("MenubarNewBreakpointMenu"), y.PanelAlignmentMenu = new y("PanelAlignmentMenu"), y.PanelPositionMenu = new y("PanelPositionMenu"), y.ActivityBarPositionMenu = new y("ActivityBarPositionMenu"), y.MenubarPreferencesMenu = new y("MenubarPreferencesMenu"), y.MenubarRecentMenu = new y("MenubarRecentMenu"), y.MenubarSelectionMenu = new y("MenubarSelectionMenu"), y.MenubarShare = new y("MenubarShare"), y.MenubarSwitchEditorMenu = new y("MenubarSwitchEditorMenu"), y.MenubarSwitchGroupMenu = new y("MenubarSwitchGroupMenu"), y.MenubarTerminalMenu = new y("MenubarTerminalMenu"), y.MenubarTerminalSuggestStatusMenu = new y("MenubarTerminalSuggestStatusMenu"), y.MenubarViewMenu = new y("MenubarViewMenu"), y.MenubarHomeMenu = new y("MenubarHomeMenu"), y.OpenEditorsContext = new y("OpenEditorsContext"), y.OpenEditorsContextShare = new y("OpenEditorsContextShare"), y.ProblemsPanelContext = new y("ProblemsPanelContext"), y.SCMInputBox = new y("SCMInputBox"), y.SCMChangeContext = new y("SCMChangeContext"), y.SCMResourceContext = new y("SCMResourceContext"), y.SCMResourceContextShare = new y("SCMResourceContextShare"), y.SCMResourceFolderContext = new y("SCMResourceFolderContext"), y.SCMResourceGroupContext = new y("SCMResourceGroupContext"), y.SCMSourceControl = new y("SCMSourceControl"), y.SCMSourceControlInline = new y("SCMSourceControlInline"), y.SCMSourceControlTitle = new y("SCMSourceControlTitle"), y.SCMHistoryTitle = new y("SCMHistoryTitle"), y.SCMHistoryItemContext = new y("SCMHistoryItemContext"), y.SCMHistoryItemChangeContext = new y("SCMHistoryItemChangeContext"), y.SCMHistoryItemHover = new y("SCMHistoryItemHover"), y.SCMHistoryItemRefContext = new y("SCMHistoryItemRefContext"), y.SCMQuickDiffDecorations = new y("SCMQuickDiffDecorations"), y.SCMTitle = new y("SCMTitle"), y.SearchContext = new y("SearchContext"), y.SearchActionMenu = new y("SearchActionContext"), y.StatusBarWindowIndicatorMenu = new y("StatusBarWindowIndicatorMenu"), y.StatusBarRemoteIndicatorMenu = new y("StatusBarRemoteIndicatorMenu"), y.StickyScrollContext = new y("StickyScrollContext"), y.TestItem = new y("TestItem"), y.TestItemGutter = new y("TestItemGutter"), y.TestProfilesContext = new y("TestProfilesContext"), y.TestMessageContext = new y("TestMessageContext"), y.TestMessageContent = new y("TestMessageContent"), y.TestPeekElement = new y("TestPeekElement"), y.TestPeekTitle = new y("TestPeekTitle"), y.TestCallStack = new y("TestCallStack"), y.TestCoverageFilterItem = new y("TestCoverageFilterItem"), y.TouchBarContext = new y("TouchBarContext"), y.TitleBar = new y("TitleBar"), y.TitleBarContext = new y("TitleBarContext"), y.TitleBarTitleContext = new y("TitleBarTitleContext"), y.TunnelContext = new y("TunnelContext"), y.TunnelPrivacy = new y("TunnelPrivacy"), y.TunnelProtocol = new y("TunnelProtocol"), y.TunnelPortInline = new y("TunnelInline"), y.TunnelTitle = new y("TunnelTitle"), y.TunnelLocalAddressInline = new y("TunnelLocalAddressInline"), y.TunnelOriginInline = new y("TunnelOriginInline"), y.ViewItemContext = new y("ViewItemContext"), y.ViewContainerTitle = new y("ViewContainerTitle"), y.ViewContainerTitleContext = new y("ViewContainerTitleContext"), y.ViewTitle = new y("ViewTitle"), y.ViewTitleContext = new y("ViewTitleContext"), y.CommentEditorActions = new y("CommentEditorActions"), y.CommentThreadTitle = new y("CommentThreadTitle"), y.CommentThreadActions = new y("CommentThreadActions"), y.CommentThreadAdditionalActions = new y("CommentThreadAdditionalActions"), y.CommentThreadTitleContext = new y("CommentThreadTitleContext"), y.CommentThreadCommentContext = new y("CommentThreadCommentContext"), y.CommentTitle = new y("CommentTitle"), y.CommentActions = new y("CommentActions"), y.CommentsViewThreadActions = new y("CommentsViewThreadActions"), y.InteractiveToolbar = new y("InteractiveToolbar"), y.InteractiveCellTitle = new y("InteractiveCellTitle"), y.InteractiveCellDelete = new y("InteractiveCellDelete"), y.InteractiveCellExecute = new y("InteractiveCellExecute"), y.InteractiveInputExecute = new y("InteractiveInputExecute"), y.InteractiveInputConfig = new y("InteractiveInputConfig"), y.ReplInputExecute = new y("ReplInputExecute"), y.IssueReporter = new y("IssueReporter"), y.NotebookToolbar = new y("NotebookToolbar"), y.NotebookToolbarContext = new y("NotebookToolbarContext"), y.NotebookStickyScrollContext = new y("NotebookStickyScrollContext"), y.NotebookCellTitle = new y("NotebookCellTitle"), y.NotebookCellDelete = new y("NotebookCellDelete"), y.NotebookCellInsert = new y("NotebookCellInsert"), y.NotebookCellBetween = new y("NotebookCellBetween"), y.NotebookCellListTop = new y("NotebookCellTop"), y.NotebookCellExecute = new y("NotebookCellExecute"), y.NotebookCellExecuteGoTo = new y("NotebookCellExecuteGoTo"), y.NotebookCellExecutePrimary = new y("NotebookCellExecutePrimary"), y.NotebookDiffCellInputTitle = new y("NotebookDiffCellInputTitle"), y.NotebookDiffDocumentMetadata = new y("NotebookDiffDocumentMetadata"), y.NotebookDiffCellMetadataTitle = new y("NotebookDiffCellMetadataTitle"), y.NotebookDiffCellOutputsTitle = new y("NotebookDiffCellOutputsTitle"), y.NotebookOutputToolbar = new y("NotebookOutputToolbar"), y.NotebookOutlineFilter = new y("NotebookOutlineFilter"), y.NotebookOutlineActionMenu = new y("NotebookOutlineActionMenu"), y.NotebookEditorLayoutConfigure = new y("NotebookEditorLayoutConfigure"), y.NotebookKernelSource = new y("NotebookKernelSource"), y.BulkEditTitle = new y("BulkEditTitle"), y.BulkEditContext = new y("BulkEditContext"), y.TimelineItemContext = new y("TimelineItemContext"), y.TimelineTitle = new y("TimelineTitle"), y.TimelineTitleContext = new y("TimelineTitleContext"), y.TimelineFilterSubMenu = new y("TimelineFilterSubMenu"), y.AccountsContext = new y("AccountsContext"), y.SidebarTitle = new y("SidebarTitle"), y.PanelTitle = new y("PanelTitle"), y.AuxiliaryBarTitle = new y("AuxiliaryBarTitle"), y.TerminalInstanceContext = new y("TerminalInstanceContext"), y.TerminalEditorInstanceContext = new y("TerminalEditorInstanceContext"), y.TerminalNewDropdownContext = new y("TerminalNewDropdownContext"), y.TerminalTabContext = new y("TerminalTabContext"), y.TerminalTabEmptyAreaContext = new y("TerminalTabEmptyAreaContext"), y.TerminalStickyScrollContext = new y("TerminalStickyScrollContext"), y.WebviewContext = new y("WebviewContext"), y.InlineCompletionsActions = new y("InlineCompletionsActions"), y.InlineEditsActions = new y("InlineEditsActions"), y.NewFile = new y("NewFile"), y.MergeInput1Toolbar = new y("MergeToolbar1Toolbar"), y.MergeInput2Toolbar = new y("MergeToolbar2Toolbar"), y.MergeBaseToolbar = new y("MergeBaseToolbar"), y.MergeInputResultToolbar = new y("MergeToolbarResultToolbar"), y.InlineSuggestionToolbar = new y("InlineSuggestionToolbar"), y.InlineEditToolbar = new y("InlineEditToolbar"), y.ChatContext = new y("ChatContext"), y.ChatCodeBlock = new y("ChatCodeblock"), y.ChatCompareBlock = new y("ChatCompareBlock"), y.ChatMessageTitle = new y("ChatMessageTitle"), y.ChatMessageFooter = new y("ChatMessageFooter"), y.ChatExecute = new y("ChatExecute"), y.ChatExecuteSecondary = new y("ChatExecuteSecondary"), y.ChatInput = new y("ChatInput"), y.ChatInputSide = new y("ChatInputSide"), y.ChatModePicker = new y("ChatModePicker"), y.ChatEditingWidgetToolbar = new y("ChatEditingWidgetToolbar"), y.ChatEditingEditorContent = new y("ChatEditingEditorContent"), y.ChatEditingEditorHunk = new y("ChatEditingEditorHunk"), y.ChatEditingDeletedNotebookCell = new y("ChatEditingDeletedNotebookCell"), y.ChatInputAttachmentToolbar = new y("ChatInputAttachmentToolbar"), y.ChatEditingWidgetModifiedFilesToolbar = new y("ChatEditingWidgetModifiedFilesToolbar"), y.ChatInputResourceAttachmentContext = new y("ChatInputResourceAttachmentContext"), y.ChatInputSymbolAttachmentContext = new y("ChatInputSymbolAttachmentContext"), y.ChatInlineResourceAnchorContext = new y("ChatInlineResourceAnchorContext"), y.ChatInlineSymbolAnchorContext = new y("ChatInlineSymbolAnchorContext"), y.ChatMessageCheckpoint = new y("ChatMessageCheckpoint"), y.ChatMessageRestoreCheckpoint = new y("ChatMessageRestoreCheckpoint"), y.ChatEditingCodeBlockContext = new y("ChatEditingCodeBlockContext"), y.ChatTitleBarMenu = new y("ChatTitleBarMenu"), y.ChatAttachmentsContext = new y("ChatAttachmentsContext"), y.ChatToolOutputResourceToolbar = new y("ChatToolOutputResourceToolbar"), y.ChatTextEditorMenu = new y("ChatTextEditorMenu"), y.ChatTerminalMenu = new y("ChatTerminalMenu"), y.ChatToolOutputResourceContext = new y("ChatToolOutputResourceContext"), y.ChatSessionsMenu = new y("ChatSessionsMenu"), y.AccessibleView = new y("AccessibleView"), y.MultiDiffEditorFileToolbar = new y("MultiDiffEditorFileToolbar"), y.DiffEditorHunkToolbar = new y("DiffEditorHunkToolbar"), y.DiffEditorSelectionToolbar = new y("DiffEditorSelectionToolbar");
let El = y;
const Uh = class Uh {
  static for(e) {
    let t = this._all.get(e);
    return t || (t = new Uh(e), this._all.set(e, t)), t;
  }
  static merge(e) {
    const t = /* @__PURE__ */ new Set();
    for (const n of e)
      n instanceof Uh && t.add(n.id);
    return t;
  }
  constructor(e) {
    this.id = e, this.has = (t) => t === e;
  }
};
Uh._all = /* @__PURE__ */ new Map();
let xa = Uh;
new class {
  constructor() {
    this._commands = /* @__PURE__ */ new Map(), this._menuItems = /* @__PURE__ */ new Map(), this._onDidChangeMenu = new i8({
      merge: xa.merge
    }), this.onDidChangeMenu = this._onDidChangeMenu.event;
  }
  addCommand(i) {
    return this._commands.set(i.id, i), this._onDidChangeMenu.fire(xa.for(El.CommandPalette)), Ie(() => {
      this._commands.delete(i.id) && this._onDidChangeMenu.fire(xa.for(El.CommandPalette));
    });
  }
  getCommand(i) {
    return this._commands.get(i);
  }
  getCommands() {
    const i = /* @__PURE__ */ new Map();
    return this._commands.forEach((e, t) => i.set(t, e)), i;
  }
  appendMenuItem(i, e) {
    let t = this._menuItems.get(i);
    t || (t = new ea(), this._menuItems.set(i, t));
    const n = t.push(e);
    return this._onDidChangeMenu.fire(xa.for(i)), Ie(() => {
      n(), this._onDidChangeMenu.fire(xa.for(i));
    });
  }
  appendMenuItems(i) {
    const e = new Te();
    for (const { id: t, item: n } of i)
      e.add(this.appendMenuItem(t, n));
    return e;
  }
  getMenuItems(i) {
    let e;
    return this._menuItems.has(i) ? e = [...this._menuItems.get(i)] : e = [], i === El.CommandPalette && this._appendImplicitItems(e), e;
  }
  _appendImplicitItems(i) {
    const e = /* @__PURE__ */ new Set();
    for (const t of i)
      z$(t) && (e.add(t.command.id), t.alt && e.add(t.alt.id));
    this._commands.forEach((t, n) => {
      e.has(n) || i.push({ command: t });
    });
  }
}();
let B4 = Og = class {
  static label(e, t) {
    return t != null && t.renderShortTitle && e.shortTitle ? typeof e.shortTitle == "string" ? e.shortTitle : e.shortTitle.value : typeof e.title == "string" ? e.title : e.title.value;
  }
  constructor(e, t, n, r, s, o, a) {
    var c;
    this.hideActions = r, this.menuKeybinding = s, this._commandService = a, this.id = e.id, this.label = Og.label(e, n), this.tooltip = (typeof e.tooltip == "string" ? e.tooltip : (c = e.tooltip) == null ? void 0 : c.value) ?? "", this.enabled = !e.precondition || o.contextMatchesRules(e.precondition), this.checked = void 0;
    let l;
    if (e.toggled) {
      const u = e.toggled.condition ? e.toggled : { condition: e.toggled };
      this.checked = o.contextMatchesRules(u.condition), this.checked && u.tooltip && (this.tooltip = typeof u.tooltip == "string" ? u.tooltip : u.tooltip.value), this.checked && ci.isThemeIcon(u.icon) && (l = u.icon), this.checked && u.title && (this.label = typeof u.title == "string" ? u.title : u.title.value);
    }
    l || (l = ci.isThemeIcon(e.icon) ? e.icon : void 0), this.item = e, this.alt = t ? new Og(
      t,
      void 0,
      n,
      r,
      void 0,
      o,
      a
    ) : void 0, this._options = n, this.class = l && ci.asClassName(l);
  }
  run(...e) {
    var n, r;
    let t = [];
    return (n = this._options) != null && n.arg && (t = [...t, this._options.arg]), (r = this._options) != null && r.shouldForwardArgs && (t = [...t, ...e]), this._commandService.executeCommand(this.id, ...t);
  }
};
B4 = Og = z([
  O(5, iS),
  O(6, nR)
], B4);
var W4;
(function(i) {
  i.ExtensionQueryService = "ExtensionQueryService", i.ExtensionLatestVersionUri = "ExtensionLatestVersionUriTemplate", i.ExtensionStatisticsUri = "ExtensionStatisticsUriTemplate", i.WebExtensionStatisticsUri = "WebExtensionStatisticsUriTemplate", i.PublisherViewUri = "PublisherViewUriTemplate", i.ExtensionDetailsViewUri = "ExtensionDetailsViewUriTemplate", i.ExtensionRatingViewUri = "ExtensionRatingViewUriTemplate", i.ExtensionResourceUri = "ExtensionResourceUriTemplate", i.ContactSupportUri = "ContactSupportUri";
})(W4 || (W4 = {}));
var V4;
(function(i) {
  i.None = "None", i.IncludeVersions = "IncludeVersions", i.IncludeFiles = "IncludeFiles", i.IncludeCategoryAndTags = "IncludeCategoryAndTags", i.IncludeSharedAccounts = "IncludeSharedAccounts", i.IncludeVersionProperties = "IncludeVersionProperties", i.ExcludeNonValidated = "ExcludeNonValidated", i.IncludeInstallationTargets = "IncludeInstallationTargets", i.IncludeAssetUri = "IncludeAssetUri", i.IncludeStatistics = "IncludeStatistics", i.IncludeLatestVersionOnly = "IncludeLatestVersionOnly", i.Unpublished = "Unpublished", i.IncludeNameConflictInfo = "IncludeNameConflictInfo", i.IncludeLatestPrereleaseAndStableVersionOnly = "IncludeLatestPrereleaseAndStableVersionOnly";
})(V4 || (V4 = {}));
var tE;
(function(i) {
  i.Available = "available", i.RequiresSignIn = "requiresSignIn", i.AccessDenied = "accessDenied", i.Unavailable = "unavailable";
})(tE || (tE = {}));
const rR = me("extensionsWorkbenchService");
X1(7210, "Extensions");
var iE;
(function(i) {
  i[i.Installing = 0] = "Installing", i[i.Installed = 1] = "Installed", i[i.Uninstalling = 2] = "Uninstalling", i[i.Uninstalled = 3] = "Uninstalled";
})(iE || (iE = {}));
var z4;
(function(i) {
  i.ReloadWindow = "reloadWindow", i.RestartExtensions = "restartExtensions", i.DownloadUpdate = "downloadUpdate", i.ApplyUpdate = "applyUpdate", i.QuitAndInstall = "quitAndInstall";
})(z4 || (z4 = {}));
var q4;
(function(i) {
  i.Readme = "readme", i.Features = "features", i.Changelog = "changelog", i.Dependencies = "dependencies", i.ExtensionPack = "extensionPack";
})(q4 || (q4 = {}));
let j4 = class extends xe {
  constructor(e, t) {
    super(), this.containers = e, this._register(t.onChange(this.update, this));
  }
  set extension(e) {
    this.containers.forEach((t) => t.extension = e);
  }
  update(e) {
    for (const t of this.containers)
      e && t.extension ? n6(t.extension.identifier, e.identifier) && (t.extension.server && e.server && t.extension.server !== e.server ? t.updateWhenCounterExtensionChanges && t.update() : t.extension = e) : t.update();
  }
};
j4 = z([
  O(1, rR)
], j4);
new P("defaultExtensionViews", !0);
new P("hasOutdatedExtensions", !1);
new P("hasGallery", !1);
new P("extensionsGalleryStatus", tE.Unavailable);
new P("extensionResultListFocused ", !0);
new P("searchMcpServers", !1);
new El("extensionsSearchActionsMenu");
new El("extensionsFilterSubMenu");
const q$ = "vscode_searchExtensions_internal";
ci.fromId(_e.extensions.id), h(7223, "Search Extensions"), h(
  7224,
  "This is a tool for browsing Visual Studio Code Extensions Marketplace. It allows the model to search for extensions and retrieve detailed information about them. The model should use this tool whenever it needs to discover extensions or resolve information about known ones. To use the tool, the model has to provide the category of the extensions, relevant search keywords, or known extension IDs. Note that search results may include false positives, so reviewing and filtering is recommended."
), h(
  7225,
  "Search for extensions in the Visual Studio Code Extensions Marketplace"
), np.Internal;
let G4 = class {
  constructor(e) {
    this.extensionWorkbenchService = e;
  }
  async invoke(e, t, n, r) {
    var u, d, f, p;
    const s = e.parameters;
    if (!((u = s.keywords) != null && u.length) && !s.category && !((d = s.ids) != null && d.length))
      return {
        content: [{
          kind: "text",
          value: h(7226, "Please provide a category or keywords or ids to search for.")
        }]
      };
    const o = /* @__PURE__ */ new Map(), a = (v) => {
      var _;
      for (const m of v)
        m.deprecationInfo || m.isMalicious || o.set(m.identifier.id.toLowerCase(), {
          id: m.identifier.id,
          name: m.displayName,
          description: m.description,
          installed: m.state === iE.Installed,
          installCount: m.installCount ?? 0,
          rating: m.rating ?? 0,
          categories: m.categories ?? [],
          tags: ((_ = m.gallery) == null ? void 0 : _.tags) ?? []
        });
    }, l = async (v) => {
      const _ = await this.extensionWorkbenchService.queryGallery({
        text: v,
        pageSize: 10,
        sortBy: hb.InstallCount
      }, r);
      _.firstPage.length && a(_.firstPage);
    };
    if ((f = s.ids) != null && f.length) {
      const v = await this.extensionWorkbenchService.getExtensions(s.ids.map((_) => ({ id: _ })), r);
      a(v);
    }
    if ((p = s.keywords) != null && p.length)
      for (const v of s.keywords ?? [])
        if (v === "featured")
          await l("featured");
        else {
          let _ = s.category ? `category:"${s.category}"` : "";
          _ = v ? `${_} ${v}`.trim() : _, await l(_);
        }
    else
      await l(`category:"${s.category}"`);
    const c = Array.from(o.values());
    return {
      content: [{
        kind: "text",
        value: `Here are the list of extensions:
${JSON.stringify(c)}
. Important: Use the following format to display extensions to the user because there is a renderer available to parse these extensions in this format and display them with all details. So, do not describe about the extensions to the user.
\`\`\`vscode-extensions
extensionId1,extensionId2
\`\`\`
.`
      }],
      toolResultDetails: {
        input: JSON.stringify(s),
        output: [{ type: "embed", isText: !0, value: JSON.stringify(c.map((v) => v.id)) }]
      }
    };
  }
};
G4 = z([
  O(0, rR)
], G4);
class Q4 {
  constructor(e) {
    this._apiObject = new Qi(() => {
      const t = this;
      return Object.freeze({
        get name() {
          return t._data.id;
        },
        get description() {
          return t._data.modelDescription;
        },
        get inputSchema() {
          return t._data.inputSchema;
        },
        get tags() {
          return t._data.tags ?? [];
        },
        get source() {
        }
      });
    }), this._apiObjectWithChatParticipantAdditions = new Qi(() => {
      const t = this, n = D0.to(t._data.source);
      return Object.freeze({
        get name() {
          return t._data.id;
        },
        get description() {
          return t._data.modelDescription;
        },
        get inputSchema() {
          return t._data.inputSchema;
        },
        get tags() {
          return t._data.tags ?? [];
        },
        get source() {
          return n;
        }
      });
    }), this._data = e;
  }
  update(e) {
    this._data = e;
  }
  get data() {
    return this._data;
  }
  get apiObject() {
    return this._apiObject.value;
  }
  get apiObjectWithChatParticipantAdditions() {
    return this._apiObjectWithChatParticipantAdditions.value;
  }
}
class j$ {
  constructor(e, t) {
    this._languageModels = t, this._registeredTools = /* @__PURE__ */ new Map(), this._tokenCountFuncs = /* @__PURE__ */ new Map(), this._allTools = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadLanguageModelTools), this._proxy.$getTools().then((n) => {
      for (const r of n)
        this._allTools.set(r.id, new Q4(Wi(r)));
    });
  }
  async $countTokensForInvocation(e, t, n) {
    const r = this._tokenCountFuncs.get(e);
    if (!r)
      throw new Error(`Tool invocation call ${e} not found`);
    return await r(t, n);
  }
  async invokeTool(e, t, n, r) {
    var o;
    const s = dn();
    n.tokenizationOptions && this._tokenCountFuncs.set(s, n.tokenizationOptions.countTokens);
    try {
      if (n.toolInvocationToken && !T$(n.toolInvocationToken))
        throw new Error("Invalid tool invocation token");
      if ((t === Kx || t === L4) && !dt(e, "chatParticipantPrivate"))
        throw new Error(`Invalid tool: ${t}`);
      const a = await this._proxy.$invokeTool({
        toolId: t,
        callId: s,
        parameters: n.input,
        tokenBudget: (o = n.tokenizationOptions) == null ? void 0 : o.tokenBudget,
        context: n.toolInvocationToken,
        chatRequestId: dt(e, "chatParticipantPrivate") ? n.chatRequestId : void 0,
        chatInteractionId: dt(e, "chatParticipantPrivate") ? n.chatInteractionId : void 0
      }, r), l = a instanceof Ki ? a.value : a;
      return Z_.to(Wi(l));
    } finally {
      this._tokenCountFuncs.delete(s);
    }
  }
  $onDidChangeTools(e) {
    const t = new Set(this._registeredTools.keys());
    for (const n of e) {
      t.delete(n.id);
      const r = this._allTools.get(n.id);
      r ? r.update(n) : this._allTools.set(n.id, new Q4(Wi(n)));
    }
    for (const n of t)
      this._allTools.delete(n);
  }
  getTools(e) {
    const t = dt(e, "chatParticipantPrivate");
    return Array.from(this._allTools.values()).map(
      (n) => t ? n.apiObjectWithChatParticipantAdditions : n.apiObject
    ).filter((n) => {
      switch (n.name) {
        case Kx:
        case L4:
        case F$:
        case q$:
          return dt(e, "chatParticipantPrivate");
        default:
          return !0;
      }
    });
  }
  async $invokeTool(e, t) {
    var a;
    const n = this._registeredTools.get(e.toolId);
    if (!n)
      throw new Error(`Unknown tool ${e.toolId}`);
    const r = {
      input: e.parameters,
      toolInvocationToken: e.context
    };
    dt(n.extension, "chatParticipantPrivate") && (r.chatRequestId = e.chatRequestId, r.chatInteractionId = e.chatInteractionId, r.chatSessionId = (a = e.context) == null ? void 0 : a.sessionId), dt(n.extension, "chatParticipantAdditions") && e.modelId && (r.model = await this.getModel(e.modelId, n.extension)), e.tokenBudget !== void 0 && (r.tokenizationOptions = {
      tokenBudget: e.tokenBudget,
      countTokens: this._tokenCountFuncs.get(e.callId) || ((l, c = Dt.None) => this._proxy.$countTokensForInvocation(e.callId, l, c))
    });
    let s;
    dt(n.extension, "toolProgress") && (s = {
      report: (l) => {
        this._proxy.$acceptToolProgress(e.callId, {
          message: Ne.fromStrict(l.message),
          increment: l.increment,
          total: 100
        });
      }
    });
    const o = await mL(Promise.resolve(n.tool.invoke(r, t, s)), t);
    if (!o)
      throw new Yn();
    return Z_.from(o, n.extension);
  }
  async getModel(e, t) {
    let n;
    if (e && (n = await this._languageModels.getLanguageModelByIdentifier(t, e)), !n && (n = await this._languageModels.getDefaultLanguageModel(t), !n))
      throw new Error("Language model unavailable");
    return n;
  }
  async $prepareToolInvocation(e, t, n) {
    const r = this._registeredTools.get(e);
    if (!r)
      throw new Error(`Unknown tool ${e}`);
    const s = {
      input: t.parameters,
      chatRequestId: t.chatRequestId,
      chatSessionId: t.chatSessionId,
      chatInteractionId: t.chatInteractionId
    };
    if (r.tool.prepareInvocation) {
      const o = await r.tool.prepareInvocation(s, n);
      return o ? ((o.pastTenseMessage || o.presentation) && H(r.extension, "chatParticipantPrivate"), {
        confirmationMessages: o.confirmationMessages ? {
          title: typeof o.confirmationMessages.title == "string" ? o.confirmationMessages.title : Ne.from(o.confirmationMessages.title),
          message: typeof o.confirmationMessages.message == "string" ? o.confirmationMessages.message : Ne.from(o.confirmationMessages.message)
        } : void 0,
        invocationMessage: Ne.fromStrict(o.invocationMessage),
        pastTenseMessage: Ne.fromStrict(o.pastTenseMessage),
        presentation: o.presentation
      }) : void 0;
    }
  }
  registerTool(e, t, n) {
    return this._registeredTools.set(t, { extension: e, tool: n }), this._proxy.$registerTool(t), Ie(() => {
      this._registeredTools.delete(t), this._proxy.$unregisterTool(t);
    });
  }
}
class G$ {
  constructor(e, t, n, r) {
    this._documents = t, this._commands = n, this._uriTransformer = r, this._languageIds = [], this._handlePool = 0, this._ids = /* @__PURE__ */ new Set(), this._proxy = e.getProxy(ie.MainThreadLanguages);
  }
  $acceptLanguageIds(e) {
    this._languageIds = e;
  }
  async getLanguages() {
    return this._languageIds.slice(0);
  }
  async changeLanguage(e, t) {
    await this._proxy.$changeLanguage(e, t);
    const n = this._documents.getDocumentData(e);
    if (!n)
      throw new Error(`document '${e.toString()}' NOT found`);
    return n.document;
  }
  async tokenAtPosition(e, t) {
    const n = e.version, r = ut.from(t), s = await this._proxy.$tokensAtPosition(e.uri, r), o = {
      type: Oo.Other,
      range: e.getWordRangeAtPosition(t) ?? new $e(t.line, t.character, t.line, t.character)
    };
    if (!s)
      return o;
    const a = {
      range: j.to(s.range),
      type: Wy.to(s.type)
    };
    return !a.range.contains(t) || n !== e.version ? o : a;
  }
  createLanguageStatusItem(e, t, n) {
    const r = this._handlePool++, s = this._proxy, o = this._ids, a = `${e.identifier.value}/${t}`;
    if (o.has(a))
      throw new Error(`LanguageStatusItem with id '${t}' ALREADY exists`);
    o.add(a);
    const l = {
      selector: n,
      id: t,
      name: e.displayName ?? e.name,
      severity: Xc.Information,
      command: void 0,
      text: "",
      detail: "",
      busy: !1
    };
    let c;
    const u = new Te(), d = () => {
      if (c == null || c.dispose(), !o.has(a)) {
        console.warn(`LanguageStatusItem (${t}) from ${e.identifier.value} has been disposed and CANNOT be updated anymore`);
        return;
      }
      c = SL(() => {
        u.clear(), this._proxy.$setLanguageStatus(r, {
          id: a,
          name: l.name ?? e.displayName ?? e.name,
          source: e.displayName ?? e.name,
          selector: Zu.from(l.selector, this._uriTransformer),
          label: l.text,
          detail: l.detail ?? "",
          severity: l.severity === Xc.Error ? Yt.Error : l.severity === Xc.Warning ? Yt.Warning : Yt.Info,
          command: l.command && this._commands.toInternal(l.command, u),
          accessibilityInfo: l.accessibilityInformation,
          busy: l.busy
        });
      }, 0);
    }, f = {
      dispose() {
        u.dispose(), c == null || c.dispose(), s.$removeLanguageStatus(r), o.delete(a);
      },
      get id() {
        return l.id;
      },
      get name() {
        return l.name;
      },
      set name(p) {
        l.name = p, d();
      },
      get selector() {
        return l.selector;
      },
      set selector(p) {
        l.selector = p, d();
      },
      get text() {
        return l.text;
      },
      set text(p) {
        l.text = p, d();
      },
      set text2(p) {
        H(e, "languageStatusText"), l.text = p, d();
      },
      get text2() {
        return H(e, "languageStatusText"), l.text;
      },
      get detail() {
        return l.detail;
      },
      set detail(p) {
        l.detail = p, d();
      },
      get severity() {
        return l.severity;
      },
      set severity(p) {
        l.severity = p, d();
      },
      get accessibilityInformation() {
        return l.accessibilityInformation;
      },
      set accessibilityInformation(p) {
        l.accessibilityInformation = p, d();
      },
      get command() {
        return l.command;
      },
      set command(p) {
        l.command = p, d();
      },
      get busy() {
        return l.busy;
      },
      set busy(p) {
        l.busy = p, d();
      }
    };
    return d(), f;
  }
}
function Q$(i) {
  return i && i.title;
}
let nE = class {
  constructor(e, t) {
    this._logService = t, this._proxy = e.getProxy(ie.MainThreadMessageService);
  }
  showMessage(e, t, n, r, s) {
    const o = {
      source: { identifier: e.identifier, label: e.displayName || e.name }
    };
    let a;
    typeof r == "string" || Q$(r) ? a = [r, ...s] : (o.modal = r == null ? void 0 : r.modal, o.useCustom = r == null ? void 0 : r.useCustom, o.detail = r == null ? void 0 : r.detail, a = s), o.useCustom && H(e, "resolvers");
    const l = [];
    let c = !1;
    for (let u = 0; u < a.length; u++) {
      const d = a[u];
      if (typeof d == "string")
        l.push({ title: d, handle: u, isCloseAffordance: !1 });
      else if (typeof d == "object") {
        const { title: f, isCloseAffordance: p } = d;
        l.push({ title: f, isCloseAffordance: !!p, handle: u }), p && (c ? this._logService.warn(`[${e.identifier}] Only one message item can have 'isCloseAffordance':`, d) : c = !0);
      } else
        this._logService.warn(`[${e.identifier}] Invalid message item:`, d);
    }
    return this._proxy.$showMessage(t, n, o, l).then((u) => {
      if (typeof u == "number")
        return a[u];
    });
  }
};
nE = z([
  O(1, ot)
], nE);
class bw {
  constructor(e, t, n, r) {
    this.start = e, this.deletedCount = t, this.deletedItems = n, this.items = r;
  }
  asApiEvent() {
    return {
      range: new es(this.start, this.start + this.deletedCount),
      addedCells: this.items.map((e) => e.apiCell),
      removedCells: this.deletedItems
    };
  }
}
class rE {
  static asModelAddData(e) {
    return {
      EOL: e.eol,
      lines: e.source,
      languageId: e.language,
      uri: e.uri,
      isDirty: !1,
      versionId: 1,
      encoding: "utf8"
    };
  }
  constructor(e, t, n) {
    this.notebook = e, this._extHostDocument = t, this._cellData = n, this.handle = n.handle, this.uri = x.revive(n.uri), this.cellKind = n.cellKind, this._outputs = n.outputs.map(Xo.to), this._internalMetadata = n.internalMetadata ?? {}, this._metadata = Object.freeze(n.metadata ?? {}), this._previousResult = Object.freeze(
      sd.to(n.internalMetadata ?? {})
    );
  }
  get internalMetadata() {
    return this._internalMetadata;
  }
  get apiCell() {
    if (!this._apiCell) {
      const e = this, t = this._extHostDocument.getDocument(this.uri);
      if (!t)
        throw new Error(`MISSING extHostDocument for notebook cell: ${this.uri}`);
      const n = {
        get index() {
          return e.notebook.getCellIndex(e);
        },
        notebook: e.notebook.apiNotebook,
        kind: Hf.to(this._cellData.cellKind),
        document: t.document,
        get mime() {
          return e._mime;
        },
        set mime(r) {
          e._mime = r;
        },
        get outputs() {
          return e._outputs.slice(0);
        },
        get metadata() {
          return e._metadata;
        },
        get executionSummary() {
          return e._previousResult;
        }
      };
      this._apiCell = Object.freeze(n);
    }
    return this._apiCell;
  }
  setOutputs(e) {
    this._outputs = e.map(Xo.to);
  }
  setOutputItems(e, t, n) {
    const r = n.map(ad.to), s = this._outputs.find((o) => o.id === e);
    if (s && (t || (s.items.length = 0), s.items.push(...r), s.items.length > 1 && s.items.every((o) => c5(o.mime)))) {
      const o = /* @__PURE__ */ new Map(), a = [];
      s.items.forEach((l) => {
        let c;
        o.has(l.mime) ? c = o.get(l.mime) : (c = [], o.set(l.mime, c), a.push(l.mime)), c.push(l.data);
      }), s.items.length = 0, a.forEach((l) => {
        const c = j6(o.get(l));
        s.items.push({
          mime: l,
          data: c.data.buffer
        });
      });
    }
  }
  setMetadata(e) {
    this._metadata = Object.freeze(e);
  }
  setInternalMetadata(e) {
    this._internalMetadata = e, this._previousResult = Object.freeze(sd.to(e));
  }
  setMime(e) {
  }
}
const B1 = class B1 {
  constructor(e, t, n, r, s) {
    this._proxy = e, this._textDocumentsAndEditors = t, this._textDocuments = n, this.uri = r, this.handle = B1._handlePool++, this._cells = [], this._versionId = 0, this._isDirty = !1, this._disposed = !1, this._notebookType = s.viewType, this._metadata = Object.freeze(s.metadata ?? /* @__PURE__ */ Object.create(null)), this._spliceNotebookCells([[0, 0, s.cells]], !0, void 0), this._versionId = s.versionId;
  }
  dispose() {
    this._disposed = !0;
  }
  get versionId() {
    return this._versionId;
  }
  get apiNotebook() {
    if (!this._notebook) {
      const e = this, t = {
        get uri() {
          return e.uri;
        },
        get version() {
          return e._versionId;
        },
        get notebookType() {
          return e._notebookType;
        },
        get isDirty() {
          return e._isDirty;
        },
        get isUntitled() {
          return e.uri.scheme === fe.untitled;
        },
        get isClosed() {
          return e._disposed;
        },
        get metadata() {
          return e._metadata;
        },
        get cellCount() {
          return e._cells.length;
        },
        cellAt(n) {
          return n = e._validateIndex(n), e._cells[n].apiCell;
        },
        getCells(n) {
          return (n ? e._getCells(n) : e._cells).map((s) => s.apiCell);
        },
        save() {
          return e._save();
        },
        [Symbol.for("debug.description")]() {
          return `NotebookDocument(${this.uri.toString()})`;
        }
      };
      this._notebook = Object.freeze(t);
    }
    return this._notebook;
  }
  acceptDocumentPropertiesChanged(e) {
    e.metadata && (this._metadata = Object.freeze({ ...this._metadata, ...e.metadata }));
  }
  acceptDirty(e) {
    this._isDirty = e;
  }
  acceptModelChanged(e, t, n) {
    this._versionId = e.versionId, this._isDirty = t, this.acceptDocumentPropertiesChanged({ metadata: n });
    const r = {
      notebook: this.apiNotebook,
      metadata: n,
      cellChanges: [],
      contentChanges: []
    }, s = [];
    for (const a of e.rawEvents)
      a.kind === cr.ModelChange ? this._spliceNotebookCells(a.changes, !1, r.contentChanges) : a.kind === cr.Move ? this._moveCells(a.index, a.length, a.newIdx, r.contentChanges) : a.kind === cr.Output ? (this._setCellOutputs(a.index, a.outputs), s.push({ cell: this._cells[a.index].apiCell, outputs: this._cells[a.index].apiCell.outputs })) : a.kind === cr.OutputItem ? (this._setCellOutputItems(a.index, a.outputId, a.append, a.outputItems), s.push({ cell: this._cells[a.index].apiCell, outputs: this._cells[a.index].apiCell.outputs })) : a.kind === cr.ChangeCellLanguage ? (this._changeCellLanguage(a.index, a.language), s.push({ cell: this._cells[a.index].apiCell, document: this._cells[a.index].apiCell.document })) : a.kind === cr.ChangeCellContent ? s.push({ cell: this._cells[a.index].apiCell, document: this._cells[a.index].apiCell.document }) : a.kind === cr.ChangeCellMime ? this._changeCellMime(a.index, a.mime) : a.kind === cr.ChangeCellMetadata ? (this._changeCellMetadata(a.index, a.metadata), s.push({ cell: this._cells[a.index].apiCell, metadata: this._cells[a.index].apiCell.metadata })) : a.kind === cr.ChangeCellInternalMetadata && (this._changeCellInternalMetadata(a.index, a.internalMetadata), s.push({ cell: this._cells[a.index].apiCell, executionSummary: this._cells[a.index].apiCell.executionSummary }));
    const o = /* @__PURE__ */ new Map();
    for (let a = 0; a < s.length; a++) {
      const l = s[a], c = o.get(l.cell);
      if (c === void 0) {
        const u = r.cellChanges.push({
          document: void 0,
          executionSummary: void 0,
          metadata: void 0,
          outputs: void 0,
          ...l
        });
        o.set(l.cell, u - 1);
      } else
        r.cellChanges[c] = {
          ...r.cellChanges[c],
          ...l
        };
    }
    return r;
  }
  _validateIndex(e) {
    return e = e | 0, e < 0 ? 0 : e >= this._cells.length ? this._cells.length - 1 : e;
  }
  _validateRange(e) {
    let t = e.start | 0, n = e.end | 0;
    return t < 0 && (t = 0), n > this._cells.length && (n = this._cells.length), e.with({ start: t, end: n });
  }
  _getCells(e) {
    e = this._validateRange(e);
    const t = [];
    for (let n = e.start; n < e.end; n++)
      t.push(this._cells[n]);
    return t;
  }
  async _save() {
    return this._disposed ? Promise.reject(new Error("Notebook has been closed")) : this._proxy.$trySaveNotebook(this.uri);
  }
  _spliceNotebookCells(e, t, n) {
    if (this._disposed)
      return;
    const r = [], s = [], o = [];
    if (e.reverse().forEach((a) => {
      const c = a[2].map((f) => {
        const p = new rE(this, this._textDocumentsAndEditors, f);
        return t || s.push(rE.asModelAddData(f)), p;
      }), u = new bw(a[0], a[1], [], c), d = this._cells.splice(a[0], a[1], ...c);
      for (const f of d)
        o.push(f.uri), u.deletedItems.push(f.apiCell);
      r.push(u);
    }), this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
      addedDocuments: s,
      removedDocuments: o
    }), n)
      for (const a of r)
        n.push(a.asApiEvent());
  }
  _moveCells(e, t, n, r) {
    const s = this._cells.splice(e, t);
    this._cells.splice(n, 0, ...s);
    const o = [
      new bw(e, t, s.map((a) => a.apiCell), []),
      new bw(n, 0, [], s)
    ];
    for (const a of o)
      r.push(a.asApiEvent());
  }
  _setCellOutputs(e, t) {
    this._cells[e].setOutputs(t);
  }
  _setCellOutputItems(e, t, n, r) {
    this._cells[e].setOutputItems(t, n, r);
  }
  _changeCellLanguage(e, t) {
    const n = this._cells[e];
    n.apiCell.document.languageId !== t && this._textDocuments.$acceptModelLanguageChanged(n.uri, t);
  }
  _changeCellMime(e, t) {
    const n = this._cells[e];
    n.apiCell.mime = t;
  }
  _changeCellMetadata(e, t) {
    this._cells[e].setMetadata(t);
  }
  _changeCellInternalMetadata(e, t) {
    this._cells[e].setInternalMetadata(t);
  }
  getCellFromApiCell(e) {
    return this._cells.find((t) => t.apiCell === e);
  }
  getCellFromIndex(e) {
    return this._cells[e];
  }
  getCell(e) {
    return this._cells.find((t) => t.handle === e);
  }
  getCellIndex(e) {
    return this._cells.indexOf(e);
  }
};
B1._handlePool = 0;
let sE = B1;
const W1 = class W1 {
  constructor(e, t, n, r, s, o, a) {
    this.id = e, this._proxy = t, this.notebookData = n, this._visibleRanges = r, this._selections = s, this._viewColumn = o, this.viewType = a, this._visible = !1;
  }
  get apiEditor() {
    if (!this._editor) {
      const e = this;
      this._editor = {
        get notebook() {
          return e.notebookData.apiNotebook;
        },
        get selection() {
          return e._selections[0];
        },
        set selection(t) {
          this.selections = [t];
        },
        get selections() {
          return e._selections;
        },
        set selections(t) {
          if (!Array.isArray(t) || !t.every(es.isNotebookRange))
            throw Ge("selections");
          e._selections = t.length === 0 ? [new es(0, 0)] : t, e._trySetSelections(e._selections);
        },
        get visibleRanges() {
          return e._visibleRanges;
        },
        revealRange(t, n) {
          e._proxy.$tryRevealRange(e.id, ls.from(t), n ?? c_.Default);
        },
        get viewColumn() {
          return e._viewColumn;
        },
        get replOptions() {
          if (e.viewType === "repl")
            return { appendIndex: this.notebook.cellCount - 1 };
        },
        [Symbol.for("debug.description")]() {
          return `NotebookEditor(${this.notebook.uri.toString()})`;
        }
      }, W1.apiEditorsToExtHost.set(this._editor, this);
    }
    return this._editor;
  }
  get visible() {
    return this._visible;
  }
  _acceptVisibility(e) {
    this._visible = e;
  }
  _acceptVisibleRanges(e) {
    this._visibleRanges = e;
  }
  _acceptSelections(e) {
    this._selections = e;
  }
  _trySetSelections(e) {
    this._proxy.$trySetSelections(this.id, e.map(ls.from));
  }
  _acceptViewColumn(e) {
    this._viewColumn = e;
  }
};
W1.apiEditorsToExtHost = /* @__PURE__ */ new WeakMap();
let rp = W1;
class oE {
  constructor(e, t) {
    this.piece = e, this.color = t, this.size_left = 0, this.lf_left = 0, this.parent = this, this.left = this, this.right = this;
  }
  next() {
    if (this.right !== ve)
      return jS(this.right);
    let e = this;
    for (; e.parent !== ve && e.parent.left !== e; )
      e = e.parent;
    return e.parent === ve ? ve : e.parent;
  }
  prev() {
    if (this.left !== ve)
      return sR(this.left);
    let e = this;
    for (; e.parent !== ve && e.parent.right !== e; )
      e = e.parent;
    return e.parent === ve ? ve : e.parent;
  }
  detach() {
    this.parent = null, this.left = null, this.right = null;
  }
}
var We;
(function(i) {
  i[i.Black = 0] = "Black", i[i.Red = 1] = "Red";
})(We || (We = {}));
const ve = new oE(null, We.Black);
ve.parent = ve;
ve.left = ve;
ve.right = ve;
ve.color = We.Black;
function jS(i) {
  for (; i.left !== ve; )
    i = i.left;
  return i;
}
function sR(i) {
  for (; i.right !== ve; )
    i = i.right;
  return i;
}
function GS(i) {
  return i === ve ? 0 : i.size_left + i.piece.length + GS(i.right);
}
function QS(i) {
  return i === ve ? 0 : i.lf_left + i.piece.lineFeedCnt + QS(i.right);
}
function yw() {
  ve.parent = ve;
}
function Ph(i, e) {
  const t = e.right;
  t.size_left += e.size_left + (e.piece ? e.piece.length : 0), t.lf_left += e.lf_left + (e.piece ? e.piece.lineFeedCnt : 0), e.right = t.left, t.left !== ve && (t.left.parent = e), t.parent = e.parent, e.parent === ve ? i.root = t : e.parent.left === e ? e.parent.left = t : e.parent.right = t, t.left = e, e.parent = t;
}
function Ah(i, e) {
  const t = e.left;
  e.left = t.right, t.right !== ve && (t.right.parent = e), t.parent = e.parent, e.size_left -= t.size_left + (t.piece ? t.piece.length : 0), e.lf_left -= t.lf_left + (t.piece ? t.piece.lineFeedCnt : 0), e.parent === ve ? i.root = t : e === e.parent.right ? e.parent.right = t : e.parent.left = t, t.right = e, e.parent = t;
}
function og(i, e) {
  let t, n;
  if (e.left === ve ? (n = e, t = n.right) : e.right === ve ? (n = e, t = n.left) : (n = jS(e.right), t = n.right), n === i.root) {
    i.root = t, t.color = We.Black, e.detach(), yw(), i.root.parent = ve;
    return;
  }
  const r = n.color === We.Red;
  if (n === n.parent.left ? n.parent.left = t : n.parent.right = t, n === e ? (t.parent = n.parent, eh(i, t)) : (n.parent === e ? t.parent = n : t.parent = n.parent, eh(i, t), n.left = e.left, n.right = e.right, n.parent = e.parent, n.color = e.color, e === i.root ? i.root = n : e === e.parent.left ? e.parent.left = n : e.parent.right = n, n.left !== ve && (n.left.parent = n), n.right !== ve && (n.right.parent = n), n.size_left = e.size_left, n.lf_left = e.lf_left, eh(i, n)), e.detach(), t.parent.left === t) {
    const o = GS(t), a = QS(t);
    if (o !== t.parent.size_left || a !== t.parent.lf_left) {
      const l = o - t.parent.size_left, c = a - t.parent.lf_left;
      t.parent.size_left = o, t.parent.lf_left = a, ws(i, t.parent, l, c);
    }
  }
  if (eh(i, t.parent), r) {
    yw();
    return;
  }
  let s;
  for (; t !== i.root && t.color === We.Black; )
    t === t.parent.left ? (s = t.parent.right, s.color === We.Red && (s.color = We.Black, t.parent.color = We.Red, Ph(i, t.parent), s = t.parent.right), s.left.color === We.Black && s.right.color === We.Black ? (s.color = We.Red, t = t.parent) : (s.right.color === We.Black && (s.left.color = We.Black, s.color = We.Red, Ah(i, s), s = t.parent.right), s.color = t.parent.color, t.parent.color = We.Black, s.right.color = We.Black, Ph(i, t.parent), t = i.root)) : (s = t.parent.left, s.color === We.Red && (s.color = We.Black, t.parent.color = We.Red, Ah(i, t.parent), s = t.parent.left), s.left.color === We.Black && s.right.color === We.Black ? (s.color = We.Red, t = t.parent) : (s.left.color === We.Black && (s.right.color = We.Black, s.color = We.Red, Ph(i, s), s = t.parent.left), s.color = t.parent.color, t.parent.color = We.Black, s.left.color = We.Black, Ah(i, t.parent), t = i.root));
  t.color = We.Black, yw();
}
function K4(i, e) {
  for (eh(i, e); e !== i.root && e.parent.color === We.Red; )
    if (e.parent === e.parent.parent.left) {
      const t = e.parent.parent.right;
      t.color === We.Red ? (e.parent.color = We.Black, t.color = We.Black, e.parent.parent.color = We.Red, e = e.parent.parent) : (e === e.parent.right && (e = e.parent, Ph(i, e)), e.parent.color = We.Black, e.parent.parent.color = We.Red, Ah(i, e.parent.parent));
    } else {
      const t = e.parent.parent.left;
      t.color === We.Red ? (e.parent.color = We.Black, t.color = We.Black, e.parent.parent.color = We.Red, e = e.parent.parent) : (e === e.parent.left && (e = e.parent, Ah(i, e)), e.parent.color = We.Black, e.parent.parent.color = We.Red, Ph(i, e.parent.parent));
    }
  i.root.color = We.Black;
}
function ws(i, e, t, n) {
  for (; e !== i.root && e !== ve; )
    e.parent.left === e && (e.parent.size_left += t, e.parent.lf_left += n), e = e.parent;
}
function eh(i, e) {
  let t = 0, n = 0;
  if (e !== i.root) {
    for (; e !== i.root && e === e.parent.right; )
      e = e.parent;
    if (e !== i.root)
      for (e = e.parent, t = GS(e.left) - e.size_left, n = QS(e.left) - e.lf_left, e.size_left += t, e.lf_left += n; e !== i.root && (t !== 0 || n !== 0); )
        e.parent.left === e && (e.parent.size_left += t, e.parent.lf_left += n), e = e.parent;
  }
}
const ms = 65535;
function oR(i) {
  let e;
  return i[i.length - 1] < 65536 ? e = new Uint16Array(i.length) : e = new Uint32Array(i.length), e.set(i, 0), e;
}
class K$ {
  constructor(e, t, n, r, s) {
    this.lineStarts = e, this.cr = t, this.lf = n, this.crlf = r, this.isBasicASCII = s;
  }
}
function Ds(i, e = !0) {
  const t = [0];
  let n = 1;
  for (let r = 0, s = i.length; r < s; r++) {
    const o = i.charCodeAt(r);
    o === L.CarriageReturn ? r + 1 < s && i.charCodeAt(r + 1) === L.LineFeed ? (t[n++] = r + 2, r++) : t[n++] = r + 1 : o === L.LineFeed && (t[n++] = r + 1);
  }
  return e ? oR(t) : t;
}
function J$(i, e) {
  i.length = 0, i[0] = 0;
  let t = 1, n = 0, r = 0, s = 0, o = !0;
  for (let l = 0, c = e.length; l < c; l++) {
    const u = e.charCodeAt(l);
    u === L.CarriageReturn ? l + 1 < c && e.charCodeAt(l + 1) === L.LineFeed ? (s++, i[t++] = l + 2, l++) : (n++, i[t++] = l + 1) : u === L.LineFeed ? (r++, i[t++] = l + 1) : o && u !== L.Tab && (u < 32 || u > 126) && (o = !1);
  }
  const a = new K$(oR(i), n, r, s, o);
  return i.length = 0, a;
}
class en {
  constructor(e, t, n, r, s) {
    this.bufferIndex = e, this.start = t, this.end = n, this.lineFeedCnt = r, this.length = s;
  }
}
class Ea {
  constructor(e, t) {
    this.buffer = e, this.lineStarts = t;
  }
}
class Y$ {
  constructor(e, t) {
    this._pieces = [], this._tree = e, this._BOM = t, this._index = 0, e.root !== ve && e.iterate(e.root, (n) => (n !== ve && this._pieces.push(n.piece), !0));
  }
  read() {
    return this._pieces.length === 0 ? this._index === 0 ? (this._index++, this._BOM) : null : this._index > this._pieces.length - 1 ? null : this._index === 0 ? this._BOM + this._tree.getPieceContent(this._pieces[this._index++]) : this._tree.getPieceContent(this._pieces[this._index++]);
  }
}
class X$ {
  constructor(e) {
    this._limit = e, this._cache = [];
  }
  get(e) {
    for (let t = this._cache.length - 1; t >= 0; t--) {
      const n = this._cache[t];
      if (n.nodeStartOffset <= e && n.nodeStartOffset + n.node.piece.length >= e)
        return n;
    }
    return null;
  }
  get2(e) {
    for (let t = this._cache.length - 1; t >= 0; t--) {
      const n = this._cache[t];
      if (n.nodeStartLineNumber && n.nodeStartLineNumber < e && n.nodeStartLineNumber + n.node.piece.lineFeedCnt >= e)
        return n;
    }
    return null;
  }
  set(e) {
    this._cache.length >= this._limit && this._cache.shift(), this._cache.push(e);
  }
  validate(e) {
    let t = !1;
    const n = this._cache;
    for (let r = 0; r < n.length; r++) {
      const s = n[r];
      if (s.node.parent === null || s.nodeStartOffset >= e) {
        n[r] = null, t = !0;
        continue;
      }
    }
    if (t) {
      const r = [];
      for (const s of n)
        s !== null && r.push(s);
      this._cache = r;
    }
  }
}
class Z$ {
  constructor(e, t, n) {
    this.create(e, t, n);
  }
  create(e, t, n) {
    this._buffers = [
      new Ea("", [0])
    ], this._lastChangeBufferPos = { line: 0, column: 0 }, this.root = ve, this._lineCnt = 1, this._length = 0, this._EOL = t, this._EOLLength = t.length, this._EOLNormalized = n;
    let r = null;
    for (let s = 0, o = e.length; s < o; s++)
      if (e[s].buffer.length > 0) {
        e[s].lineStarts || (e[s].lineStarts = Ds(e[s].buffer));
        const a = new en(
          s + 1,
          { line: 0, column: 0 },
          { line: e[s].lineStarts.length - 1, column: e[s].buffer.length - e[s].lineStarts[e[s].lineStarts.length - 1] },
          e[s].lineStarts.length - 1,
          e[s].buffer.length
        );
        this._buffers.push(e[s]), r = this.rbInsertRight(r, a);
      }
    this._searchCache = new X$(1), this._lastVisitedLine = { lineNumber: 0, value: "" }, this.computeBufferMetadata();
  }
  normalizeEOL(e) {
    const t = ms, n = t - Math.floor(t / 3), r = n * 2;
    let s = "", o = 0;
    const a = [];
    if (this.iterate(this.root, (l) => {
      const c = this.getNodeContent(l), u = c.length;
      if (o <= n || o + u < r)
        return s += c, o += u, !0;
      const d = s.replace(/\r\n|\r|\n/g, e);
      return a.push(new Ea(d, Ds(d))), s = c, o = u, !0;
    }), o > 0) {
      const l = s.replace(/\r\n|\r|\n/g, e);
      a.push(new Ea(l, Ds(l)));
    }
    this.create(a, e, !0);
  }
  getEOL() {
    return this._EOL;
  }
  setEOL(e) {
    this._EOL = e, this._EOLLength = this._EOL.length, this.normalizeEOL(e);
  }
  createSnapshot(e) {
    return new Y$(this, e);
  }
  equal(e) {
    if (this.getLength() !== e.getLength() || this.getLineCount() !== e.getLineCount())
      return !1;
    let t = 0;
    return this.iterate(this.root, (r) => {
      if (r === ve)
        return !0;
      const s = this.getNodeContent(r), o = s.length, a = e.nodeAt(t), l = e.nodeAt(t + o), c = e.getValueInRange2(a, l);
      return t += o, s === c;
    });
  }
  getOffsetAt(e, t) {
    let n = 0, r = this.root;
    for (; r !== ve; )
      if (r.left !== ve && r.lf_left + 1 >= e)
        r = r.left;
      else if (r.lf_left + r.piece.lineFeedCnt + 1 >= e) {
        n += r.size_left;
        const s = this.getAccumulatedValue(r, e - r.lf_left - 2);
        return n += s + t - 1;
      } else
        e -= r.lf_left + r.piece.lineFeedCnt, n += r.size_left + r.piece.length, r = r.right;
    return n;
  }
  getPositionAt(e) {
    e = Math.floor(e), e = Math.max(0, e);
    let t = this.root, n = 0;
    const r = e;
    for (; t !== ve; )
      if (t.size_left !== 0 && t.size_left >= e)
        t = t.left;
      else if (t.size_left + t.piece.length >= e) {
        const s = this.getIndexOf(t, e - t.size_left);
        if (n += t.lf_left + s.index, s.index === 0) {
          const o = this.getOffsetAt(n + 1, 1), a = r - o;
          return new On(n + 1, a + 1);
        }
        return new On(n + 1, s.remainder + 1);
      } else if (e -= t.size_left + t.piece.length, n += t.lf_left + t.piece.lineFeedCnt, t.right === ve) {
        const s = this.getOffsetAt(n + 1, 1), o = r - e - s;
        return new On(n + 1, o + 1);
      } else
        t = t.right;
    return new On(1, 1);
  }
  getValueInRange(e, t) {
    if (e.startLineNumber === e.endLineNumber && e.startColumn === e.endColumn)
      return "";
    const n = this.nodeAt2(e.startLineNumber, e.startColumn), r = this.nodeAt2(e.endLineNumber, e.endColumn), s = this.getValueInRange2(n, r);
    return t ? t !== this._EOL || !this._EOLNormalized ? s.replace(/\r\n|\r|\n/g, t) : t === this.getEOL() && this._EOLNormalized ? s : s.replace(/\r\n|\r|\n/g, t) : s;
  }
  getValueInRange2(e, t) {
    if (e.node === t.node) {
      const a = e.node, l = this._buffers[a.piece.bufferIndex].buffer, c = this.offsetInBuffer(a.piece.bufferIndex, a.piece.start);
      return l.substring(c + e.remainder, c + t.remainder);
    }
    let n = e.node;
    const r = this._buffers[n.piece.bufferIndex].buffer, s = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
    let o = r.substring(s + e.remainder, s + n.piece.length);
    for (n = n.next(); n !== ve; ) {
      const a = this._buffers[n.piece.bufferIndex].buffer, l = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
      if (n === t.node) {
        o += a.substring(l, l + t.remainder);
        break;
      } else
        o += a.substr(l, n.piece.length);
      n = n.next();
    }
    return o;
  }
  getLinesContent() {
    const e = [];
    let t = 0, n = "", r = !1;
    return this.iterate(this.root, (s) => {
      if (s === ve)
        return !0;
      const o = s.piece;
      let a = o.length;
      if (a === 0)
        return !0;
      const l = this._buffers[o.bufferIndex].buffer, c = this._buffers[o.bufferIndex].lineStarts, u = o.start.line, d = o.end.line;
      let f = c[u] + o.start.column;
      if (r && (l.charCodeAt(f) === L.LineFeed && (f++, a--), e[t++] = n, n = "", r = !1, a === 0))
        return !0;
      if (u === d)
        return !this._EOLNormalized && l.charCodeAt(f + a - 1) === L.CarriageReturn ? (r = !0, n += l.substr(f, a - 1)) : n += l.substr(f, a), !0;
      n += this._EOLNormalized ? l.substring(f, Math.max(f, c[u + 1] - this._EOLLength)) : l.substring(f, c[u + 1]).replace(/(\r\n|\r|\n)$/, ""), e[t++] = n;
      for (let p = u + 1; p < d; p++)
        n = this._EOLNormalized ? l.substring(c[p], c[p + 1] - this._EOLLength) : l.substring(c[p], c[p + 1]).replace(/(\r\n|\r|\n)$/, ""), e[t++] = n;
      return !this._EOLNormalized && l.charCodeAt(c[d] + o.end.column - 1) === L.CarriageReturn ? (r = !0, o.end.column === 0 ? t-- : n = l.substr(c[d], o.end.column - 1)) : n = l.substr(c[d], o.end.column), !0;
    }), r && (e[t++] = n, n = ""), e[t++] = n, e;
  }
  getLength() {
    return this._length;
  }
  getLineCount() {
    return this._lineCnt;
  }
  getLineContent(e) {
    return this._lastVisitedLine.lineNumber === e ? this._lastVisitedLine.value : (this._lastVisitedLine.lineNumber = e, e === this._lineCnt ? this._lastVisitedLine.value = this.getLineRawContent(e) : this._EOLNormalized ? this._lastVisitedLine.value = this.getLineRawContent(e, this._EOLLength) : this._lastVisitedLine.value = this.getLineRawContent(e).replace(/(\r\n|\r|\n)$/, ""), this._lastVisitedLine.value);
  }
  _getCharCode(e) {
    if (e.remainder === e.node.piece.length) {
      const t = e.node.next();
      if (!t)
        return 0;
      const n = this._buffers[t.piece.bufferIndex], r = this.offsetInBuffer(t.piece.bufferIndex, t.piece.start);
      return n.buffer.charCodeAt(r);
    } else {
      const t = this._buffers[e.node.piece.bufferIndex], r = this.offsetInBuffer(e.node.piece.bufferIndex, e.node.piece.start) + e.remainder;
      return t.buffer.charCodeAt(r);
    }
  }
  getLineCharCode(e, t) {
    const n = this.nodeAt2(e, t + 1);
    return this._getCharCode(n);
  }
  getLineLength(e) {
    if (e === this.getLineCount()) {
      const t = this.getOffsetAt(e, 1);
      return this.getLength() - t;
    }
    return this.getOffsetAt(e + 1, 1) - this.getOffsetAt(e, 1) - this._EOLLength;
  }
  getCharCode(e) {
    const t = this.nodeAt(e);
    return this._getCharCode(t);
  }
  getNearestChunk(e) {
    const t = this.nodeAt(e);
    if (t.remainder === t.node.piece.length) {
      const n = t.node.next();
      if (!n || n === ve)
        return "";
      const r = this._buffers[n.piece.bufferIndex], s = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
      return r.buffer.substring(s, s + n.piece.length);
    } else {
      const n = this._buffers[t.node.piece.bufferIndex], r = this.offsetInBuffer(t.node.piece.bufferIndex, t.node.piece.start), s = r + t.remainder, o = r + t.node.piece.length;
      return n.buffer.substring(s, o);
    }
  }
  findMatchesInNode(e, t, n, r, s, o, a, l, c, u, d) {
    const f = this._buffers[e.piece.bufferIndex], p = this.offsetInBuffer(e.piece.bufferIndex, e.piece.start), v = this.offsetInBuffer(e.piece.bufferIndex, s), _ = this.offsetInBuffer(e.piece.bufferIndex, o);
    let m;
    const E = { line: 0, column: 0 };
    let S, k;
    t._wordSeparators ? (S = f.buffer.substring(v, _), k = (q) => q + v, t.reset(0)) : (S = f.buffer, k = (q) => q, t.reset(v));
    do
      if (m = t.next(S), m) {
        if (k(m.index) >= _)
          return u;
        this.positionInBuffer(e, k(m.index) - p, E);
        const q = this.getLineFeedCnt(e.piece.bufferIndex, s, E), B = E.line === s.line ? E.column - s.column + r : E.column + 1, te = B + m[0].length;
        if (d[u++] = RC(new ft(
          n + q,
          B,
          n + q,
          te
        ), m, l), k(m.index) + m[0].length >= _ || u >= c)
          return u;
      }
    while (m);
    return u;
  }
  findMatchesLineByLine(e, t, n, r) {
    const s = [];
    let o = 0;
    const a = new BO(t.wordSeparators, t.regex);
    let l = this.nodeAt2(e.startLineNumber, e.startColumn);
    if (l === null)
      return [];
    const c = this.nodeAt2(e.endLineNumber, e.endColumn);
    if (c === null)
      return [];
    let u = this.positionInBuffer(l.node, l.remainder);
    const d = this.positionInBuffer(c.node, c.remainder);
    if (l.node === c.node)
      return this.findMatchesInNode(l.node, a, e.startLineNumber, e.startColumn, u, d, t, n, r, o, s), s;
    let f = e.startLineNumber, p = l.node;
    for (; p !== c.node; ) {
      const _ = this.getLineFeedCnt(p.piece.bufferIndex, u, p.piece.end);
      if (_ >= 1) {
        const E = this._buffers[p.piece.bufferIndex].lineStarts, S = this.offsetInBuffer(p.piece.bufferIndex, p.piece.start), k = E[u.line + _], q = f === e.startLineNumber ? e.startColumn : 1;
        if (o = this.findMatchesInNode(p, a, f, q, u, this.positionInBuffer(p, k - S), t, n, r, o, s), o >= r)
          return s;
        f += _;
      }
      const m = f === e.startLineNumber ? e.startColumn - 1 : 0;
      if (f === e.endLineNumber) {
        const E = this.getLineContent(f).substring(m, e.endColumn - 1);
        return o = this._findMatchesInLine(t, a, E, e.endLineNumber, m, o, s, n, r), s;
      }
      if (o = this._findMatchesInLine(t, a, this.getLineContent(f).substr(m), f, m, o, s, n, r), o >= r)
        return s;
      f++, l = this.nodeAt2(f, 1), p = l.node, u = this.positionInBuffer(l.node, l.remainder);
    }
    if (f === e.endLineNumber) {
      const _ = f === e.startLineNumber ? e.startColumn - 1 : 0, m = this.getLineContent(f).substring(_, e.endColumn - 1);
      return o = this._findMatchesInLine(t, a, m, e.endLineNumber, _, o, s, n, r), s;
    }
    const v = f === e.startLineNumber ? e.startColumn : 1;
    return o = this.findMatchesInNode(c.node, a, f, v, u, d, t, n, r, o, s), s;
  }
  _findMatchesInLine(e, t, n, r, s, o, a, l, c) {
    const u = e.wordSeparators;
    if (!l && e.simpleSearch) {
      const f = e.simpleSearch, p = f.length, v = n.length;
      let _ = -p;
      for (; (_ = n.indexOf(f, _ + p)) !== -1; )
        if ((!u || kA(u, n, v, _, p)) && (a[o++] = new cb(new ft(
          r,
          _ + 1 + s,
          r,
          _ + 1 + p + s
        ), null), o >= c))
          return o;
      return o;
    }
    let d;
    t.reset(0);
    do
      if (d = t.next(n), d && (a[o++] = RC(new ft(
        r,
        d.index + 1 + s,
        r,
        d.index + 1 + d[0].length + s
      ), d, l), o >= c))
        return o;
    while (d);
    return o;
  }
  insert(e, t, n = !1) {
    if (this._EOLNormalized = this._EOLNormalized && n, this._lastVisitedLine.lineNumber = 0, this._lastVisitedLine.value = "", this.root !== ve) {
      const { node: r, remainder: s, nodeStartOffset: o } = this.nodeAt(e), a = r.piece, l = a.bufferIndex, c = this.positionInBuffer(r, s);
      if (r.piece.bufferIndex === 0 && a.end.line === this._lastChangeBufferPos.line && a.end.column === this._lastChangeBufferPos.column && o + a.length === e && t.length < ms) {
        this.appendToNode(r, t), this.computeBufferMetadata();
        return;
      }
      if (o === e)
        this.insertContentToNodeLeft(t, r), this._searchCache.validate(e);
      else if (o + r.piece.length > e) {
        const u = [];
        let d = new en(
          a.bufferIndex,
          c,
          a.end,
          this.getLineFeedCnt(a.bufferIndex, c, a.end),
          this.offsetInBuffer(l, a.end) - this.offsetInBuffer(l, c)
        );
        if (this.shouldCheckCRLF() && this.endWithCR(t) && this.nodeCharCodeAt(r, s) === 10) {
          const _ = { line: d.start.line + 1, column: 0 };
          d = new en(
            d.bufferIndex,
            _,
            d.end,
            this.getLineFeedCnt(d.bufferIndex, _, d.end),
            d.length - 1
          ), t += `
`;
        }
        if (this.shouldCheckCRLF() && this.startWithLF(t))
          if (this.nodeCharCodeAt(r, s - 1) === 13) {
            const _ = this.positionInBuffer(r, s - 1);
            this.deleteNodeTail(r, _), t = "\r" + t, r.piece.length === 0 && u.push(r);
          } else
            this.deleteNodeTail(r, c);
        else
          this.deleteNodeTail(r, c);
        const f = this.createNewPieces(t);
        d.length > 0 && this.rbInsertRight(r, d);
        let p = r;
        for (let v = 0; v < f.length; v++)
          p = this.rbInsertRight(p, f[v]);
        this.deleteNodes(u);
      } else
        this.insertContentToNodeRight(t, r);
    } else {
      const r = this.createNewPieces(t);
      let s = this.rbInsertLeft(null, r[0]);
      for (let o = 1; o < r.length; o++)
        s = this.rbInsertRight(s, r[o]);
    }
    this.computeBufferMetadata();
  }
  delete(e, t) {
    if (this._lastVisitedLine.lineNumber = 0, this._lastVisitedLine.value = "", t <= 0 || this.root === ve)
      return;
    const n = this.nodeAt(e), r = this.nodeAt(e + t), s = n.node, o = r.node;
    if (s === o) {
      const f = this.positionInBuffer(s, n.remainder), p = this.positionInBuffer(s, r.remainder);
      if (n.nodeStartOffset === e) {
        if (t === s.piece.length) {
          const v = s.next();
          og(this, s), this.validateCRLFWithPrevNode(v), this.computeBufferMetadata();
          return;
        }
        this.deleteNodeHead(s, p), this._searchCache.validate(e), this.validateCRLFWithPrevNode(s), this.computeBufferMetadata();
        return;
      }
      if (n.nodeStartOffset + s.piece.length === e + t) {
        this.deleteNodeTail(s, f), this.validateCRLFWithNextNode(s), this.computeBufferMetadata();
        return;
      }
      this.shrinkNode(s, f, p), this.computeBufferMetadata();
      return;
    }
    const a = [], l = this.positionInBuffer(s, n.remainder);
    this.deleteNodeTail(s, l), this._searchCache.validate(e), s.piece.length === 0 && a.push(s);
    const c = this.positionInBuffer(o, r.remainder);
    this.deleteNodeHead(o, c), o.piece.length === 0 && a.push(o);
    const u = s.next();
    for (let f = u; f !== ve && f !== o; f = f.next())
      a.push(f);
    const d = s.piece.length === 0 ? s.prev() : s;
    this.deleteNodes(a), this.validateCRLFWithNextNode(d), this.computeBufferMetadata();
  }
  insertContentToNodeLeft(e, t) {
    const n = [];
    if (this.shouldCheckCRLF() && this.endWithCR(e) && this.startWithLF(t)) {
      const o = t.piece, a = { line: o.start.line + 1, column: 0 }, l = new en(
        o.bufferIndex,
        a,
        o.end,
        this.getLineFeedCnt(o.bufferIndex, a, o.end),
        o.length - 1
      );
      t.piece = l, e += `
`, ws(this, t, -1, -1), t.piece.length === 0 && n.push(t);
    }
    const r = this.createNewPieces(e);
    let s = this.rbInsertLeft(t, r[r.length - 1]);
    for (let o = r.length - 2; o >= 0; o--)
      s = this.rbInsertLeft(s, r[o]);
    this.validateCRLFWithPrevNode(s), this.deleteNodes(n);
  }
  insertContentToNodeRight(e, t) {
    this.adjustCarriageReturnFromNext(e, t) && (e += `
`);
    const n = this.createNewPieces(e), r = this.rbInsertRight(t, n[0]);
    let s = r;
    for (let o = 1; o < n.length; o++)
      s = this.rbInsertRight(s, n[o]);
    this.validateCRLFWithPrevNode(r);
  }
  positionInBuffer(e, t, n) {
    const r = e.piece, s = e.piece.bufferIndex, o = this._buffers[s].lineStarts, l = o[r.start.line] + r.start.column + t;
    let c = r.start.line, u = r.end.line, d = 0, f = 0, p = 0;
    for (; c <= u && (d = c + (u - c) / 2 | 0, p = o[d], d !== u); )
      if (f = o[d + 1], l < p)
        u = d - 1;
      else if (l >= f)
        c = d + 1;
      else
        break;
    return n ? (n.line = d, n.column = l - p, null) : {
      line: d,
      column: l - p
    };
  }
  getLineFeedCnt(e, t, n) {
    if (n.column === 0)
      return n.line - t.line;
    const r = this._buffers[e].lineStarts;
    if (n.line === r.length - 1)
      return n.line - t.line;
    const s = r[n.line + 1], o = r[n.line] + n.column;
    if (s > o + 1)
      return n.line - t.line;
    const a = o - 1;
    return this._buffers[e].buffer.charCodeAt(a) === 13 ? n.line - t.line + 1 : n.line - t.line;
  }
  offsetInBuffer(e, t) {
    return this._buffers[e].lineStarts[t.line] + t.column;
  }
  deleteNodes(e) {
    for (let t = 0; t < e.length; t++)
      og(this, e[t]);
  }
  createNewPieces(e) {
    if (e.length > ms) {
      const u = [];
      for (; e.length > ms; ) {
        const f = e.charCodeAt(ms - 1);
        let p;
        f === L.CarriageReturn || f >= 55296 && f <= 56319 ? (p = e.substring(0, ms - 1), e = e.substring(ms - 1)) : (p = e.substring(0, ms), e = e.substring(ms));
        const v = Ds(p);
        u.push(new en(
          this._buffers.length,
          { line: 0, column: 0 },
          { line: v.length - 1, column: p.length - v[v.length - 1] },
          v.length - 1,
          p.length
        )), this._buffers.push(new Ea(p, v));
      }
      const d = Ds(e);
      return u.push(new en(
        this._buffers.length,
        { line: 0, column: 0 },
        { line: d.length - 1, column: e.length - d[d.length - 1] },
        d.length - 1,
        e.length
      )), this._buffers.push(new Ea(e, d)), u;
    }
    let t = this._buffers[0].buffer.length;
    const n = Ds(e, !1);
    let r = this._lastChangeBufferPos;
    if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === t && t !== 0 && this.startWithLF(e) && this.endWithCR(this._buffers[0].buffer)) {
      this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 }, r = this._lastChangeBufferPos;
      for (let u = 0; u < n.length; u++)
        n[u] += t + 1;
      this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(n.slice(1)), this._buffers[0].buffer += "_" + e, t += 1;
    } else {
      if (t !== 0)
        for (let u = 0; u < n.length; u++)
          n[u] += t;
      this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(n.slice(1)), this._buffers[0].buffer += e;
    }
    const s = this._buffers[0].buffer.length, o = this._buffers[0].lineStarts.length - 1, a = s - this._buffers[0].lineStarts[o], l = { line: o, column: a }, c = new en(
      0,
      r,
      l,
      this.getLineFeedCnt(0, r, l),
      s - t
    );
    return this._lastChangeBufferPos = l, [c];
  }
  getLinesRawContent() {
    return this.getContentOfSubTree(this.root);
  }
  getLineRawContent(e, t = 0) {
    let n = this.root, r = "";
    const s = this._searchCache.get2(e);
    if (s) {
      n = s.node;
      const o = this.getAccumulatedValue(n, e - s.nodeStartLineNumber - 1), a = this._buffers[n.piece.bufferIndex].buffer, l = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
      if (s.nodeStartLineNumber + n.piece.lineFeedCnt === e)
        r = a.substring(l + o, l + n.piece.length);
      else {
        const c = this.getAccumulatedValue(n, e - s.nodeStartLineNumber);
        return a.substring(l + o, l + c - t);
      }
    } else {
      let o = 0;
      const a = e;
      for (; n !== ve; )
        if (n.left !== ve && n.lf_left >= e - 1)
          n = n.left;
        else if (n.lf_left + n.piece.lineFeedCnt > e - 1) {
          const l = this.getAccumulatedValue(n, e - n.lf_left - 2), c = this.getAccumulatedValue(n, e - n.lf_left - 1), u = this._buffers[n.piece.bufferIndex].buffer, d = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
          return o += n.size_left, this._searchCache.set({
            node: n,
            nodeStartOffset: o,
            nodeStartLineNumber: a - (e - 1 - n.lf_left)
          }), u.substring(d + l, d + c - t);
        } else if (n.lf_left + n.piece.lineFeedCnt === e - 1) {
          const l = this.getAccumulatedValue(n, e - n.lf_left - 2), c = this._buffers[n.piece.bufferIndex].buffer, u = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
          r = c.substring(u + l, u + n.piece.length);
          break;
        } else
          e -= n.lf_left + n.piece.lineFeedCnt, o += n.size_left + n.piece.length, n = n.right;
    }
    for (n = n.next(); n !== ve; ) {
      const o = this._buffers[n.piece.bufferIndex].buffer;
      if (n.piece.lineFeedCnt > 0) {
        const a = this.getAccumulatedValue(n, 0), l = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
        return r += o.substring(l, l + a - t), r;
      } else {
        const a = this.offsetInBuffer(n.piece.bufferIndex, n.piece.start);
        r += o.substr(a, n.piece.length);
      }
      n = n.next();
    }
    return r;
  }
  computeBufferMetadata() {
    let e = this.root, t = 1, n = 0;
    for (; e !== ve; )
      t += e.lf_left + e.piece.lineFeedCnt, n += e.size_left + e.piece.length, e = e.right;
    this._lineCnt = t, this._length = n, this._searchCache.validate(this._length);
  }
  getIndexOf(e, t) {
    const n = e.piece, r = this.positionInBuffer(e, t), s = r.line - n.start.line;
    if (this.offsetInBuffer(n.bufferIndex, n.end) - this.offsetInBuffer(n.bufferIndex, n.start) === t) {
      const o = this.getLineFeedCnt(e.piece.bufferIndex, n.start, r);
      if (o !== s)
        return { index: o, remainder: 0 };
    }
    return { index: s, remainder: r.column };
  }
  getAccumulatedValue(e, t) {
    if (t < 0)
      return 0;
    const n = e.piece, r = this._buffers[n.bufferIndex].lineStarts, s = n.start.line + t + 1;
    return s > n.end.line ? r[n.end.line] + n.end.column - r[n.start.line] - n.start.column : r[s] - r[n.start.line] - n.start.column;
  }
  deleteNodeTail(e, t) {
    const n = e.piece, r = n.lineFeedCnt, s = this.offsetInBuffer(n.bufferIndex, n.end), o = t, a = this.offsetInBuffer(n.bufferIndex, o), l = this.getLineFeedCnt(n.bufferIndex, n.start, o), c = l - r, u = a - s, d = n.length + u;
    e.piece = new en(n.bufferIndex, n.start, o, l, d), ws(this, e, u, c);
  }
  deleteNodeHead(e, t) {
    const n = e.piece, r = n.lineFeedCnt, s = this.offsetInBuffer(n.bufferIndex, n.start), o = t, a = this.getLineFeedCnt(n.bufferIndex, o, n.end), l = this.offsetInBuffer(n.bufferIndex, o), c = a - r, u = s - l, d = n.length + u;
    e.piece = new en(n.bufferIndex, o, n.end, a, d), ws(this, e, u, c);
  }
  shrinkNode(e, t, n) {
    const r = e.piece, s = r.start, o = r.end, a = r.length, l = r.lineFeedCnt, c = t, u = this.getLineFeedCnt(r.bufferIndex, r.start, c), d = this.offsetInBuffer(r.bufferIndex, t) - this.offsetInBuffer(r.bufferIndex, s);
    e.piece = new en(r.bufferIndex, r.start, c, u, d), ws(this, e, d - a, u - l);
    const f = new en(
      r.bufferIndex,
      n,
      o,
      this.getLineFeedCnt(r.bufferIndex, n, o),
      this.offsetInBuffer(r.bufferIndex, o) - this.offsetInBuffer(r.bufferIndex, n)
    ), p = this.rbInsertRight(e, f);
    this.validateCRLFWithPrevNode(p);
  }
  appendToNode(e, t) {
    this.adjustCarriageReturnFromNext(t, e) && (t += `
`);
    const n = this.shouldCheckCRLF() && this.startWithLF(t) && this.endWithCR(e), r = this._buffers[0].buffer.length;
    this._buffers[0].buffer += t;
    const s = Ds(t, !1);
    for (let p = 0; p < s.length; p++)
      s[p] += r;
    if (n) {
      const p = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];
      this._buffers[0].lineStarts.pop(), this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: r - p };
    }
    this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(s.slice(1));
    const o = this._buffers[0].lineStarts.length - 1, a = this._buffers[0].buffer.length - this._buffers[0].lineStarts[o], l = { line: o, column: a }, c = e.piece.length + t.length, u = e.piece.lineFeedCnt, d = this.getLineFeedCnt(0, e.piece.start, l), f = d - u;
    e.piece = new en(
      e.piece.bufferIndex,
      e.piece.start,
      l,
      d,
      c
    ), this._lastChangeBufferPos = l, ws(this, e, t.length, f);
  }
  nodeAt(e) {
    let t = this.root;
    const n = this._searchCache.get(e);
    if (n)
      return {
        node: n.node,
        nodeStartOffset: n.nodeStartOffset,
        remainder: e - n.nodeStartOffset
      };
    let r = 0;
    for (; t !== ve; )
      if (t.size_left > e)
        t = t.left;
      else if (t.size_left + t.piece.length >= e) {
        r += t.size_left;
        const s = {
          node: t,
          remainder: e - t.size_left,
          nodeStartOffset: r
        };
        return this._searchCache.set(s), s;
      } else
        e -= t.size_left + t.piece.length, r += t.size_left + t.piece.length, t = t.right;
    return null;
  }
  nodeAt2(e, t) {
    let n = this.root, r = 0;
    for (; n !== ve; )
      if (n.left !== ve && n.lf_left >= e - 1)
        n = n.left;
      else if (n.lf_left + n.piece.lineFeedCnt > e - 1) {
        const s = this.getAccumulatedValue(n, e - n.lf_left - 2), o = this.getAccumulatedValue(n, e - n.lf_left - 1);
        return r += n.size_left, {
          node: n,
          remainder: Math.min(s + t - 1, o),
          nodeStartOffset: r
        };
      } else if (n.lf_left + n.piece.lineFeedCnt === e - 1) {
        const s = this.getAccumulatedValue(n, e - n.lf_left - 2);
        if (s + t - 1 <= n.piece.length)
          return {
            node: n,
            remainder: s + t - 1,
            nodeStartOffset: r
          };
        t -= n.piece.length - s;
        break;
      } else
        e -= n.lf_left + n.piece.lineFeedCnt, r += n.size_left + n.piece.length, n = n.right;
    for (n = n.next(); n !== ve; ) {
      if (n.piece.lineFeedCnt > 0) {
        const s = this.getAccumulatedValue(n, 0), o = this.offsetOfNode(n);
        return {
          node: n,
          remainder: Math.min(t - 1, s),
          nodeStartOffset: o
        };
      } else if (n.piece.length >= t - 1) {
        const s = this.offsetOfNode(n);
        return {
          node: n,
          remainder: t - 1,
          nodeStartOffset: s
        };
      } else
        t -= n.piece.length;
      n = n.next();
    }
    return null;
  }
  nodeCharCodeAt(e, t) {
    if (e.piece.lineFeedCnt < 1)
      return -1;
    const n = this._buffers[e.piece.bufferIndex], r = this.offsetInBuffer(e.piece.bufferIndex, e.piece.start) + t;
    return n.buffer.charCodeAt(r);
  }
  offsetOfNode(e) {
    if (!e)
      return 0;
    let t = e.size_left;
    for (; e !== this.root; )
      e.parent.right === e && (t += e.parent.size_left + e.parent.piece.length), e = e.parent;
    return t;
  }
  shouldCheckCRLF() {
    return !(this._EOLNormalized && this._EOL === `
`);
  }
  startWithLF(e) {
    if (typeof e == "string")
      return e.charCodeAt(0) === 10;
    if (e === ve || e.piece.lineFeedCnt === 0)
      return !1;
    const t = e.piece, n = this._buffers[t.bufferIndex].lineStarts, r = t.start.line, s = n[r] + t.start.column;
    return r === n.length - 1 || n[r + 1] > s + 1 ? !1 : this._buffers[t.bufferIndex].buffer.charCodeAt(s) === 10;
  }
  endWithCR(e) {
    return typeof e == "string" ? e.charCodeAt(e.length - 1) === 13 : e === ve || e.piece.lineFeedCnt === 0 ? !1 : this.nodeCharCodeAt(e, e.piece.length - 1) === 13;
  }
  validateCRLFWithPrevNode(e) {
    if (this.shouldCheckCRLF() && this.startWithLF(e)) {
      const t = e.prev();
      this.endWithCR(t) && this.fixCRLF(t, e);
    }
  }
  validateCRLFWithNextNode(e) {
    if (this.shouldCheckCRLF() && this.endWithCR(e)) {
      const t = e.next();
      this.startWithLF(t) && this.fixCRLF(e, t);
    }
  }
  fixCRLF(e, t) {
    const n = [], r = this._buffers[e.piece.bufferIndex].lineStarts;
    let s;
    e.piece.end.column === 0 ? s = { line: e.piece.end.line - 1, column: r[e.piece.end.line] - r[e.piece.end.line - 1] - 1 } : s = { line: e.piece.end.line, column: e.piece.end.column - 1 };
    const o = e.piece.length - 1, a = e.piece.lineFeedCnt - 1;
    e.piece = new en(
      e.piece.bufferIndex,
      e.piece.start,
      s,
      a,
      o
    ), ws(this, e, -1, -1), e.piece.length === 0 && n.push(e);
    const l = { line: t.piece.start.line + 1, column: 0 }, c = t.piece.length - 1, u = this.getLineFeedCnt(t.piece.bufferIndex, l, t.piece.end);
    t.piece = new en(
      t.piece.bufferIndex,
      l,
      t.piece.end,
      u,
      c
    ), ws(this, t, -1, -1), t.piece.length === 0 && n.push(t);
    const d = this.createNewPieces(`\r
`);
    this.rbInsertRight(e, d[0]);
    for (let f = 0; f < n.length; f++)
      og(this, n[f]);
  }
  adjustCarriageReturnFromNext(e, t) {
    if (this.shouldCheckCRLF() && this.endWithCR(e)) {
      const n = t.next();
      if (this.startWithLF(n)) {
        if (e += `
`, n.piece.length === 1)
          og(this, n);
        else {
          const r = n.piece, s = { line: r.start.line + 1, column: 0 }, o = r.length - 1, a = this.getLineFeedCnt(r.bufferIndex, s, r.end);
          n.piece = new en(r.bufferIndex, s, r.end, a, o), ws(this, n, -1, -1);
        }
        return !0;
      }
    }
    return !1;
  }
  iterate(e, t) {
    if (e === ve)
      return t(ve);
    const n = this.iterate(e.left, t);
    return n && t(e) && this.iterate(e.right, t);
  }
  getNodeContent(e) {
    if (e === ve)
      return "";
    const t = this._buffers[e.piece.bufferIndex], n = e.piece, r = this.offsetInBuffer(n.bufferIndex, n.start), s = this.offsetInBuffer(n.bufferIndex, n.end);
    return t.buffer.substring(r, s);
  }
  getPieceContent(e) {
    const t = this._buffers[e.bufferIndex], n = this.offsetInBuffer(e.bufferIndex, e.start), r = this.offsetInBuffer(e.bufferIndex, e.end);
    return t.buffer.substring(n, r);
  }
  rbInsertRight(e, t) {
    const n = new oE(t, We.Red);
    if (n.left = ve, n.right = ve, n.parent = ve, n.size_left = 0, n.lf_left = 0, this.root === ve)
      this.root = n, n.color = We.Black;
    else if (e.right === ve)
      e.right = n, n.parent = e;
    else {
      const s = jS(e.right);
      s.left = n, n.parent = s;
    }
    return K4(this, n), n;
  }
  rbInsertLeft(e, t) {
    const n = new oE(t, We.Red);
    if (n.left = ve, n.right = ve, n.parent = ve, n.size_left = 0, n.lf_left = 0, this.root === ve)
      this.root = n, n.color = We.Black;
    else if (e.left === ve)
      e.left = n, n.parent = e;
    else {
      const r = sR(e.left);
      r.right = n, n.parent = r;
    }
    return K4(this, n), n;
  }
  getContentOfSubTree(e) {
    let t = "";
    return this.iterate(e, (n) => (t += this.getNodeContent(n), !0)), t;
  }
}
var qs;
(function(i) {
  i[i.Unknown = 0] = "Unknown", i[i.Invalid = 3] = "Invalid", i[i.LF = 1] = "LF", i[i.CRLF = 2] = "CRLF";
})(qs || (qs = {}));
function xw(i) {
  let e = 0, t = 0, n = 0, r = qs.Unknown;
  for (let s = 0, o = i.length; s < o; s++) {
    const a = i.charCodeAt(s);
    a === L.CarriageReturn ? (e === 0 && (t = s), e++, s + 1 < o && i.charCodeAt(s + 1) === L.LineFeed ? (r |= qs.CRLF, s++) : r |= qs.Invalid, n = s + 1) : a === L.LineFeed && (r |= qs.LF, e === 0 && (t = s), e++, n = s + 1);
  }
  return e === 0 && (t = i.length), [e, t, i.length - n, r];
}
let Ew;
function eH() {
  return Ew || (Ew = new TextDecoder("UTF-16LE")), Ew;
}
function tH(i, e, t) {
  const n = new Uint16Array(i.buffer, e, t);
  return t > 0 && (n[0] === 65279 || n[0] === 65534) ? iH(i, e, t) : eH().decode(n);
}
function iH(i, e, t) {
  const n = [];
  let r = 0;
  for (let s = 0; s < t; s++) {
    const o = OR(i, e);
    e += 2, n[r++] = String.fromCharCode(o);
  }
  return n.join("");
}
function ag(i) {
  return i.replace(/\n/g, "\\n").replace(/\r/g, "\\r");
}
class ur {
  get oldLength() {
    return this.oldText.length;
  }
  get oldEnd() {
    return this.oldPosition + this.oldText.length;
  }
  get newLength() {
    return this.newText.length;
  }
  get newEnd() {
    return this.newPosition + this.newText.length;
  }
  constructor(e, t, n, r) {
    this.oldPosition = e, this.oldText = t, this.newPosition = n, this.newText = r;
  }
  toString() {
    return this.oldText.length === 0 ? `(insert@${this.oldPosition} "${ag(this.newText)}")` : this.newText.length === 0 ? `(delete@${this.oldPosition} "${ag(this.oldText)}")` : `(replace@${this.oldPosition} "${ag(this.oldText)}" with "${ag(this.newText)}")`;
  }
  static _writeStringSize(e) {
    return 4 + 2 * e.length;
  }
  static _writeString(e, t, n) {
    const r = t.length;
    ug(e, r, n), n += 4;
    for (let s = 0; s < r; s++)
      FR(e, t.charCodeAt(s), n), n += 2;
    return n;
  }
  static _readString(e, t) {
    const n = cg(e, t);
    return t += 4, tH(e, t, n);
  }
  writeSize() {
    return 8 + ur._writeStringSize(this.oldText) + ur._writeStringSize(this.newText);
  }
  write(e, t) {
    return ug(e, this.oldPosition, t), t += 4, ug(e, this.newPosition, t), t += 4, t = ur._writeString(e, this.oldText, t), t = ur._writeString(e, this.newText, t), t;
  }
  static read(e, t, n) {
    const r = cg(e, t);
    t += 4;
    const s = cg(e, t);
    t += 4;
    const o = ur._readString(e, t);
    t += ur._writeStringSize(o);
    const a = ur._readString(e, t);
    return t += ur._writeStringSize(a), n.push(new ur(r, o, s, a)), t;
  }
}
class Oc extends xe {
  constructor(e, t, n, r, s, o, a) {
    super(), this._onDidChangeContent = this._register(new M()), this.onDidChangeContent = this._onDidChangeContent.event, this._BOM = t, this._mightContainNonBasicASCII = !o, this._mightContainRTL = r, this._mightContainUnusualLineTerminators = s, this._pieceTree = new Z$(e, n, a);
  }
  equals(e) {
    return !(e instanceof Oc) || this._BOM !== e._BOM || this.getEOL() !== e.getEOL() ? !1 : this._pieceTree.equal(e._pieceTree);
  }
  mightContainRTL() {
    return this._mightContainRTL;
  }
  mightContainUnusualLineTerminators() {
    return this._mightContainUnusualLineTerminators;
  }
  resetMightContainUnusualLineTerminators() {
    this._mightContainUnusualLineTerminators = !1;
  }
  mightContainNonBasicASCII() {
    return this._mightContainNonBasicASCII;
  }
  getBOM() {
    return this._BOM;
  }
  getEOL() {
    return this._pieceTree.getEOL();
  }
  createSnapshot(e) {
    return this._pieceTree.createSnapshot(e ? this._BOM : "");
  }
  getOffsetAt(e, t) {
    return this._pieceTree.getOffsetAt(e, t);
  }
  getPositionAt(e) {
    return this._pieceTree.getPositionAt(e);
  }
  getRangeAt(e, t) {
    const n = e + t, r = this.getPositionAt(e), s = this.getPositionAt(n);
    return new ft(
      r.lineNumber,
      r.column,
      s.lineNumber,
      s.column
    );
  }
  getValueInRange(e, t = Es.TextDefined) {
    if (e.isEmpty())
      return "";
    const n = this._getEndOfLine(t);
    return this._pieceTree.getValueInRange(e, n);
  }
  getValueLengthInRange(e, t = Es.TextDefined) {
    if (e.isEmpty())
      return 0;
    if (e.startLineNumber === e.endLineNumber)
      return e.endColumn - e.startColumn;
    const n = this.getOffsetAt(e.startLineNumber, e.startColumn), r = this.getOffsetAt(e.endLineNumber, e.endColumn);
    let s = 0;
    const o = this._getEndOfLine(t), a = this.getEOL();
    if (o.length !== a.length) {
      const l = o.length - a.length, c = e.endLineNumber - e.startLineNumber;
      s = l * c;
    }
    return r - n + s;
  }
  getCharacterCountInRange(e, t = Es.TextDefined) {
    if (this._mightContainNonBasicASCII) {
      let n = 0;
      const r = e.startLineNumber, s = e.endLineNumber;
      for (let o = r; o <= s; o++) {
        const a = this.getLineContent(o), l = o === r ? e.startColumn - 1 : 0, c = o === s ? e.endColumn - 1 : a.length;
        for (let u = l; u < c; u++)
          HE(a.charCodeAt(u)) ? (n = n + 1, u = u + 1) : n = n + 1;
      }
      return n += this._getEndOfLine(t).length * (s - r), n;
    }
    return this.getValueLengthInRange(e, t);
  }
  getNearestChunk(e) {
    return this._pieceTree.getNearestChunk(e);
  }
  getLength() {
    return this._pieceTree.getLength();
  }
  getLineCount() {
    return this._pieceTree.getLineCount();
  }
  getLinesContent() {
    return this._pieceTree.getLinesContent();
  }
  getLineContent(e) {
    return this._pieceTree.getLineContent(e);
  }
  getLineCharCode(e, t) {
    return this._pieceTree.getLineCharCode(e, t);
  }
  getCharCode(e) {
    return this._pieceTree.getCharCode(e);
  }
  getLineLength(e) {
    return this._pieceTree.getLineLength(e);
  }
  getLineMinColumn(e) {
    return 1;
  }
  getLineMaxColumn(e) {
    return this.getLineLength(e) + 1;
  }
  getLineFirstNonWhitespaceColumn(e) {
    const t = Yv(this.getLineContent(e));
    return t === -1 ? 0 : t + 1;
  }
  getLineLastNonWhitespaceColumn(e) {
    const t = V8(this.getLineContent(e));
    return t === -1 ? 0 : t + 2;
  }
  _getEndOfLine(e) {
    switch (e) {
      case Es.LF:
        return `
`;
      case Es.CRLF:
        return `\r
`;
      case Es.TextDefined:
        return this.getEOL();
      default:
        throw new Error("Unknown EOL preference");
    }
  }
  setEOL(e) {
    this._pieceTree.setEOL(e);
  }
  applyEdits(e, t, n) {
    let r = this._mightContainRTL, s = this._mightContainUnusualLineTerminators, o = this._mightContainNonBasicASCII, a = !0, l = [];
    for (let _ = 0; _ < e.length; _++) {
      const m = e[_];
      a && m._isTracked && (a = !1);
      const E = m.range;
      if (m.text) {
        let te = !0;
        o || (te = !J8(m.text), o = te), !r && te && (r = eP(m.text)), !s && te && (s = tP(m.text));
      }
      let S = "", k = 0, q = 0, B = 0;
      if (m.text) {
        let te;
        [k, q, B, te] = xw(m.text);
        const G = this.getEOL(), ae = G === `\r
` ? qs.CRLF : qs.LF;
        te === qs.Unknown || te === ae ? S = m.text : S = m.text.replace(/\r\n|\r|\n/g, G);
      }
      l[_] = {
        sortIndex: _,
        identifier: m.identifier || null,
        range: E,
        rangeOffset: this.getOffsetAt(E.startLineNumber, E.startColumn),
        rangeLength: this.getValueLengthInRange(E),
        text: S,
        eolCount: k,
        firstLineLength: q,
        lastLineLength: B,
        forceMoveMarkers: !!m.forceMoveMarkers,
        isAutoWhitespaceEdit: m.isAutoWhitespaceEdit || !1
      };
    }
    l.sort(Oc._sortOpsAscending);
    let c = !1;
    for (let _ = 0, m = l.length - 1; _ < m; _++) {
      const E = l[_].range.getEndPosition(), S = l[_ + 1].range.getStartPosition();
      if (S.isBeforeOrEqual(E)) {
        if (S.isBefore(E))
          throw new Error("Overlapping ranges are not allowed!");
        c = !0;
      }
    }
    a && (l = this._reduceOperations(l));
    const u = n || t ? Oc._getInverseEditRanges(l) : [], d = [];
    if (t)
      for (let _ = 0; _ < l.length; _++) {
        const m = l[_], E = u[_];
        if (m.isAutoWhitespaceEdit && m.range.isEmpty())
          for (let S = E.startLineNumber; S <= E.endLineNumber; S++) {
            let k = "";
            S === E.startLineNumber && (k = this.getLineContent(m.range.startLineNumber), Yv(k) !== -1) || d.push({ lineNumber: S, oldContent: k });
          }
      }
    let f = null;
    if (n) {
      let _ = 0;
      f = [];
      for (let m = 0; m < l.length; m++) {
        const E = l[m], S = u[m], k = this.getValueInRange(E.range), q = E.rangeOffset + _;
        _ += E.text.length - k.length, f[m] = {
          sortIndex: E.sortIndex,
          identifier: E.identifier,
          range: S,
          text: k,
          textChange: new ur(E.rangeOffset, k, q, E.text)
        };
      }
      c || f.sort((m, E) => m.sortIndex - E.sortIndex);
    }
    this._mightContainRTL = r, this._mightContainUnusualLineTerminators = s, this._mightContainNonBasicASCII = o;
    const p = this._doApplyEdits(l);
    let v = null;
    if (t && d.length > 0) {
      d.sort((_, m) => m.lineNumber - _.lineNumber), v = [];
      for (let _ = 0, m = d.length; _ < m; _++) {
        const E = d[_].lineNumber;
        if (_ > 0 && d[_ - 1].lineNumber === E)
          continue;
        const S = d[_].oldContent, k = this.getLineContent(E);
        k.length === 0 || k === S || Yv(k) !== -1 || v.push(E);
      }
    }
    return this._onDidChangeContent.fire(), new m9(f, p, v);
  }
  _reduceOperations(e) {
    return e.length < 1e3 ? e : [this._toSingleEditOperation(e)];
  }
  _toSingleEditOperation(e) {
    let t = !1;
    const n = e[0].range, r = e[e.length - 1].range, s = new ft(
      n.startLineNumber,
      n.startColumn,
      r.endLineNumber,
      r.endColumn
    );
    let o = n.startLineNumber, a = n.startColumn;
    const l = [];
    for (let p = 0, v = e.length; p < v; p++) {
      const _ = e[p], m = _.range;
      t = t || _.forceMoveMarkers, l.push(this.getValueInRange(new ft(o, a, m.startLineNumber, m.startColumn))), _.text.length > 0 && l.push(_.text), o = m.endLineNumber, a = m.endColumn;
    }
    const c = l.join(""), [u, d, f] = xw(c);
    return {
      sortIndex: 0,
      identifier: e[0].identifier,
      range: s,
      rangeOffset: this.getOffsetAt(s.startLineNumber, s.startColumn),
      rangeLength: this.getValueLengthInRange(s, Es.TextDefined),
      text: c,
      eolCount: u,
      firstLineLength: d,
      lastLineLength: f,
      forceMoveMarkers: t,
      isAutoWhitespaceEdit: !1
    };
  }
  _doApplyEdits(e) {
    e.sort(Oc._sortOpsDescending);
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const r = e[n], s = r.range.startLineNumber, o = r.range.startColumn, a = r.range.endLineNumber, l = r.range.endColumn;
      if (s === a && o === l && r.text.length === 0)
        continue;
      r.text ? (this._pieceTree.delete(r.rangeOffset, r.rangeLength), this._pieceTree.insert(r.rangeOffset, r.text, !0)) : this._pieceTree.delete(r.rangeOffset, r.rangeLength);
      const c = new ft(s, o, a, l);
      t.push({
        range: c,
        rangeLength: r.rangeLength,
        text: r.text,
        rangeOffset: r.rangeOffset,
        forceMoveMarkers: r.forceMoveMarkers
      });
    }
    return t;
  }
  findMatchesLineByLine(e, t, n, r) {
    return this._pieceTree.findMatchesLineByLine(e, t, n, r);
  }
  getPieceTree() {
    return this._pieceTree;
  }
  static _getInverseEditRange(e, t) {
    const n = e.startLineNumber, r = e.startColumn, [s, o, a] = xw(t);
    let l;
    if (t.length > 0) {
      const c = s + 1;
      c === 1 ? l = new ft(
        n,
        r,
        n,
        r + o
      ) : l = new ft(
        n,
        r,
        n + c - 1,
        a + 1
      );
    } else
      l = new ft(n, r, n, r);
    return l;
  }
  static _getInverseEditRanges(e) {
    const t = [];
    let n = 0, r = 0, s = null;
    for (let o = 0, a = e.length; o < a; o++) {
      const l = e[o];
      let c, u;
      s ? s.range.endLineNumber === l.range.startLineNumber ? (c = n, u = r + (l.range.startColumn - s.range.endColumn)) : (c = n + (l.range.startLineNumber - s.range.endLineNumber), u = l.range.startColumn) : (c = l.range.startLineNumber, u = l.range.startColumn);
      let d;
      if (l.text.length > 0) {
        const f = l.eolCount + 1;
        f === 1 ? d = new ft(
          c,
          u,
          c,
          u + l.firstLineLength
        ) : d = new ft(
          c,
          u,
          c + f - 1,
          l.lastLineLength + 1
        );
      } else
        d = new ft(c, u, c, u);
      n = d.endLineNumber, r = d.endColumn, t.push(d), s = l;
    }
    return t;
  }
  static _sortOpsAscending(e, t) {
    const n = ft.compareRangesUsingEnds(e.range, t.range);
    return n === 0 ? e.sortIndex - t.sortIndex : n;
  }
  static _sortOpsDescending(e, t) {
    const n = ft.compareRangesUsingEnds(e.range, t.range);
    return n === 0 ? t.sortIndex - e.sortIndex : -n;
  }
}
class nH {
  constructor(e, t, n, r, s, o, a, l, c) {
    this._chunks = e, this._bom = t, this._cr = n, this._lf = r, this._crlf = s, this._containsRTL = o, this._containsUnusualLineTerminators = a, this._isBasicASCII = l, this._normalizeEOL = c;
  }
  _getEOL(e) {
    const t = this._cr + this._lf + this._crlf, n = this._cr + this._crlf;
    return t === 0 ? e === Kh.LF ? `
` : `\r
` : n > t / 2 ? `\r
` : `
`;
  }
  create(e) {
    const t = this._getEOL(e), n = this._chunks;
    if (this._normalizeEOL && (t === `\r
` && (this._cr > 0 || this._lf > 0) || t === `
` && (this._cr > 0 || this._crlf > 0)))
      for (let s = 0, o = n.length; s < o; s++) {
        const a = n[s].buffer.replace(/\r\n|\r|\n/g, t), l = Ds(a);
        n[s] = new Ea(a, l);
      }
    const r = new Oc(
      n,
      this._bom,
      t,
      this._containsRTL,
      this._containsUnusualLineTerminators,
      this._isBasicASCII,
      this._normalizeEOL
    );
    return { textBuffer: r, disposable: r };
  }
  getFirstLineText(e) {
    return this._chunks[0].buffer.substr(0, e).split(/\r\n|\r|\n/)[0];
  }
}
class J4 {
  constructor() {
    this.chunks = [], this.BOM = "", this._hasPreviousChar = !1, this._previousChar = 0, this._tmpLineStarts = [], this.cr = 0, this.lf = 0, this.crlf = 0, this.containsRTL = !1, this.containsUnusualLineTerminators = !1, this.isBasicASCII = !0;
  }
  acceptChunk(e) {
    if (e.length === 0)
      return;
    this.chunks.length === 0 && Z8(e) && (this.BOM = X8, e = e.substr(1));
    const t = e.charCodeAt(e.length - 1);
    t === L.CarriageReturn || t >= 55296 && t <= 56319 ? (this._acceptChunk1(e.substr(0, e.length - 1), !1), this._hasPreviousChar = !0, this._previousChar = t) : (this._acceptChunk1(e, !1), this._hasPreviousChar = !1, this._previousChar = t);
  }
  _acceptChunk1(e, t) {
    !t && e.length === 0 || (this._hasPreviousChar ? this._acceptChunk2(String.fromCharCode(this._previousChar) + e) : this._acceptChunk2(e));
  }
  _acceptChunk2(e) {
    const t = J$(this._tmpLineStarts, e);
    this.chunks.push(new Ea(e, t.lineStarts)), this.cr += t.cr, this.lf += t.lf, this.crlf += t.crlf, t.isBasicASCII || (this.isBasicASCII = !1, this.containsRTL || (this.containsRTL = eP(e)), this.containsUnusualLineTerminators || (this.containsUnusualLineTerminators = tP(e)));
  }
  finish(e = !0) {
    return this._finish(), new nH(
      this.chunks,
      this.BOM,
      this.cr,
      this.lf,
      this.crlf,
      this.containsRTL,
      this.containsUnusualLineTerminators,
      this.isBasicASCII,
      e
    );
  }
  _finish() {
    if (this.chunks.length === 0 && this._acceptChunk1("", !0), this._hasPreviousChar) {
      this._hasPreviousChar = !1;
      const e = this.chunks[this.chunks.length - 1];
      e.buffer += String.fromCharCode(this._previousChar);
      const t = Ds(e.buffer);
      e.lineStarts = t, this._previousChar === L.CarriageReturn && this.cr++;
    }
  }
}
class rH extends xe {
  constructor(e, t, n) {
    super(), this._source = e, this._inputTextBuffer = t, this._outputs = n, this._outputTextBuffers = void 0;
  }
  _getFullModelRange(e) {
    const t = e.getLineCount();
    return new ft(1, 1, t, this._getLineMaxColumn(e, t));
  }
  _getLineMaxColumn(e, t) {
    if (t < 1 || t > e.getLineCount())
      throw new Error("Illegal value for lineNumber");
    return e.getLineLength(t) + 1;
  }
  get inputTextBuffer() {
    if (!this._inputTextBuffer) {
      const e = new J4();
      e.acceptChunk(this._source);
      const t = e.finish(!0), { textBuffer: n, disposable: r } = t.create(Kh.LF);
      this._inputTextBuffer = n, this._register(r);
    }
    return this._inputTextBuffer;
  }
  get outputTextBuffers() {
    return this._outputTextBuffers || (this._outputTextBuffers = this._outputs.map((e) => {
      const t = new J4();
      t.acceptChunk(e);
      const n = t.finish(!0), { textBuffer: r, disposable: s } = n.create(Kh.LF);
      return this._register(s), r;
    })), this._outputTextBuffers;
  }
  findInInputs(e) {
    const n = new AC(e, !1, !1, null).parseSearchRequest();
    if (!n)
      return [];
    const r = this._getFullModelRange(this.inputTextBuffer);
    return this.inputTextBuffer.findMatchesLineByLine(r, n, !0, 5e3);
  }
  findInOutputs(e) {
    const n = new AC(e, !1, !1, null).parseSearchRequest();
    return n ? this.outputTextBuffers.map((r) => {
      const s = r.findMatchesLineByLine(this._getFullModelRange(r), n, !0, 5e3);
      if (s.length !== 0)
        return {
          textBuffer: r,
          matches: s
        };
    }).filter((r) => !!r) : [];
  }
}
function Y4(i, e) {
  let t = -1;
  const n = [];
  let r = [];
  return i.forEach((o) => {
    o.range.startLineNumber !== t && r.length > 0 && (n.push([...r]), r = []), r.push(o), t = o.range.endLineNumber;
  }), r.length > 0 && n.push([...r]), n.map((o) => {
    const a = [], l = o[0].range.startLineNumber, c = o[o.length - 1].range.endLineNumber;
    for (let u = l; u <= c; u++)
      a.push(e.getLineContent(u));
    return new vM(a.join(`
`) + `
`, o.map((u) => new ft(
      u.range.startLineNumber - 1,
      u.range.startColumn - 1,
      u.range.endLineNumber - 1,
      u.range.endColumn - 1
    )));
  });
}
const sH = me("remoteAgentService"), oH = me("IUserDataProfilesService"), aH = Object.freeze({
  id: "workbench",
  order: 7,
  title: h(3857, "Workbench"),
  type: "object"
}), lH = Object.freeze({
  id: "security",
  scope: Ut.APPLICATION,
  title: h(3858, "Security"),
  type: "object",
  order: 7
});
Object.freeze({
  id: "problems",
  title: h(3859, "Problems"),
  type: "object",
  order: 101
});
const cH = Object.freeze({
  id: "window",
  order: 8,
  title: h(3860, "Window"),
  type: "object"
}), uH = {
  ConfigurationMigration: "base.contributions.configuration.migration"
};
class dH {
  constructor() {
    this.migrations = [], this._onDidRegisterConfigurationMigrations = new M(), this.onDidRegisterConfigurationMigration = this._onDidRegisterConfigurationMigrations.event;
  }
  registerConfigurationMigrations(e) {
    this.migrations.push(...e);
  }
}
const Fg = new dH();
ui.add(uH.ConfigurationMigration, Fg);
var vu;
let X4 = (vu = class extends xe {
  constructor(e, t) {
    super(), this.configurationService = e, this.workspaceService = t, this._register(this.workspaceService.onDidChangeWorkspaceFolders(async (n) => {
      for (const r of n.added)
        await this.migrateConfigurationsForFolder(r, Fg.migrations);
    })), this.migrateConfigurations(Fg.migrations), this._register(Fg.onDidRegisterConfigurationMigration((n) => this.migrateConfigurations(n)));
  }
  async migrateConfigurations(e) {
    await this.migrateConfigurationsForFolder(void 0, e);
    for (const t of this.workspaceService.getWorkspace().folders)
      await this.migrateConfigurationsForFolder(t, e);
  }
  async migrateConfigurationsForFolder(e, t) {
    await Promise.all([t.map(
      (n) => this.migrateConfigurationsForFolderAndOverride(n, e == null ? void 0 : e.uri)
    )]);
  }
  async migrateConfigurationsForFolderAndOverride(e, t) {
    const n = this.configurationService.inspect(e.key, { resource: t }), r = this.workspaceService.getWorkbenchState() === tm.WORKSPACE ? [
      ["user", ri.USER],
      ["userLocal", ri.USER_LOCAL],
      ["userRemote", ri.USER_REMOTE],
      ["workspace", ri.WORKSPACE],
      ["workspaceFolder", ri.WORKSPACE_FOLDER]
    ] : [
      ["user", ri.USER],
      ["userLocal", ri.USER_LOCAL],
      ["userRemote", ri.USER_REMOTE],
      ["workspace", ri.WORKSPACE]
    ];
    for (const [s, o] of r) {
      const a = n[s];
      if (!a)
        continue;
      const l = [];
      if (a.value !== void 0) {
        const c = await this.runMigration(e, s, a.value, t, void 0);
        for (const u of c ?? [])
          l.push([u, []]);
      }
      for (const { identifiers: c, value: u } of a.overrides ?? [])
        if (u !== void 0) {
          const d = await this.runMigration(e, s, u, t, c);
          for (const f of d ?? [])
            l.push([f, c]);
        }
      l.length && await Promise.allSettled(l.map(
        async ([[c, u], d]) => this.configurationService.updateValue(c, u.value, { resource: t, overrideIdentifiers: d }, o)
      ));
    }
  }
  async runMigration(e, t, n, r, s) {
    const o = (l) => {
      var d, f;
      const u = this.configurationService.inspect(l, { resource: r })[t];
      if (u)
        return s ? (f = (d = u.overrides) == null ? void 0 : d.find(({ identifiers: p }) => un(p, s))) == null ? void 0 : f.value : u.value;
    }, a = await e.migrateFn(n, o);
    return Array.isArray(a) ? a : [[e.key, a]];
  }
}, vu.ID = "workbench.contrib.configurationMigration", vu);
X4 = z([
  O(0, xv),
  O(1, IA)
], X4);
var wu;
let Z4 = (wu = class extends xe {
  constructor(e) {
    super(), this.remoteAgentService = e, this._ready = new Qo(), this.ready = this._ready.p, this.create();
  }
  async create() {
    try {
      await this.doCreate();
    } finally {
      this._ready.complete();
    }
  }
  async doCreate() {
    if (!Yi) {
      const t = await this.remoteAgentService.getEnvironment();
      if ((t == null ? void 0 : t.os) !== is.Windows)
        return;
    }
    ui.as(ec.Configuration).registerConfiguration({
      ...lH,
      properties: {
        "security.allowedUNCHosts": {
          type: "array",
          items: {
            type: "string",
            pattern: "^[^\\\\]+$",
            patternErrorMessage: h(3861, "UNC host names must not contain backslashes.")
          },
          default: [],
          markdownDescription: h(
            3862,
            "A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc."
          ),
          scope: Ut.APPLICATION_MACHINE
        },
        "security.restrictUNCAccess": {
          type: "boolean",
          default: !0,
          markdownDescription: h(
            3863,
            "If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc."
          ),
          scope: Ut.APPLICATION_MACHINE
        }
      }
    });
  }
}, wu.ID = "workbench.contrib.dynamicWorkbenchSecurityConfiguration", wu);
Z4 = z([
  O(0, sH)
], Z4);
const jd = "window.newWindowProfile";
var bu;
let eT = (bu = class extends xe {
  constructor(e, t) {
    super(), this.userDataProfilesService = e, this.configurationService = t, this.registerNewWindowProfileConfiguration(), this._register(this.userDataProfilesService.onDidChangeProfiles((n) => this.registerNewWindowProfileConfiguration())), this.setNewWindowProfile(), this.checkAndResetNewWindowProfileConfig(), this._register(t.onDidChangeConfiguration((n) => {
      n.source !== ri.DEFAULT && n.affectsConfiguration(jd) && this.setNewWindowProfile();
    })), this._register(this.userDataProfilesService.onDidChangeProfiles(() => this.checkAndResetNewWindowProfileConfig()));
  }
  registerNewWindowProfileConfiguration() {
    const e = ui.as(ec.Configuration), t = {
      ...cH,
      properties: {
        [jd]: {
          type: ["string", "null"],
          default: null,
          enum: [...this.userDataProfilesService.profiles.map((n) => n.name), null],
          enumItemLabels: [...this.userDataProfilesService.profiles.map((n) => ""), h(3864, "Active Window")],
          description: h(
            3865,
            "Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the Default profile if no active window exists."
          ),
          scope: Ut.APPLICATION
        }
      }
    };
    this.configurationNode ? e.updateConfigurations({ add: [t], remove: [this.configurationNode] }) : e.registerConfiguration(t), this.configurationNode = t;
  }
  setNewWindowProfile() {
    const e = this.configurationService.getValue(jd);
    this.newWindowProfile = e ? this.userDataProfilesService.profiles.find((t) => t.name === e) : void 0;
  }
  checkAndResetNewWindowProfileConfig() {
    const e = this.configurationService.getValue(jd);
    if (!e)
      return;
    const t = this.newWindowProfile ? this.userDataProfilesService.profiles.find((n) => n.id === this.newWindowProfile.id) : void 0;
    e !== (t == null ? void 0 : t.name) && this.configurationService.updateValue(jd, t == null ? void 0 : t.name);
  }
}, bu.ID = "workbench.contrib.dynamicWindowConfiguration", bu);
eT = z([
  O(0, oH),
  O(1, xv)
], eT);
const hH = ui.as(ec.Configuration), fH = {
  ...aH,
  properties: {
    "workbench.editorAssociations": {
      type: "object",
      markdownDescription: h(
        13014,
        'Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `"*.hex": "hexEditor.hexedit"`). These have precedence over the default behavior.'
      ),
      additionalProperties: {
        type: "string"
      }
    }
  }
};
hH.registerConfiguration(fH);
var aE;
(function(i) {
  i.builtin = "builtin", i.option = "option", i.exclusive = "exclusive", i.default = "default";
})(aE || (aE = {}));
var tT;
(function(i) {
  i[i.ABORT = 1] = "ABORT", i[i.NONE = 2] = "NONE";
})(tT || (tT = {}));
function pH(i, e) {
  if ((/* @__PURE__ */ new Set([
    fe.extension,
    fe.webviewPanel,
    fe.vscodeWorkspaceTrust,
    fe.vscodeSettings
  ])).has(e.scheme))
    return !1;
  const r = typeof i == "string" && i.indexOf(pt.sep) >= 0 ? `${e.scheme}:${e.path}` : Xs(e);
  return wh(typeof i == "string" ? i.toLowerCase() : i, r.toLowerCase());
}
const Ca = class Ca {
  get activeNotebookEditor() {
    var e;
    return (e = this._activeNotebookEditor) == null ? void 0 : e.apiEditor;
  }
  get visibleNotebookEditors() {
    return this._visibleNotebookEditors.map((e) => e.apiEditor);
  }
  constructor(e, t, n, r, s, o, a) {
    this._textDocumentsAndEditors = n, this._textDocuments = r, this._extHostFileSystem = s, this._extHostSearch = o, this._logService = a, this._notebookStatusBarItemProviders = /* @__PURE__ */ new Map(), this._documents = new mi(), this._editors = /* @__PURE__ */ new Map(), this._onDidChangeActiveNotebookEditor = new M(), this.onDidChangeActiveNotebookEditor = this._onDidChangeActiveNotebookEditor.event, this._visibleNotebookEditors = [], this._onDidOpenNotebookDocument = new M(), this.onDidOpenNotebookDocument = this._onDidOpenNotebookDocument.event, this._onDidCloseNotebookDocument = new M(), this.onDidCloseNotebookDocument = this._onDidCloseNotebookDocument.event, this._onDidChangeVisibleNotebookEditors = new M(), this.onDidChangeVisibleNotebookEditors = this._onDidChangeVisibleNotebookEditors.event, this._statusBarCache = new Hn("NotebookCellStatusBarCache"), this._handlePool = 0, this._notebookSerializer = /* @__PURE__ */ new Map(), this._notebookProxy = e.getProxy(ie.MainThreadNotebook), this._notebookDocumentsProxy = e.getProxy(ie.MainThreadNotebookDocuments), this._notebookEditorsProxy = e.getProxy(ie.MainThreadNotebookEditors), this._commandsConverter = t.converter, t.registerArgumentProcessor({
      processArgument: (l) => {
        var c;
        if (l && l.$mid === rt.NotebookCellActionContext) {
          const u = (c = l.notebookEditor) == null ? void 0 : c.notebookUri, d = l.cell.handle, f = this._documents.get(u), p = f == null ? void 0 : f.getCell(d);
          if (p)
            return p.apiCell;
        }
        if (l && l.$mid === rt.NotebookActionContext) {
          const u = l.uri, d = this._documents.get(u);
          if (d)
            return d.apiNotebook;
        }
        return l;
      }
    }), Ca._registerApiCommands(t);
  }
  getEditorById(e) {
    const t = this._editors.get(e);
    if (!t)
      throw new Error(`unknown text editor: ${e}. known editors: ${[...this._editors.keys()]} `);
    return t;
  }
  getIdByEditor(e) {
    for (const [t, n] of this._editors)
      if (n.apiEditor === e)
        return t;
  }
  get notebookDocuments() {
    return [...this._documents.values()];
  }
  getNotebookDocument(e, t) {
    const n = this._documents.get(e);
    if (!n && !t)
      throw new Error(`NO notebook document for '${e}'`);
    return n;
  }
  static _convertNotebookRegistrationData(e, t) {
    if (!t)
      return;
    const n = t.filenamePattern.map((r) => O_.from(r)).filter((r) => r !== void 0);
    if (t.filenamePattern && !n) {
      console.warn(`Notebook content provider view options file name pattern is invalid ${t.filenamePattern}`);
      return;
    }
    return {
      extension: e.identifier,
      providerDisplayName: e.displayName || e.name,
      displayName: t.displayName,
      filenamePattern: n,
      priority: t.exclusive ? aE.exclusive : void 0
    };
  }
  registerNotebookCellStatusBarItemProvider(e, t, n) {
    const r = Ca._notebookStatusBarItemProviderHandlePool++, s = typeof n.onDidChangeCellStatusBarItems == "function" ? Ca._notebookStatusBarItemProviderHandlePool++ : void 0;
    this._notebookStatusBarItemProviders.set(r, n), this._notebookProxy.$registerNotebookCellStatusBarItemProvider(r, s, t);
    let o;
    return s !== void 0 && (o = n.onDidChangeCellStatusBarItems((a) => this._notebookProxy.$emitCellStatusBarEvent(s))), new je(() => {
      this._notebookStatusBarItemProviders.delete(r), this._notebookProxy.$unregisterNotebookCellStatusBarItemProvider(r, s), o == null || o.dispose();
    });
  }
  async createNotebookDocument(e) {
    const t = await this._notebookDocumentsProxy.$tryCreateNotebook({
      viewType: e.viewType,
      content: e.content && go.from(e.content)
    });
    return x.revive(t);
  }
  async openNotebookDocument(e) {
    const t = this._documents.get(e);
    if (t)
      return t.apiNotebook;
    const n = await this._notebookDocumentsProxy.$tryOpenNotebook(e), r = this._documents.get(x.revive(n));
    return Nu(r == null ? void 0 : r.apiNotebook);
  }
  async showNotebookDocument(e, t) {
    var a;
    let n;
    typeof t == "object" ? n = {
      position: li.from(t.viewColumn),
      preserveFocus: t.preserveFocus,
      selections: t.selections && t.selections.map(ls.from),
      pinned: typeof t.preview == "boolean" ? !t.preview : void 0,
      label: typeof t.asRepl == "string" ? t.asRepl : typeof t.asRepl == "object" ? t.asRepl.label : void 0
    } : n = {
      preserveFocus: !1,
      pinned: !0
    };
    const r = t != null && t.asRepl ? "repl" : e.notebookType, s = await this._notebookEditorsProxy.$tryShowNotebookDocument(e.uri, r, n), o = s && ((a = this._editors.get(s)) == null ? void 0 : a.apiEditor);
    if (o)
      return o;
    throw s ? new Error(`Could NOT open editor for "${e.uri.toString()}" because another editor opened in the meantime.`) : new Error(`Could NOT open editor for "${e.uri.toString()}".`);
  }
  async $provideNotebookCellStatusBarItems(e, t, n, r) {
    const s = this._notebookStatusBarItemProviders.get(e), o = x.revive(t), a = this._documents.get(o);
    if (!a || !s)
      return;
    const l = a.getCellFromIndex(n);
    if (!l)
      return;
    const c = await s.provideCellStatusBarItems(l.apiCell, r);
    if (!c)
      return;
    const u = new Te(), d = this._statusBarCache.add([u]), p = (Array.isArray(c) ? c : [c]).map(
      (v) => r0.from(v, this._commandsConverter, u)
    );
    return {
      cacheId: d,
      items: p
    };
  }
  $releaseNotebookCellStatusBarItems(e) {
    this._statusBarCache.delete(e);
  }
  registerNotebookSerializer(e, t, n, r, s) {
    if (qh(t))
      throw new Error("viewType cannot be empty or just whitespace");
    const o = this._handlePool++;
    return this._notebookSerializer.set(o, { viewType: t, serializer: n, options: r }), this._notebookProxy.$registerNotebookSerializer(o, { id: e.identifier, location: e.extensionLocation }, t, o0.from(r), Ca._convertNotebookRegistrationData(e, s)), Ie(() => {
      this._notebookProxy.$unregisterNotebookSerializer(o);
    });
  }
  async $dataToNotebook(e, t, n) {
    const r = this._notebookSerializer.get(e);
    if (!r)
      throw new Error("NO serializer found");
    const s = await r.serializer.deserializeNotebook(t.buffer, n);
    return new Ki(go.from(s));
  }
  async $notebookToData(e, t, n) {
    const r = this._notebookSerializer.get(e);
    if (!r)
      throw new Error("NO serializer found");
    const s = await r.serializer.serializeNotebook(go.to(t.value), n);
    return he.wrap(s);
  }
  async $saveNotebook(e, t, n, r, s) {
    var v;
    const o = x.revive(t), a = this._notebookSerializer.get(e);
    if (this.trace(`enter saveNotebook(versionId: ${n}, ${o.toString()})`), !a)
      throw new Error("NO serializer found");
    const l = this._documents.get(o);
    if (!l)
      throw new Error("Document NOT found");
    if (l.versionId !== n)
      throw new Error(
        "Document version mismatch, expected: " + n + ", actual: " + l.versionId
      );
    if (!this._extHostFileSystem.value.isWritableFileSystem(o.scheme))
      throw new Xw(h(2631, "Unable to modify read-only file '{0}'", this._resourceForError(o)), An.FILE_PERMISSION_DENIED);
    const c = {
      metadata: B2(l.apiNotebook.metadata, (_) => {
        var m;
        return !(((m = a.options) == null ? void 0 : m.transientDocumentMetadata) ?? {})[_];
      }),
      cells: []
    };
    for (const _ of l.apiNotebook.getCells()) {
      const m = new uv(_.kind, _.document.getText(), _.document.languageId, _.mime, (v = a.options) != null && v.transientOutputs ? [] : [..._.outputs], _.metadata, _.executionSummary);
      m.metadata = B2(_.metadata, (E) => {
        var S;
        return !(((S = a.options) == null ? void 0 : S.transientCellMetadata) ?? {})[E];
      }), c.cells.push(m);
    }
    if (await this._validateWriteFile(o, r), s.isCancellationRequested)
      throw new Error("canceled");
    const u = await a.serializer.serializeNotebook(c, s);
    if (s.isCancellationRequested)
      throw new Error("canceled");
    this.trace(`serialized versionId: ${n} ${o.toString()}`), await this._extHostFileSystem.value.writeFile(o, u), this.trace(`Finished write versionId: ${n} ${o.toString()}`);
    const d = this._extHostFileSystem.getFileSystemProviderExtUri(o.scheme), f = await this._extHostFileSystem.value.stat(o), p = {
      name: d.basename(o),
      isFile: (f.type & cl.File) !== 0,
      isDirectory: (f.type & cl.Directory) !== 0,
      isSymbolicLink: (f.type & cl.SymbolicLink) !== 0,
      mtime: f.mtime,
      ctime: f.ctime,
      size: f.size,
      readonly: !!((f.permissions ?? 0) & Hu.Readonly) || !this._extHostFileSystem.value.isWritableFileSystem(o.scheme),
      locked: !!((f.permissions ?? 0) & Hu.Locked),
      etag: V2({ mtime: f.mtime, size: f.size }),
      children: void 0
    };
    return this.trace(`exit saveNotebook(versionId: ${n}, ${o.toString()})`), p;
  }
  async $searchInNotebooks(e, t, n, r, s) {
    var f;
    const o = (f = this._notebookSerializer.get(e)) == null ? void 0 : f.serializer;
    if (!o)
      return {
        limitHit: !1,
        results: []
      };
    const a = new xT();
    await (async (p, v, _) => {
      await Promise.all(p.map(async (m) => await Promise.all(m.filenamePatterns.map((E) => {
        const S = {
          _reason: _._reason,
          folderQueries: _.folderQueries,
          includePattern: _.includePattern,
          excludePattern: _.excludePattern,
          maxResults: _.maxResults,
          type: yl.File,
          filePattern: E
        };
        return this._extHostSearch.doInternalFileSearchWithCustomCallback(S, v, (k) => {
          k.forEach((q) => {
            a.has(q) || r.some((te) => m.isFromSettings && !te.isFromSettings ? !1 : te.filenamePatterns.some((G) => pH(G, q))) || a.add(q);
          });
        }).catch((k) => {
          if (k.code === "ENOENT")
            return console.warn("Could not find notebook search results, ignoring notebook results."), {
              limitHit: !1,
              messages: []
            };
          throw k;
        });
      }))));
    })(n, s, t);
    const c = new mi();
    let u = !1;
    const d = Array.from(a).map(async (p) => {
      const v = [];
      try {
        if (s.isCancellationRequested)
          return;
        if (t.maxResults && [...c.values()].reduce((S, k) => S + k.cellResults.length, 0) > t.maxResults) {
          u = !0;
          return;
        }
        const _ = [], m = this._documents.get(p);
        if (m)
          m.apiNotebook.getCells().forEach((k) => _.push({
            input: k.document.getText(),
            outputs: k.outputs.flatMap((q) => q.items.map((B) => B.data.toString()))
          }));
        else {
          const S = await this._extHostFileSystem.value.readFile(p), k = he.fromString(S.toString()), q = await o.deserializeNotebook(k.buffer, s);
          if (s.isCancellationRequested)
            return;
          go.from(q).cells.forEach((te) => _.push({
            input: te.source,
            outputs: te.outputs.flatMap((G) => G.items.map((ae) => ae.valueBytes.toString()))
          }));
        }
        if (s.isCancellationRequested)
          return;
        _.forEach((S, k) => {
          const q = t.contentPattern.pattern, B = new rH(S.input, void 0, S.outputs), te = B.findInInputs(q), G = B.findInOutputs(q), ae = G.flatMap((K) => Y4(K.matches, K.textBuffer)).map((K, Ee) => (K.webviewIndex = Ee, K));
          if (te.length > 0 || G.length > 0) {
            const K = {
              index: k,
              contentResults: Y4(te, B.inputTextBuffer),
              webviewResults: ae
            };
            v.push(K);
          }
        });
        const E = {
          resource: p,
          cellResults: v
        };
        c.set(p, E);
        return;
      } catch {
        return;
      }
    });
    return await Promise.all(d), {
      limitHit: u,
      results: [...c.values()]
    };
  }
  async _validateWriteFile(e, t) {
    const n = await this._extHostFileSystem.value.stat(e);
    if (typeof (t == null ? void 0 : t.mtime) == "number" && typeof t.etag == "string" && t.etag !== JL && typeof n.mtime == "number" && typeof n.size == "number" && t.mtime < n.mtime && t.etag !== V2({ mtime: t.mtime, size: n.size }))
      throw new Xw(h(2632, "File Modified Since"), An.FILE_MODIFIED_SINCE, t);
  }
  _resourceForError(e) {
    return e.scheme === fe.file ? e.fsPath : e.toString();
  }
  _createExtHostEditor(e, t, n) {
    if (this._editors.has(t))
      throw new Error(`editor with id ALREADY EXSIST: ${t}`);
    const r = new rp(t, this._notebookEditorsProxy, e, n.visibleRanges.map(ls.to), n.selections.map(ls.to), typeof n.viewColumn == "number" ? li.to(n.viewColumn) : void 0, n.viewType);
    this._editors.set(t, r);
  }
  $acceptDocumentAndEditorsDelta(e) {
    var t, n, r;
    if (e.value.removedDocuments)
      for (const s of e.value.removedDocuments) {
        const o = x.revive(s), a = this._documents.get(o);
        a && (a.dispose(), this._documents.delete(o), this._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ removedDocuments: a.apiNotebook.getCells().map((l) => l.document.uri) }), this._onDidCloseNotebookDocument.fire(a.apiNotebook));
        for (const l of this._editors.values())
          l.notebookData.uri.toString() === o.toString() && this._editors.delete(l.id);
      }
    if (e.value.addedDocuments) {
      const s = [];
      for (const o of e.value.addedDocuments) {
        const a = x.revive(o.uri);
        if (this._documents.has(a))
          throw new Error(`adding EXISTING notebook ${a} `);
        const l = new sE(
          this._notebookDocumentsProxy,
          this._textDocumentsAndEditors,
          this._textDocuments,
          a,
          o
        );
        s.push(...o.cells.map((c) => rE.asModelAddData(c))), (t = this._documents.get(a)) == null || t.dispose(), this._documents.set(a, l), this._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ addedDocuments: s }), this._onDidOpenNotebookDocument.fire(l.apiNotebook);
      }
    }
    if (e.value.addedEditors)
      for (const s of e.value.addedEditors) {
        if (this._editors.has(s.id))
          return;
        const o = x.revive(s.documentUri), a = this._documents.get(o);
        a && this._createExtHostEditor(a, s.id, s);
      }
    if (e.value.removedEditors)
      for (const s of e.value.removedEditors) {
        const o = this._editors.get(s);
        o && (this._editors.delete(s), ((n = this._activeNotebookEditor) == null ? void 0 : n.id) === o.id && (this._activeNotebookEditor = void 0));
      }
    if (e.value.visibleEditors) {
      this._visibleNotebookEditors = e.value.visibleEditors.map((o) => this._editors.get(o)).filter((o) => !!o);
      const s = /* @__PURE__ */ new Set();
      this._visibleNotebookEditors.forEach((o) => s.add(o.id));
      for (const o of this._editors.values()) {
        const a = s.has(o.id);
        o._acceptVisibility(a);
      }
      this._visibleNotebookEditors = [...this._editors.values()].map((o) => o).filter((o) => o.visible), this._onDidChangeVisibleNotebookEditors.fire(this.visibleNotebookEditors);
    }
    e.value.newActiveEditor === null ? this._activeNotebookEditor = void 0 : e.value.newActiveEditor && (this._editors.get(e.value.newActiveEditor) || console.error(`FAILED to find active notebook editor ${e.value.newActiveEditor}`), this._activeNotebookEditor = this._editors.get(e.value.newActiveEditor)), e.value.newActiveEditor !== void 0 && this._onDidChangeActiveNotebookEditor.fire((r = this._activeNotebookEditor) == null ? void 0 : r.apiEditor);
  }
  static _registerApiCommands(e) {
    const t = Q.String.with("notebookType", "A notebook type"), n = new Le(
      "vscode.executeDataToNotebook",
      "_executeDataToNotebook",
      "Invoke notebook serializer",
      [t, new Q(
        "data",
        "Bytes to convert to data",
        (s) => s instanceof Uint8Array,
        (s) => he.wrap(s)
      )],
      new Ce("Notebook Data", (s) => go.to(s.value))
    ), r = new Le(
      "vscode.executeNotebookToData",
      "_executeNotebookToData",
      "Invoke notebook serializer",
      [t, new Q(
        "NotebookData",
        "Notebook data to convert to bytes",
        (s) => !0,
        (s) => new Ki(go.from(s))
      )],
      new Ce("Bytes", (s) => s.buffer)
    );
    e.registerApiCommand(n), e.registerApiCommand(r);
  }
  trace(e) {
    this._logService.trace(`[Extension Host Notebook] ${e}`);
  }
};
Ca._notebookStatusBarItemProviderHandlePool = 0;
let lE = Ca;
class gH {
  constructor(e, t, n, r = { timeout: 1500, errors: 3 }) {
    this._logService = e, this._notebooksAndEditors = t, this._mainThreadBulkEdits = n, this._thresholds = r, this._onWillSaveNotebookDocumentEvent = new th();
  }
  dispose() {
  }
  getOnWillSaveNotebookDocumentEvent(e) {
    return (t, n, r) => {
      const s = function(a) {
        t.call(n, a);
      };
      return s.extension = e, this._onWillSaveNotebookDocumentEvent.event(s, void 0, r);
    };
  }
  async $participateInSave(e, t, n) {
    const r = x.revive(e), s = this._notebooksAndEditors.getNotebookDocument(r);
    if (!s)
      throw new Error("Unable to resolve notebook document");
    const o = [];
    if (await this._onWillSaveNotebookDocumentEvent.fireAsync({ notebook: s.apiNotebook, reason: R_.to(t) }, n, async (l, c) => {
      const u = Date.now(), d = await await Promise.resolve(l);
      Date.now() - u > this._thresholds.timeout && this._logService.warn("onWillSaveNotebookDocument-listener from extension", c.extension.identifier), !n.isCancellationRequested && d && (d instanceof $l ? o.push(d) : this._logService.warn("onWillSaveNotebookDocument-listener from extension", c.extension.identifier, "ignored due to invalid data"));
    }), n.isCancellationRequested)
      return !1;
    if (o.length === 0)
      return !0;
    const a = { edits: [] };
    for (const l of o) {
      const { edits: c } = kn.from(l);
      a.edits = a.edits.concat(c);
    }
    return this._mainThreadBulkEdits.$tryApplyWorkspaceEdit(new Ki(a));
  }
}
class mH {
  constructor(e) {
    this._notebooksAndEditors = e, this._onDidSaveNotebookDocument = new M(), this.onDidSaveNotebookDocument = this._onDidSaveNotebookDocument.event, this._onDidChangeNotebookDocument = new M(), this.onDidChangeNotebookDocument = this._onDidChangeNotebookDocument.event;
  }
  $acceptModelChanged(e, t, n, r) {
    const o = this._notebooksAndEditors.getNotebookDocument(x.revive(e)).acceptModelChanged(t.value, n, r);
    this._onDidChangeNotebookDocument.fire(o);
  }
  $acceptDirtyStateChanged(e, t) {
    this._notebooksAndEditors.getNotebookDocument(x.revive(e)).acceptDirty(t);
  }
  $acceptModelSaved(e) {
    const t = this._notebooksAndEditors.getNotebookDocument(x.revive(e));
    this._onDidSaveNotebookDocument.fire(t.apiNotebook);
  }
}
let cE = class {
  constructor(e, t) {
    this._logService = e, this._notebooksAndEditors = t, this._onDidChangeNotebookEditorSelection = new M(), this._onDidChangeNotebookEditorVisibleRanges = new M(), this.onDidChangeNotebookEditorSelection = this._onDidChangeNotebookEditorSelection.event, this.onDidChangeNotebookEditorVisibleRanges = this._onDidChangeNotebookEditorVisibleRanges.event;
  }
  $acceptEditorPropertiesChanged(e, t) {
    this._logService.debug("ExtHostNotebook#$acceptEditorPropertiesChanged", e, t);
    const n = this._notebooksAndEditors.getEditorById(e);
    t.visibleRanges && n._acceptVisibleRanges(t.visibleRanges.ranges.map(ls.to)), t.selections && n._acceptSelections(t.selections.selections.map(ls.to)), t.visibleRanges && this._onDidChangeNotebookEditorVisibleRanges.fire({
      notebookEditor: n.apiEditor,
      visibleRanges: n.apiEditor.visibleRanges
    }), t.selections && this._onDidChangeNotebookEditorSelection.fire(Object.freeze({
      notebookEditor: n.apiEditor,
      selections: n.apiEditor.selections
    }));
  }
  $acceptEditorViewColumns(e) {
    for (const t in e)
      this._notebooksAndEditors.getEditorById(t)._acceptViewColumn(li.to(e[t]));
  }
};
cE = z([
  O(0, ot)
], cE);
var Fc;
(function(i) {
  i[i.Output = 1] = "Output", i[i.OutputItems = 2] = "OutputItems", i[i.ExecutionState = 3] = "ExecutionState";
})(Fc || (Fc = {}));
const _H = 100;
var iT;
(function(i) {
  i[i.Disconnected = 1] = "Disconnected", i[i.Connected = 2] = "Connected", i[i.Initializing = 3] = "Initializing";
})(iT || (iT = {}));
let uE = class {
  constructor(e, t, n, r, s) {
    this._initData = t, this._extHostNotebook = n, this._commands = r, this._logService = s, this._activeExecutions = new mi(), this._activeNotebookExecutions = new mi(), this._kernelDetectionTask = /* @__PURE__ */ new Map(), this._kernelDetectionTaskHandlePool = 0, this._kernelSourceActionProviders = /* @__PURE__ */ new Map(), this._kernelSourceActionProviderHandlePool = 0, this._kernelData = /* @__PURE__ */ new Map(), this._handlePool = 0, this.id = 0, this.variableStore = {}, this._proxy = e.getProxy(ie.MainThreadNotebookKernels);
    const o = new Le(
      "notebook.selectKernel",
      "_notebook.selectKernel",
      "Trigger kernel picker for specified notebook editor widget",
      [
        new Q("options", "Select kernel options", (l) => !0, (l) => {
          if (l && "notebookEditor" in l && "id" in l) {
            const c = this._extHostNotebook.getIdByEditor(l.notebookEditor);
            return {
              id: l.id,
              extension: l.extension,
              notebookEditorId: c
            };
          } else if (l && "notebookEditor" in l) {
            const c = this._extHostNotebook.getIdByEditor(l.notebookEditor);
            if (c === void 0)
              throw new Error(
                `Cannot invoke 'notebook.selectKernel' for unrecognized notebook editor ${l.notebookEditor.notebook.uri.toString()}`
              );
            return "skipIfAlreadySelected" in l ? { notebookEditorId: c, skipIfAlreadySelected: l.skipIfAlreadySelected } : { notebookEditorId: c };
          }
          return l;
        })
      ],
      Ce.Void
    ), a = new Le(
      "vscode.executeNotebookVariableProvider",
      "_executeNotebookVariableProvider",
      "Execute notebook variable provider",
      [Q.Uri],
      new Ce("A promise that resolves to an array of variables", (l, c) => l.map((u) => ({
        variable: {
          name: u.name,
          value: u.value,
          expression: u.expression,
          type: u.type,
          language: u.language
        },
        hasNamedChildren: u.hasNamedChildren,
        indexedChildrenCount: u.indexedChildrenCount
      })))
    );
    this._commands.registerApiCommand(o), this._commands.registerApiCommand(a);
  }
  createNotebookController(e, t, n, r, s, o) {
    for (const B of this._kernelData.values())
      if (B.controller.id === t && gt.equals(e.identifier, B.extensionId))
        throw new Error(`notebook controller with id '${t}' ALREADY exist`);
    const a = this._handlePool++, l = this;
    this._logService.trace(`NotebookController[${a}], CREATED by ${e.identifier.value}, ${t}`);
    const c = () => console.warn(`NO execute handler from notebook controller '${p.id}' of extension: '${e.identifier}'`);
    let u = !1;
    const d = new M(), f = new M(), p = {
      id: lg(e.identifier, t),
      notebookType: n,
      extensionId: e.identifier,
      extensionLocation: e.extensionLocation,
      label: r || e.identifier.value,
      preloads: o ? o.map(F_.from) : []
    };
    let v = s ?? c, _, m;
    this._proxy.$addKernel(a, p).catch((B) => {
      console.log(B), u = !0;
    });
    let E = 0;
    const S = () => {
      if (u)
        return;
      const B = ++E;
      Promise.resolve().then(() => {
        B === E && this._proxy.$updateKernel(a, p);
      });
    }, k = new mi(), q = {
      get id() {
        return t;
      },
      get notebookType() {
        return p.notebookType;
      },
      onDidChangeSelectedNotebooks: d.event,
      get label() {
        return p.label;
      },
      set label(B) {
        p.label = B ?? e.displayName ?? e.name, S();
      },
      get detail() {
        return p.detail ?? "";
      },
      set detail(B) {
        p.detail = B, S();
      },
      get description() {
        return p.description ?? "";
      },
      set description(B) {
        p.description = B, S();
      },
      get supportedLanguages() {
        return p.supportedLanguages;
      },
      set supportedLanguages(B) {
        p.supportedLanguages = B, S();
      },
      get supportsExecutionOrder() {
        return p.supportsExecutionOrder ?? !1;
      },
      set supportsExecutionOrder(B) {
        p.supportsExecutionOrder = B, S();
      },
      get rendererScripts() {
        return p.preloads ? p.preloads.map(F_.to) : [];
      },
      get executeHandler() {
        return v;
      },
      set executeHandler(B) {
        v = B ?? c;
      },
      get interruptHandler() {
        return _;
      },
      set interruptHandler(B) {
        _ = B, p.supportsInterrupt = !!B, S();
      },
      set variableProvider(B) {
        H(e, "notebookVariableProvider"), m = B, p.hasVariableProvider = !!B, B == null || B.onDidChangeVariables((te) => l._proxy.$variablesUpdated(te.uri)), S();
      },
      get variableProvider() {
        return m;
      },
      createNotebookCellExecution(B) {
        if (u)
          throw new Error("notebook controller is DISPOSED");
        if (!k.has(B.notebook.uri))
          throw l._logService.trace(`NotebookController[${a}] NOT associated to notebook, associated to THESE notebooks:`, Array.from(k.keys()).map((te) => te.toString())), new Error(`notebook controller is NOT associated to notebook: ${B.notebook.uri.toString()}`);
        return l._createNotebookCellExecution(B, lg(e.identifier, this.id));
      },
      createNotebookExecution(B) {
        if (H(e, "notebookExecution"), u)
          throw new Error("notebook controller is DISPOSED");
        if (!k.has(B.uri))
          throw l._logService.trace(`NotebookController[${a}] NOT associated to notebook, associated to THESE notebooks:`, Array.from(k.keys()).map((te) => te.toString())), new Error(`notebook controller is NOT associated to notebook: ${B.uri.toString()}`);
        return l._createNotebookExecution(B, lg(e.identifier, this.id));
      },
      dispose: () => {
        u || (this._logService.trace(`NotebookController[${a}], DISPOSED`), u = !0, this._kernelData.delete(a), d.dispose(), f.dispose(), this._proxy.$removeKernel(a));
      },
      updateNotebookAffinity(B, te) {
        te === u_.Hidden && H(e, "notebookControllerAffinityHidden"), l._proxy.$updateNotebookPriority(a, B.uri, te);
      },
      onDidReceiveMessage: f.event,
      postMessage(B, te) {
        return H(e, "notebookMessaging"), l._proxy.$postMessage(a, te && l._extHostNotebook.getIdByEditor(te), B);
      },
      asWebviewUri(B) {
        return H(e, "notebookMessaging"), Ih(B, l._initData.remote);
      }
    };
    return this._kernelData.set(a, {
      extensionId: e.identifier,
      controller: q,
      onDidReceiveMessage: f,
      onDidChangeSelection: d,
      associatedNotebooks: k
    }), q;
  }
  getIdByController(e) {
    for (const [t, n] of this._kernelData)
      if (n.controller === e)
        return lg(n.extensionId, e.id);
    return null;
  }
  createNotebookControllerDetectionTask(e, t) {
    const n = this._kernelDetectionTaskHandlePool++, r = this;
    this._logService.trace(`NotebookControllerDetectionTask[${n}], CREATED by ${e.identifier.value}`), this._proxy.$addKernelDetectionTask(n, t);
    const s = {
      dispose: () => {
        this._kernelDetectionTask.delete(n), r._proxy.$removeKernelDetectionTask(n);
      }
    };
    return this._kernelDetectionTask.set(n, s), s;
  }
  registerKernelSourceActionProvider(e, t, n) {
    const r = this._kernelSourceActionProviderHandlePool++, s = typeof n.onDidChangeNotebookKernelSourceActions == "function" ? r : void 0, o = this;
    this._kernelSourceActionProviders.set(r, n), this._logService.trace(`NotebookKernelSourceActionProvider[${r}], CREATED by ${e.identifier.value}`), this._proxy.$addKernelSourceActionProvider(r, r, t);
    let a;
    return s !== void 0 && (a = n.onDidChangeNotebookKernelSourceActions((l) => this._proxy.$emitNotebookKernelSourceActionsChangeEvent(s))), {
      dispose: () => {
        this._kernelSourceActionProviders.delete(r), o._proxy.$removeKernelSourceActionProvider(r, r), a == null || a.dispose();
      }
    };
  }
  async $provideKernelSourceActions(e, t) {
    const n = this._kernelSourceActionProviders.get(e);
    if (n) {
      const r = new Te();
      return (await n.provideNotebookKernelSourceActions(t) ?? []).map(
        (o) => s0.from(o, this._commands.converter, r)
      );
    }
    return [];
  }
  $acceptNotebookAssociation(e, t, n) {
    const r = this._kernelData.get(e);
    if (r) {
      const s = this._extHostNotebook.getNotebookDocument(x.revive(t));
      n ? r.associatedNotebooks.set(s.uri, !0) : r.associatedNotebooks.delete(s.uri), this._logService.trace(`NotebookController[${e}] ASSOCIATE notebook`, s.uri.toString(), n), r.onDidChangeSelection.fire({
        selected: n,
        notebook: s.apiNotebook
      });
    }
  }
  async $executeCells(e, t, n) {
    const r = this._kernelData.get(e);
    if (!r)
      return;
    const s = this._extHostNotebook.getNotebookDocument(x.revive(t)), o = [];
    for (const a of n) {
      const l = s.getCell(a);
      l && o.push(l.apiCell);
    }
    try {
      this._logService.trace(`NotebookController[${e}] EXECUTE cells`, s.uri.toString(), o.length), await r.controller.executeHandler.call(r.controller, o, s.apiNotebook, r.controller);
    } catch (a) {
      this._logService.error(`NotebookController[${e}] execute cells FAILED`, a), console.error(a);
    }
  }
  async $cancelCells(e, t, n) {
    var o;
    const r = this._kernelData.get(e);
    if (!r)
      return;
    const s = this._extHostNotebook.getNotebookDocument(x.revive(t));
    if (r.controller.interruptHandler)
      await r.controller.interruptHandler.call(r.controller, s.apiNotebook);
    else
      for (const a of n) {
        const l = s.getCell(a);
        l && ((o = this._activeExecutions.get(l.uri)) == null || o.cancel());
      }
    if (r.controller.interruptHandler) {
      const a = this._activeNotebookExecutions.get(s.uri);
      this._activeNotebookExecutions.delete(s.uri), n.length && Array.isArray(a) && a.length && a.forEach((l) => l.dispose());
    }
  }
  async $provideVariables(e, t, n, r, s, o, a) {
    const l = this._kernelData.get(e);
    if (!l)
      return;
    const c = this._extHostNotebook.getNotebookDocument(x.revive(n)), u = l.controller.variableProvider;
    if (!u)
      return;
    let d;
    if (r !== void 0) {
      if (d = this.variableStore[r], !d)
        return;
    } else
      this.variableStore = {};
    const f = s === "named" ? If.Named : If.Indexed, p = u.provideVariables(c.apiNotebook, d, f, o, a);
    let v = 0;
    for await (const _ of p) {
      if (a.isCancellationRequested)
        return;
      const m = {
        id: this.id++,
        name: _.variable.name,
        value: _.variable.value,
        type: _.variable.type,
        interfaces: _.variable.interfaces,
        language: _.variable.language,
        expression: _.variable.expression,
        hasNamedChildren: _.hasNamedChildren,
        indexedChildrenCount: _.indexedChildrenCount,
        extensionId: l.extensionId.value
      };
      if (this.variableStore[m.id] = _.variable, this._proxy.$receiveVariable(t, m), v++ >= _H)
        return;
    }
  }
  $acceptKernelMessageFromRenderer(e, t, n) {
    const r = this._kernelData.get(e);
    if (!r)
      return;
    const s = this._extHostNotebook.getEditorById(t);
    r.onDidReceiveMessage.fire(Object.freeze({ editor: s.apiEditor, message: n }));
  }
  _createNotebookCellExecution(e, t) {
    if (e.index < 0)
      throw new Error("CANNOT execute cell that has been REMOVED from notebook");
    const r = this._extHostNotebook.getNotebookDocument(e.notebook.uri).getCellFromApiCell(e);
    if (!r)
      throw new Error("invalid cell");
    if (this._activeExecutions.has(r.uri))
      throw new Error(`duplicate execution for ${r.uri}`);
    const s = new dE(t, r, this._proxy);
    this._activeExecutions.set(r.uri, s);
    const o = s.onDidChangeState(() => {
      s.state === pr.Resolved && (s.dispose(), o.dispose(), this._activeExecutions.delete(r.uri));
    });
    return s.asApiObject();
  }
  _createNotebookExecution(e, t) {
    const n = this._extHostNotebook.getNotebookDocument(e.uri), r = e.getCells().find((a) => {
      const l = n.getCellFromApiCell(a);
      return l && this._activeExecutions.has(l.uri);
    });
    if (r)
      throw new Error(`duplicate cell execution for ${r.document.uri}`);
    if (this._activeNotebookExecutions.has(n.uri))
      throw new Error(`duplicate notebook execution for ${n.uri}`);
    const s = new hE(t, n, this._proxy), o = s.onDidChangeState(() => {
      s.state === Ls.Resolved && (s.dispose(), o.dispose(), this._activeNotebookExecutions.delete(n.uri));
    });
    return this._activeNotebookExecutions.set(n.uri, [s, o]), s.asApiObject();
  }
};
uE = z([
  O(4, ot)
], uE);
var pr;
(function(i) {
  i[i.Init = 0] = "Init", i[i.Started = 1] = "Started", i[i.Resolved = 2] = "Resolved";
})(pr || (pr = {}));
const V1 = class V1 extends xe {
  get state() {
    return this._state;
  }
  constructor(e, t, n) {
    super(), this._cell = t, this._proxy = n, this._handle = V1.HANDLE++, this._onDidChangeState = new M(), this.onDidChangeState = this._onDidChangeState.event, this._state = pr.Init, this._tokenSource = this._register(new Lt()), this._collector = new wH(10, (r) => this.update(r)), this._executionOrder = t.internalMetadata.executionOrder, this._proxy.$createExecution(this._handle, e, this._cell.notebook.uri, this._cell.handle);
  }
  cancel() {
    this._tokenSource.cancel();
  }
  async updateSoon(e) {
    await this._collector.addItem(e);
  }
  async update(e) {
    const t = Array.isArray(e) ? e : [e];
    return this._proxy.$updateExecution(this._handle, new Ki(t));
  }
  verifyStateForOutput() {
    if (this._state === pr.Init)
      throw new Error("Must call start before modifying cell output");
    if (this._state === pr.Resolved)
      throw new Error("Cannot modify cell output after calling resolve");
  }
  cellIndexToHandle(e) {
    let t = this._cell;
    if (e && (t = this._cell.notebook.getCellFromApiCell(e)), !t)
      throw new Error("INVALID cell");
    return t.handle;
  }
  validateAndConvertOutputs(e) {
    return e.map((t) => {
      const n = a_.ensureUniqueMimeTypes(t.items, !0);
      return n === t.items ? Xo.from(t) : Xo.from({
        items: n,
        id: t.id,
        metadata: t.metadata
      });
    });
  }
  async updateOutputs(e, t, n) {
    const r = this.cellIndexToHandle(t), s = this.validateAndConvertOutputs(Xn(e));
    return this.updateSoon({
      editType: Fc.Output,
      cellHandle: r,
      append: n,
      outputs: s
    });
  }
  async updateOutputItems(e, t, n) {
    return e = a_.ensureUniqueMimeTypes(Xn(e), !0), this.updateSoon({
      editType: Fc.OutputItems,
      items: e.map(ad.from),
      outputId: t.id,
      append: n
    });
  }
  asApiObject() {
    const e = this;
    return Object.freeze({
      get token() {
        return e._tokenSource.token;
      },
      get cell() {
        return e._cell.apiCell;
      },
      get executionOrder() {
        return e._executionOrder;
      },
      set executionOrder(n) {
        e._executionOrder = n, e.update([{
          editType: Fc.ExecutionState,
          executionOrder: e._executionOrder
        }]);
      },
      start(n) {
        if (e._state === pr.Resolved || e._state === pr.Started)
          throw new Error("Cannot call start again");
        e._state = pr.Started, e._onDidChangeState.fire(), e.update({
          editType: Fc.ExecutionState,
          runStartTime: n
        });
      },
      end(n, r, s) {
        if (e._state === pr.Resolved)
          throw new Error("Cannot call resolve twice");
        e._state = pr.Resolved, e._onDidChangeState.fire(), e._collector.flush();
        const o = vH(s);
        e._proxy.$completeExecution(e._handle, new Ki({
          runEndTime: r,
          lastRunSuccess: n,
          error: o
        }));
      },
      clearOutput(n) {
        return e.verifyStateForOutput(), e.updateOutputs([], n, !1);
      },
      appendOutput(n, r) {
        return e.verifyStateForOutput(), e.updateOutputs(n, r, !0);
      },
      replaceOutput(n, r) {
        return e.verifyStateForOutput(), e.updateOutputs(n, r, !1);
      },
      appendOutputItems(n, r) {
        return e.verifyStateForOutput(), e.updateOutputItems(n, r, !0);
      },
      replaceOutputItems(n, r) {
        return e.verifyStateForOutput(), e.updateOutputItems(n, r, !1);
      }
    });
  }
};
V1.HANDLE = 0;
let dE = V1;
function vH(i) {
  const e = (r) => r ? {
    startLineNumber: r.start.line,
    startColumn: r.start.character,
    endLineNumber: r.end.line,
    endColumn: r.end.character
  } : void 0, t = (r) => ({
    uri: r.uri,
    position: r.position,
    label: r.label
  });
  return i ? {
    name: i.name,
    message: i.message,
    stack: i.stack instanceof Array ? i.stack.map((r) => t(r)) : i.stack,
    location: e(i.location),
    uri: i.uri
  } : void 0;
}
var Ls;
(function(i) {
  i[i.Init = 0] = "Init", i[i.Started = 1] = "Started", i[i.Resolved = 2] = "Resolved";
})(Ls || (Ls = {}));
const z1 = class z1 extends xe {
  get state() {
    return this._state;
  }
  constructor(e, t, n) {
    super(), this._notebook = t, this._proxy = n, this._handle = z1.HANDLE++, this._onDidChangeState = new M(), this.onDidChangeState = this._onDidChangeState.event, this._state = Ls.Init, this._tokenSource = this._register(new Lt()), this._proxy.$createNotebookExecution(this._handle, e, this._notebook.uri);
  }
  cancel() {
    this._tokenSource.cancel();
  }
  asApiObject() {
    return Object.freeze({
      start: () => {
        if (this._state === Ls.Resolved || this._state === Ls.Started)
          throw new Error("Cannot call start again");
        this._state = Ls.Started, this._onDidChangeState.fire(), this._proxy.$beginNotebookExecution(this._handle);
      },
      end: () => {
        if (this._state === Ls.Resolved)
          throw new Error("Cannot call resolve twice");
        this._state = Ls.Resolved, this._onDidChangeState.fire(), this._proxy.$completeNotebookExecution(this._handle);
      }
    });
  }
};
z1.HANDLE = 0;
let hE = z1;
class wH {
  constructor(e, t) {
    this.delay = e, this.callback = t, this.batch = [], this.startedTimer = Date.now();
  }
  addItem(e) {
    return this.batch.push(e), this.currentDeferred || (this.currentDeferred = new Qo(), this.startedTimer = Date.now(), ns(this.delay).then(() => this.flush())), Date.now() - this.startedTimer > this.delay ? this.flush() : this.currentDeferred.p;
  }
  flush() {
    if (this.batch.length === 0 || !this.currentDeferred)
      return Promise.resolve();
    const e = this.currentDeferred;
    this.currentDeferred = void 0;
    const t = this.batch;
    return this.batch = [], this.callback(t).finally(() => e.complete());
  }
}
function lg(i, e) {
  return `${i.value}/${e}`;
}
class bH {
  constructor(e, t) {
    this._extHostNotebook = t, this._rendererMessageEmitters = /* @__PURE__ */ new Map(), this.proxy = e.getProxy(ie.MainThreadNotebookRenderers);
  }
  $postRendererMessage(e, t, n) {
    var s;
    const r = this._extHostNotebook.getEditorById(e);
    (s = this._rendererMessageEmitters.get(t)) == null || s.fire({ editor: r.apiEditor, message: n });
  }
  createRendererMessaging(e, t) {
    var r, s;
    if (!((s = (r = e.contributes) == null ? void 0 : r.notebookRenderer) != null && s.some((o) => o.id === t)))
      throw new Error(
        `Extensions may only call createRendererMessaging() for renderers they contribute (got ${t})`
      );
    return {
      onDidReceiveMessage: (o, a, l) => this.getOrCreateEmitterFor(t).event(o, a, l),
      postMessage: (o, a) => {
        rp.apiEditorsToExtHost.has(o) && ([o, a] = [a, o]);
        const l = a && rp.apiEditorsToExtHost.get(a);
        return this.proxy.$postMessage(l == null ? void 0 : l.id, t, o);
      }
    };
  }
  getOrCreateEmitterFor(e) {
    let t = this._rendererMessageEmitters.get(e);
    return t || (t = new M({
      onDidRemoveLastListener: () => {
        t == null || t.dispose(), this._rendererMessageEmitters.delete(e);
      }
    }), this._rendererMessageEmitters.set(e, t), t);
  }
}
class yH {
  constructor(e) {
    this.handlers = /* @__PURE__ */ new Map(), this.proxy = e.getProxy(ie.MainThreadProfileContentHandlers);
  }
  registerProfileContentHandler(e, t, n) {
    if (H(e, "profileContentHandlers"), this.handlers.has(t))
      throw new Error(`Handler with id '${t}' already registered`);
    return this.handlers.set(t, n), this.proxy.$registerProfileContentHandler(t, n.name, n.description, e.identifier.value), Ie(() => {
      this.handlers.delete(t), this.proxy.$unregisterProfileContentHandler(t);
    });
  }
  async $saveProfile(e, t, n, r) {
    const s = this.handlers.get(e);
    if (!s)
      throw new Error(`Unknown handler with id: ${e}`);
    return s.saveProfile(t, n, r);
  }
  async $readProfile(e, t, n) {
    const r = this.handlers.get(e);
    if (!r)
      throw new Error(`Unknown handler with id: ${e}`);
    return r.readProfile(st(t) ? t : x.revive(t), n);
  }
}
const q1 = class q1 {
  constructor(e, t) {
    this.uriTransformer = t, this.providers = /* @__PURE__ */ new Map(), this.proxy = e.getProxy(ie.MainThreadQuickDiff);
  }
  $provideOriginalResource(e, t, n) {
    const r = x.revive(t), s = this.providers.get(e);
    return s ? Mi(() => s.provideOriginalResource(r, n)).then((o) => o || null) : Promise.resolve(null);
  }
  registerQuickDiffProvider(e, t, n, r, s, o) {
    const a = q1.handlePool++;
    this.providers.set(a, n);
    const l = gt.toKey(e.identifier);
    return this.proxy.$registerQuickDiffProvider(a, Zu.from(t, this.uriTransformer), `${l}.${r}`, s, o), {
      dispose: () => {
        this.proxy.$unregisterQuickDiffProvider(a), this.providers.delete(a);
      }
    };
  }
};
q1.handlePool = 0;
let fE = q1;
function xH(i, e, t) {
  const n = i.getProxy(ie.MainThreadQuickOpen);
  class r {
    constructor(v, _) {
      this._sessions = /* @__PURE__ */ new Map(), this._instances = 0, this._workspace = v, this._commands = _;
    }
    showQuickPick(v, _, m, E = Dt.None) {
      this._onDidSelectItem = void 0;
      const S = Promise.resolve(_), k = ++this._instances, q = n.$show(k, {
        title: m == null ? void 0 : m.title,
        placeHolder: m == null ? void 0 : m.placeHolder,
        matchOnDescription: m == null ? void 0 : m.matchOnDescription,
        matchOnDetail: m == null ? void 0 : m.matchOnDetail,
        ignoreFocusLost: m == null ? void 0 : m.ignoreFocusOut,
        canPickMany: m == null ? void 0 : m.canPickMany
      }, E), B = {}, te = q.then(() => B);
      return Promise.race([te, S]).then((G) => {
        if (G === B)
          return;
        const ae = dt(v, "quickPickItemTooltip");
        return S.then((K) => {
          const Ee = [];
          for (let He = 0; He < K.length; He++) {
            const Re = K[He];
            if (typeof Re == "string")
              Ee.push({ label: Re, handle: He });
            else if (Re.kind === kf.Separator)
              Ee.push({ type: "separator", label: Re.label });
            else {
              Re.tooltip && !ae && console.warn(`Extension '${v.identifier.value}' uses a tooltip which is proposed API that is only available when running out of dev or with the following command line switch: --enable-proposed-api ${v.identifier.value}`);
              const Z = Re.iconPath ? c(Re.iconPath) : void 0;
              Ee.push({
                label: Re.label,
                iconPath: Z == null ? void 0 : Z.iconPath,
                iconClass: Z == null ? void 0 : Z.iconClass,
                description: Re.description,
                detail: Re.detail,
                picked: Re.picked,
                alwaysShow: Re.alwaysShow,
                tooltip: ae ? Ne.fromStrict(Re.tooltip) : void 0,
                handle: He
              });
            }
          }
          return m && typeof m.onDidSelectItem == "function" && (this._onDidSelectItem = (He) => {
            m.onDidSelectItem(K[He]);
          }), n.$setItems(k, Ee), q.then((He) => {
            if (typeof He == "number")
              return K[He];
            if (Array.isArray(He))
              return He.map((Re) => K[Re]);
          });
        });
      }).then(void 0, (G) => {
        if (!cs(G))
          return n.$setError(k, G), Promise.reject(G);
      });
    }
    $onItemSelected(v) {
      var _;
      (_ = this._onDidSelectItem) == null || _.call(this, v);
    }
    showInput(v, _ = Dt.None) {
      return this._validateInput = v == null ? void 0 : v.validateInput, n.$input(v, typeof this._validateInput == "function", _).then(void 0, (m) => {
        if (!cs(m))
          return Promise.reject(m);
      });
    }
    async $validateInput(v) {
      if (!this._validateInput)
        return;
      const _ = await this._validateInput(v);
      if (!_ || typeof _ == "string")
        return _;
      let m;
      switch (_.severity) {
        case ou.Info:
          m = Yt.Info;
          break;
        case ou.Warning:
          m = Yt.Warning;
          break;
        case ou.Error:
          m = Yt.Error;
          break;
        default:
          m = _.message ? Yt.Error : Yt.Ignore;
          break;
      }
      return {
        content: _.message,
        severity: m
      };
    }
    async showWorkspaceFolderPick(v, _ = Dt.None) {
      const m = await this._commands.executeCommand("_workbench.pickWorkspaceFolder", [v]);
      if (!m)
        return;
      const E = await this._workspace.getWorkspaceFolders2();
      if (E)
        return E.find((S) => S.uri.toString() === m.uri.toString());
    }
    createQuickPick(v) {
      const _ = new u(v, () => this._sessions.delete(_._id));
      return this._sessions.set(_._id, _), _;
    }
    createInputBox(v) {
      const _ = new d(v, () => this._sessions.delete(_._id));
      return this._sessions.set(_._id, _), _;
    }
    $onDidChangeValue(v, _) {
      const m = this._sessions.get(v);
      m == null || m._fireDidChangeValue(_);
    }
    $onDidAccept(v) {
      const _ = this._sessions.get(v);
      _ == null || _._fireDidAccept();
    }
    $onDidChangeActive(v, _) {
      const m = this._sessions.get(v);
      m instanceof u && m._fireDidChangeActive(_);
    }
    $onDidChangeSelection(v, _) {
      const m = this._sessions.get(v);
      m instanceof u && m._fireDidChangeSelection(_);
    }
    $onDidTriggerButton(v, _) {
      const m = this._sessions.get(v);
      m == null || m._fireDidTriggerButton(_);
    }
    $onDidTriggerItemButton(v, _, m) {
      const E = this._sessions.get(v);
      E instanceof u && E._fireDidTriggerItemButton(_, m);
    }
    $onDidHide(v) {
      const _ = this._sessions.get(v);
      _ == null || _._fireDidHide();
    }
  }
  const f = class f {
    constructor(v, _) {
      this._extension = v, this._onDidDispose = _, this._id = u._nextId++, this._visible = !1, this._expectingHide = !1, this._enabled = !0, this._busy = !1, this._ignoreFocusOut = !0, this._value = "", this._valueSelection = void 0, this._buttons = [], this._handlesToButtons = /* @__PURE__ */ new Map(), this._onDidAcceptEmitter = new M(), this._onDidChangeValueEmitter = new M(), this._onDidTriggerButtonEmitter = new M(), this._onDidHideEmitter = new M(), this._pendingUpdate = { id: this._id }, this._disposed = !1, this._disposables = [
        this._onDidTriggerButtonEmitter,
        this._onDidHideEmitter,
        this._onDidAcceptEmitter,
        this._onDidChangeValueEmitter
      ], this.onDidChangeValue = this._onDidChangeValueEmitter.event, this.onDidAccept = this._onDidAcceptEmitter.event, this.onDidTriggerButton = this._onDidTriggerButtonEmitter.event, this.onDidHide = this._onDidHideEmitter.event;
    }
    get title() {
      return this._title;
    }
    set title(v) {
      this._title = v, this.update({ title: v });
    }
    get step() {
      return this._steps;
    }
    set step(v) {
      this._steps = v, this.update({ step: v });
    }
    get totalSteps() {
      return this._totalSteps;
    }
    set totalSteps(v) {
      this._totalSteps = v, this.update({ totalSteps: v });
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(v) {
      this._enabled = v, this.update({ enabled: v });
    }
    get busy() {
      return this._busy;
    }
    set busy(v) {
      this._busy = v, this.update({ busy: v });
    }
    get ignoreFocusOut() {
      return this._ignoreFocusOut;
    }
    set ignoreFocusOut(v) {
      this._ignoreFocusOut = v, this.update({ ignoreFocusOut: v });
    }
    get value() {
      return this._value;
    }
    set value(v) {
      this._value = v, this.update({ value: v });
    }
    get valueSelection() {
      return this._valueSelection;
    }
    set valueSelection(v) {
      this._valueSelection = v, this.update({ valueSelection: v });
    }
    get placeholder() {
      return this._placeholder;
    }
    set placeholder(v) {
      this._placeholder = v, this.update({ placeholder: v });
    }
    get buttons() {
      return this._buttons;
    }
    set buttons(v) {
      const _ = dt(this._extension, "quickInputButtonLocation");
      !_ && v.some((m) => m.location) && console.warn(`Extension '${this._extension.identifier.value}' uses a button location which is proposed API that is only available when running out of dev or with the following command line switch: --enable-proposed-api ${this._extension.identifier.value}`), this._buttons = v.slice(), this._handlesToButtons.clear(), v.forEach((m, E) => {
        const S = m === Df.Back ? -1 : E;
        this._handlesToButtons.set(S, m);
      }), this.update({
        buttons: v.map((m, E) => ({
          ...c(m.iconPath),
          tooltip: m.tooltip,
          handle: m === Df.Back ? -1 : E,
          location: _ ? m.location : void 0
        }))
      });
    }
    show() {
      this._visible = !0, this._expectingHide = !0, this.update({ visible: !0 });
    }
    hide() {
      this._visible = !1, this.update({ visible: !1 });
    }
    _fireDidAccept() {
      this._onDidAcceptEmitter.fire();
    }
    _fireDidChangeValue(v) {
      this._value = v, this._onDidChangeValueEmitter.fire(v);
    }
    _fireDidTriggerButton(v) {
      const _ = this._handlesToButtons.get(v);
      _ && this._onDidTriggerButtonEmitter.fire(_);
    }
    _fireDidHide() {
      this._expectingHide && (this._expectingHide = this._visible, this._onDidHideEmitter.fire());
    }
    dispose() {
      this._disposed || (this._disposed = !0, this._fireDidHide(), this._disposables = Kn(this._disposables), this._updateTimeout && (clearTimeout(this._updateTimeout), this._updateTimeout = void 0), this._onDidDispose(), n.$dispose(this._id));
    }
    update(v) {
      if (!this._disposed) {
        for (const _ of Object.keys(v)) {
          const m = v[_];
          this._pendingUpdate[_] = m === void 0 ? null : m;
        }
        "visible" in this._pendingUpdate ? (this._updateTimeout && (clearTimeout(this._updateTimeout), this._updateTimeout = void 0), this.dispatchUpdate()) : this._visible && !this._updateTimeout && (this._updateTimeout = setTimeout(() => {
          this._updateTimeout = void 0, this.dispatchUpdate();
        }, 0));
      }
    }
    dispatchUpdate() {
      n.$createOrUpdate(this._pendingUpdate), this._pendingUpdate = { id: this._id };
    }
  };
  f._nextId = 1;
  let s = f;
  function o(p) {
    if (p instanceof Ji)
      return { id: p.id };
    const v = l(p), _ = a(p);
    return {
      dark: typeof v == "string" ? x.file(v) : v,
      light: typeof _ == "string" ? x.file(_) : _
    };
  }
  function a(p) {
    return typeof p == "object" && "light" in p ? p.light : p;
  }
  function l(p) {
    return typeof p == "object" && "dark" in p ? p.dark : p;
  }
  function c(p) {
    const v = o(p);
    let _, m;
    return "id" in v ? m = ci.asClassName(v) : _ = v, {
      iconPath: _,
      iconClass: m
    };
  }
  class u extends s {
    constructor(v, _) {
      super(v, _), this._items = [], this._handlesToItems = /* @__PURE__ */ new Map(), this._itemsToHandles = /* @__PURE__ */ new Map(), this._canSelectMany = !1, this._matchOnDescription = !0, this._matchOnDetail = !0, this._sortByLabel = !0, this._keepScrollPosition = !1, this._activeItems = [], this._onDidChangeActiveEmitter = new M(), this._selectedItems = [], this._onDidChangeSelectionEmitter = new M(), this._onDidTriggerItemButtonEmitter = new M(), this.onDidChangeActive = this._onDidChangeActiveEmitter.event, this.onDidChangeSelection = this._onDidChangeSelectionEmitter.event, this.onDidTriggerItemButton = this._onDidTriggerItemButtonEmitter.event, this._disposables.push(this._onDidChangeActiveEmitter, this._onDidChangeSelectionEmitter, this._onDidTriggerItemButtonEmitter), this.update({ type: "quickPick" });
    }
    get items() {
      return this._items;
    }
    set items(v) {
      var E;
      this._items = v.slice(), this._handlesToItems.clear(), this._itemsToHandles.clear(), v.forEach((S, k) => {
        this._handlesToItems.set(k, S), this._itemsToHandles.set(S, k);
      });
      const _ = dt(this._extension, "quickPickItemTooltip"), m = [];
      for (let S = 0; S < v.length; S++) {
        const k = v[S];
        if (k.kind === kf.Separator)
          m.push({ type: "separator", label: k.label });
        else {
          k.tooltip && !_ && console.warn(`Extension '${this._extension.identifier.value}' uses a tooltip which is proposed API that is only available when running out of dev or with the following command line switch: --enable-proposed-api ${this._extension.identifier.value}`);
          const q = k.iconPath ? c(k.iconPath) : void 0;
          m.push({
            handle: S,
            label: k.label,
            iconPath: q == null ? void 0 : q.iconPath,
            iconClass: q == null ? void 0 : q.iconClass,
            description: k.description,
            detail: k.detail,
            picked: k.picked,
            alwaysShow: k.alwaysShow,
            tooltip: _ ? Ne.fromStrict(k.tooltip) : void 0,
            buttons: (E = k.buttons) == null ? void 0 : E.map((B, te) => ({
              ...c(B.iconPath),
              tooltip: B.tooltip,
              handle: te
            }))
          });
        }
      }
      this.update({
        items: m
      });
    }
    get canSelectMany() {
      return this._canSelectMany;
    }
    set canSelectMany(v) {
      this._canSelectMany = v, this.update({ canSelectMany: v });
    }
    get matchOnDescription() {
      return this._matchOnDescription;
    }
    set matchOnDescription(v) {
      this._matchOnDescription = v, this.update({ matchOnDescription: v });
    }
    get matchOnDetail() {
      return this._matchOnDetail;
    }
    set matchOnDetail(v) {
      this._matchOnDetail = v, this.update({ matchOnDetail: v });
    }
    get sortByLabel() {
      return this._sortByLabel;
    }
    set sortByLabel(v) {
      this._sortByLabel = v, this.update({ sortByLabel: v });
    }
    get keepScrollPosition() {
      return this._keepScrollPosition;
    }
    set keepScrollPosition(v) {
      this._keepScrollPosition = v, this.update({ keepScrollPosition: v });
    }
    get activeItems() {
      return this._activeItems;
    }
    set activeItems(v) {
      this._activeItems = v.filter((_) => this._itemsToHandles.has(_)), this.update({ activeItems: this._activeItems.map((_) => this._itemsToHandles.get(_)) });
    }
    get selectedItems() {
      return this._selectedItems;
    }
    set selectedItems(v) {
      this._selectedItems = v.filter((_) => this._itemsToHandles.has(_)), this.update({ selectedItems: this._selectedItems.map((_) => this._itemsToHandles.get(_)) });
    }
    _fireDidChangeActive(v) {
      const _ = Xt(v.map((m) => this._handlesToItems.get(m)));
      this._activeItems = _, this._onDidChangeActiveEmitter.fire(_);
    }
    _fireDidChangeSelection(v) {
      const _ = Xt(v.map((m) => this._handlesToItems.get(m)));
      this._selectedItems = _, this._onDidChangeSelectionEmitter.fire(_);
    }
    _fireDidTriggerItemButton(v, _) {
      const m = this._handlesToItems.get(v);
      if (!m || !m.buttons || !m.buttons.length)
        return;
      const E = m.buttons[_];
      E && this._onDidTriggerItemButtonEmitter.fire({
        button: E,
        item: m
      });
    }
  }
  class d extends s {
    constructor(v, _) {
      super(v, _), this._password = !1, this.update({ type: "inputBox" });
    }
    get password() {
      return this._password;
    }
    set password(v) {
      this._password = v, this.update({ password: v });
    }
    get prompt() {
      return this._prompt;
    }
    set prompt(v) {
      this._prompt = v, this.update({ prompt: v });
    }
    get validationMessage() {
      return this._validationMessage;
    }
    set validationMessage(v) {
      this._validationMessage = v, v ? typeof v == "string" ? this.update({ validationMessage: v, severity: Yt.Error }) : this.update({ validationMessage: v.message, severity: v.severity ?? Yt.Error }) : this.update({ validationMessage: void 0, severity: Yt.Ignore });
    }
  }
  return new r(e, t);
}
const nT = new Qi(() => {
  const i = SA.Collator(void 0, { numeric: !0, sensitivity: "base" }).value;
  return {
    collator: i,
    collatorIsNumeric: i.resolvedOptions().numeric
  };
});
function EH(i, e, t = !1) {
  const n = i || "", r = e || "", s = nT.value.collator.compare(n, r);
  return nT.value.collatorIsNumeric && s === 0 && n !== r ? n < r ? -1 : 1 : s;
}
function SH(i, e, t = !1) {
  return t || (i = i && i.toLowerCase(), e = e && e.toLowerCase()), i === e ? 0 : i < e ? -1 : 1;
}
function Ug(i, e, t = !1) {
  const n = i.split(Jn), r = e.split(Jn), s = n.length - 1, o = r.length - 1;
  let a, l;
  for (let c = 0; ; c++) {
    if (a = s === c, l = o === c, a && l)
      return EH(n[c], r[c], t);
    if (a)
      return -1;
    if (l)
      return 1;
    const u = SH(n[c], r[c], t);
    if (u !== 0)
      return u;
  }
}
function rT(i) {
  return i instanceof x;
}
function DH(i, e) {
  return i.scheme === fe.file && e.scheme === fe.file && jo ? i.toString() === e.toString() : i.toString().toLowerCase() === e.toString().toLowerCase();
}
function Sw(i) {
  if (i)
    return typeof i.iconPath == "string" ? x.file(i.iconPath) : x.isUri(i.iconPath) || ci.isThemeIcon(i.iconPath) ? i.iconPath : void 0;
}
function Bo(i) {
  if (i) {
    if (x.isUri(i))
      return i;
    if (ci.isThemeIcon(i))
      return i;
    {
      const e = i;
      return { light: e.light, dark: e.dark };
    }
  } else return;
}
function kH(i) {
  var n;
  const e = Bo(i.authorIcon), t = (n = i.references) == null ? void 0 : n.map((r) => ({
    ...r,
    icon: Bo(r.icon)
  }));
  return { ...i, authorIcon: e, references: t };
}
function Dw(i) {
  return i ? { ...i, icon: Bo(i.icon) } : void 0;
}
function kw(i, e) {
  if (!i.iconPath && !e.iconPath)
    return 0;
  if (i.iconPath) {
    if (!e.iconPath)
      return 1;
  } else return -1;
  const t = typeof i.iconPath == "string" ? i.iconPath : x.isUri(i.iconPath) ? i.iconPath.fsPath : i.iconPath.id, n = typeof e.iconPath == "string" ? e.iconPath : x.isUri(e.iconPath) ? e.iconPath.fsPath : e.iconPath.id;
  return Ug(t, n);
}
function IH(i, e) {
  let t = 0;
  if (i.strikeThrough !== e.strikeThrough)
    return i.strikeThrough ? 1 : -1;
  if (i.faded !== e.faded)
    return i.faded ? 1 : -1;
  if (i.tooltip !== e.tooltip)
    return (i.tooltip || "").localeCompare(e.tooltip || "");
  if (t = kw(i, e), t !== 0)
    return t;
  if (i.light && e.light)
    t = kw(i.light, e.light);
  else {
    if (i.light)
      return 1;
    if (e.light)
      return -1;
  }
  if (t !== 0)
    return t;
  if (i.dark && e.dark)
    t = kw(i.dark, e.dark);
  else {
    if (i.dark)
      return 1;
    if (e.dark)
      return -1;
  }
  return t;
}
function CH(i, e) {
  if (i.command !== e.command)
    return i.command < e.command ? -1 : 1;
  if (i.title !== e.title)
    return i.title < e.title ? -1 : 1;
  if (i.tooltip !== e.tooltip) {
    if (i.tooltip !== void 0 && e.tooltip !== void 0)
      return i.tooltip < e.tooltip ? -1 : 1;
    if (i.tooltip !== void 0)
      return 1;
    if (e.tooltip !== void 0)
      return -1;
  }
  if (i.arguments === e.arguments)
    return 0;
  if (i.arguments)
    if (e.arguments) {
      if (i.arguments.length !== e.arguments.length)
        return i.arguments.length - e.arguments.length;
    } else return 1;
  else return -1;
  for (let t = 0; t < i.arguments.length; t++) {
    const n = i.arguments[t], r = e.arguments[t];
    if (n !== r && !(rT(n) && rT(r) && DH(n, r)))
      return n < r ? -1 : 1;
  }
  return 0;
}
function sT(i, e) {
  let t = Ug(i.resourceUri.fsPath, e.resourceUri.fsPath, !0);
  if (t !== 0)
    return t;
  if (i.command && e.command)
    t = CH(i.command, e.command);
  else {
    if (i.command)
      return 1;
    if (e.command)
      return -1;
  }
  if (t !== 0)
    return t;
  if (i.decorations && e.decorations)
    t = IH(i.decorations, e.decorations);
  else {
    if (i.decorations)
      return 1;
    if (e.decorations)
      return -1;
  }
  if (t !== 0)
    return t;
  if (i.multiFileDiffEditorModifiedUri && e.multiFileDiffEditorModifiedUri)
    t = Ug(i.multiFileDiffEditorModifiedUri.fsPath, e.multiFileDiffEditorModifiedUri.fsPath, !0);
  else {
    if (i.multiFileDiffEditorModifiedUri)
      return 1;
    if (e.multiFileDiffEditorModifiedUri)
      return -1;
  }
  if (t !== 0)
    return t;
  if (i.multiDiffEditorOriginalUri && e.multiDiffEditorOriginalUri)
    t = Ug(i.multiDiffEditorOriginalUri.fsPath, e.multiDiffEditorOriginalUri.fsPath, !0);
  else {
    if (i.multiDiffEditorOriginalUri)
      return 1;
    if (e.multiDiffEditorOriginalUri)
      return -1;
  }
  return t;
}
function TH(i, e) {
  for (let t = 0; t < i.length; t++)
    if (i[t] !== e[t])
      return !1;
  return !0;
}
function PH(i, e) {
  return i.command === e.command && i.title === e.title && i.tooltip === e.tooltip && (i.arguments && e.arguments ? TH(i.arguments, e.arguments) : i.arguments === e.arguments);
}
function AH(i, e) {
  return Fn(i, e, PH);
}
var Wr, mp;
class RH {
  constructor(e, t, n, r, s) {
    ye(this, Wr);
    ye(this, mp);
    this._extension = e, this._sourceControlHandle = r, this._documentUri = s, this._value = "", this._onDidChange = new M(), this._placeholder = "", this._enabled = !0, this._visible = !0, le(this, mp, t), le(this, Wr, n);
  }
  get value() {
    return this._value;
  }
  set value(e) {
    e = e ?? "", N(this, Wr).$setInputBoxValue(this._sourceControlHandle, e), this.updateValue(e);
  }
  get onDidChange() {
    return this._onDidChange.event;
  }
  get placeholder() {
    return this._placeholder;
  }
  set placeholder(e) {
    N(this, Wr).$setInputBoxPlaceholder(this._sourceControlHandle, e), this._placeholder = e;
  }
  get validateInput() {
    return H(this._extension, "scmValidation"), this._validateInput;
  }
  set validateInput(e) {
    if (H(this._extension, "scmValidation"), e && typeof e != "function")
      throw new Error(
        `[${this._extension.identifier.value}]: Invalid SCM input box validation function`
      );
    this._validateInput = e, N(this, Wr).$setValidationProviderIsEnabled(this._sourceControlHandle, !!e);
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(e) {
    e = !!e, this._enabled !== e && (this._enabled = e, N(this, Wr).$setInputBoxEnablement(this._sourceControlHandle, e));
  }
  get visible() {
    return this._visible;
  }
  set visible(e) {
    e = !!e, this._visible !== e && (this._visible = e, N(this, Wr).$setInputBoxVisibility(this._sourceControlHandle, e));
  }
  get document() {
    return H(this._extension, "scmTextDocument"), N(this, mp).getDocument(this._documentUri);
  }
  showValidationMessage(e, t) {
    H(this._extension, "scmValidation"), N(this, Wr).$showValidationMessage(this._sourceControlHandle, e, t);
  }
  $onInputBoxValueChange(e) {
    this.updateValue(e);
  }
  updateValue(e) {
    this._value = e, this._onDidChange.fire(e);
  }
}
Wr = new WeakMap(), mp = new WeakMap();
const j1 = class j1 {
  get disposed() {
    return this._disposed;
  }
  get id() {
    return this._id;
  }
  get label() {
    return this._label;
  }
  set label(e) {
    this._label = e, this._proxy.$updateGroupLabel(this._sourceControlHandle, this.handle, e);
  }
  get contextValue() {
    return this._contextValue;
  }
  set contextValue(e) {
    this._contextValue = e, this._proxy.$updateGroup(this._sourceControlHandle, this.handle, this.features);
  }
  get hideWhenEmpty() {
    return this._hideWhenEmpty;
  }
  set hideWhenEmpty(e) {
    this._hideWhenEmpty = e, this._proxy.$updateGroup(this._sourceControlHandle, this.handle, this.features);
  }
  get features() {
    return {
      contextValue: this.contextValue,
      hideWhenEmpty: this.hideWhenEmpty
    };
  }
  get resourceStates() {
    return [...this._resourceStates];
  }
  set resourceStates(e) {
    this._resourceStates = [...e], this._onDidUpdateResourceStates.fire();
  }
  constructor(e, t, n, r, s, o, a) {
    this._proxy = e, this._commands = t, this._sourceControlHandle = n, this._id = r, this._label = s, this.multiDiffEditorEnableViewChanges = o, this._extension = a, this._resourceHandlePool = 0, this._resourceStates = [], this._resourceStatesMap = /* @__PURE__ */ new Map(), this._resourceStatesCommandsMap = /* @__PURE__ */ new Map(), this._resourceStatesDisposablesMap = /* @__PURE__ */ new Map(), this._onDidUpdateResourceStates = new M(), this.onDidUpdateResourceStates = this._onDidUpdateResourceStates.event, this._disposed = !1, this._onDidDispose = new M(), this.onDidDispose = this._onDidDispose.event, this._handlesSnapshot = [], this._resourceSnapshot = [], this._contextValue = void 0, this._hideWhenEmpty = void 0, this.handle = j1._handlePool++;
  }
  getResourceState(e) {
    return this._resourceStatesMap.get(e);
  }
  $executeResourceCommand(e, t) {
    const n = this._resourceStatesCommandsMap.get(e);
    return n ? Mi(() => this._commands.executeCommand(n.command, ...n.arguments || [], t)) : Promise.resolve(void 0);
  }
  _takeResourceStateSnapshot() {
    var o;
    const e = [...this._resourceStates].sort(sT), n = yT(this._resourceSnapshot, e, sT).map((a) => {
      const l = a.toInsert.map((c) => {
        const u = this._resourceHandlePool++;
        this._resourceStatesMap.set(u, c);
        const d = c.resourceUri;
        let f;
        if (c.command)
          if (c.command.command === "vscode.open" || c.command.command === "vscode.diff" || c.command.command === "vscode.changes") {
            const K = new Te();
            f = this._commands.converter.toInternal(c.command, K), this._resourceStatesDisposablesMap.set(u, K);
          } else
            this._resourceStatesCommandsMap.set(u, c.command);
        const p = dt(this._extension, "scmMultiDiffEditor"), v = p ? c.multiDiffEditorOriginalUri : void 0, _ = p ? c.multiFileDiffEditorModifiedUri : void 0, m = Sw(c.decorations), E = c.decorations && Sw(c.decorations.light) || m, S = c.decorations && Sw(c.decorations.dark) || m, k = [E, S], q = c.decorations && c.decorations.tooltip || "", B = c.decorations && !!c.decorations.strikeThrough, te = c.decorations && !!c.decorations.faded, G = c.contextValue || "";
        return { rawResource: [u, d, k, q, B, te, G, f, v, _], handle: u };
      });
      return { start: a.start, deleteCount: a.deleteCount, toInsert: l };
    }), r = n.map(({ start: a, deleteCount: l, toInsert: c }) => [a, l, c.map((u) => u.rawResource)]), s = n.reverse();
    for (const { start: a, deleteCount: l, toInsert: c } of s) {
      const u = c.map((f) => f.handle), d = this._handlesSnapshot.splice(a, l, ...u);
      for (const f of d)
        this._resourceStatesMap.delete(f), this._resourceStatesCommandsMap.delete(f), (o = this._resourceStatesDisposablesMap.get(f)) == null || o.dispose(), this._resourceStatesDisposablesMap.delete(f);
    }
    return this._resourceSnapshot = e, r;
  }
  dispose() {
    this._disposed = !0, this._onDidDispose.fire();
  }
};
j1._handlePool = 0;
let pE = j1;
var ii;
const G1 = class G1 {
  constructor(e, t, n, r, s, o, a, l, c) {
    ye(this, ii);
    this._extension = e, this._commands = r, this._id = s, this._label = o, this._rootUri = a, this._onDidDispose = new M(), this.onDidDispose = this._onDidDispose.event, this._groups = /* @__PURE__ */ new Map(), this._contextValue = void 0, this._count = void 0, this._quickDiffProvider = void 0, this._secondaryQuickDiffProvider = void 0, this._historyProviderDisposable = new $s(), this._commitTemplate = void 0, this._acceptInputDisposables = new $s(), this._acceptInputCommand = void 0, this._actionButtonDisposables = new $s(), this._statusBarDisposables = new $s(), this._statusBarCommands = void 0, this._selected = !1, this._onDidChangeSelection = new M(), this.onDidChangeSelection = this._onDidChangeSelection.event, this.handle = G1._handlePool++, this.createdResourceGroups = /* @__PURE__ */ new Map(), this.updatedResourceGroups = /* @__PURE__ */ new Set(), le(this, ii, n);
    const u = x.from({
      scheme: fe.vscodeSourceControl,
      path: `${s}/scm${this.handle}/input`,
      query: a ? `rootUri=${encodeURIComponent(a.toString())}` : void 0
    });
    this._inputBox = new RH(
      e,
      t,
      N(this, ii),
      this.handle,
      u
    ), N(this, ii).$registerSourceControl(this.handle, c == null ? void 0 : c.handle, s, o, a, Bo(l), u), this.onDidDisposeParent = c ? c.onDidDispose : Pt.None;
  }
  get id() {
    return this._id;
  }
  get label() {
    return this._label;
  }
  get rootUri() {
    return this._rootUri;
  }
  get contextValue() {
    return H(this._extension, "scmProviderOptions"), this._contextValue;
  }
  set contextValue(e) {
    H(this._extension, "scmProviderOptions"), this._contextValue !== e && (this._contextValue = e, N(this, ii).$updateSourceControl(this.handle, { contextValue: e }));
  }
  get inputBox() {
    return this._inputBox;
  }
  get count() {
    return this._count;
  }
  set count(e) {
    this._count !== e && (this._count = e, N(this, ii).$updateSourceControl(this.handle, { count: e }));
  }
  get quickDiffProvider() {
    return this._quickDiffProvider;
  }
  set quickDiffProvider(e) {
    this._quickDiffProvider = e;
    let t;
    dt(this._extension, "quickDiffProvider") && (t = e == null ? void 0 : e.label), N(this, ii).$updateSourceControl(this.handle, { hasQuickDiffProvider: !!e, quickDiffLabel: t });
  }
  get secondaryQuickDiffProvider() {
    return H(this._extension, "quickDiffProvider"), this._secondaryQuickDiffProvider;
  }
  set secondaryQuickDiffProvider(e) {
    H(this._extension, "quickDiffProvider"), this._secondaryQuickDiffProvider = e;
    const t = e == null ? void 0 : e.label;
    N(this, ii).$updateSourceControl(this.handle, { hasSecondaryQuickDiffProvider: !!e, secondaryQuickDiffLabel: t });
  }
  get historyProvider() {
    return H(this._extension, "scmHistoryProvider"), this._historyProvider;
  }
  set historyProvider(e) {
    H(this._extension, "scmHistoryProvider"), this._historyProvider = e, this._historyProviderDisposable.value = new Te(), N(this, ii).$updateSourceControl(this.handle, { hasHistoryProvider: !!e }), e && (this._historyProviderDisposable.value.add(e.onDidChangeCurrentHistoryItemRefs(() => {
      const t = Dw(e == null ? void 0 : e.currentHistoryItemRef), n = Dw(e == null ? void 0 : e.currentHistoryItemRemoteRef), r = Dw(e == null ? void 0 : e.currentHistoryItemBaseRef);
      N(this, ii).$onDidChangeHistoryProviderCurrentHistoryItemRefs(this.handle, t, n, r);
    })), this._historyProviderDisposable.value.add(e.onDidChangeHistoryItemRefs((t) => {
      if (t.added.length === 0 && t.modified.length === 0 && t.removed.length === 0)
        return;
      const n = t.added.map((o) => ({ ...o, icon: Bo(o.icon) })), r = t.modified.map((o) => ({ ...o, icon: Bo(o.icon) })), s = t.removed.map((o) => ({ ...o, icon: Bo(o.icon) }));
      N(this, ii).$onDidChangeHistoryProviderHistoryItemRefs(this.handle, { added: n, modified: r, removed: s, silent: t.silent });
    })));
  }
  get commitTemplate() {
    return this._commitTemplate;
  }
  set commitTemplate(e) {
    e !== this._commitTemplate && (this._commitTemplate = e, N(this, ii).$updateSourceControl(this.handle, { commitTemplate: e }));
  }
  get acceptInputCommand() {
    return this._acceptInputCommand;
  }
  set acceptInputCommand(e) {
    this._acceptInputDisposables.value = new Te(), this._acceptInputCommand = e;
    const t = this._commands.converter.toInternal(e, this._acceptInputDisposables.value);
    N(this, ii).$updateSourceControl(this.handle, { acceptInputCommand: t });
  }
  get actionButton() {
    return H(this._extension, "scmActionButton"), this._actionButton;
  }
  set actionButton(e) {
    var n;
    if (H(this._extension, "scmActionButton"), Oy(this._actionButton, e))
      return;
    this._actionButton = e, this._actionButtonDisposables.value = new Te();
    const t = e !== void 0 ? {
      command: {
        ...this._commands.converter.toInternal(e.command, this._actionButtonDisposables.value),
        shortTitle: e.command.shortTitle
      },
      secondaryCommands: (n = e.secondaryCommands) == null ? void 0 : n.map((r) => r.map(
        (s) => this._commands.converter.toInternal(s, this._actionButtonDisposables.value)
      )),
      enabled: e.enabled
    } : void 0;
    N(this, ii).$updateSourceControl(this.handle, { actionButton: t ?? null });
  }
  get statusBarCommands() {
    return this._statusBarCommands;
  }
  set statusBarCommands(e) {
    if (this._statusBarCommands && e && AH(this._statusBarCommands, e))
      return;
    this._statusBarDisposables.value = new Te(), this._statusBarCommands = e;
    const t = (e || []).map(
      (n) => this._commands.converter.toInternal(n, this._statusBarDisposables.value)
    );
    N(this, ii).$updateSourceControl(this.handle, { statusBarCommands: t });
  }
  get selected() {
    return this._selected;
  }
  createResourceGroup(e, t, n) {
    const r = dt(this._extension, "scmMultiDiffEditor") && (n == null ? void 0 : n.multiDiffEditorEnableViewChanges) === !0, s = new pE(
      N(this, ii),
      this._commands,
      this.handle,
      e,
      t,
      r,
      this._extension
    ), o = Pt.once(s.onDidDispose)(() => this.createdResourceGroups.delete(s));
    return this.createdResourceGroups.set(s, o), this.eventuallyAddResourceGroups(), s;
  }
  eventuallyAddResourceGroups() {
    const e = [], t = [];
    for (const [n, r] of this.createdResourceGroups) {
      r.dispose();
      const s = n.onDidUpdateResourceStates(() => {
        this.updatedResourceGroups.add(n), this.eventuallyUpdateResourceStates();
      });
      Pt.once(n.onDidDispose)(() => {
        this.updatedResourceGroups.delete(n), s.dispose(), this._groups.delete(n.handle), N(this, ii).$unregisterGroup(this.handle, n.handle);
      }), e.push([n.handle, n.id, n.label, n.features, n.multiDiffEditorEnableViewChanges]);
      const o = n._takeResourceStateSnapshot();
      o.length > 0 && t.push([n.handle, o]), this._groups.set(n.handle, n);
    }
    N(this, ii).$registerGroups(this.handle, e, t), this.createdResourceGroups.clear();
  }
  eventuallyUpdateResourceStates() {
    const e = [];
    this.updatedResourceGroups.forEach((t) => {
      const n = t._takeResourceStateSnapshot();
      n.length !== 0 && e.push([t.handle, n]);
    }), e.length > 0 && N(this, ii).$spliceResourceStates(this.handle, e), this.updatedResourceGroups.clear();
  }
  getResourceGroup(e) {
    return this._groups.get(e);
  }
  setSelectionState(e) {
    this._selected = e, this._onDidChangeSelection.fire(e);
  }
  dispose() {
    this._acceptInputDisposables.dispose(), this._actionButtonDisposables.dispose(), this._statusBarDisposables.dispose(), this._groups.forEach((e) => e.dispose()), N(this, ii).$unregisterSourceControl(this.handle), this._onDidDispose.fire(), this._onDidDispose.dispose();
  }
};
ii = new WeakMap(), G1._handlePool = 0;
let jl = G1;
jl.__decorator = z([
  EA(100)
], jl.prototype, "eventuallyAddResourceGroups", null);
jl.__decorator = z([
  EA(100)
], jl.prototype, "eventuallyUpdateResourceStates", null);
let gE = class {
  get onDidChangeActiveProvider() {
    return this._onDidChangeActiveProvider.event;
  }
  constructor(e, t, n, r) {
    this._commands = t, this._extHostDocuments = n, this.logService = r, this._sourceControls = /* @__PURE__ */ new Map(), this._sourceControlsByExtension = new Ko(), this._onDidChangeActiveProvider = new M(), this._proxy = e.getProxy(ie.MainThreadSCM), this._telemetry = e.getProxy(ie.MainThreadTelemetry), t.registerArgumentProcessor({
      processArgument: (s) => {
        if (s && s.$mid === rt.ScmResource) {
          const o = this._sourceControls.get(s.sourceControlHandle);
          if (!o)
            return s;
          const a = o.getResourceGroup(s.groupHandle);
          return a ? a.getResourceState(s.handle) : s;
        } else if (s && s.$mid === rt.ScmResourceGroup) {
          const o = this._sourceControls.get(s.sourceControlHandle);
          return o ? o.getResourceGroup(s.groupHandle) : s;
        } else if (s && s.$mid === rt.ScmProvider) {
          const o = this._sourceControls.get(s.handle);
          return o || s;
        }
        return s;
      }
    });
  }
  createSourceControl(e, t, n, r, s, o) {
    this.logService.trace("ExtHostSCM#createSourceControl", e.identifier.value, t, n, r), this._telemetry.$publicLog2("api/scm/createSourceControl", {
      extensionId: e.identifier.value
    });
    const a = o ? Bi.find(this._sourceControls.values(), (u) => u === o) : void 0, l = new jl(
      e,
      this._extHostDocuments,
      this._proxy,
      this._commands,
      t,
      n,
      r,
      s,
      a
    );
    this._sourceControls.set(l.handle, l);
    const c = this._sourceControlsByExtension.get(e.identifier) || [];
    return c.push(l), this._sourceControlsByExtension.set(e.identifier, c), l;
  }
  getLastInputBox(e) {
    this.logService.trace("ExtHostSCM#getLastInputBox", e.identifier.value);
    const t = this._sourceControlsByExtension.get(e.identifier), n = t && t[t.length - 1];
    return n && n.inputBox;
  }
  $provideOriginalResource(e, t, n) {
    const r = x.revive(t);
    this.logService.trace("ExtHostSCM#$provideOriginalResource", e, r.toString());
    const s = this._sourceControls.get(e);
    return !s || !s.quickDiffProvider || !s.quickDiffProvider.provideOriginalResource ? Promise.resolve(null) : Mi(() => s.quickDiffProvider.provideOriginalResource(r, n)).then((o) => o || null);
  }
  $provideSecondaryOriginalResource(e, t, n) {
    const r = x.revive(t);
    this.logService.trace("ExtHostSCM#$provideSecondaryOriginalResource", e, r.toString());
    const s = this._sourceControls.get(e);
    return !s || !s.secondaryQuickDiffProvider || !s.secondaryQuickDiffProvider.provideOriginalResource ? Promise.resolve(null) : Mi(() => s.secondaryQuickDiffProvider.provideOriginalResource(r, n)).then((o) => o || null);
  }
  $onInputBoxValueChange(e, t) {
    this.logService.trace("ExtHostSCM#$onInputBoxValueChange", e);
    const n = this._sourceControls.get(e);
    return n && n.inputBox.$onInputBoxValueChange(t), Promise.resolve(void 0);
  }
  $executeResourceCommand(e, t, n, r) {
    this.logService.trace("ExtHostSCM#$executeResourceCommand", e, t, n);
    const s = this._sourceControls.get(e);
    if (!s)
      return Promise.resolve(void 0);
    const o = s.getResourceGroup(t);
    return o ? o.$executeResourceCommand(n, r) : Promise.resolve(void 0);
  }
  $validateInput(e, t, n) {
    this.logService.trace("ExtHostSCM#$validateInput", e);
    const r = this._sourceControls.get(e);
    return !r || !r.inputBox.validateInput ? Promise.resolve(void 0) : Mi(() => r.inputBox.validateInput(t, n)).then((s) => {
      if (!s)
        return Promise.resolve(void 0);
      const o = Ne.fromStrict(s.message);
      return o ? Promise.resolve([o, s.type]) : Promise.resolve(void 0);
    });
  }
  $setSelectedSourceControl(e) {
    var t, n;
    return this.logService.trace("ExtHostSCM#$setSelectedSourceControl", e), e !== void 0 && ((t = this._sourceControls.get(e)) == null || t.setSelectionState(!0)), this._selectedSourceControlHandle !== void 0 && ((n = this._sourceControls.get(this._selectedSourceControlHandle)) == null || n.setSelectionState(!1)), this._selectedSourceControlHandle = e, Promise.resolve(void 0);
  }
  async $resolveHistoryItemChatContext(e, t, n) {
    var r;
    try {
      const s = (r = this._sourceControls.get(e)) == null ? void 0 : r.historyProvider;
      return await (s == null ? void 0 : s.resolveHistoryItemChatContext(t, n)) ?? void 0;
    } catch (s) {
      this.logService.error("ExtHostSCM#$resolveHistoryItemChatContext", s);
      return;
    }
  }
  async $resolveHistoryItemRefsCommonAncestor(e, t, n) {
    var r;
    try {
      const s = (r = this._sourceControls.get(e)) == null ? void 0 : r.historyProvider;
      return await (s == null ? void 0 : s.resolveHistoryItemRefsCommonAncestor(t, n)) ?? void 0;
    } catch (s) {
      this.logService.error("ExtHostSCM#$resolveHistoryItemRefsCommonAncestor", s);
      return;
    }
  }
  async $provideHistoryItemRefs(e, t, n) {
    var r;
    try {
      const s = (r = this._sourceControls.get(e)) == null ? void 0 : r.historyProvider, o = await (s == null ? void 0 : s.provideHistoryItemRefs(t, n));
      return (o == null ? void 0 : o.map((a) => ({ ...a, icon: Bo(a.icon) }))) ?? void 0;
    } catch (s) {
      this.logService.error("ExtHostSCM#$provideHistoryItemRefs", s);
      return;
    }
  }
  async $provideHistoryItems(e, t, n) {
    var r;
    try {
      const s = (r = this._sourceControls.get(e)) == null ? void 0 : r.historyProvider, o = await (s == null ? void 0 : s.provideHistoryItems(t, n));
      return (o == null ? void 0 : o.map((a) => kH(a))) ?? void 0;
    } catch (s) {
      this.logService.error("ExtHostSCM#$provideHistoryItems", s);
      return;
    }
  }
  async $provideHistoryItemChanges(e, t, n, r) {
    var s;
    try {
      const o = (s = this._sourceControls.get(e)) == null ? void 0 : s.historyProvider;
      return await (o == null ? void 0 : o.provideHistoryItemChanges(t, n, r)) ?? void 0;
    } catch (o) {
      this.logService.error("ExtHostSCM#$provideHistoryItemChanges", o);
      return;
    }
  }
};
gE = z([
  O(3, ot)
], gE);
const Q1 = class Q1 {
  constructor(e, t) {
    this.uriTransformer = t, this.providers = /* @__PURE__ */ new Map(), this.proxy = e.getProxy(ie.MainThreadShare);
  }
  async $provideShare(e, t, n) {
    const r = this.providers.get(e);
    return await (r == null ? void 0 : r.provideShare({ selection: j.to(t.selection), resourceUri: x.revive(t.resourceUri) }, n)) ?? void 0;
  }
  registerShareProvider(e, t) {
    const n = Q1.handlePool++;
    return this.providers.set(n, t), this.proxy.$registerShareProvider(n, Zu.from(e, this.uriTransformer), t.id, t.label, t.priority), {
      dispose: () => {
        this.proxy.$unregisterShareProvider(n), this.providers.delete(n);
      }
    };
  }
};
Q1.handlePool = 0;
let mE = Q1;
const K1 = class K1 {
  constructor(e) {
    this.providers = /* @__PURE__ */ new Map(), this.sessions = /* @__PURE__ */ new Map(), this.synthesizers = /* @__PURE__ */ new Map(), this.proxy = e.getProxy(ie.MainThreadSpeech);
  }
  async $createSpeechToTextSession(e, t, n) {
    const r = this.providers.get(e);
    if (!r)
      return;
    const s = new Te(), o = new Lt();
    this.sessions.set(t, o);
    const a = await r.provideSpeechToTextSession(o.token, n ? { language: n } : void 0);
    a && (s.add(a.onDidChange((l) => {
      o.token.isCancellationRequested || this.proxy.$emitSpeechToTextEvent(t, l);
    })), s.add(o.token.onCancellationRequested(() => s.dispose())));
  }
  async $cancelSpeechToTextSession(e) {
    var t;
    (t = this.sessions.get(e)) == null || t.dispose(!0), this.sessions.delete(e);
  }
  async $createTextToSpeechSession(e, t, n) {
    const r = this.providers.get(e);
    if (!r)
      return;
    const s = new Te(), o = new Lt();
    this.sessions.set(t, o);
    const a = await r.provideTextToSpeechSession(o.token, n ? { language: n } : void 0);
    a && (this.synthesizers.set(t, a), s.add(a.onDidChange((l) => {
      o.token.isCancellationRequested || this.proxy.$emitTextToSpeechEvent(t, l);
    })), s.add(o.token.onCancellationRequested(() => s.dispose())));
  }
  async $synthesizeSpeech(e, t) {
    var n;
    (n = this.synthesizers.get(e)) == null || n.synthesize(t);
  }
  async $cancelTextToSpeechSession(e) {
    var t;
    (t = this.sessions.get(e)) == null || t.dispose(!0), this.sessions.delete(e), this.synthesizers.delete(e);
  }
  async $createKeywordRecognitionSession(e, t) {
    const n = this.providers.get(e);
    if (!n)
      return;
    const r = new Te(), s = new Lt();
    this.sessions.set(t, s);
    const o = await n.provideKeywordRecognitionSession(s.token);
    o && (r.add(o.onDidChange((a) => {
      s.token.isCancellationRequested || this.proxy.$emitKeywordRecognitionEvent(t, a);
    })), r.add(s.token.onCancellationRequested(() => r.dispose())));
  }
  async $cancelKeywordRecognitionSession(e) {
    var t;
    (t = this.sessions.get(e)) == null || t.dispose(!0), this.sessions.delete(e);
  }
  registerProvider(e, t, n) {
    const r = K1.ID_POOL++;
    return this.providers.set(r, n), this.proxy.$registerProvider(r, t, { extension: e, displayName: e.value }), Ie(() => {
      this.proxy.$unregisterProvider(r), this.providers.delete(r);
    });
  }
};
K1.ID_POOL = 1;
let _E = K1;
var yu, xu;
const Ta = class Ta {
  constructor(e, t, n, r, s, o = Mo.Left, a, l) {
    ye(this, yu);
    ye(this, xu);
    if (this._onDispose = l, this._disposed = !1, this._text = "", this._staleCommandRegistrations = new Te(), le(this, yu, e), le(this, xu, t), s && r) {
      this._entryId = mN(r.identifier, s);
      const c = n.get(this._entryId);
      c && (o = c.alignLeft ? Mo.Left : Mo.Right, a = c.priority, this._visible = !0, this.name = c.name, this.text = c.text, this.tooltip = c.tooltip, this.command = c.command, this.accessibilityInformation = c.accessibilityInformation);
    } else
      this._entryId = String(Ta.ID_GEN++);
    this._extension = r, this._id = s, this._alignment = o, this._priority = this.validatePriority(a);
  }
  validatePriority(e) {
    if (ol(e))
      return e === Number.POSITIVE_INFINITY ? Number.MAX_VALUE : e === Number.NEGATIVE_INFINITY ? -Number.MAX_VALUE : e;
  }
  get id() {
    return this._id ?? this._extension.identifier.value;
  }
  get entryId() {
    return this._entryId;
  }
  get alignment() {
    return this._alignment;
  }
  get priority() {
    return this._priority;
  }
  get text() {
    return this._text;
  }
  get name() {
    return this._name;
  }
  get tooltip() {
    return this._tooltip;
  }
  get tooltip2() {
    return this._extension && H(this._extension, "statusBarItemTooltip"), this._tooltip2;
  }
  get color() {
    return this._color;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  get command() {
    var e;
    return (e = this._command) == null ? void 0 : e.fromApi;
  }
  get accessibilityInformation() {
    return this._accessibilityInformation;
  }
  set text(e) {
    this._text = e, this.update();
  }
  set name(e) {
    this._name = e, this.update();
  }
  set tooltip(e) {
    this._tooltip = e, this.update();
  }
  set tooltip2(e) {
    this._extension && H(this._extension, "statusBarItemTooltip"), this._tooltip2 = e, this.update();
  }
  set color(e) {
    this._color = e, this.update();
  }
  set backgroundColor(e) {
    e && !Ta.ALLOWED_BACKGROUND_COLORS.has(e.id) && (e = void 0), this._backgroundColor = e, this.update();
  }
  set command(e) {
    var t;
    ((t = this._command) == null ? void 0 : t.fromApi) !== e && (this._latestCommandRegistration && this._staleCommandRegistrations.add(this._latestCommandRegistration), this._latestCommandRegistration = new Te(), typeof e == "string" ? this._command = {
      fromApi: e,
      internal: N(this, xu).toInternal({ title: "", command: e }, this._latestCommandRegistration)
    } : e ? this._command = {
      fromApi: e,
      internal: N(this, xu).toInternal(e, this._latestCommandRegistration)
    } : this._command = void 0, this.update());
  }
  set accessibilityInformation(e) {
    this._accessibilityInformation = e, this.update();
  }
  show() {
    this._visible = !0, this.update();
  }
  hide() {
    clearTimeout(this._timeoutHandle), this._visible = !1, N(this, yu).$disposeEntry(this._entryId);
  }
  update() {
    this._disposed || !this._visible || (clearTimeout(this._timeoutHandle), this._timeoutHandle = setTimeout(() => {
      var o, a;
      this._timeoutHandle = void 0;
      let e;
      this._extension ? this._id ? e = `${this._extension.identifier.value}.${this._id}` : e = this._extension.identifier.value : e = this._id;
      let t;
      this._name ? t = this._name : t = h(
        2633,
        "{0} (Extension)",
        this._extension.displayName || this._extension.name
      );
      let n = this._color;
      this._backgroundColor && (n = Ta.ALLOWED_BACKGROUND_COLORS.get(this._backgroundColor.id));
      let r, s;
      typeof this._tooltip2 == "function" ? (r = Ne.fromStrict(this._tooltip), s = !0) : (r = Ne.fromStrict(this._tooltip2 ?? this._tooltip), s = !1), N(this, yu).$setEntry(this._entryId, e, (o = this._extension) == null ? void 0 : o.identifier.value, t, this._text, r, s, (a = this._command) == null ? void 0 : a.internal, n, this._backgroundColor, this._alignment === Mo.Left, this._priority, this._accessibilityInformation), this._staleCommandRegistrations.clear();
    }, 0));
  }
  dispose() {
    var e;
    this.hide(), (e = this._onDispose) == null || e.call(this), this._disposed = !0;
  }
};
yu = new WeakMap(), xu = new WeakMap(), Ta.ID_GEN = 0, Ta.ALLOWED_BACKGROUND_COLORS = /* @__PURE__ */ new Map([
  ["statusBarItem.errorBackground", new mf("statusBarItem.errorForeground")],
  ["statusBarItem.warningBackground", new mf("statusBarItem.warningForeground")]
]);
let vE = Ta;
class LH {
  constructor(e) {
    this._messages = [], this._item = e.createStatusBarEntry(void 0, "status.extensionMessage", Mo.Left, Number.MIN_VALUE), this._item.name = h(2634, "Extension Status");
  }
  dispose() {
    this._messages.length = 0, this._item.dispose();
  }
  setMessage(e) {
    const t = { message: e };
    return this._messages.unshift(t), this._update(), new je(() => {
      const n = this._messages.indexOf(t);
      n >= 0 && (this._messages.splice(n, 1), this._update());
    });
  }
  _update() {
    this._messages.length > 0 ? (this._item.text = this._messages[0].message, this._item.show()) : this._item.hide();
  }
}
class NH {
  constructor(e, t) {
    this._entries = /* @__PURE__ */ new Map(), this._existingItems = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadStatusBar), this._commands = t, this._statusMessage = new LH(this);
  }
  $acceptStaticEntries(e) {
    for (const t of e)
      this._existingItems.set(t.entryId, t);
  }
  async $provideTooltip(e, t) {
    const n = this._entries.get(e);
    if (!n)
      return;
    const r = typeof n.tooltip2 == "function" ? await n.tooltip2(t) : n.tooltip2;
    return t.isCancellationRequested ? void 0 : Ne.fromStrict(r);
  }
  createStatusBarEntry(e, t, n, r) {
    const s = new vE(
      this._proxy,
      this._commands,
      this._existingItems,
      e,
      t,
      n,
      r,
      () => this._entries.delete(s.entryId)
    );
    return this._entries.set(s.entryId, s), s;
  }
  setStatusBarMessage(e, t) {
    const n = this._statusMessage.setMessage(e);
    let r;
    return typeof t == "number" ? r = setTimeout(() => n.dispose(), t) : typeof t < "u" && t.then(() => n.dispose(), () => n.dispose()), new je(() => {
      n.dispose(), clearTimeout(r);
    });
  }
}
class MH extends xe {
  constructor(e, t) {
    super(), this._extHostDocumentsAndEditors = t, this._onDidChangeTextEditorSelection = new M(), this._onDidChangeTextEditorOptions = new M(), this._onDidChangeTextEditorVisibleRanges = new M(), this._onDidChangeTextEditorViewColumn = new M(), this._onDidChangeTextEditorDiffInformation = new M(), this._onDidChangeActiveTextEditor = new M(), this._onDidChangeVisibleTextEditors = new M(), this.onDidChangeTextEditorSelection = this._onDidChangeTextEditorSelection.event, this.onDidChangeTextEditorOptions = this._onDidChangeTextEditorOptions.event, this.onDidChangeTextEditorVisibleRanges = this._onDidChangeTextEditorVisibleRanges.event, this.onDidChangeTextEditorViewColumn = this._onDidChangeTextEditorViewColumn.event, this.onDidChangeTextEditorDiffInformation = this._onDidChangeTextEditorDiffInformation.event, this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event, this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event, this._proxy = e.getProxy(ie.MainThreadTextEditors), this._register(this._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors((n) => this._onDidChangeVisibleTextEditors.fire(n))), this._register(this._extHostDocumentsAndEditors.onDidChangeActiveTextEditor((n) => this._onDidChangeActiveTextEditor.fire(n)));
  }
  getActiveTextEditor() {
    return this._extHostDocumentsAndEditors.activeEditor();
  }
  getVisibleTextEditors(e) {
    const t = this._extHostDocumentsAndEditors.allEditors();
    return e ? t : t.map((n) => n.value);
  }
  async showTextDocument(e, t, n) {
    let r;
    typeof t == "number" ? r = {
      position: li.from(t),
      preserveFocus: n
    } : typeof t == "object" ? r = {
      position: li.from(t.viewColumn),
      preserveFocus: t.preserveFocus,
      selection: typeof t.selection == "object" ? j.from(t.selection) : void 0,
      pinned: typeof t.preview == "boolean" ? !t.preview : void 0
    } : r = {
      preserveFocus: !1
    };
    const s = await this._proxy.$tryShowTextDocument(e.uri, r), o = s && this._extHostDocumentsAndEditors.getEditor(s);
    if (o)
      return o.value;
    throw s ? new Error(`Could NOT open editor for "${e.uri.toString()}" because another editor opened in the meantime.`) : new Error(`Could NOT open editor for "${e.uri.toString()}".`);
  }
  createTextEditorDecorationType(e, t) {
    return new gx(this._proxy, e, t).value;
  }
  $acceptEditorPropertiesChanged(e, t) {
    const n = this._extHostDocumentsAndEditors.getEditor(e);
    if (!n)
      throw new Error("unknown text editor");
    if (t.options && n._acceptOptions(t.options), t.selections) {
      const r = t.selections.selections.map(Cr.to);
      n._acceptSelections(r);
    }
    if (t.visibleRanges) {
      const r = Xt(t.visibleRanges.map(j.to));
      n._acceptVisibleRanges(r);
    }
    if (t.options && this._onDidChangeTextEditorOptions.fire({
      textEditor: n.value,
      options: { ...t.options, lineNumbers: cu.to(t.options.lineNumbers) }
    }), t.selections) {
      const r = qu.fromValue(t.selections.source), s = t.selections.selections.map(Cr.to);
      this._onDidChangeTextEditorSelection.fire({
        textEditor: n.value,
        selections: s,
        kind: r
      });
    }
    if (t.visibleRanges) {
      const r = Xt(t.visibleRanges.map(j.to));
      this._onDidChangeTextEditorVisibleRanges.fire({
        textEditor: n.value,
        visibleRanges: r
      });
    }
  }
  $acceptEditorPositionData(e) {
    for (const t in e) {
      const n = this._extHostDocumentsAndEditors.getEditor(t);
      if (!n)
        throw new Error("Unknown text editor");
      const r = li.to(e[t]);
      n.value.viewColumn !== r && (n._acceptViewColumn(r), this._onDidChangeTextEditorViewColumn.fire({ textEditor: n.value, viewColumn: r }));
    }
  }
  $acceptEditorDiffInformation(e, t) {
    const n = this._extHostDocumentsAndEditors.getEditor(e);
    if (!n)
      throw new Error("unknown text editor");
    if (!t) {
      n._acceptDiffInformation(void 0), this._onDidChangeTextEditorDiffInformation.fire({
        textEditor: n.value,
        diffInformation: void 0
      });
      return;
    }
    const r = this, s = t.map((o) => {
      const a = x.revive(o.original), l = x.revive(o.modified), c = o.changes.map((u) => {
        const [d, f, p, v] = u;
        let _;
        return d === f ? _ = iu.Addition : p === v ? _ = iu.Deletion : _ = iu.Modification, {
          original: {
            startLineNumber: d,
            endLineNumberExclusive: f
          },
          modified: {
            startLineNumber: p,
            endLineNumberExclusive: v
          },
          kind: _
        };
      });
      return Object.freeze({
        documentVersion: o.documentVersion,
        original: a,
        modified: l,
        changes: c,
        get isStale() {
          const u = r._extHostDocumentsAndEditors.getDocument(l);
          return (u == null ? void 0 : u.version) !== o.documentVersion;
        }
      });
    });
    n._acceptDiffInformation(s), this._onDidChangeTextEditorDiffInformation.fire({
      textEditor: n.value,
      diffInformation: s
    });
  }
  getDiffInformation(e) {
    return Promise.resolve(this._proxy.$getDiffInformation(e));
  }
}
let wE = class {
  constructor(e) {
    this._actual = new o_(Do.Dark), this._onDidChangeActiveColorTheme = new M();
  }
  get activeColorTheme() {
    return this._actual;
  }
  $onColorThemeChange(e) {
    let t;
    switch (e) {
      case "light":
        t = Do.Light;
        break;
      case "hcDark":
        t = Do.HighContrast;
        break;
      case "hcLight":
        t = Do.HighContrastLight;
        break;
      default:
        t = Do.Dark;
    }
    this._actual = new o_(t), this._onDidChangeActiveColorTheme.fire(this._actual);
  }
  get onDidChangeActiveColorTheme() {
    return this._onDidChangeActiveColorTheme.event;
  }
};
wE = z([
  O(0, tt)
], wE);
class OH {
  constructor(e, t) {
    this._providers = /* @__PURE__ */ new Map(), this._itemsBySourceAndUriMap = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadTimeline), t.registerArgumentProcessor({
      processArgument: (n, r) => {
        var s, o;
        if (n && n.$mid === rt.TimelineActionContext)
          if (this._providers.get(n.source) && r && dt(r, "timeline")) {
            const a = n.uri === void 0 ? void 0 : x.revive(n.uri);
            return (o = (s = this._itemsBySourceAndUriMap.get(n.source)) == null ? void 0 : s.get(oT(a))) == null ? void 0 : o.get(n.handle);
          } else
            return;
        return n;
      }
    });
  }
  async $getTimeline(e, t, n, r) {
    const s = this._providers.get(e);
    return s == null ? void 0 : s.provider.provideTimeline(x.revive(t), n, r);
  }
  registerTimelineProvider(e, t, n, r) {
    const s = new Te(), o = this.convertTimelineItem(t.id, r, s).bind(this);
    let a;
    t.onDidChange && (a = t.onDidChange((c) => this._proxy.$emitTimelineChangeEvent({ uri: void 0, reset: !0, ...c, id: t.id }), this));
    const l = this._itemsBySourceAndUriMap;
    return this.registerTimelineProviderCore({
      ...t,
      scheme: e,
      onDidChange: void 0,
      async provideTimeline(c, u, d) {
        var v;
        u != null && u.resetCache && (s.clear(), (v = l.get(t.id)) == null || v.clear());
        const f = await t.provideTimeline(c, u, d);
        if (f == null)
          return;
        const p = o(c, u);
        return {
          ...f,
          source: t.id,
          items: f.items.map(p)
        };
      },
      dispose() {
        var c;
        for (const u of l.values())
          (c = u.get(t.id)) == null || c.clear();
        a == null || a.dispose(), s.dispose();
      }
    }, n);
  }
  convertTimelineItem(e, t, n) {
    return (r, s) => {
      let o;
      if (s != null && s.cacheResults) {
        let a = this._itemsBySourceAndUriMap.get(e);
        a === void 0 && (a = /* @__PURE__ */ new Map(), this._itemsBySourceAndUriMap.set(e, a));
        const l = oT(r);
        o = a.get(l), o === void 0 && (o = /* @__PURE__ */ new Map(), a.set(l, o));
      }
      return (a) => {
        const { iconPath: l, ...c } = a, u = `${e}|${a.id ?? a.timestamp}`;
        o == null || o.set(u, a);
        let d, f, p;
        a.iconPath && (l instanceof Ji ? p = { id: l.id, color: l.color } : x.isUri(l) ? (d = l, f = l) : { light: d, dark: f } = l);
        let v;
        return Dn.isMarkdownString(c.tooltip) ? v = Ne.from(c.tooltip) : st(c.tooltip) ? v = c.tooltip : Dn.isMarkdownString(c.detail) ? (console.warn("Using deprecated TimelineItem.detail, migrate to TimelineItem.tooltip"), v = Ne.from(c.detail)) : st(c.detail) && (console.warn("Using deprecated TimelineItem.detail, migrate to TimelineItem.tooltip"), v = c.detail), {
          ...c,
          id: c.id ?? void 0,
          handle: u,
          source: e,
          command: a.command ? t.toInternal(a.command, n) : void 0,
          icon: d,
          iconDark: f,
          themeIcon: p,
          tooltip: v,
          accessibilityInformation: a.accessibilityInformation
        };
      };
    };
  }
  registerTimelineProviderCore(e, t) {
    if (this._providers.get(e.id))
      throw new Error(`Timeline Provider ${e.id} already exists.`);
    return this._proxy.$registerTimelineProvider({
      id: e.id,
      label: e.label,
      scheme: e.scheme
    }), this._providers.set(e.id, { provider: e, extension: t }), Ie(() => {
      var r;
      for (const s of this._itemsBySourceAndUriMap.values())
        (r = s.get(e.id)) == null || r.clear();
      this._providers.delete(e.id), this._proxy.$unregisterTimelineProvider(e.id), e.dispose();
    });
  }
}
function oT(i) {
  return i == null ? void 0 : i.toString();
}
h(4105, "Views");
Np("default-view-icon", _e.window, h(4106, "Default view icon."));
var y1;
(function(i) {
  i.ViewContainersRegistry = "workbench.registry.view.containers", i.ViewsRegistry = "workbench.registry.view";
})(y1 || (y1 = {}));
var Rh;
(function(i) {
  i[i.Sidebar = 0] = "Sidebar", i[i.Panel = 1] = "Panel", i[i.AuxiliaryBar = 2] = "AuxiliaryBar";
})(Rh || (Rh = {}));
Rh.Sidebar, Rh.Panel, Rh.AuxiliaryBar;
class FH extends xe {
  constructor() {
    super(...arguments), this._onDidRegister = this._register(new M()), this.onDidRegister = this._onDidRegister.event, this._onDidDeregister = this._register(new M()), this.onDidDeregister = this._onDidDeregister.event, this.viewContainers = /* @__PURE__ */ new Map(), this.defaultViewContainers = [];
  }
  get all() {
    return [...this.viewContainers.values()].flat();
  }
  registerViewContainer(e, t, n) {
    const r = this.get(e.id);
    if (r)
      return r;
    const s = e;
    return s.openCommandActionDescriptor = n != null && n.doNotRegisterOpenCommand ? void 0 : s.openCommandActionDescriptor ?? { id: s.id }, wR(this.viewContainers, t, []).push(s), n != null && n.isDefault && this.defaultViewContainers.push(s), this._onDidRegister.fire({ viewContainer: s, viewContainerLocation: t }), s;
  }
  deregisterViewContainer(e) {
    for (const t of this.viewContainers.keys()) {
      const n = this.viewContainers.get(t), r = n == null ? void 0 : n.indexOf(e);
      if (r !== -1) {
        n == null || n.splice(r, 1), n.length === 0 && this.viewContainers.delete(t), this._onDidDeregister.fire({ viewContainer: e, viewContainerLocation: t });
        return;
      }
    }
  }
  get(e) {
    return this.all.filter((t) => t.id === e)[0];
  }
  getViewContainers(e) {
    return [...this.viewContainers.get(e) || []];
  }
  getViewContainerLocation(e) {
    return [...this.viewContainers.keys()].filter((t) => this.getViewContainers(t).filter((n) => (n == null ? void 0 : n.id) === e.id).length > 0)[0];
  }
  getDefaultViewContainer(e) {
    return this.defaultViewContainers.find((t) => this.getViewContainerLocation(t) === e);
  }
}
ui.add(y1.ViewContainersRegistry, new FH());
var x1;
(function(i) {
  i.Open = "2_open", i.Debug = "4_debug", i.SCM = "5_scm", i.More = "9_more";
})(x1 || (x1 = {}));
function UH(i, e) {
  const t = i.group ?? x1.More, n = e.group ?? x1.More;
  return t !== n ? t.localeCompare(n) : (i.order ?? 5) - (e.order ?? 5);
}
class $H extends xe {
  constructor() {
    super(...arguments), this._onViewsRegistered = this._register(new M()), this.onViewsRegistered = this._onViewsRegistered.event, this._onViewsDeregistered = this._register(new M()), this.onViewsDeregistered = this._onViewsDeregistered.event, this._onDidChangeContainer = this._register(new M()), this.onDidChangeContainer = this._onDidChangeContainer.event, this._onDidChangeViewWelcomeContent = this._register(new M()), this.onDidChangeViewWelcomeContent = this._onDidChangeViewWelcomeContent.event, this._viewContainers = [], this._views = /* @__PURE__ */ new Map(), this._viewWelcomeContents = new SR();
  }
  registerViews(e, t) {
    this.registerViews2([{ views: e, viewContainer: t }]);
  }
  registerViews2(e) {
    e.forEach(({ views: t, viewContainer: n }) => this.addViews(t, n)), this._onViewsRegistered.fire(e);
  }
  deregisterViews(e, t) {
    const n = this.removeViews(e, t);
    n.length && this._onViewsDeregistered.fire({ views: n, viewContainer: t });
  }
  moveViews(e, t) {
    for (const n of this._views.keys())
      if (n !== t) {
        const r = this.removeViews(e, n);
        r.length && (this.addViews(r, t), this._onDidChangeContainer.fire({ views: r, from: n, to: t }));
      }
  }
  getViews(e) {
    return this._views.get(e) || [];
  }
  getView(e) {
    for (const t of this._viewContainers) {
      const n = (this._views.get(t) || []).filter((r) => r.id === e)[0];
      if (n)
        return n;
    }
    return null;
  }
  getViewContainer(e) {
    for (const t of this._viewContainers)
      if ((this._views.get(t) || []).filter((r) => r.id === e)[0])
        return t;
    return null;
  }
  registerViewWelcomeContent(e, t) {
    return this._viewWelcomeContents.add(e, t), this._onDidChangeViewWelcomeContent.fire(e), Ie(() => {
      this._viewWelcomeContents.delete(e, t), this._onDidChangeViewWelcomeContent.fire(e);
    });
  }
  registerViewWelcomeContent2(e, t) {
    const n = /* @__PURE__ */ new Map();
    for (const [r, s] of t)
      this._viewWelcomeContents.add(e, s), n.set(r, Ie(() => {
        this._viewWelcomeContents.delete(e, s), this._onDidChangeViewWelcomeContent.fire(e);
      }));
    return this._onDidChangeViewWelcomeContent.fire(e), n;
  }
  getViewWelcomeContent(e) {
    const t = [];
    return this._viewWelcomeContents.forEach(e, (n) => t.push(n)), t.sort(UH);
  }
  addViews(e, t) {
    let n = this._views.get(t);
    n || (n = [], this._views.set(t, n), this._viewContainers.push(t));
    for (const r of e) {
      if (this.getView(r.id) !== null)
        throw new Error(h(4107, "A view with id '{0}' is already registered", r.id));
      n.push(r);
    }
  }
  removeViews(e, t) {
    const n = this._views.get(t);
    if (!n)
      return [];
    const r = [], s = [];
    for (const o of n)
      e.includes(o) ? r.push(o) : s.push(o);
    return r.length && (s.length ? this._views.set(t, s) : (this._views.delete(t), this._viewContainers.splice(this._viewContainers.indexOf(t), 1))), r;
  }
}
ui.add(y1.ViewsRegistry, new $H());
var aT;
(function(i) {
  i[i.Default = 0] = "Default", i[i.Expand = 1] = "Expand";
})(aT || (aT = {}));
var lT;
(function(i) {
  i[i.None = 0] = "None", i[i.Collapsed = 1] = "Collapsed", i[i.Expanded = 2] = "Expanded";
})(lT || (lT = {}));
class _s extends Error {
  constructor(e) {
    super(h(4108, "No tree view with id '{0}' registered.", e)), this.name = "NoTreeViewError";
  }
  static is(e) {
    return !!e && e.name === "NoTreeViewError";
  }
}
class HH {
  constructor() {
    this._dragOperations = /* @__PURE__ */ new Map();
  }
  removeDragOperationTransfer(e) {
    if (e && this._dragOperations.has(e)) {
      const t = this._dragOperations.get(e);
      return this._dragOperations.delete(e), t;
    }
  }
  addDragOperationTransfer(e, t) {
    this._dragOperations.set(e, t);
  }
}
function cT(i, e) {
  if (st(i))
    return { label: i };
  if (i && typeof i == "object" && typeof i.label == "string") {
    let t;
    return Array.isArray(i.highlights) && (t = i.highlights.filter(((n) => n.length === 2 && typeof n[0] == "number" && typeof n[1] == "number")), t = t.length ? t : void 0), { label: i.label, highlights: t };
  }
}
class BH extends xe {
  constructor(e, t, n) {
    super(), this._proxy = e, this._commands = t, this._logService = n, this._treeViews = /* @__PURE__ */ new Map(), this._treeDragAndDropService = new HH();
    function r(s) {
      return s && s.$treeViewId && (s.$treeItemHandle || s.$selectedTreeItems || s.$focusedTreeItem);
    }
    t.registerArgumentProcessor({
      processArgument: (s) => r(s) ? this._convertArgument(s) : Array.isArray(s) && s.length > 0 ? s.map((o) => r(o) ? this._convertArgument(o) : o) : s
    });
  }
  registerTreeDataProvider(e, t, n) {
    const r = this.createTreeView(e, { treeDataProvider: t }, n);
    return { dispose: () => r.dispose() };
  }
  createTreeView(e, t, n) {
    var f, p, v, _;
    if (!t || !t.treeDataProvider)
      throw new Error("Options with treeDataProvider is mandatory");
    const r = ((f = t.dragAndDropController) == null ? void 0 : f.dropMimeTypes) ?? [], s = ((p = t.dragAndDropController) == null ? void 0 : p.dragMimeTypes) ?? [], o = !!((v = t.dragAndDropController) != null && v.handleDrag), a = !!((_ = t.dragAndDropController) != null && _.handleDrop), l = this._createExtHostTreeView(e, t, n), c = { showCollapseAll: !!t.showCollapseAll, canSelectMany: !!t.canSelectMany, dropMimeTypes: r, dragMimeTypes: s, hasHandleDrag: o, hasHandleDrop: a, manuallyManageCheckboxes: !!t.manageCheckboxStateManually }, u = this._proxy.$registerTreeViewDataProvider(e, c), d = {
      get onDidCollapseElement() {
        return l.onDidCollapseElement;
      },
      get onDidExpandElement() {
        return l.onDidExpandElement;
      },
      get selection() {
        return l.selectedElements;
      },
      get onDidChangeSelection() {
        return l.onDidChangeSelection;
      },
      get activeItem() {
        return H(n, "treeViewActiveItem"), l.focusedElement;
      },
      get onDidChangeActiveItem() {
        return H(n, "treeViewActiveItem"), l.onDidChangeActiveItem;
      },
      get visible() {
        return l.visible;
      },
      get onDidChangeVisibility() {
        return l.onDidChangeVisibility;
      },
      get onDidChangeCheckboxState() {
        return l.onDidChangeCheckboxState;
      },
      get message() {
        return l.message;
      },
      set message(m) {
        Kl(m) && H(n, "treeViewMarkdownMessage"), l.message = m;
      },
      get title() {
        return l.title;
      },
      set title(m) {
        l.title = m;
      },
      get description() {
        return l.description;
      },
      set description(m) {
        l.description = m;
      },
      get badge() {
        return l.badge;
      },
      set badge(m) {
        m !== void 0 && Kb.isViewBadge(m) ? l.badge = {
          value: Math.floor(Math.abs(m.value)),
          tooltip: m.tooltip
        } : m === void 0 && (l.badge = void 0);
      },
      reveal: (m, E) => l.reveal(m, E),
      dispose: async () => {
        await u, this._treeViews.delete(e), l.dispose();
      }
    };
    return this._register(d), d;
  }
  async $getChildren(e, t) {
    const n = this._treeViews.get(e);
    if (!n)
      return Promise.reject(new _s(e));
    if (!t) {
      const s = await n.getChildren();
      return s ? [[0, ...s]] : void 0;
    }
    const r = [];
    for (let s = 0; s < t.length; s++) {
      const o = t[s], a = await n.getChildren(o);
      a && r.push([s, ...a]);
    }
    return r;
  }
  async $handleDrop(e, t, n, r, s, o, a, l) {
    const c = this._treeViews.get(e);
    if (!c)
      return Promise.reject(new _s(e));
    const u = ud.toDataTransfer(n, async (d) => (await this._proxy.$resolveDropFileData(e, t, d)).buffer);
    return a === e && l && await this._addAdditionalTransferItems(u, c, l, s, o), c.onDrop(u, r, s);
  }
  async _addAdditionalTransferItems(e, t, n, r, s) {
    var a;
    const o = this._treeDragAndDropService.removeDragOperationTransfer(s);
    if (o)
      (a = await o) == null || a.forEach((l, c) => {
        l && e.set(c, l);
      });
    else if (s && t.handleDrag) {
      const l = t.handleDrag(n, e, r);
      this._treeDragAndDropService.addDragOperationTransfer(s, l), await l;
    }
    return e;
  }
  async $handleDrag(e, t, n, r) {
    const s = this._treeViews.get(e);
    if (!s)
      return Promise.reject(new _s(e));
    const o = await this._addAdditionalTransferItems(new Ku(), s, t, r, n);
    if (!(!o || r.isCancellationRequested))
      return ud.from(o);
  }
  async $hasResolve(e) {
    const t = this._treeViews.get(e);
    if (!t)
      throw new _s(e);
    return t.hasResolve;
  }
  $resolve(e, t, n) {
    const r = this._treeViews.get(e);
    if (!r)
      throw new _s(e);
    return r.resolveTreeItem(t, n);
  }
  $setExpanded(e, t, n) {
    const r = this._treeViews.get(e);
    if (!r)
      throw new _s(e);
    r.setExpanded(t, n);
  }
  $setSelectionAndFocus(e, t, n) {
    const r = this._treeViews.get(e);
    if (!r)
      throw new _s(e);
    r.setSelectionAndFocus(t, n);
  }
  $setVisible(e, t) {
    const n = this._treeViews.get(e);
    if (!n) {
      if (!t)
        return;
      throw new _s(e);
    }
    n.setVisible(t);
  }
  $changeCheckboxState(e, t) {
    const n = this._treeViews.get(e);
    if (!n)
      throw new _s(e);
    n.setCheckboxState(t);
  }
  _createExtHostTreeView(e, t, n) {
    const r = this._register(new bE(
      e,
      t,
      this._proxy,
      this._commands.converter,
      this._logService,
      n
    ));
    return this._treeViews.set(e, r), r;
  }
  _convertArgument(e) {
    const t = this._treeViews.get(e.$treeViewId), n = e;
    return t && n.$treeItemHandle ? t.getExtensionElement(n.$treeItemHandle) : t && e.$focusedTreeItem ? t.focusedElement : null;
  }
}
const Gc = class Gc extends xe {
  get visible() {
    return this._visible;
  }
  get selectedElements() {
    return this._selectedHandles.map((e) => this.getExtensionElement(e)).filter((e) => !oi(e));
  }
  get focusedElement() {
    return this._focusedHandle ? this.getExtensionElement(this._focusedHandle) : void 0;
  }
  constructor(e, t, n, r, s, o) {
    if (super(), this._viewId = e, this._proxy = n, this._commands = r, this._logService = s, this._extension = o, this._roots = void 0, this._elements = /* @__PURE__ */ new Map(), this._nodes = /* @__PURE__ */ new Map(), this._visible = !1, this._selectedHandles = [], this._focusedHandle = void 0, this._onDidExpandElement = this._register(new M()), this.onDidExpandElement = this._onDidExpandElement.event, this._onDidCollapseElement = this._register(new M()), this.onDidCollapseElement = this._onDidCollapseElement.event, this._onDidChangeSelection = this._register(new M()), this.onDidChangeSelection = this._onDidChangeSelection.event, this._onDidChangeActiveItem = this._register(new M()), this.onDidChangeActiveItem = this._onDidChangeActiveItem.event, this._onDidChangeVisibility = this._register(new M()), this.onDidChangeVisibility = this._onDidChangeVisibility.event, this._onDidChangeCheckboxState = this._register(new M()), this.onDidChangeCheckboxState = this._onDidChangeCheckboxState.event, this._onDidChangeData = this._register(new M()), this._refreshPromise = Promise.resolve(), this._refreshQueue = Promise.resolve(), this._nodesToClear = /* @__PURE__ */ new Set(), this._message = "", this._title = "", this._refreshCancellationSource = new Lt(), o.contributes && o.contributes.views)
      for (const u in o.contributes.views)
        for (const d of o.contributes.views[u])
          d.id === e && (this._title = d.name);
    this._dataProvider = t.treeDataProvider, this._dndController = t.dragAndDropController, this._dataProvider.onDidChangeTreeData && this._register(this._dataProvider.onDidChangeTreeData((u) => {
      Array.isArray(u) && u.length === 0 || this._onDidChangeData.fire({ message: !1, element: u });
    }));
    let a, l;
    const c = Pt.debounce(this._onDidChangeData.event, (u, d) => (u || (u = { message: !1, elements: [] }), d.element !== !1 && (a || (a = new Promise((f) => l = f), this._refreshPromise = this._refreshPromise.then(() => a)), Array.isArray(d.element) ? u.elements.push(...d.element) : u.elements.push(d.element)), d.message && (u.message = !0), u), 200, !0);
    this._register(c(({ message: u, elements: d }) => {
      d.length && (this._refreshQueue = this._refreshQueue.then(() => {
        const f = l;
        a = null;
        const p = Array.from(this._nodesToClear);
        return this._refresh(d).then(() => (this._clearNodes(p), f()));
      })), u && this._proxy.$setMessage(this._viewId, Ne.fromStrict(this._message) ?? "");
    }));
  }
  async getChildren(e) {
    const t = e ? this.getExtensionElement(e) : void 0;
    if (e && !t)
      return this._logService.error(`No tree item with id '${e}' found.`), Promise.resolve([]);
    let n = this._getChildrenNodes(e);
    return n || (n = await this._fetchChildrenNodes(t)), n ? n.map((r) => r.item) : void 0;
  }
  getExtensionElement(e) {
    return this._elements.get(e);
  }
  reveal(e, t) {
    t = t || { select: !0, focus: !1 };
    const n = oi(t.select) ? !0 : t.select, r = oi(t.focus) ? !1 : t.focus, s = oi(t.expand) ? !1 : t.expand;
    return typeof this._dataProvider.getParent != "function" ? Promise.reject(new Error(
      "Required registered TreeDataProvider to implement 'getParent' method to access 'reveal' method"
    )) : e ? this._refreshPromise.then(() => this._resolveUnknownParentChain(e)).then((o) => this._resolveTreeNode(e, o[o.length - 1]).then((a) => this._proxy.$reveal(this._viewId, { item: a.item, parentChain: o.map((l) => l.item) }, { select: n, focus: r, expand: s })), (o) => this._logService.error(o)) : this._proxy.$reveal(this._viewId, void 0, { select: n, focus: r, expand: s });
  }
  get message() {
    return this._message;
  }
  set message(e) {
    this._message = e, this._onDidChangeData.fire({ message: !0, element: !1 });
  }
  get title() {
    return this._title;
  }
  set title(e) {
    this._title = e, this._proxy.$setTitle(this._viewId, e, this._description);
  }
  get description() {
    return this._description;
  }
  set description(e) {
    this._description = e, this._proxy.$setTitle(this._viewId, this._title, e);
  }
  get badge() {
    return this._badge;
  }
  set badge(e) {
    var t, n;
    ((t = this._badge) == null ? void 0 : t.value) === (e == null ? void 0 : e.value) && ((n = this._badge) == null ? void 0 : n.tooltip) === (e == null ? void 0 : e.tooltip) || (this._badge = U_.from(e), this._proxy.$setBadge(this._viewId, e));
  }
  setExpanded(e, t) {
    const n = this.getExtensionElement(e);
    n && (t ? this._onDidExpandElement.fire(Object.freeze({ element: n })) : this._onDidCollapseElement.fire(Object.freeze({ element: n })));
  }
  setSelectionAndFocus(e, t) {
    const n = !Fn(this._selectedHandles, e);
    this._selectedHandles = e;
    const r = this._focusedHandle !== t;
    this._focusedHandle = t, n && this._onDidChangeSelection.fire(Object.freeze({ selection: this.selectedElements })), r && this._onDidChangeActiveItem.fire(Object.freeze({ activeItem: this.focusedElement }));
  }
  setVisible(e) {
    e !== this._visible && (this._visible = e, this._onDidChangeVisibility.fire(Object.freeze({ visible: this._visible })));
  }
  async setCheckboxState(e) {
    const t = (await Promise.all(e.map(async (n) => {
      const r = this.getExtensionElement(n.treeItemHandle);
      return r ? {
        extensionItem: r,
        treeItem: await this._dataProvider.getTreeItem(r),
        newState: n.newState ? jr.Checked : jr.Unchecked
      } : Promise.resolve(void 0);
    }))).filter((n) => n !== void 0);
    t.forEach((n) => {
      n.treeItem.checkboxState = n.newState ? jr.Checked : jr.Unchecked;
    }), this._onDidChangeCheckboxState.fire({ items: t.map((n) => [n.extensionItem, n.newState]) });
  }
  async handleDrag(e, t, n) {
    var s;
    const r = [];
    for (const o of e) {
      const a = this.getExtensionElement(o);
      a && r.push(a);
    }
    if (!(!((s = this._dndController) != null && s.handleDrag) || r.length === 0))
      return await this._dndController.handleDrag(r, t, n), t;
  }
  get hasHandleDrag() {
    var e;
    return !!((e = this._dndController) != null && e.handleDrag);
  }
  async onDrop(e, t, n) {
    var s;
    const r = t ? this.getExtensionElement(t) : void 0;
    if (!(!r && t || !((s = this._dndController) != null && s.handleDrop)))
      return Mi(() => {
        var o;
        return (o = this._dndController) != null && o.handleDrop ? this._dndController.handleDrop(r, e, n) : void 0;
      });
  }
  get hasResolve() {
    return !!this._dataProvider.resolveTreeItem;
  }
  async resolveTreeItem(e, t) {
    if (!this._dataProvider.resolveTreeItem)
      return;
    const n = this._elements.get(e);
    if (n) {
      const r = this._nodes.get(n);
      if (r) {
        const s = await this._dataProvider.resolveTreeItem(r.extensionItem, n, t) ?? r.extensionItem;
        return this._validateTreeItem(s), r.item.tooltip = this._getTooltip(s.tooltip), r.item.command = this._getCommand(r.disposableStore, s.command), r.item;
      }
    }
  }
  _resolveUnknownParentChain(e) {
    return this._resolveParent(e).then((t) => t ? this._resolveUnknownParentChain(t).then((n) => this._resolveTreeNode(t, n[n.length - 1]).then((r) => (n.push(r), n))) : Promise.resolve([]));
  }
  _resolveParent(e) {
    const t = this._nodes.get(e);
    return t ? Promise.resolve(t.parent ? this._elements.get(t.parent.item.handle) : void 0) : Mi(() => this._dataProvider.getParent(e));
  }
  _resolveTreeNode(e, t) {
    const n = this._nodes.get(e);
    return n ? Promise.resolve(n) : Mi(() => this._dataProvider.getTreeItem(e)).then((r) => this._createHandle(e, r, t, !0)).then((r) => this.getChildren(t ? t.item.handle : void 0).then(() => {
      const s = this.getExtensionElement(r);
      if (s) {
        const o = this._nodes.get(s);
        if (o)
          return Promise.resolve(o);
      }
      throw new Error(
        `Cannot resolve tree item for element ${r} from extension ${this._extension.identifier.value}`
      );
    }));
  }
  _getChildrenNodes(e) {
    if (e) {
      let t;
      if (typeof e == "string") {
        const n = this.getExtensionElement(e);
        t = n ? this._nodes.get(n) : void 0;
      } else
        t = e;
      return t && t.children || void 0;
    }
    return this._roots;
  }
  async _fetchChildrenNodes(e) {
    this._addChildrenToClear(e);
    const t = new Lt(this._refreshCancellationSource.token);
    try {
      const n = e ? this._nodes.get(e) : void 0, r = await this._dataProvider.getChildren(e);
      if (t.token.isCancellationRequested)
        return;
      const s = Xt(r || []), o = await Promise.all(Xt(s).map((l) => this._dataProvider.getTreeItem(l)));
      if (t.token.isCancellationRequested)
        return;
      const a = o.map(
        (l, c) => l ? this._createAndRegisterTreeNode(s[c], l, n) : null
      );
      return Xt(a);
    } finally {
      t.dispose();
    }
  }
  _refresh(e) {
    if (e.some((n) => !n))
      return this._refreshCancellationSource.dispose(!0), this._refreshCancellationSource = new Lt(), this._addChildrenToClear(), this._proxy.$refresh(this._viewId);
    {
      const n = this._getHandlesToRefresh(e);
      if (n.length)
        return this._refreshHandles(n);
    }
    return Promise.resolve(void 0);
  }
  _getHandlesToRefresh(e) {
    const t = /* @__PURE__ */ new Set(), n = e.map((s) => this._nodes.get(s));
    for (const s of n)
      if (s && !t.has(s.item.handle)) {
        let o = s;
        for (; o && o.parent && n.findIndex((a) => o && o.parent && a && a.item.handle === o.parent.item.handle) === -1; ) {
          const a = this._elements.get(o.parent.item.handle);
          o = a ? this._nodes.get(a) : void 0;
        }
        o && !o.parent && t.add(s.item.handle);
      }
    const r = [];
    return t.forEach((s) => {
      const o = this._elements.get(s);
      if (o) {
        const a = this._nodes.get(o);
        a && (!a.parent || !t.has(a.parent.item.handle)) && r.push(s);
      }
    }), r;
  }
  _refreshHandles(e) {
    const t = {};
    return Promise.all(e.map((n) => this._refreshNode(n).then((r) => {
      r && (t[n] = r.item);
    }))).then(() => Object.keys(t).length ? this._proxy.$refresh(this._viewId, t) : void 0);
  }
  _refreshNode(e) {
    const t = this.getExtensionElement(e);
    if (t) {
      const n = this._nodes.get(t);
      if (n)
        return this._addChildrenToClear(t), Mi(() => this._dataProvider.getTreeItem(t)).then((r) => {
          if (r) {
            const s = this._createTreeNode(t, r, n.parent);
            return this._updateNodeCache(t, s, n, n.parent), n.dispose(), s;
          }
          return null;
        });
    }
    return Promise.resolve(null);
  }
  _createAndRegisterTreeNode(e, t, n) {
    const r = this._createTreeNode(e, t, n);
    if (t.id && this._elements.has(r.item.handle))
      throw new Error(h(2637, "Element with id {0} is already registered", t.id));
    return this._addNodeToCache(e, r), this._addNodeToParentCache(r, n), r;
  }
  _getTooltip(e) {
    return Dn.isMarkdownString(e) ? Ne.from(e) : e;
  }
  _getCommand(e, t) {
    return t ? { ...this._commands.toInternal(t, e), originalId: t.command } : void 0;
  }
  _getCheckbox(e) {
    if (e.checkboxState === void 0)
      return;
    let t, n, r;
    return typeof e.checkboxState == "number" ? t = e.checkboxState : (t = e.checkboxState.state, n = e.checkboxState.tooltip, r = e.checkboxState.accessibilityInformation), { isChecked: t === jr.Checked, tooltip: n, accessibilityInformation: r };
  }
  _validateTreeItem(e) {
    if (!Km.isTreeItem(e, this._extension))
      throw new Error(
        `Extension ${this._extension.identifier.value} has provided an invalid tree item.`
      );
  }
  _createTreeNode(e, t, n) {
    this._validateTreeItem(t);
    const r = this._register(new Te()), s = this._createHandle(e, t, n), o = this._getLightIconPath(t);
    return {
      item: {
        handle: s,
        parentHandle: n ? n.item.handle : void 0,
        label: cT(t.label),
        description: t.description,
        resourceUri: t.resourceUri,
        tooltip: this._getTooltip(t.tooltip),
        command: this._getCommand(r, t.command),
        contextValue: t.contextValue,
        icon: o,
        iconDark: this._getDarkIconPath(t) || o,
        themeIcon: this._getThemeIcon(t),
        collapsibleState: oi(t.collapsibleState) ? pl.None : t.collapsibleState,
        accessibilityInformation: t.accessibilityInformation,
        checkbox: this._getCheckbox(t)
      },
      extensionItem: t,
      parent: n,
      children: void 0,
      disposableStore: r,
      dispose() {
        r.dispose();
      }
    };
  }
  _getThemeIcon(e) {
    return e.iconPath instanceof Ji ? e.iconPath : void 0;
  }
  _createHandle(e, { id: t, label: n, resourceUri: r }, s, o) {
    if (t)
      return `${Gc.ID_HANDLE_PREFIX}/${t}`;
    const a = cT(n), l = s ? s.item.handle : Gc.LABEL_HANDLE_PREFIX;
    let c = a ? a.label : r ? Xs(r) : "";
    c = c.indexOf("/") !== -1 ? c.replace("/", "//") : c;
    const u = this._nodes.has(e) ? this._nodes.get(e).item.handle : void 0, d = this._getChildrenNodes(s) || [];
    let f, p = 0;
    do {
      if (f = `${l}/${p}:${c}`, o || !this._elements.has(f) || u === f)
        break;
      p++;
    } while (p <= d.length);
    return f;
  }
  _getLightIconPath(e) {
    if (e.iconPath && !(e.iconPath instanceof Ji))
      return typeof e.iconPath == "string" || x.isUri(e.iconPath) ? this._getIconPath(e.iconPath) : this._getIconPath(e.iconPath.light);
  }
  _getDarkIconPath(e) {
    if (e.iconPath && !(e.iconPath instanceof Ji) && e.iconPath.dark)
      return this._getIconPath(e.iconPath.dark);
  }
  _getIconPath(e) {
    return x.isUri(e) ? e : x.file(e);
  }
  _addNodeToCache(e, t) {
    this._elements.set(t.item.handle, e), this._nodes.set(e, t);
  }
  _updateNodeCache(e, t, n, r) {
    this._elements.delete(t.item.handle), this._nodes.delete(e), t.item.handle !== n.item.handle && this._elements.delete(n.item.handle), this._addNodeToCache(e, t);
    const s = this._getChildrenNodes(r) || [], o = s.filter((a) => a.item.handle === n.item.handle)[0];
    o && s.splice(s.indexOf(o), 1, t);
  }
  _addNodeToParentCache(e, t) {
    t ? (t.children || (t.children = []), t.children.push(e)) : (this._roots || (this._roots = []), this._roots.push(e));
  }
  _addChildrenToClear(e) {
    if (e) {
      const t = this._nodes.get(e);
      if (t) {
        if (t.children)
          for (const n of t.children) {
            this._nodesToClear.add(n);
            const r = this._elements.get(n.item.handle);
            r && (this._addChildrenToClear(r), this._nodes.delete(r), this._elements.delete(n.item.handle));
          }
        t.children = void 0;
      }
    } else
      this._addAllToClear();
  }
  _addAllToClear() {
    this._roots = void 0, this._nodes.forEach((e) => {
      this._nodesToClear.add(e);
    }), this._nodes.clear(), this._elements.clear();
  }
  _clearNodes(e) {
    Kn(e);
  }
  _clearAll() {
    this._roots = void 0, this._elements.clear(), Kn(this._nodes.values()), this._nodes.clear(), Kn(this._nodesToClear), this._nodesToClear.clear();
  }
  dispose() {
    super.dispose(), this._refreshCancellationSource.dispose(), this._clearAll(), this._proxy.$disposeTree(this._viewId);
  }
};
Gc.LABEL_HANDLE_PREFIX = "0", Gc.ID_HANDLE_PREFIX = "1";
let bE = Gc;
const J1 = class J1 {
  constructor(e) {
    this._openers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadUriOpeners);
  }
  registerExternalUriOpener(e, t, n, r) {
    if (this._openers.has(t))
      throw new Error(`Opener with id '${t}' already registered`);
    const s = r.schemes.find((o) => !J1.supportedSchemes.has(o));
    if (s)
      throw new Error(
        `Scheme '${s}' is not supported. Only http and https are currently supported.`
      );
    return this._openers.set(t, n), this._proxy.$registerUriOpener(t, r.schemes, e, r.label), Ie(() => {
      this._openers.delete(t), this._proxy.$unregisterUriOpener(t);
    });
  }
  async $canOpenUri(e, t, n) {
    const r = this._openers.get(e);
    if (!r)
      throw new Error(`Unknown opener with id: ${e}`);
    const s = x.revive(t);
    return r.canOpenExternalUri(s, n);
  }
  async $openUri(e, t, n) {
    const r = this._openers.get(e);
    if (!r)
      throw new Error(`Unknown opener id: '${e}'`);
    return r.openExternalUri(x.revive(t.resolvedUri), {
      sourceUri: x.revive(t.sourceUri)
    }, n);
  }
};
J1.supportedSchemes = /* @__PURE__ */ new Set([fe.http, fe.https]);
let yE = J1;
var Co, To, _p, Eu, vp, il, Su, Us, Du, ku, Po, Iu, Cu;
class WH extends xe {
  constructor(t, n, r, s) {
    super();
    ye(this, Co);
    ye(this, To);
    ye(this, _p);
    ye(this, Eu);
    ye(this, vp);
    ye(this, il);
    ye(this, Su);
    ye(this, Us);
    ye(this, Du);
    ye(this, ku);
    ye(this, Po);
    ye(this, Iu);
    ye(this, Cu);
    le(this, Us, void 0), le(this, Du, !0), le(this, Po, !1), le(this, Iu, this._register(new M())), this.onDidDispose = N(this, Iu).event, le(this, Cu, this._register(new M())), this.onDidChangeViewState = N(this, Cu).event, le(this, Co, t), le(this, To, n), le(this, Eu, r), le(this, _p, s.viewType), le(this, vp, s.panelOptions), le(this, Us, s.viewColumn), le(this, il, s.title), le(this, ku, s.active);
  }
  dispose() {
    N(this, Po) || (le(this, Po, !0), N(this, Iu).fire(), N(this, To).$disposeWebview(N(this, Co)), N(this, Eu).dispose(), super.dispose());
  }
  get webview() {
    return this.assertNotDisposed(), N(this, Eu);
  }
  get viewType() {
    return this.assertNotDisposed(), N(this, _p);
  }
  get title() {
    return this.assertNotDisposed(), N(this, il);
  }
  set title(t) {
    this.assertNotDisposed(), N(this, il) !== t && (le(this, il, t), N(this, To).$setTitle(N(this, Co), t));
  }
  get iconPath() {
    return this.assertNotDisposed(), N(this, Su);
  }
  set iconPath(t) {
    this.assertNotDisposed(), N(this, Su) !== t && (le(this, Su, t), N(this, To).$setIconPath(N(this, Co), x.isUri(t) ? { light: t, dark: t } : t));
  }
  get options() {
    return N(this, vp);
  }
  get viewColumn() {
    if (this.assertNotDisposed(), !(typeof N(this, Us) == "number" && N(this, Us) < 0))
      return N(this, Us);
  }
  get active() {
    return this.assertNotDisposed(), N(this, ku);
  }
  get visible() {
    return this.assertNotDisposed(), N(this, Du);
  }
  _updateViewState(t) {
    N(this, Po) || (this.active !== t.active || this.visible !== t.visible || this.viewColumn !== t.viewColumn) && (le(this, ku, t.active), le(this, Du, t.visible), le(this, Us, t.viewColumn), N(this, Cu).fire({ webviewPanel: this }));
  }
  reveal(t, n) {
    this.assertNotDisposed(), N(this, To).$reveal(N(this, Co), {
      viewColumn: typeof t > "u" ? void 0 : li.from(t),
      preserveFocus: !!n
    });
  }
  assertNotDisposed() {
    if (N(this, Po))
      throw new Error("Webview is disposed");
  }
}
Co = new WeakMap(), To = new WeakMap(), _p = new WeakMap(), Eu = new WeakMap(), vp = new WeakMap(), il = new WeakMap(), Su = new WeakMap(), Us = new WeakMap(), Du = new WeakMap(), ku = new WeakMap(), Po = new WeakMap(), Iu = new WeakMap(), Cu = new WeakMap();
class KS extends xe {
  static newHandle() {
    return dn();
  }
  constructor(e, t, n) {
    super(), this.webviews = t, this.workspace = n, this._webviewPanels = /* @__PURE__ */ new Map(), this._serializers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadWebviewPanels);
  }
  dispose() {
    super.dispose(), this._webviewPanels.forEach((e) => e.dispose()), this._webviewPanels.clear();
  }
  createWebviewPanel(e, t, n, r, s = {}) {
    const o = typeof r == "object" ? r.viewColumn : r, a = {
      viewColumn: li.from(o),
      preserveFocus: typeof r == "object" && !!r.preserveFocus
    }, l = gd(e), c = KS.newHandle();
    this._proxy.$createWebviewPanel(m1(e), c, t, {
      title: n,
      panelOptions: VH(s),
      webviewOptions: tR(e, this.workspace, s),
      serializeBuffersForPostMessage: l
    }, a);
    const u = this.webviews.createNewWebview(c, s, e);
    return this.createNewWebviewPanel(c, t, n, o, s, u, !0);
  }
  $onDidChangeWebviewPanelViewStates(e) {
    const t = Object.keys(e);
    t.sort((n, r) => {
      const s = e[n], o = e[r];
      return s.active ? 1 : o.active ? -1 : +s.visible - +o.visible;
    });
    for (const n of t) {
      const r = this.getWebviewPanel(n);
      if (!r)
        continue;
      const s = e[n];
      r._updateViewState({
        active: s.active,
        visible: s.visible,
        viewColumn: li.to(s.position)
      });
    }
  }
  async $onDidDisposeWebviewPanel(e) {
    const t = this.getWebviewPanel(e);
    t == null || t.dispose(), this._webviewPanels.delete(e), this.webviews.deleteWebview(e);
  }
  registerWebviewPanelSerializer(e, t, n) {
    if (this._serializers.has(t))
      throw new Error(`Serializer for '${t}' already registered`);
    return this._serializers.set(t, { serializer: n, extension: e }), this._proxy.$registerSerializer(t, {
      serializeBuffersForPostMessage: gd(e)
    }), new je(() => {
      this._serializers.delete(t), this._proxy.$unregisterSerializer(t);
    });
  }
  async $deserializeWebviewPanel(e, t, n, r) {
    const s = this._serializers.get(t);
    if (!s)
      throw new Error(`No serializer found for '${t}'`);
    const { serializer: o, extension: a } = s, l = this.webviews.createNewWebview(e, n.webviewOptions, a), c = this.createNewWebviewPanel(e, t, n.title, r, n.panelOptions, l, n.active);
    await o.deserializeWebviewPanel(c, n.state);
  }
  createNewWebviewPanel(e, t, n, r, s, o, a) {
    const l = new WH(
      e,
      this._proxy,
      o,
      { viewType: t, title: n, viewColumn: r, panelOptions: s, active: a }
    );
    return this._webviewPanels.set(e, l), l;
  }
  getWebviewPanel(e) {
    return this._webviewPanels.get(e);
  }
}
function VH(i) {
  return {
    enableFindWidget: i.enableFindWidget,
    retainContextWhenHidden: i.retainContextWhenHidden
  };
}
var Ao, Ro, wp, Tu, Lo, nl, rl, Pu, sl, Au, Ru;
class zH extends xe {
  constructor(t, n, r, s, o, a) {
    super();
    ye(this, Ao);
    ye(this, Ro);
    ye(this, wp);
    ye(this, Tu);
    ye(this, Lo);
    ye(this, nl);
    ye(this, rl);
    ye(this, Pu);
    ye(this, sl);
    ye(this, Au);
    ye(this, Ru);
    le(this, Lo, !1), le(this, Au, this._register(new M())), this.onDidChangeVisibility = N(this, Au).event, le(this, Ru, this._register(new M())), this.onDidDispose = N(this, Ru).event, le(this, wp, r), le(this, rl, s), le(this, Ao, t), le(this, Ro, n), le(this, Tu, o), le(this, nl, a);
  }
  dispose() {
    N(this, Lo) || (le(this, Lo, !0), N(this, Ru).fire(), N(this, Tu).dispose(), super.dispose());
  }
  get title() {
    return this.assertNotDisposed(), N(this, rl);
  }
  set title(t) {
    this.assertNotDisposed(), N(this, rl) !== t && (le(this, rl, t), N(this, Ro).$setWebviewViewTitle(N(this, Ao), t));
  }
  get description() {
    return this.assertNotDisposed(), N(this, Pu);
  }
  set description(t) {
    this.assertNotDisposed(), N(this, Pu) !== t && (le(this, Pu, t), N(this, Ro).$setWebviewViewDescription(N(this, Ao), t));
  }
  get visible() {
    return N(this, nl);
  }
  get webview() {
    return N(this, Tu);
  }
  get viewType() {
    return N(this, wp);
  }
  _setVisible(t) {
    t === N(this, nl) || N(this, Lo) || (le(this, nl, t), N(this, Au).fire());
  }
  get badge() {
    return this.assertNotDisposed(), N(this, sl);
  }
  set badge(t) {
    var n, r;
    this.assertNotDisposed(), !((t == null ? void 0 : t.value) === ((n = N(this, sl)) == null ? void 0 : n.value) && (t == null ? void 0 : t.tooltip) === ((r = N(this, sl)) == null ? void 0 : r.tooltip)) && (le(this, sl, U_.from(t)), N(this, Ro).$setWebviewViewBadge(N(this, Ao), t));
  }
  show(t) {
    this.assertNotDisposed(), N(this, Ro).$show(N(this, Ao), !!t);
  }
  assertNotDisposed() {
    if (N(this, Lo))
      throw new Error("Webview is disposed");
  }
}
Ao = new WeakMap(), Ro = new WeakMap(), wp = new WeakMap(), Tu = new WeakMap(), Lo = new WeakMap(), nl = new WeakMap(), rl = new WeakMap(), Pu = new WeakMap(), sl = new WeakMap(), Au = new WeakMap(), Ru = new WeakMap();
class qH {
  constructor(e, t) {
    this._extHostWebview = t, this._viewProviders = /* @__PURE__ */ new Map(), this._webviewViews = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadWebviewViews);
  }
  registerWebviewViewProvider(e, t, n, r) {
    if (this._viewProviders.has(t))
      throw new Error(`View provider for '${t}' already registered`);
    return this._viewProviders.set(t, { provider: n, extension: e }), this._proxy.$registerWebviewViewProvider(m1(e), t, {
      retainContextWhenHidden: r == null ? void 0 : r.retainContextWhenHidden,
      serializeBuffersForPostMessage: gd(e)
    }), new je(() => {
      this._viewProviders.delete(t), this._proxy.$unregisterWebviewViewProvider(t);
    });
  }
  async $resolveWebviewView(e, t, n, r, s) {
    const o = this._viewProviders.get(t);
    if (!o)
      throw new Error(`No view provider found for '${t}'`);
    const { provider: a, extension: l } = o, c = this._extHostWebview.createNewWebview(e, {}, l), u = new zH(e, this._proxy, t, n, c, !0);
    this._webviewViews.set(e, u), await a.resolveWebviewView(u, { state: r }, s);
  }
  async $onDidChangeWebviewViewVisibility(e, t) {
    this.getWebviewView(e)._setVisible(t);
  }
  async $disposeWebviewView(e) {
    const t = this.getWebviewView(e);
    this._webviewViews.delete(e), t.dispose(), this._extHostWebview.deleteWebview(e);
  }
  getWebviewView(e) {
    const t = this._webviewViews.get(e);
    if (!t)
      throw new Error("No webview found");
    return t;
  }
}
class jH {
  constructor(e) {
    this._settingsSearchProviders = /* @__PURE__ */ new Map(), this._nextHandle = 0, this._proxy = e.getProxy(ie.MainThreadAiSettingsSearch);
  }
  async $startSearch(e, t, n, r) {
    if (this._settingsSearchProviders.size === 0)
      throw new Error("No related information providers registered");
    const s = this._settingsSearchProviders.get(e);
    if (!s)
      throw new Error("Settings search provider not found");
    const o = new Jh((a) => {
      this._proxy.$handleSearchResult(e, k0.fromSettingsSearchResult(a));
    });
    return s.provideSettingsSearchResults(t, n, o, r);
  }
  registerSettingsSearchProvider(e, t) {
    const n = this._nextHandle;
    return this._nextHandle++, this._settingsSearchProviders.set(n, t), this._proxy.$registerAiSettingsSearchProvider(n), new je(() => {
      this._proxy.$unregisterAiSettingsSearchProvider(n), this._settingsSearchProviders.delete(n);
    });
  }
}
var xE;
class GH {
  constructor(e, t, n, r, s, o) {
    this.session = e, this.extension = t, this.proxy = r, this.commandsConverter = s, this.sessionDisposables = o, this._stream = new Wx(t, n, r, s, o);
  }
  get activeResponseStream() {
    return this._stream;
  }
  getActiveRequestStream(e) {
    return new Wx(
      this.extension,
      e,
      this.proxy,
      this.commandsConverter,
      this.sessionDisposables
    );
  }
}
var Rl;
let EE = (Rl = class extends xe {
  constructor(e, t, n, r) {
    super(), this.commands = e, this._languageModels = t, this._extHostRpc = n, this._logService = r, this._chatSessionItemProviders = /* @__PURE__ */ new Map(), this._chatSessionContentProviders = /* @__PURE__ */ new Map(), this._nextChatSessionItemProviderHandle = 0, this._nextChatSessionContentProviderHandle = 0, this._sessionMap = /* @__PURE__ */ new Map(), this._extHostChatSessions = /* @__PURE__ */ new Map(), this._proxy = this._extHostRpc.getProxy(ie.MainThreadChatSessions), e.registerArgumentProcessor({
      processArgument: (s) => {
        if (s && s.$mid === rt.ChatSessionContext) {
          const o = s.id, a = this._sessionMap.get(o);
          return a || (this._logService.warn(`No chat session found for ID: ${o}`), s);
        }
        return s;
      }
    });
  }
  registerChatSessionItemProvider(e, t, n) {
    const r = this._nextChatSessionItemProviderHandle++, s = new Te();
    return this._chatSessionItemProviders.set(r, { provider: n, extension: e, disposable: s }), this._proxy.$registerChatSessionItemProvider(r, t), n.onDidChangeChatSessionItems && s.add(n.onDidChangeChatSessionItems(() => {
      this._proxy.$onDidChangeChatSessionItems(t);
    })), {
      dispose: () => {
        this._chatSessionItemProviders.delete(r), s.dispose(), this._proxy.$unregisterChatSessionItemProvider(r);
      }
    };
  }
  registerChatSessionContentProvider(e, t, n) {
    const r = this._nextChatSessionContentProviderHandle++, s = new Te();
    return this._chatSessionContentProviders.set(r, { provider: n, extension: e, disposable: s }), this._proxy.$registerChatSessionContentProvider(r, t), new je(() => {
      this._chatSessionContentProviders.delete(r), s.dispose(), this._proxy.$unregisterChatSessionContentProvider(r);
    });
  }
  async showChatSession(e, t, n, r) {
    await this._proxy.$showChatSession(t, n, li.from(r == null ? void 0 : r.viewColumn));
  }
  async $provideChatSessionItems(e, t) {
    const n = this._chatSessionItemProviders.get(e);
    if (!n)
      return this._logService.error(`No provider registered for handle ${e}`), [];
    const r = await n.provider.provideChatSessionItems(t);
    if (!r)
      return [];
    const s = [];
    for (const o of r)
      o.id && (this._sessionMap.set(o.id, o), s.push({
        id: o.id,
        label: o.label,
        iconPath: o.iconPath
      }));
    return s;
  }
  async $provideChatSessionContent(e, t, n) {
    const r = this._chatSessionContentProviders.get(e);
    if (!r)
      throw new Error(`No provider for handle ${e}`);
    const s = await r.provider.provideChatSessionContent(t, n), o = new Te(), a = xE._sessionHandlePool++, l = new GH(s, r.extension, {
      sessionId: `${t}.${a}`,
      requestId: "ongoing",
      agentId: t,
      message: "",
      variables: { variables: [] },
      location: ln.Panel
    }, {
      $handleProgressChunk: (u, d) => this._proxy.$handleProgressChunk(e, t, u, d),
      $handleAnchorResolve: (u, d, f) => {
        this._proxy.$handleAnchorResolve(e, t, u, d, f);
      }
    }, this.commands.converter, o), c = o.add(new Lt());
    return this._extHostChatSessions.set(`${e}_${t}`, { sessionObj: l, disposeCts: c }), s.activeResponseCallback && Promise.resolve(s.activeResponseCallback(l.activeResponseStream.apiObject, c.token)).finally(() => {
      this._proxy.$handleProgressComplete(e, t, "ongoing");
    }), {
      id: a + "",
      hasActiveResponseCallback: !!s.activeResponseCallback,
      hasRequestHandler: !!s.requestHandler,
      history: s.history.map((u) => u instanceof v_ ? { type: "request", prompt: u.prompt } : {
        type: "response",
        parts: Xt(u.response.map(
          (p) => Qf.from(p, this.commands.converter, o)
        ))
      })
    };
  }
  async $interruptChatSessionActiveResponse(e, t, n) {
    const r = `${e}_${t}`, s = this._extHostChatSessions.get(r);
    s == null || s.disposeCts.cancel();
  }
  async $disposeChatSessionContent(e, t) {
    const n = `${e}_${t}`, r = this._extHostChatSessions.get(n);
    if (!r) {
      this._logService.warn(`No chat session found for ID: ${n}`);
      return;
    }
    r.disposeCts.cancel(), r.sessionObj.sessionDisposables.dispose(), this._extHostChatSessions.delete(n);
  }
  async $invokeChatSessionRequestHandler(e, t, n, r, s) {
    const o = this._extHostChatSessions.get(`${e}_${t}`);
    if (!o || !o.sessionObj.session.requestHandler)
      return {};
    const a = Kf.to(n, void 0, await this.getModelForRequest(n, o.sessionObj.extension), [], /* @__PURE__ */ new Map(), o.sessionObj.extension, this._logService), l = o.sessionObj.getActiveRequestStream(n);
    return await o.sessionObj.session.requestHandler(a, { history: r }, l.apiObject, s), {};
  }
  async getModelForRequest(e, t) {
    let n;
    if (e.userSelectedModelId && (n = await this._languageModels.getLanguageModelByIdentifier(t, e.userSelectedModelId)), !n && (n = await this._languageModels.getDefaultLanguageModel(t), !n))
      throw new Error("Language model unavailable");
    return n;
  }
}, xE = Rl, Rl._sessionHandlePool = 0, Rl);
EE = xE = z([
  O(2, tt),
  O(3, ot)
], EE);
class QH {
  constructor(e, t) {
    this.webviews = t, this._renderers = /* @__PURE__ */ new Map(), this._proxy = e.getProxy(ie.MainThreadChatOutputRenderer);
  }
  registerChatOutputRenderer(e, t, n) {
    if (this._renderers.has(t))
      throw new Error(`Chat output renderer already registered for: ${t}`);
    return this._renderers.set(t, { extension: e, renderer: n }), this._proxy.$registerChatOutputRenderer(t, e.identifier, e.extensionLocation), new je(() => {
      this._renderers.delete(t), this._proxy.$unregisterChatOutputRenderer(t);
    });
  }
  async $renderChatOutput(e, t, n, r, s) {
    const o = this._renderers.get(e);
    if (!o)
      throw new Error(`No chat output renderer registered for: ${e}`);
    const a = this.webviews.createNewWebview(r, {}, o.extension);
    return o.renderer.renderChatOutput(Object.freeze({ mime: t, value: n.buffer }), a, {}, s);
  }
}
function KH(i) {
  const e = i.get(_i), t = i.get(md), n = i.get(yv), r = i.get(na), s = i.get(Zs), o = i.get(Ev), a = i.get(eo), l = i.get(ev), c = i.get(tt), u = i.get(PS), d = i.get(AS), f = i.get(ta), p = i.get(ot), v = i.get(RS), _ = i.get(Lp), m = i.get(Sv), E = i.get(Dv), S = i.get(OS), k = i.get(Mp), q = i.get(US), B = i.get(kv), te = i.get(NS), G = i.get(MS), ae = i.get(Ox), K = i.get(GA);
  c.set(pe.ExtHostFileSystemInfo, t), c.set(pe.ExtHostLogLevelServiceShape, f), c.set(pe.ExtHostWorkspace, s), c.set(pe.ExtHostConfiguration, a), c.set(pe.ExtHostExtensionService, r), c.set(pe.ExtHostStorage, u), c.set(pe.ExtHostTunnelService, v), c.set(pe.ExtHostWindow, m), c.set(pe.ExtHostUrls, E), c.set(pe.ExtHostSecretState, S), c.set(pe.ExtHostTelemetry, o), c.set(pe.ExtHostEditorTabs, k), c.set(pe.ExtHostManagedSockets, q), c.set(pe.ExtHostProgress, B), c.set(pe.ExtHostAuthentication, te), c.set(pe.ExtHostChatProvider, G), c.set(pe.ExtHostDataChannels, K);
  const Ee = c.set(pe.ExtHostDecorations, i.get(MA)), He = c.set(pe.ExtHostDocumentsAndEditors, i.get(yd)), Re = c.set(pe.ExtHostCommands, i.get(ic)), Z = c.set(pe.ExtHostTerminalService, i.get(bd)), Y = c.set(pe.ExtHostTerminalShellIntegration, i.get(jA)), ee = c.set(pe.ExtHostDebugService, i.get(WA)), re = c.set(pe.ExtHostSearch, i.get(qA)), ce = c.set(pe.ExtHostTask, i.get(UA)), Oe = c.set(pe.ExtHostOutputService, i.get(NA)), Ve = c.set(pe.ExtHostLocalization, i.get(FS)), Qe = c.set(pe.ExtHostDocuments, new g$(c, He)), It = c.set(pe.ExtHostDocumentContentProviders, new Gx(c, He, p)), Zt = c.set(pe.ExtHostDocumentSaveParticipant, new p$(p, Qe, c.getProxy(ie.MainThreadBulkEdits))), ht = c.set(pe.ExtHostNotebook, new lE(
    c,
    Re,
    He,
    Qe,
    n,
    re,
    p
  )), Mt = c.set(pe.ExtHostNotebookDocuments, new mH(ht)), fn = c.set(pe.ExtHostNotebookEditors, new cE(p, ht)), vi = c.set(pe.ExtHostNotebookKernels, new uE(c, e, ht, Re, p)), Ar = c.set(pe.ExtHostNotebookRenderers, new bH(c, ht)), er = c.set(pe.ExtHostNotebookDocumentSaveParticipant, new gH(p, ht, c.getProxy(ie.MainThreadBulkEdits))), zi = c.set(pe.ExtHostEditors, new MH(c, He)), Ed = c.set(pe.ExtHostTreeViews, new BH(c.getProxy(ie.MainThreadTreeViews), Re, p)), Op = c.set(pe.ExtHostEditorInsets, new jU(c.getProxy(ie.MainThreadEditorInsets), zi, e.remote)), to = c.set(pe.ExtHostDiagnostics, new jx(
    c,
    p,
    t,
    He
  )), Bn = c.set(pe.ExtHostLanguages, new G$(c, Qe, Re.converter, l)), qe = c.set(pe.ExtHostLanguageFeatures, new Qx(
    c,
    l,
    Qe,
    Re,
    to,
    p,
    _,
    o
  )), Pv = c.set(pe.ExtHostCodeMapper, new qx(c)), Av = c.set(pe.ExtHostFileSystem, new w1(c, qe)), et = c.set(pe.ExtHostFileSystemEventService, new D$(c, p, He)), ra = c.set(pe.ExtHostQuickOpen, xH(c, s, Re)), Fp = c.set(pe.ExtHostSCM, new gE(c, Re, Qe, p)), Up = c.set(pe.ExtHostQuickDiff, new fE(c, l)), io = c.set(pe.ExtHostShare, new mE(c, l)), Rv = c.set(pe.ExtHostComments, GU(c, Re, Qe)), Lv = c.set(pe.ExtHostLabelService, new I$(c)), $p = c.set(pe.ExtHostTheming, new wE(c)), Nv = c.set(pe.ExtHostTimeline, new OH(c, Re)), pn = c.set(pe.ExtHostWebviews, new n$(
    c,
    e.remote,
    s,
    p,
    _
  )), Sd = c.set(pe.ExtHostWebviewPanels, new KS(c, pn, s)), Mv = c.set(pe.ExtHostCustomEditors, new c$(
    c,
    Qe,
    d,
    pn,
    Sd
  )), Ov = c.set(pe.ExtHostWebviewViews, new qH(c, pn)), no = c.set(pe.ExtHostTesting, i.get(Cv)), nc = c.set(pe.ExtHostUriOpeners, new yE(c)), rc = c.set(pe.ExtHostProfileContentHandlers, new yH(c)), Dd = c.set(pe.ExtHostChatOutputRenderer, new QH(c, pn));
  c.set(pe.ExtHostInteractive, new k$(
    c,
    ht,
    He,
    Re,
    p
  ));
  const sa = c.set(pe.ExtHostLanguageModelTools, new j$(c, G)), tr = c.set(pe.ExtHostChatAgents2, new Vx(
    c,
    p,
    Re,
    Qe,
    G,
    to,
    sa
  )), sc = c.set(pe.ExtHostAiRelatedInformation, new AU(c)), oc = c.set(pe.ExtHostAiEmbeddingVector, new _$(c)), gn = c.set(pe.ExtHostAiSettingsSearch, new jH(c)), ro = c.set(pe.ExtHostStatusBar, new NH(c, Re.converter)), zt = c.set(pe.ExtHostSpeech, new _E(c)), oa = c.set(pe.ExtHostEmbeddings, new m$(c)), kd = c.set(pe.ExtHostChatSessions, new EE(Re, G, c, p));
  c.set(pe.ExtHostMcp, i.get(Ox));
  const Ui = Object.values(pe);
  c.assertRegistered(Ui);
  const Fv = new Bx(c, He), Uv = new VU(c), Id = new nE(c, p), Hp = new f$(c), $v = new BU(c);
  return OU.register(Re), function(T, Rr, Cd) {
    function ge(w) {
      return (b, I, we) => {
        const Xe = w((di) => {
          try {
            b.call(I, di);
          } catch (lc) {
            Cw(new uP(T.identifier, lc, "FAILED to handle event"));
          }
        });
        return we == null || we.push(Xe), Xe;
      };
    }
    const at = (function() {
      let w = !T.isUnderDevelopment;
      function b() {
        w || (p.info(`Extension '${T.identifier.value}' uses a document selector without scheme. Learn more about this: https://go.microsoft.com/fwlink/?linkid=872305`), w = !0);
      }
      return function I(we) {
        if (Array.isArray(we))
          we.forEach(I);
        else if (typeof we == "string")
          b();
        else {
          const Xe = we;
          typeof Xe.scheme > "u" && b(), typeof Xe.exclusive == "boolean" && H(T, "documentFiltersExclusive");
        }
        return we;
      };
    })(), Hv = {
      getSession(w, b, I) {
        return (typeof (I == null ? void 0 : I.forceNewSession) == "object" && I.forceNewSession.learnMore || typeof (I == null ? void 0 : I.createIfNone) == "object" && I.createIfNone.learnMore) && H(T, "authLearnMore"), I != null && I.authorizationServer && H(T, "authIssuers"), te.getSession(T, w, b, I);
      },
      getAccounts(w) {
        return te.getAccounts(w);
      },
      async hasSession(w, b) {
        return H(T, "authSession"), !!await te.getSession(T, w, b, { silent: !0 });
      },
      get onDidChangeSessions() {
        return ge(te.getExtensionScopedSessionsEvent(T.identifier.value));
      },
      registerAuthenticationProvider(w, b, I, we) {
        return we != null && we.supportedAuthorizationServers && H(T, "authIssuers"), te.registerAuthenticationProvider(w, b, I, we);
      }
    }, Bv = {
      registerCommand(w, b, I) {
        return Re.registerCommand(!0, w, b, I, void 0, T);
      },
      registerTextEditorCommand(w, b, I) {
        return Re.registerCommand(!0, w, (...we) => {
          const Xe = zi.getActiveTextEditor();
          if (!Xe) {
            p.warn("Cannot execute " + w + " because there is no active text editor.");
            return;
          }
          return Xe.edit((di) => {
            b.apply(I, [Xe, di, ...we]);
          }).then((di) => {
            di || p.warn("Edits from command " + w + " were not applied.");
          }, (di) => {
            p.warn("An error occurred while running command " + w, di);
          });
        }, void 0, void 0, T);
      },
      registerDiffInformationCommand: (w, b, I) => (H(T, "diffCommand"), Re.registerCommand(!0, w, async (...we) => {
        const Xe = He.activeEditor(!0);
        if (!Xe) {
          p.warn("Cannot execute " + w + " because there is no active text editor.");
          return;
        }
        const di = await zi.getDiffInformation(Xe.id);
        b.apply(I, [di, ...we]);
      }, void 0, void 0, T)),
      executeCommand(w, ...b) {
        return Re.executeCommand(w, ...b);
      },
      getCommands(w = !1) {
        return Re.getCommands(w);
      }
    }, Wv = {
      get machineId() {
        return e.telemetryInfo.machineId;
      },
      get sessionId() {
        return e.telemetryInfo.sessionId;
      },
      get language() {
        return e.environment.appLanguage;
      },
      get appName() {
        return e.environment.appName;
      },
      get appRoot() {
        var w;
        return ((w = e.environment.appRoot) == null ? void 0 : w.fsPath) ?? "";
      },
      get appHost() {
        return e.environment.appHost;
      },
      get uriScheme() {
        return e.environment.appUriScheme;
      },
      get clipboard() {
        return Uv.value;
      },
      get shell() {
        return Z.getDefaultShell(!1);
      },
      get onDidChangeShell() {
        return ge(Z.onDidChangeShell);
      },
      get isTelemetryEnabled() {
        return o.getTelemetryConfiguration();
      },
      get onDidChangeTelemetryEnabled() {
        return ge(o.onDidChangeTelemetryEnabled);
      },
      get telemetryConfiguration() {
        return H(T, "telemetry"), o.getTelemetryDetails();
      },
      get onDidChangeTelemetryConfiguration() {
        return H(T, "telemetry"), ge(o.onDidChangeTelemetryConfiguration);
      },
      get isNewAppInstall() {
        return _A(e.telemetryInfo.firstSessionDate);
      },
      createTelemetryLogger(w, b) {
        return mA.validateSender(w), o.instantiateLogger(T, w, b);
      },
      openExternal(w, b) {
        return m.openUri(w, {
          allowTunneling: !!e.remote.authority,
          allowContributedOpeners: b == null ? void 0 : b.allowContributedOpeners
        });
      },
      async asExternalUri(w) {
        if (w.scheme === e.environment.appUriScheme)
          return E.createAppUri(w);
        try {
          return await m.asExternalUri(w, { allowTunneling: !!e.remote.authority });
        } catch (b) {
          if (Vw(w, fe.http) || Vw(w, fe.https))
            return w;
          throw b;
        }
      },
      get remoteName() {
        return VE(e.remote.authority);
      },
      get remoteAuthority() {
        return H(T, "resolvers"), e.remote.authority;
      },
      get uiKind() {
        return e.uiKind;
      },
      get logLevel() {
        return p.getLevel();
      },
      get onDidChangeLogLevel() {
        return ge(p.onDidChangeLogLevel);
      },
      get appQuality() {
        return H(T, "resolvers"), e.quality;
      },
      get appCommit() {
        return H(T, "resolvers"), e.commit;
      },
      getDataChannel(w) {
        return H(T, "dataChannels"), K.createDataChannel(T, w);
      }
    }, Vv = {
      createTestController(w, b, I) {
        return no.createTestController(T, w, b, I);
      },
      createTestObserver() {
        return H(T, "testObserver"), no.createTestObserver();
      },
      runTests(w) {
        return H(T, "testObserver"), no.runTests(w);
      },
      registerTestFollowupProvider(w) {
        return H(T, "testObserver"), no.registerTestFollowupProvider(w);
      },
      get onDidChangeTestResults() {
        return H(T, "testObserver"), ge(no.onResultsChanged);
      },
      get testResults() {
        return H(T, "testObserver"), no.results;
      }
    }, ac = e.remote.isRemote ? gl.Workspace : gl.UI, Td = {
      getExtension(w, b) {
        dt(T, "extensionsAny") || (b = !1);
        const I = Rr.mine.getExtensionDescription(w);
        if (I)
          return new Xd(r, T.identifier, I, ac, !1);
        if (b) {
          const we = Rr.all.getExtensionDescription(w);
          if (we)
            return new Xd(
              r,
              T.identifier,
              we,
              ac,
              !0
            );
        }
      },
      get all() {
        const w = [];
        for (const b of Rr.mine.getAllExtensionDescriptions())
          w.push(new Xd(r, T.identifier, b, ac, !1));
        return w;
      },
      get allAcrossExtensionHosts() {
        H(T, "extensionsAny");
        const w = new Ql(Rr.mine.getAllExtensionDescriptions().map((I) => I.identifier)), b = [];
        for (const I of Rr.all.getAllExtensionDescriptions()) {
          const we = !w.has(I.identifier);
          b.push(new Xd(
            r,
            T.identifier,
            I,
            ac,
            we
          ));
        }
        return b;
      },
      get onDidChange() {
        return dt(T, "extensionsAny") ? ge(Pt.any(Rr.mine.onDidChange, Rr.all.onDidChange)) : ge(Rr.mine.onDidChange);
      }
    }, zv = {
      createDiagnosticCollection(w) {
        return to.createDiagnosticCollection(T.identifier, w);
      },
      get onDidChangeDiagnostics() {
        return ge(to.onDidChangeDiagnostics);
      },
      getDiagnostics: (w) => to.getDiagnostics(w),
      getLanguages() {
        return Bn.getLanguages();
      },
      setTextDocumentLanguage(w, b) {
        return Bn.changeLanguage(w.uri, b);
      },
      match(w, b) {
        var Xe;
        const I = n0.from(w);
        let we;
        return KA(I) && (we = (Xe = ht.notebookDocuments.find((di) => di.apiNotebook.getCells().find((lc) => lc.document === b))) == null ? void 0 : Xe.apiNotebook), QA(I, b.uri, b.languageId, !0, we == null ? void 0 : we.uri, we == null ? void 0 : we.notebookType);
      },
      registerCodeActionsProvider(w, b, I) {
        return qe.registerCodeActionProvider(T, at(w), b, I);
      },
      registerDocumentPasteEditProvider(w, b, I) {
        return qe.registerDocumentPasteEditProvider(T, at(w), b, I);
      },
      registerCodeLensProvider(w, b) {
        return qe.registerCodeLensProvider(T, at(w), b);
      },
      registerDefinitionProvider(w, b) {
        return qe.registerDefinitionProvider(T, at(w), b);
      },
      registerDeclarationProvider(w, b) {
        return qe.registerDeclarationProvider(T, at(w), b);
      },
      registerImplementationProvider(w, b) {
        return qe.registerImplementationProvider(T, at(w), b);
      },
      registerTypeDefinitionProvider(w, b) {
        return qe.registerTypeDefinitionProvider(T, at(w), b);
      },
      registerHoverProvider(w, b) {
        return qe.registerHoverProvider(T, at(w), b, T.identifier);
      },
      registerEvaluatableExpressionProvider(w, b) {
        return qe.registerEvaluatableExpressionProvider(T, at(w), b, T.identifier);
      },
      registerInlineValuesProvider(w, b) {
        return qe.registerInlineValuesProvider(T, at(w), b, T.identifier);
      },
      registerDocumentHighlightProvider(w, b) {
        return qe.registerDocumentHighlightProvider(T, at(w), b);
      },
      registerMultiDocumentHighlightProvider(w, b) {
        return qe.registerMultiDocumentHighlightProvider(T, at(w), b);
      },
      registerLinkedEditingRangeProvider(w, b) {
        return qe.registerLinkedEditingRangeProvider(T, at(w), b);
      },
      registerReferenceProvider(w, b) {
        return qe.registerReferenceProvider(T, at(w), b);
      },
      registerRenameProvider(w, b) {
        return qe.registerRenameProvider(T, at(w), b);
      },
      registerNewSymbolNamesProvider(w, b) {
        return H(T, "newSymbolNamesProvider"), qe.registerNewSymbolNamesProvider(T, at(w), b);
      },
      registerDocumentSymbolProvider(w, b, I) {
        return qe.registerDocumentSymbolProvider(T, at(w), b, I);
      },
      registerWorkspaceSymbolProvider(w) {
        return qe.registerWorkspaceSymbolProvider(T, w);
      },
      registerDocumentFormattingEditProvider(w, b) {
        return qe.registerDocumentFormattingEditProvider(T, at(w), b);
      },
      registerDocumentRangeFormattingEditProvider(w, b) {
        return qe.registerDocumentRangeFormattingEditProvider(T, at(w), b);
      },
      registerOnTypeFormattingEditProvider(w, b, I, ...we) {
        return qe.registerOnTypeFormattingEditProvider(T, at(w), b, [I].concat(we));
      },
      registerDocumentSemanticTokensProvider(w, b, I) {
        return qe.registerDocumentSemanticTokensProvider(T, at(w), b, I);
      },
      registerDocumentRangeSemanticTokensProvider(w, b, I) {
        return qe.registerDocumentRangeSemanticTokensProvider(T, at(w), b, I);
      },
      registerSignatureHelpProvider(w, b, I, ...we) {
        return typeof I == "object" ? qe.registerSignatureHelpProvider(T, at(w), b, I) : qe.registerSignatureHelpProvider(T, at(w), b, typeof I > "u" ? [] : [I, ...we]);
      },
      registerCompletionItemProvider(w, b, ...I) {
        return qe.registerCompletionItemProvider(T, at(w), b, I);
      },
      registerInlineCompletionItemProvider(w, b, I) {
        return b.handleDidShowCompletionItem && H(T, "inlineCompletionsAdditions"), b.handleDidPartiallyAcceptCompletionItem && H(T, "inlineCompletionsAdditions"), I && H(T, "inlineCompletionsAdditions"), qe.registerInlineCompletionsProvider(T, at(w), b, I);
      },
      registerDocumentLinkProvider(w, b) {
        return qe.registerDocumentLinkProvider(T, at(w), b);
      },
      registerColorProvider(w, b) {
        return qe.registerColorProvider(T, at(w), b);
      },
      registerFoldingRangeProvider(w, b) {
        return qe.registerFoldingRangeProvider(T, at(w), b);
      },
      registerSelectionRangeProvider(w, b) {
        return qe.registerSelectionRangeProvider(T, w, b);
      },
      registerCallHierarchyProvider(w, b) {
        return qe.registerCallHierarchyProvider(T, w, b);
      },
      registerTypeHierarchyProvider(w, b) {
        return qe.registerTypeHierarchyProvider(T, w, b);
      },
      setLanguageConfiguration: (w, b) => qe.setLanguageConfiguration(T, w, b),
      getTokenInformationAtPosition(w, b) {
        return H(T, "tokenInformation"), Bn.tokenAtPosition(w, b);
      },
      registerInlayHintsProvider(w, b) {
        return qe.registerInlayHintsProvider(T, w, b);
      },
      createLanguageStatusItem(w, b) {
        return Bn.createLanguageStatusItem(T, w, b);
      },
      registerDocumentDropEditProvider(w, b, I) {
        return qe.registerDocumentOnDropEditProvider(T, w, b, I);
      }
    }, qv = {
      get activeTextEditor() {
        return zi.getActiveTextEditor();
      },
      get visibleTextEditors() {
        return zi.getVisibleTextEditors();
      },
      get activeTerminal() {
        return Z.activeTerminal;
      },
      get terminals() {
        return Z.terminals;
      },
      async showTextDocument(w, b, I) {
        x.isUri(w) && w.scheme === fe.vscodeRemote && !w.authority && _.report("workspace.showTextDocument", T, "A URI of 'vscode-remote' scheme requires an authority.");
        const we = await (x.isUri(w) ? Promise.resolve(Bp.openTextDocument(w)) : Promise.resolve(w));
        return zi.showTextDocument(we, b, I);
      },
      createTextEditorDecorationType(w) {
        return zi.createTextEditorDecorationType(T, w);
      },
      onDidChangeActiveTextEditor(w, b, I) {
        return ge(zi.onDidChangeActiveTextEditor)(w, b, I);
      },
      onDidChangeVisibleTextEditors(w, b, I) {
        return ge(zi.onDidChangeVisibleTextEditors)(w, b, I);
      },
      onDidChangeTextEditorSelection(w, b, I) {
        return ge(zi.onDidChangeTextEditorSelection)(w, b, I);
      },
      onDidChangeTextEditorOptions(w, b, I) {
        return ge(zi.onDidChangeTextEditorOptions)(w, b, I);
      },
      onDidChangeTextEditorVisibleRanges(w, b, I) {
        return ge(zi.onDidChangeTextEditorVisibleRanges)(w, b, I);
      },
      onDidChangeTextEditorViewColumn(w, b, I) {
        return ge(zi.onDidChangeTextEditorViewColumn)(w, b, I);
      },
      onDidChangeTextEditorDiffInformation(w, b, I) {
        return H(T, "textEditorDiffInformation"), ge(zi.onDidChangeTextEditorDiffInformation)(w, b, I);
      },
      onDidCloseTerminal(w, b, I) {
        return ge(Z.onDidCloseTerminal)(w, b, I);
      },
      onDidOpenTerminal(w, b, I) {
        return ge(Z.onDidOpenTerminal)(w, b, I);
      },
      onDidChangeActiveTerminal(w, b, I) {
        return ge(Z.onDidChangeActiveTerminal)(w, b, I);
      },
      onDidChangeTerminalDimensions(w, b, I) {
        return H(T, "terminalDimensions"), ge(Z.onDidChangeTerminalDimensions)(w, b, I);
      },
      onDidChangeTerminalState(w, b, I) {
        return ge(Z.onDidChangeTerminalState)(w, b, I);
      },
      onDidWriteTerminalData(w, b, I) {
        return H(T, "terminalDataWriteEvent"), ge(Z.onDidWriteTerminalData)(w, b, I);
      },
      onDidExecuteTerminalCommand(w, b, I) {
        return H(T, "terminalExecuteCommandEvent"), ge(Z.onDidExecuteTerminalCommand)(w, b, I);
      },
      onDidChangeTerminalShellIntegration(w, b, I) {
        return ge(Y.onDidChangeTerminalShellIntegration)(w, b, I);
      },
      onDidStartTerminalShellExecution(w, b, I) {
        return ge(Y.onDidStartTerminalShellExecution)(w, b, I);
      },
      onDidEndTerminalShellExecution(w, b, I) {
        return ge(Y.onDidEndTerminalShellExecution)(w, b, I);
      },
      get state() {
        return m.getState();
      },
      onDidChangeWindowState(w, b, I) {
        return ge(m.onDidChangeWindowState)(w, b, I);
      },
      showInformationMessage(w, ...b) {
        return Id.showMessage(T, Yt.Info, w, b[0], b.slice(1));
      },
      showWarningMessage(w, ...b) {
        return Id.showMessage(T, Yt.Warning, w, b[0], b.slice(1));
      },
      showErrorMessage(w, ...b) {
        return Id.showMessage(T, Yt.Error, w, b[0], b.slice(1));
      },
      showQuickPick(w, b, I) {
        return ra.showQuickPick(T, w, b, I);
      },
      showWorkspaceFolderPick(w) {
        return ra.showWorkspaceFolderPick(w);
      },
      showInputBox(w, b) {
        return ra.showInput(w, b);
      },
      showOpenDialog(w) {
        return Hp.showOpenDialog(w);
      },
      showSaveDialog(w) {
        return Hp.showSaveDialog(w);
      },
      createStatusBarItem(w, b, I) {
        let we, Xe, di;
        return typeof w == "string" ? (we = w, Xe = b, di = I) : (Xe = w, di = b), ro.createStatusBarEntry(T, we, Xe, di);
      },
      setStatusBarMessage(w, b) {
        return ro.setStatusBarMessage(w, b);
      },
      withScmProgress(w) {
        return _.report("window.withScmProgress", T, "Use 'withProgress' instead."), B.withProgress(T, { location: zo.SourceControl }, (b, I) => w({ report(we) {
        } }));
      },
      withProgress(w, b) {
        return B.withProgress(T, w, b);
      },
      createOutputChannel(w, b) {
        return Oe.createOutputChannel(w, b, T);
      },
      createWebviewPanel(w, b, I, we) {
        return Sd.createWebviewPanel(T, w, b, I, we);
      },
      createWebviewTextEditorInset(w, b, I, we) {
        return H(T, "editorInsets"), Op.createWebviewEditorInset(w, b, I, we, T);
      },
      createTerminal(w, b, I) {
        return typeof w == "object" ? "pty" in w ? Z.createExtensionTerminal(w) : Z.createTerminalFromOptions(w) : Z.createTerminal(w, b, I);
      },
      registerTerminalLinkProvider(w) {
        return Z.registerLinkProvider(w);
      },
      registerTerminalProfileProvider(w, b) {
        return Z.registerProfileProvider(T, w, b);
      },
      registerTerminalCompletionProvider(w, ...b) {
        return H(T, "terminalCompletionProvider"), Z.registerTerminalCompletionProvider(T, w, ...b);
      },
      registerTerminalQuickFixProvider(w, b) {
        return H(T, "terminalQuickFixProvider"), Z.registerTerminalQuickFixProvider(w, T.identifier.value, b);
      },
      registerTreeDataProvider(w, b) {
        return Ed.registerTreeDataProvider(w, b, T);
      },
      createTreeView(w, b) {
        return Ed.createTreeView(w, b, T);
      },
      registerWebviewPanelSerializer: (w, b) => Sd.registerWebviewPanelSerializer(T, w, b),
      registerCustomEditorProvider: (w, b, I = {}) => Mv.registerCustomEditorProvider(T, w, b, I),
      registerFileDecorationProvider(w) {
        return Ee.registerFileDecorationProvider(w, T);
      },
      registerUriHandler(w) {
        return E.registerUriHandler(T, w);
      },
      createQuickPick() {
        return ra.createQuickPick(T);
      },
      createInputBox() {
        return ra.createInputBox(T);
      },
      get activeColorTheme() {
        return $p.activeColorTheme;
      },
      onDidChangeActiveColorTheme(w, b, I) {
        return ge($p.onDidChangeActiveColorTheme)(w, b, I);
      },
      registerWebviewViewProvider(w, b, I) {
        return Ov.registerWebviewViewProvider(T, w, b, I == null ? void 0 : I.webviewOptions);
      },
      get activeNotebookEditor() {
        return ht.activeNotebookEditor;
      },
      onDidChangeActiveNotebookEditor(w, b, I) {
        return ge(ht.onDidChangeActiveNotebookEditor)(w, b, I);
      },
      get visibleNotebookEditors() {
        return ht.visibleNotebookEditors;
      },
      get onDidChangeVisibleNotebookEditors() {
        return ge(ht.onDidChangeVisibleNotebookEditors);
      },
      onDidChangeNotebookEditorSelection(w, b, I) {
        return ge(fn.onDidChangeNotebookEditorSelection)(w, b, I);
      },
      onDidChangeNotebookEditorVisibleRanges(w, b, I) {
        return ge(fn.onDidChangeNotebookEditorVisibleRanges)(w, b, I);
      },
      showNotebookDocument(w, b) {
        return ht.showNotebookDocument(w, b);
      },
      registerExternalUriOpener(w, b, I) {
        return H(T, "externalUriOpener"), nc.registerExternalUriOpener(T.identifier, w, b, I);
      },
      registerProfileContentHandler(w, b) {
        return H(T, "profileContentHandlers"), rc.registerProfileContentHandler(T, w, b);
      },
      registerQuickDiffProvider(w, b, I, we, Xe) {
        return H(T, "quickDiffProvider"), Up.registerQuickDiffProvider(T, at(w), b, I, we, Xe);
      },
      get tabGroups() {
        return k.tabGroups;
      },
      registerShareProvider(w, b) {
        return H(T, "shareProvider"), io.registerShareProvider(at(w), b);
      },
      get nativeHandle() {
        return H(T, "nativeWindowHandle"), m.nativeHandle;
      },
      createChatStatusItem: (w) => (H(T, "chatStatusItem"), $v.createChatStatusItem(T, w)),
      showChatSession: (w, b, I) => (H(T, "chatSessionsProvider"), kd.showChatSession(T, w, b, I))
    }, Bp = {
      get rootPath() {
        return _.report("workspace.rootPath", T, "Please use 'workspace.workspaceFolders' instead. More details: https://aka.ms/vscode-eliminating-rootpath"), s.getPath();
      },
      set rootPath(w) {
        throw new Pa("rootPath");
      },
      getWorkspaceFolder(w) {
        return s.getWorkspaceFolder(w);
      },
      get workspaceFolders() {
        return s.getWorkspaceFolders();
      },
      get name() {
        return s.name;
      },
      set name(w) {
        throw new Pa("name");
      },
      get workspaceFile() {
        return s.workspaceFile;
      },
      set workspaceFile(w) {
        throw new Pa("workspaceFile");
      },
      updateWorkspaceFolders: (w, b, ...I) => s.updateWorkspaceFolders(T, w, b || 0, ...I),
      onDidChangeWorkspaceFolders: function(w, b, I) {
        return ge(s.onDidChangeWorkspace)(w, b, I);
      },
      asRelativePath: (w, b) => s.getRelativePath(w, b),
      findFiles: (w, b, I, we) => s.findFiles(w, b, I, T.identifier, we),
      findFiles2: (w, b, I) => (H(T, "findFiles2"), s.findFiles2(w, b, T.identifier, I)),
      findTextInFiles: (w, b, I, we) => {
        H(T, "findTextInFiles");
        let Xe, di;
        return typeof b == "object" ? (Xe = b, di = I) : (Xe = {}, di = b, we = I), s.findTextInFiles(w, Xe || {}, di, T.identifier, we);
      },
      findTextInFiles2: (w, b, I) => (H(T, "findTextInFiles2"), H(T, "textSearchProvider2"), s.findTextInFiles2(w, b, T.identifier, I)),
      save: (w) => s.save(w),
      saveAs: (w) => s.saveAs(w),
      saveAll: (w) => s.saveAll(w),
      applyEdit(w, b) {
        return Fv.applyWorkspaceEdit(w, T, b);
      },
      createFileSystemWatcher: (w, b, I, we) => {
        const Xe = {
          ignoreCreateEvents: !!b,
          ignoreChangeEvents: !!I,
          ignoreDeleteEvents: !!we
        };
        return et.createFileSystemWatcher(s, Cd, T, w, Xe);
      },
      get textDocuments() {
        return Qe.getAllDocumentData().map((w) => w.document);
      },
      set textDocuments(w) {
        throw new Pa("textDocuments");
      },
      openTextDocument(w, b) {
        let I;
        if (b = b ?? w, typeof w == "string")
          I = Promise.resolve(x.file(w));
        else if (x.isUri(w))
          I = Promise.resolve(w);
        else if (!b || typeof b == "object")
          I = Qe.createDocumentData(b);
        else
          throw new Error("illegal argument - uriOrFileNameOrOptions");
        return I.then((we) => (p.trace(`openTextDocument from ${T.identifier}`), we.scheme === fe.vscodeRemote && !we.authority && _.report("workspace.openTextDocument", T, "A URI of 'vscode-remote' scheme requires an authority."), Qe.ensureDocumentData(we, b).then((Xe) => Xe.document)));
      },
      onDidOpenTextDocument: (w, b, I) => ge(Qe.onDidAddDocument)(w, b, I),
      onDidCloseTextDocument: (w, b, I) => ge(Qe.onDidRemoveDocument)(w, b, I),
      onDidChangeTextDocument: (w, b, I) => dt(T, "textDocumentChangeReason") ? ge(Qe.onDidChangeDocumentWithReason)(w, b, I) : ge(Qe.onDidChangeDocument)(w, b, I),
      onDidSaveTextDocument: (w, b, I) => ge(Qe.onDidSaveDocument)(w, b, I),
      onWillSaveTextDocument: (w, b, I) => ge(Zt.getOnWillSaveTextDocumentEvent(T))(w, b, I),
      get notebookDocuments() {
        return ht.notebookDocuments.map((w) => w.apiNotebook);
      },
      async openNotebookDocument(w, b) {
        let I;
        if (x.isUri(w))
          I = w, await ht.openNotebookDocument(w);
        else if (typeof w == "string")
          I = x.revive(await ht.createNotebookDocument({ viewType: w, content: b }));
        else
          throw new Error("Invalid arguments");
        return ht.getNotebookDocument(I).apiNotebook;
      },
      onDidSaveNotebookDocument(w, b, I) {
        return ge(Mt.onDidSaveNotebookDocument)(w, b, I);
      },
      onDidChangeNotebookDocument(w, b, I) {
        return ge(Mt.onDidChangeNotebookDocument)(w, b, I);
      },
      onWillSaveNotebookDocument(w, b, I) {
        return ge(er.getOnWillSaveNotebookDocumentEvent(T))(w, b, I);
      },
      get onDidOpenNotebookDocument() {
        return ge(ht.onDidOpenNotebookDocument);
      },
      get onDidCloseNotebookDocument() {
        return ge(ht.onDidCloseNotebookDocument);
      },
      registerNotebookSerializer(w, b, I, we) {
        return ht.registerNotebookSerializer(T, w, b, I, dt(T, "notebookLiveShare") ? we : void 0);
      },
      onDidChangeConfiguration: (w, b, I) => ge(Cd.onDidChangeConfiguration)(w, b, I),
      getConfiguration(w, b) {
        return b = arguments.length === 1 ? void 0 : b, Cd.getConfiguration(w, b, T);
      },
      registerTextDocumentContentProvider(w, b) {
        return It.registerTextDocumentContentProvider(w, b);
      },
      registerTaskProvider: (w, b) => (_.report("window.registerTaskProvider", T, "Use the corresponding function on the 'tasks' namespace instead"), ce.registerTaskProvider(T, w, b)),
      registerFileSystemProvider(w, b, I) {
        return LE(Av.registerFileSystemProvider(T, w, b, I), n.addFileSystemProvider(w, b, I));
      },
      get fs() {
        return n.value;
      },
      registerFileSearchProvider: (w, b) => (H(T, "fileSearchProvider"), re.registerFileSearchProviderOld(w, b)),
      registerTextSearchProvider: (w, b) => (H(T, "textSearchProvider"), re.registerTextSearchProviderOld(w, b)),
      registerAITextSearchProvider: (w, b) => (H(T, "aiTextSearchProvider"), H(T, "textSearchProvider2"), re.registerAITextSearchProvider(w, b)),
      registerFileSearchProvider2: (w, b) => (H(T, "fileSearchProvider2"), re.registerFileSearchProvider(w, b)),
      registerTextSearchProvider2: (w, b) => (H(T, "textSearchProvider2"), re.registerTextSearchProvider(w, b)),
      registerRemoteAuthorityResolver: (w, b) => (H(T, "resolvers"), r.registerRemoteAuthorityResolver(w, b)),
      registerResourceLabelFormatter: (w) => (H(T, "resolvers"), Lv.$registerResourceLabelFormatter(w)),
      getRemoteExecServer: (w) => (H(T, "resolvers"), r.getRemoteExecServer(w)),
      onDidCreateFiles: (w, b, I) => ge(et.onDidCreateFile)(w, b, I),
      onDidDeleteFiles: (w, b, I) => ge(et.onDidDeleteFile)(w, b, I),
      onDidRenameFiles: (w, b, I) => ge(et.onDidRenameFile)(w, b, I),
      onWillCreateFiles: (w, b, I) => ge(et.getOnWillCreateFileEvent(T))(w, b, I),
      onWillDeleteFiles: (w, b, I) => ge(et.getOnWillDeleteFileEvent(T))(w, b, I),
      onWillRenameFiles: (w, b, I) => ge(et.getOnWillRenameFileEvent(T))(w, b, I),
      openTunnel: (w) => (H(T, "tunnels"), v.openTunnel(T, w).then((b) => {
        if (!b)
          throw new Error("cannot open tunnel");
        return b;
      })),
      get tunnels() {
        return H(T, "tunnels"), v.getTunnels();
      },
      onDidChangeTunnels: (w, b, I) => (H(T, "tunnels"), ge(v.onDidChangeTunnels)(w, b, I)),
      registerPortAttributesProvider: (w, b) => (H(T, "portsAttributes"), v.registerPortsAttributesProvider(w, b)),
      registerTunnelProvider: (w, b) => (H(T, "tunnelFactory"), v.registerTunnelProvider(w, b)),
      registerTimelineProvider: (w, b) => (H(T, "timeline"), Nv.registerTimelineProvider(w, b, T.identifier, Re.converter)),
      get isTrusted() {
        return s.trusted;
      },
      requestWorkspaceTrust: (w) => (H(T, "workspaceTrust"), s.requestWorkspaceTrust(w)),
      onDidGrantWorkspaceTrust: (w, b, I) => ge(s.onDidGrantWorkspaceTrust)(w, b, I),
      registerEditSessionIdentityProvider: (w, b) => (H(T, "editSessionIdentityProvider"), s.registerEditSessionIdentityProvider(w, b)),
      onWillCreateEditSessionIdentity: (w, b, I) => (H(T, "editSessionIdentityProvider"), ge(s.getOnWillCreateEditSessionIdentityEvent(T))(w, b, I)),
      registerCanonicalUriProvider: (w, b) => (H(T, "canonicalUriProvider"), s.registerCanonicalUriProvider(w, b)),
      getCanonicalUri: (w, b, I) => (H(T, "canonicalUriProvider"), s.provideCanonicalUri(w, b, I)),
      decode(w, b) {
        return s.decode(w, b);
      },
      encode(w, b) {
        return s.encode(w, b);
      }
    }, D = {
      get inputBox() {
        return _.report("scm.inputBox", T, "Use 'SourceControl.inputBox' instead"), Fp.getLastInputBox(T);
      },
      createSourceControl(w, b, I, we, Xe) {
        return (we || Xe) && H(T, "scmProviderOptions"), Fp.createSourceControl(T, w, b, I, we, Xe);
      }
    }, U = {
      createCommentController(w, b) {
        return Rv.createCommentController(T, w, b);
      }
    }, W = {
      get activeDebugSession() {
        return ee.activeDebugSession;
      },
      get activeDebugConsole() {
        return ee.activeDebugConsole;
      },
      get breakpoints() {
        return ee.breakpoints;
      },
      get activeStackItem() {
        return ee.activeStackItem;
      },
      registerDebugVisualizationProvider(w, b) {
        return H(T, "debugVisualization"), ee.registerDebugVisualizationProvider(T, w, b);
      },
      registerDebugVisualizationTreeProvider(w, b) {
        return H(T, "debugVisualization"), ee.registerDebugVisualizationTree(T, w, b);
      },
      onDidStartDebugSession(w, b, I) {
        return ge(ee.onDidStartDebugSession)(w, b, I);
      },
      onDidTerminateDebugSession(w, b, I) {
        return ge(ee.onDidTerminateDebugSession)(w, b, I);
      },
      onDidChangeActiveDebugSession(w, b, I) {
        return ge(ee.onDidChangeActiveDebugSession)(w, b, I);
      },
      onDidReceiveDebugSessionCustomEvent(w, b, I) {
        return ge(ee.onDidReceiveDebugSessionCustomEvent)(w, b, I);
      },
      onDidChangeBreakpoints(w, b, I) {
        return ge(ee.onDidChangeBreakpoints)(w, b, I);
      },
      onDidChangeActiveStackItem(w, b, I) {
        return ge(ee.onDidChangeActiveStackItem)(w, b, I);
      },
      registerDebugConfigurationProvider(w, b, I) {
        return ee.registerDebugConfigurationProvider(w, b, I || bm.Initial);
      },
      registerDebugAdapterDescriptorFactory(w, b) {
        return ee.registerDebugAdapterDescriptorFactory(T, w, b);
      },
      registerDebugAdapterTrackerFactory(w, b) {
        return ee.registerDebugAdapterTrackerFactory(w, b);
      },
      startDebugging(w, b, I) {
        return !I || typeof I == "object" && "configuration" in I ? ee.startDebugging(w, b, { parentSession: I }) : ee.startDebugging(w, b, I || {});
      },
      stopDebugging(w) {
        return ee.stopDebugging(w);
      },
      addBreakpoints(w) {
        return ee.addBreakpoints(w);
      },
      removeBreakpoints(w) {
        return ee.removeBreakpoints(w);
      },
      asDebugSourceUri(w, b) {
        return ee.asDebugSourceUri(w, b);
      }
    }, ue = {
      registerTaskProvider: (w, b) => ce.registerTaskProvider(T, w, b),
      fetchTasks: (w) => ce.fetchTasks(w),
      executeTask: (w) => ce.executeTask(T, w),
      get taskExecutions() {
        return ce.taskExecutions;
      },
      onDidStartTask: (w, b, I) => {
        const we = (Xe) => {
          var lc;
          dt(T, "taskExecutionTerminal") || ((lc = Xe == null ? void 0 : Xe.execution) == null ? void 0 : lc.terminal) !== void 0 && (Xe.execution.terminal = void 0);
          const di = {
            ...Xe,
            execution: Xe.execution
          };
          return w.call(b, di);
        };
        return ge(ce.onDidStartTask)(we, b, I);
      },
      onDidEndTask: (w, b, I) => ge(ce.onDidEndTask)(w, b, I),
      onDidStartTaskProcess: (w, b, I) => ge(ce.onDidStartTaskProcess)(w, b, I),
      onDidEndTaskProcess: (w, b, I) => ge(ce.onDidEndTaskProcess)(w, b, I),
      onDidStartTaskProblemMatchers: (w, b, I) => (H(T, "taskProblemMatcherStatus"), ge(ce.onDidStartTaskProblemMatchers)(w, b, I)),
      onDidEndTaskProblemMatchers: (w, b, I) => (H(T, "taskProblemMatcherStatus"), ge(ce.onDidEndTaskProblemMatchers)(w, b, I))
    }, X = {
      createNotebookController(w, b, I, we, Xe) {
        return vi.createNotebookController(T, w, b, I, we, dt(T, "notebookMessaging") ? Xe : void 0);
      },
      registerNotebookCellStatusBarItemProvider: (w, b) => ht.registerNotebookCellStatusBarItemProvider(T, w, b),
      createRendererMessaging(w) {
        return Ar.createRendererMessaging(T, w);
      },
      createNotebookControllerDetectionTask(w) {
        return H(T, "notebookKernelSource"), vi.createNotebookControllerDetectionTask(T, w);
      },
      registerKernelSourceActionProvider(w, b) {
        return H(T, "notebookKernelSource"), vi.registerKernelSourceActionProvider(T, w, b);
      }
    }, Pe = {
      t(...w) {
        if (typeof w[0] == "string") {
          const b = w.shift(), I = !w || typeof w[0] != "object" ? w : w[0];
          return Ve.getMessage(T.identifier.value, { message: b, args: I });
        }
        return Ve.getMessage(T.identifier.value, w[0]);
      },
      get bundle() {
        return Ve.getBundle(T.identifier.value);
      },
      get uri() {
        return Ve.getBundleUri(T.identifier.value);
      }
    }, ze = {
      transferActiveChat(w) {
        return H(T, "interactive"), tr.transferActiveChat(w);
      }
    }, Ye = {
      getRelatedInformation(w, b) {
        return H(T, "aiRelatedInformation"), sc.getRelatedInformation(T, w, b);
      },
      registerRelatedInformationProvider(w, b) {
        return H(T, "aiRelatedInformation"), sc.registerRelatedInformationProvider(T, w, b);
      },
      registerEmbeddingVectorProvider(w, b) {
        return H(T, "aiRelatedInformation"), oc.registerEmbeddingVectorProvider(T, w, b);
      },
      registerSettingsSearchProvider(w) {
        return H(T, "aiSettingsSearch"), gn.registerSettingsSearchProvider(T, w);
      }
    }, lt = {
      registerMappedEditsProvider(w, b) {
        return H(T, "mappedEditsProvider"), { dispose() {
        } };
      },
      registerMappedEditsProvider2(w) {
        return H(T, "mappedEditsProvider"), Pv.registerMappedEditsProvider(T, w);
      },
      createChatParticipant(w, b) {
        return tr.createChatAgent(T, w, b);
      },
      createDynamicChatParticipant(w, b, I) {
        return H(T, "chatParticipantPrivate"), tr.createDynamicChatAgent(T, w, b, I);
      },
      registerChatParticipantDetectionProvider(w) {
        return H(T, "chatParticipantPrivate"), tr.registerChatParticipantDetectionProvider(T, w);
      },
      registerRelatedFilesProvider(w, b) {
        return H(T, "chatEditing"), tr.registerRelatedFilesProvider(T, w, b);
      },
      onDidDisposeChatSession: (w, b, I) => (H(T, "chatParticipantPrivate"), ge(tr.onDidDisposeChatSession)(w, b, I)),
      registerChatSessionItemProvider: (w, b) => (H(T, "chatSessionsProvider"), kd.registerChatSessionItemProvider(T, w, b)),
      registerChatSessionContentProvider(w, b) {
        return H(T, "chatSessionsProvider"), kd.registerChatSessionContentProvider(T, w, b);
      },
      registerChatOutputRenderer: (w, b) => (H(T, "chatOutputRenderer"), Dd.registerChatOutputRenderer(T, w, b))
    }, Wn = {
      selectChatModels: (w) => G.selectLanguageModels(T, w ?? {}),
      onDidChangeChatModels: (w, b, I) => G.onDidChangeProviders(w, b, I),
      registerChatModelProvider: (w, b) => (H(T, "chatProvider"), G.registerLanguageModelProvider(T, w, b)),
      get embeddingModels() {
        return H(T, "embeddings"), oa.embeddingsModels;
      },
      onDidChangeEmbeddingModels: (w, b, I) => (H(T, "embeddings"), oa.onDidChange(w, b, I)),
      registerEmbeddingsProvider(w, b) {
        return H(T, "embeddings"), oa.registerEmbeddingsProvider(T, w, b);
      },
      async computeEmbeddings(w, b, I) {
        return H(T, "embeddings"), oa.computeEmbeddings(w, b, I);
      },
      registerTool(w, b) {
        return sa.registerTool(T, w, b);
      },
      invokeTool(w, b, I) {
        return sa.invokeTool(T, w, b, I);
      },
      get tools() {
        return sa.getTools(T);
      },
      fileIsIgnored(w, b) {
        return G.fileIsIgnored(T, w, b);
      },
      registerIgnoredFileProvider(w) {
        return G.registerIgnoredFileProvider(T, w);
      },
      registerMcpServerDefinitionProvider(w, b) {
        return ae.registerMcpConfigurationProvider(T, w, b);
      },
      onDidChangeChatRequestTools(...w) {
        return H(T, "chatParticipantAdditions"), ge(tr.onDidChangeChatRequestTools)(...w);
      }
    }, Vn = {
      registerSpeechProvider(w, b) {
        return H(T, "speech"), zt.registerProvider(T.identifier, w, b);
      }
    };
    return {
      version: e.version,
      ai: Ye,
      authentication: Hv,
      commands: Bv,
      comments: U,
      chat: lt,
      debug: W,
      env: Wv,
      extensions: Td,
      interactive: ze,
      l10n: Pe,
      languages: zv,
      lm: Wn,
      notebooks: X,
      scm: D,
      speech: Vn,
      tasks: ue,
      tests: Vv,
      window: qv,
      workspace: Bp,
      Breakpoint: Ju,
      TerminalOutputAnchor: Ab,
      ChatResultFeedbackKind: Tf,
      ChatVariableLevel: vy,
      ChatCompletionItem: ON,
      ChatReferenceDiagnostic: $5,
      CallHierarchyIncomingCall: g5,
      CallHierarchyItem: uS,
      CallHierarchyOutgoingCall: m5,
      CancellationError: Yn,
      CancellationTokenSource: Lt,
      CandidatePortSource: Hw,
      CodeAction: cf,
      CodeActionKind: Nt,
      CodeActionTriggerKind: lf,
      CodeLens: Hm,
      Color: Gu,
      ColorInformation: jm,
      ColorPresentation: Gm,
      ColorThemeKind: Do,
      CommentMode: ty,
      CommentState: iy,
      CommentThreadCollapsibleState: yf,
      CommentThreadState: xf,
      CommentThreadApplicability: Ef,
      CommentThreadFocus: Sf,
      CompletionItem: Vm,
      CompletionItemKind: Ae,
      CompletionItemTag: df,
      CompletionList: zu,
      CompletionTriggerKind: Zc,
      ConfigurationTarget: nu,
      CustomExecution: dS,
      DebugAdapterExecutable: Zm,
      DebugAdapterInlineImplementation: vf,
      DebugAdapterNamedPipeServer: e_,
      DebugAdapterServer: _f,
      DebugConfigurationProviderTriggerKind: bm,
      DebugConsoleMode: s_,
      DebugVisualization: TN,
      DecorationRangeBehavior: Fa,
      Diagnostic: Mm,
      DiagnosticRelatedInformation: nf,
      DiagnosticSeverity: Ri,
      DiagnosticTag: Ma,
      Disposable: je,
      DocumentHighlight: Um,
      DocumentHighlightKind: rf,
      MultiDocumentHighlight: $m,
      DocumentLink: qm,
      DocumentSymbol: af,
      EndOfLine: Er,
      EnvironmentVariableMutatorType: Yc,
      EvaluatableExpression: t_,
      InlineValueText: i_,
      InlineValueVariableLookup: n_,
      InlineValueEvaluatableExpression: r_,
      InlineCompletionTriggerKind: wf,
      InlineCompletionsDisposeReasonKind: Ts,
      EventEmitter: M,
      ExtensionKind: gl,
      ExtensionMode: au,
      ExternalUriOpenerPriority: fy,
      FileChangeType: su,
      FileDecoration: sy,
      FileDecoration2: sy,
      FileSystemError: fi,
      FileType: cl,
      FilePermission: Hu,
      FoldingRange: ey,
      FoldingRangeKind: Ps,
      FunctionBreakpoint: $a,
      InlineCompletionItem: Ub,
      InlineCompletionList: $b,
      Hover: Om,
      VerboseHover: Fm,
      HoverVerbosityAction: Rb,
      IndentAction: Ux,
      Location: $n,
      MarkdownString: Dn,
      OverviewRulerLane: lb,
      ParameterInformation: Lb,
      PortAutoForwardAction: gy,
      Position: Ke,
      ProcessExecution: Qu,
      ProgressLocation: zo,
      QuickInputButtonLocation: ry,
      QuickInputButtons: Df,
      Range: $e,
      RelativePattern: ru,
      Selection: os,
      SelectionRange: uf,
      SemanticTokens: Yu,
      SemanticTokensBuilder: hS,
      SemanticTokensEdit: y5,
      SemanticTokensEdits: kg,
      SemanticTokensLegend: ny,
      ShellExecution: Bl,
      ShellQuoting: Qb,
      SignatureHelp: Mb,
      SignatureHelpTriggerKind: Ob,
      SignatureInformation: Nb,
      SnippetString: Hl,
      SourceBreakpoint: Ua,
      StandardTokenType: Oo,
      StatusBarAlignment: Mo,
      SymbolInformation: of,
      SymbolKind: Et,
      SymbolTag: sf,
      Task: Qm,
      TaskEventKind: jb,
      TaskGroup: gf,
      TaskPanelKind: Gb,
      TaskRevealKind: qb,
      TaskScope: Yo,
      TerminalLink: _N,
      TerminalQuickFixTerminalCommand: wN,
      TerminalQuickFixOpener: vN,
      TerminalLocation: Vb,
      TerminalProfile: bN,
      TerminalExitReason: Bb,
      TerminalShellExecutionCommandLineConfidence: pf,
      TerminalCompletionItem: yN,
      TerminalCompletionItemKind: zb,
      TerminalCompletionList: xN,
      TerminalShellType: Wb,
      TextDocumentSaveReason: tu,
      TextEdit: Jo,
      SnippetTextEdit: fl,
      TextEditorCursorStyle: wr,
      TextEditorChangeKind: iu,
      TextEditorLineNumbersStyle: hr,
      TextEditorRevealType: zm,
      TextEditorSelectionChangeKind: qu,
      SyntaxTokenType: ju,
      TextDocumentChangeReason: ff,
      ThemeColor: mf,
      ThemeIcon: Ji,
      TreeItem: Km,
      TreeItemCheckboxState: jr,
      TreeItemCollapsibleState: pl,
      TypeHierarchyItem: fS,
      UIKind: $h,
      Uri: x,
      ViewColumn: hf,
      WorkspaceEdit: $l,
      DocumentPasteTriggerKind: Yb,
      DocumentDropEdit: Jb,
      DocumentDropOrPasteEditKind: hs,
      DocumentPasteEdit: DN,
      InlayHint: Wm,
      InlayHintLabelPart: Bm,
      InlayHintKind: Fb,
      RemoteAuthorityResolverError: qr,
      ResolvedAuthority: gN,
      ManagedResolvedAuthority: Dg,
      SourceControlInputBoxValidationType: Hb,
      ExtensionRuntime: d_,
      TimelineItem: dy,
      NotebookRange: es,
      NotebookCellKind: Ha,
      NotebookCellExecutionState: cy,
      NotebookCellData: uv,
      NotebookData: x5,
      NotebookRendererScript: S5,
      NotebookCellStatusBarAlignment: l_,
      NotebookEditorRevealType: c_,
      NotebookCellOutput: a_,
      NotebookCellOutputItem: E5,
      CellErrorStackFrame: PN,
      NotebookCellStatusBarItem: AN,
      NotebookControllerAffinity: uy,
      NotebookControllerAffinity2: u_,
      NotebookEdit: Nm,
      NotebookKernelSourceAction: RN,
      NotebookVariablesRequestKind: If,
      PortAttributes: NN,
      LinkedEditingRanges: LN,
      TestResultState: hy,
      TestRunRequest: h_,
      TestMessage: f_,
      TestMessageStackFrame: MN,
      TestTag: Cf,
      TestRunProfileKind: lu,
      TextSearchCompleteMessageType: t1,
      DataTransfer: Ku,
      DataTransferItem: Jm,
      TestCoverageCount: Ig,
      FileCoverage: Xu,
      StatementCoverage: k5,
      BranchCoverage: I5,
      DeclarationCoverage: C5,
      WorkspaceTrustState: py,
      LanguageStatusSeverity: Xc,
      QuickPickItemKind: kf,
      InputBoxValidationSeverity: ou,
      TabInputText: pS,
      TabInputTextDiff: p_,
      TabInputTextMerge: T5,
      TabInputCustom: gS,
      TabInputNotebook: mS,
      TabInputNotebookDiff: _S,
      TabInputWebview: P5,
      TabInputTerminal: A5,
      TabInputInteractiveWindow: R5,
      TabInputChat: L5,
      TabInputTextMultiDiff: N5,
      TelemetryTrustedValue: sS,
      LogLevel: Me,
      EditSessionIdentityMatch: $x,
      InteractiveSessionVoteDirection: my,
      ChatCopyKind: _y,
      ChatEditingSessionActionOutcome: $r,
      InteractiveEditorResponseFeedbackKind: by,
      DebugStackFrame: w5,
      DebugThread: b5,
      RelatedInformationType: Ty,
      SpeechToTextStatus: Ay,
      TextToSpeechStatus: Ry,
      PartialAcceptTriggerKind: Oa,
      InlineCompletionEndOfLifeReasonKind: eu,
      KeywordRecognitionStatus: Ly,
      ChatImageMimeType: ko,
      ChatResponseMarkdownPart: dv,
      ChatResponseFileTreePart: hv,
      ChatResponseAnchorPart: Af,
      ChatResponseProgressPart: wS,
      ChatResponseProgressPart2: Tg,
      ChatResponseReferencePart: ml,
      ChatResponseReferencePart2: ml,
      ChatResponseCodeCitationPart: m_,
      ChatResponseCodeblockUriPart: pv,
      ChatResponseWarningPart: Rf,
      ChatResponseTextEditPart: Lf,
      ChatResponseNotebookEditPart: __,
      ChatResponseMarkdownWithVulnerabilitiesPart: Pf,
      ChatResponseCommandButtonPart: fv,
      ChatResponseConfirmationPart: g_,
      ChatResponseMovePart: gv,
      ChatResponseExtensionsPart: bS,
      ChatResponsePullRequestPart: yS,
      ChatPrepareToolInvocationPart: Nf,
      ChatResponseMultiDiffPart: vS,
      ChatResponseReferencePartStatusKind: yy,
      ChatResponseClearToPreviousToolInvocationReason: xy,
      ChatRequestTurn: v_,
      ChatRequestTurn2: v_,
      ChatResponseTurn: M5,
      ChatResponseTurn2: FN,
      ChatToolInvocationPart: xS,
      ChatLocation: fr,
      ChatRequestEditorData: O5,
      ChatRequestNotebookData: F5,
      ChatReferenceBinaryData: U5,
      ChatRequestEditedFileEventKind: wy,
      LanguageModelChatMessageRole: xn,
      LanguageModelChatMessage: H5,
      LanguageModelChatMessage2: B5,
      LanguageModelToolResultPart: w_,
      LanguageModelToolResultPart2: Ey,
      LanguageModelTextPart: Vt,
      LanguageModelTextPart2: Vt,
      ToolResultAudience: Iy,
      LanguageModelToolCallPart: Wl,
      LanguageModelError: mr,
      LanguageModelToolResult: mv,
      LanguageModelToolResult2: W5,
      LanguageModelDataPart: Sn,
      LanguageModelDataPart2: Sn,
      LanguageModelToolExtensionSource: V5,
      LanguageModelToolMCPSource: z5,
      ExtendedLanguageModelToolResult: UN,
      LanguageModelChatToolMode: Cy,
      LanguageModelPromptTsxPart: fs,
      NewSymbolName: IN,
      NewSymbolNameTag: Zb,
      NewSymbolNameTriggerKind: bf,
      ExcludeSettingOptions: Rs,
      TextSearchContext2: kS,
      TextSearchMatch2: Fo,
      AISearchKeyword: I0,
      TextSearchCompleteMessageTypeNew: t1,
      ChatErrorLevel: Sy,
      McpHttpServerDefinition: HN,
      McpStdioServerDefinition: $N,
      SettingsSearchResultKind: Py
    };
  };
}
var $g;
let SE = class {
  constructor(e, t, n, r, s, o, a) {
    this._apiFactory = e, this._extensionRegistry = t, this._instaService = n, this._extHostConfiguration = r, this._extHostExtensionService = s, this._initData = o, this._logService = a, this._factories = /* @__PURE__ */ new Map(), this._alternatives = [];
  }
  async install() {
    this._installInterceptor(), an("code/extHost/willWaitForConfig");
    const e = await this._extHostConfiguration.getConfigProvider();
    an("code/extHost/didWaitForConfig");
    const t = await this._extHostExtensionService.getExtensionPathIndex();
    this.register(new JH(
      this._apiFactory,
      t,
      this._extensionRegistry,
      e,
      this._logService
    )), this.register(this._instaService.createInstance(DE)), this._initData.remote.isRemote && this.register(this._instaService.createInstance(kE, t, this._initData.environment.appUriScheme));
  }
  register(e) {
    if ("nodeModuleName" in e)
      if (Array.isArray(e.nodeModuleName))
        for (const t of e.nodeModuleName)
          this._factories.set(t, e);
      else
        this._factories.set(e.nodeModuleName, e);
    typeof e.alternativeModuleName == "function" && this._alternatives.push((t) => e.alternativeModuleName(t));
  }
};
SE = z([
  O(2, Dp),
  O(3, eo),
  O(4, na),
  O(5, _i),
  O(6, ot)
], SE);
var Ll;
let DE = (Ll = class {
  constructor(e) {
    if (e.environment.appRoot && $g.aliased.size) {
      const t = Nl(this.forceForwardSlashes(e.environment.appRoot.fsPath)), n = "[a-z0-9_.-]", r = `@${n}+\\/${n}+|${n}+`, s = "node_modules|node_modules\\.asar(?:\\.unpacked)?";
      this.re = new RegExp(`^(${t}/${s}\\/)(${r})(.*)$`, "i");
    }
  }
  alternativeModuleName(e) {
    if (!this.re)
      return;
    const t = this.re.exec(this.forceForwardSlashes(e));
    if (!t)
      return;
    const [, n, r, s] = t, o = $g.aliased.get(r);
    if (o !== void 0)
      return console.warn(`${r} as been renamed to ${o}, please update your imports`), n + o + s;
  }
  forceForwardSlashes(e) {
    return e.replace(/\\/g, "/");
  }
}, $g = Ll, Ll.aliased = /* @__PURE__ */ new Map([
  ["vscode-ripgrep", "@vscode/ripgrep"],
  ["vscode-windows-registry", "@vscode/windows-registry"]
]), Ll);
DE = $g = z([
  O(0, _i)
], DE);
class JH {
  constructor(e, t, n, r, s) {
    this._apiFactory = e, this._extensionPaths = t, this._extensionRegistry = n, this._configProvider = r, this._logService = s, this.nodeModuleName = "vscode", this._extApiImpl = new Ko();
  }
  load(e, t) {
    const n = this._extensionPaths.findSubstr(t);
    if (n) {
      let r = this._extApiImpl.get(n.identifier);
      return r || (r = this._apiFactory(n, this._extensionRegistry, this._configProvider), this._extApiImpl.set(n.identifier, r)), r;
    }
    if (!this._defaultApiImpl) {
      let r = "";
      this._extensionPaths.forEach((s, o) => r += `	${o} -> ${s.identifier.value}
`), this._logService.warn(`Could not identify extension for 'vscode' require call from ${t}. These are the extension path mappings: 
${r}`), this._defaultApiImpl = this._apiFactory(o6, this._extensionRegistry, this._configProvider);
    }
    return this._defaultApiImpl;
  }
}
let kE = class {
  constructor(e, t, n) {
    this._extensionPaths = e, this._appUriScheme = t, this.nodeModuleName = ["open", "opn"], this._mainThreadTelemetry = n.getProxy(ie.MainThreadTelemetry);
    const r = n.getProxy(ie.MainThreadWindow);
    this._impl = (s, o) => {
      const a = x.parse(s);
      return o ? this.callOriginal(s, o) : a.scheme === "http" || a.scheme === "https" ? r.$openUri(a, s, { allowTunneling: !0 }) : a.scheme === "mailto" || a.scheme === this._appUriScheme ? r.$openUri(a, s, {}) : this.callOriginal(s, o);
    };
  }
  load(e, t, n) {
    const r = this._extensionPaths.findSubstr(t);
    return r && (this._extensionId = r.identifier.value, this.sendShimmingTelemetry()), this._original = n(e), this._impl;
  }
  callOriginal(e, t) {
    return this.sendNoForwardTelemetry(), this._original(e, t);
  }
  sendShimmingTelemetry() {
    this._extensionId && this._mainThreadTelemetry.$publicLog2("shimming.open", { extension: this._extensionId });
  }
  sendNoForwardTelemetry() {
    this._extensionId && this._mainThreadTelemetry.$publicLog2("shimming.open.call.noForward", { extension: this._extensionId });
  }
};
kE = z([
  O(2, tt)
], kE);
let IE = class {
  constructor(e, t) {
    this._mainThreadConsole = e.getProxy(ie.MainThreadConsole), this._includeStack = t.consoleForward.includeStack, this._logNative = t.consoleForward.logNative, this._wrapConsoleMethod("info", "log"), this._wrapConsoleMethod("log", "log"), this._wrapConsoleMethod("warn", "warn"), this._wrapConsoleMethod("debug", "debug"), this._wrapConsoleMethod("error", "error");
  }
  _wrapConsoleMethod(e, t) {
    const n = this, r = console[e];
    Object.defineProperty(console, e, {
      set: () => {
      },
      get: () => (function() {
        n._handleConsoleCall(e, t, r, arguments);
      })
    });
  }
  _handleConsoleCall(e, t, n, r) {
    this._mainThreadConsole.$logExtensionHostMessage({
      type: "__$console",
      severity: t,
      arguments: XH(r, this._includeStack)
    }), this._logNative && this._nativeConsoleLogMessage(e, n, r);
  }
};
IE = z([
  O(0, tt),
  O(1, _i)
], IE);
const YH = 1e5;
function XH(i, e) {
  const t = [];
  if (i.length)
    for (let n = 0; n < i.length; n++) {
      let r = i[n];
      if (typeof r > "u")
        r = "undefined";
      else if (r instanceof Error) {
        const s = r;
        s.stack ? r = s.stack : r = s.toString();
      }
      t.push(r);
    }
  if (e) {
    const n = new Error().stack;
    n && t.push({ __$stack: n.split(`
`).slice(3).join(`
`) });
  }
  try {
    const n = GL(t);
    return n.length > YH ? "Output omitted for a large object that exceeds the limits" : n;
  } catch (n) {
    return `Output omitted for an object that cannot be inspected ('${n.toString()}')`;
  }
}
let CE = class extends IE {
  constructor(e, t) {
    super(e, t);
  }
  _nativeConsoleLogMessage(e, t, n) {
    t.apply(console, n);
  }
};
CE = z([
  O(0, tt),
  O(1, _i)
], CE);
class ZH extends SE {
  _installInterceptor() {
  }
  getModule(e, t) {
    for (const n of this._alternatives) {
      const r = n(e);
      if (r) {
        e = r;
        break;
      }
    }
    if (this._factories.has(e))
      return this._factories.get(e).load(e, t, () => {
        throw new Error("CANNOT LOAD MODULE from here.");
      });
  }
}
class eB extends lx {
  constructor() {
    super(...arguments), this.extensionRuntime = d_.Webworker;
  }
  async _beforeAlmostReadyToRunExtensions() {
    Wh && this._instaService.createInstance(CE), this._apiFactory = this._instaService.invokeFunction(KH), this._fakeModules = this._instaService.createInstance(ZH, this._apiFactory, { mine: this._myRegistry, all: this._globalRegistry }), await this._fakeModules.install(), performance.mark("code/extHost/didInitAPI"), await this._waitForDebuggerAttachment();
  }
  _getEntryPoint(e) {
    return e.browser;
  }
  async _loadCommonJSModule(e, t, n) {
    t = t.with({ path: tB(t.path, ".js") });
    const r = e == null ? void 0 : e.identifier.value;
    r && performance.mark(`code/extHost/willFetchExtensionCode/${r}`);
    const s = x.revive(await this._mainThreadExtensionsProxy.$asBrowserUri(t)), o = await fetch(s.toString(!0));
    if (r && performance.mark(`code/extHost/didFetchExtensionCode/${r}`), o.status !== 200)
      throw new Error(o.statusText);
    const a = await o.text(), l = `${t.toString(!0)}#vscode-extension`, c = `${a}
//# sourceURL=${l}`;
    let u;
    try {
      u = new Function("module", "exports", "require", c);
    } catch (v) {
      throw console.error(r ? `Loading code for extension ${r} failed: ${v.message}` : `Loading code failed: ${v.message}`), console.error(`${t.toString(!0)}${typeof v.line == "number" ? ` line ${v.line}` : ""}${typeof v.column == "number" ? ` column ${v.column}` : ""}`), console.error(v), v;
    }
    e && await this._extHostLocalizationService.initializeLocalizedMessages(e);
    const d = {}, f = { exports: d }, p = (v) => {
      const _ = this._fakeModules.getModule(v, t);
      if (_ === void 0)
        throw new Error(`Cannot load module '${v}'`);
      return _;
    };
    try {
      return n.codeLoadingStart(), r && performance.mark(`code/extHost/willLoadExtensionCode/${r}`), u(f, d, p), f.exports !== d ? f.exports : d;
    } finally {
      r && performance.mark(`code/extHost/didLoadExtensionCode/${r}`), n.codeLoadingStop();
    }
  }
  _loadESMModule(e, t, n) {
    throw new Error("ESM modules are not supported in the web worker extension host");
  }
  async $setRemoteEnvironment(e) {
  }
  async _waitForDebuggerAttachment(e = 5e3) {
    if (!this._initData.environment.isExtensionDevelopmentDebug)
      return;
    const t = Date.now() + e;
    for (; Date.now() < t && !("__jsDebugIsReady" in globalThis); )
      await ns(10);
  }
}
function tB(i, e) {
  return Qg(i) ? i : i + e;
}
vt(NS, tx, mt.Eager);
vt(na, eB, mt.Eager);
vt(AS, U0, mt.Eager);
vt(Ev, new vr(q0, [!0], !0));
const aR = self.close.bind(self);
self.close = () => console.trace("'close' has been blocked");
const lR = postMessage.bind(self);
self.postMessage = () => console.trace("'postMessage' has been blocked");
function uT(i) {
  return /^(file|extension-file|vscode-remote):/i.test(i);
}
const dT = fetch.bind(self);
function iB(i) {
  self.fetch = async function(e, t) {
    return e instanceof Request || uT(String(e)) && (e = (await i(x.parse(String(e)))).toString(!0)), dT(e, t);
  }, self.XMLHttpRequest = class extends XMLHttpRequest {
    open(e, t, n, r, s) {
      (async () => (uT(t.toString()) && (t = (await i(x.parse(t.toString()))).toString(!0)), super.open(e, t, n ?? !0, r, s)))();
    }
  };
}
self.importScripts = () => {
  throw new Error("'importScripts' has been blocked");
};
self.addEventListener = () => console.trace("'addEventListener' has been blocked");
self.AMDLoader = void 0;
self.NLSLoaderPlugin = void 0;
self.define = void 0;
self.require = void 0;
self.webkitRequestFileSystem = void 0;
self.webkitRequestFileSystemSync = void 0;
self.webkitResolveLocalFileSystemSyncURL = void 0;
self.webkitResolveLocalFileSystemURL = void 0;
function nB(i, e) {
  if (self.Worker) {
    const t = self.Worker;
    Worker = function(n, r) {
      if (/^vscode-remote:/i.test(n.toString()))
        throw new Error("Creating workers from remote extensions is currently not supported.");
      async function s(a) {
        const [l, c] = await Promise.all([
          i(a).then((p) => p.toString(!0)),
          e().then((p) => Object.fromEntries(p.map(([v, _]) => [v.toString(!0), _.toString(!0)])))
        ]), d = `(${(function(v, _) {
          function m(k) {
            return typeof k == "string" || k instanceof URL ? (k = String(k).replace(/^file:\/\//i, "vscode-file://vscode-app"), _[k] ?? k) : k;
          }
          const E = fetch.bind(self);
          self.fetch = function(k, q) {
            return k instanceof Request ? E(k, q) : E(m(k), q);
          }, self.XMLHttpRequest = class extends XMLHttpRequest {
            constructor() {
              super(...arguments), this.notFound = !1;
            }
            open(k, q, B, te, G) {
              const ae = m(q);
              return this.notFound = ae.startsWith("extension-file:"), super.open(k, ae, B ?? !0, te, G);
            }
            send(k) {
              this.notFound || super.send(k);
            }
            get status() {
              return this.notFound ? 404 : super.status;
            }
          };
          const S = importScripts.bind(self);
          self.importScripts = (...k) => {
            S(...k.map(m));
          }, self.importExt = (k) => new Function("url", "return import(url)")(m(k)), S(v);
        }).toString()}('${l}', ${JSON.stringify(c)}))`, f = new Blob([d], { type: "application/javascript" });
        return URL.createObjectURL(f);
      }
      r = r || {}, r.name = `${name} -> ${r.name || yn(n.toString())}`;
      class o {
        constructor(l, c) {
          this._onmessage = null, this._onmessageerror = null, this._onerror = null, this.workerPromise = s(x.parse(l instanceof URL ? l.toString() : l)).then((u) => new t(u, c));
        }
        set onmessage(l) {
          this._onmessage = l, this.workerPromise.then((c) => {
            c.onmessage = l;
          }, console.error);
        }
        get onmessage() {
          return this._onmessage;
        }
        set onmessageerror(l) {
          this._onmessageerror = l, this.workerPromise.then((c) => {
            c.onmessageerror = l;
          }, console.error);
        }
        get onmessageerror() {
          return this._onmessageerror;
        }
        set onerror(l) {
          this._onerror = l, this.workerPromise.then((c) => {
            c.onerror = l;
          }, console.error);
        }
        get onerror() {
          return this._onerror;
        }
        postMessage(l, c) {
          this.workerPromise.then((u) => {
            u.postMessage(l, c);
          }, console.error);
        }
        terminate() {
          this.workerPromise.then((l) => {
            l.terminate();
          }, console.error);
        }
        addEventListener(l, c, u) {
          this.workerPromise.then((d) => {
            d.addEventListener(l, c, u);
          }, console.error);
        }
        removeEventListener(l, c, u) {
          this.workerPromise.then((d) => {
            d.removeEventListener(l, c, u);
          }, console.error);
        }
        dispatchEvent(l) {
          return this.workerPromise.then((c) => {
            c.dispatchEvent(l);
          }, console.error), !1;
        }
      }
      return new o(n, r);
    };
  } else
    self.Worker = class extends hF {
      constructor(t, n) {
        super(lR, t, { name: yn(t.toString()), ...n });
      }
    };
}
const rB = new class {
  constructor() {
    this.pid = void 0;
  }
  exit(i) {
    aR();
  }
}();
class sB {
  constructor() {
    const e = new MessageChannel(), t = new M();
    let n = !1;
    lR(e.port2, [e.port2]), e.port1.onmessage = (r) => {
      const { data: s } = r;
      if (!(s instanceof ArrayBuffer)) {
        console.warn("UNKNOWN data received", s);
        return;
      }
      const o = he.wrap(new Uint8Array(s, 0, s.byteLength));
      if (n8(o, Sr.Terminate)) {
        n = !0, cR("received terminate message from renderer");
        return;
      }
      t.fire(o);
    }, this.protocol = {
      onMessage: t.event,
      send: (r) => {
        if (!n) {
          const s = r.buffer.buffer.slice(r.buffer.byteOffset, r.buffer.byteOffset + r.buffer.byteLength);
          e.port1.postMessage(s, [s]);
        }
      }
    };
  }
}
function oB(i) {
  return new Promise((e) => {
    const t = i.onMessage((n) => {
      t.dispose();
      const r = JSON.parse(n.toString());
      i.send(c2(Sr.Initialized)), e({ protocol: i, initData: r });
    });
    i.send(c2(Sr.Ready));
  });
}
let cR = (i) => aR();
function aB(i) {
  return !!i && typeof i == "object" && i.type === "vscode.init" && i.data instanceof Map;
}
function lB() {
  an("code/extHost/willConnectToRenderer");
  const i = new sB();
  return {
    onmessage(e) {
      aB(e) && oB(i.protocol).then((t) => {
        an("code/extHost/didWaitForInitData");
        const n = new $S(t.protocol, t.initData, rB, null, e.data);
        iB((r) => n.asBrowserUri(r)), nB((r) => n.asBrowserUri(r), () => n.getAllStaticBrowserUris()), cR = (r) => n.terminate(r);
      });
    }
  };
}
const cB = lB();
self.onmessage = (i) => cB.onmessage(i.data);
